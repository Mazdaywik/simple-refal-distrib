// This file automatically generated from 'OptTree-Drive.ref'
// Don't edit! Edit 'OptTree-Drive.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_667026853_2326145186
#define COOKIE1_ 667026853U
#define COOKIE2_ 2326145186U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_UpdateDriveInfo = 18,
  efunc_gen_UpdateDriveInfo_A1Z1 = 19,
  efunc_gen_DoExtractLabels_Z3 = 20,
  efunc_gen_AddStarSuffix_D1 = 21,
  efunc_gen_FormatOptFunctions_A1 = 22,
  efunc_gen_ExtractBaseNames_A1 = 23,
  efunc_gen_Map_Z2 = 24,
  efunc_gen_UpdateDriveInfo_A20Z1 = 25,
  efunc_gen_MapAccum_Z1 = 26,
  efunc_gen_UpdateDriveInfo_A18 = 27,
  efunc_SetNamesm_Reject = 28,
  efunc_gen_MultiplyRemainderNames_A1 = 29,
  efunc_gen_DoMapAccum_Z1 = 30,
  efunc_gen_UpdateDriveInfo_A17 = 31,
  efunc_gen_UpdateDriveInfo_A16 = 32,
  efunc_gen_DoMapAccum_Z2 = 33,
  efunc_gen_UpdateDriveInfo_A15 = 34,
  efunc_gen_ExtractExtractableFunctions_A1 = 35,
  efunc_gen_DoMapAccum_Z3 = 36,
  efunc_gen_UpdateDriveInfo_A14 = 37,
  efunc_gen_UpdateDriveInfo_A13 = 38,
  efunc_DisplayName = 39,
  efunc_Logm_PutLine = 40,
  efunc_gen_Map_Z3 = 41,
  efunc_gen_UpdateDriveInfo_A12 = 42,
  efunc_gen_UpdateDriveInfo_A11 = 43,
  efunc_gen_UpdateDriveInfo_A10 = 44,
  efunc_gen_UpdateDriveInfo_A9 = 45,
  efunc_gen_UpdateDriveInfo_A8 = 46,
  efunc_gen_Map_Z4 = 47,
  efunc_gen_UpdateDriveInfo_A7 = 48,
  efunc_gen_UpdateDriveInfo_A6 = 49,
  efunc_gen_UpdateDriveInfo_A5 = 50,
  efunc_gen_DoMapAccum_Z4 = 51,
  efunc_gen_UpdateDriveInfo_A4 = 52,
  efunc_gen_UpdateDriveInfo_A3 = 53,
  efunc_gen_DoExtractLabels_Z1 = 54,
  efunc_gen_DoExtractLabels_Z2 = 55,
  efunc_gen_UpdateDriveInfo_A2 = 56,
  efunc_gen_UpdateDriveInfo_A1 = 57,
  efunc_gen_DoExtractLabels_Z4 = 58,
  efunc_Unique = 59,
  efunc_GenRemainderFuncNames = 60,
  efunc_DoHashSet = 61,
  efunc_gen_Map_Z5 = 62,
  efunc_gen_DoHashSetm_DoFillBucket_Z1 = 63,
  efunc_gen_DoHashSet_S1A1 = 64,
  efunc_DoHashSetm_DoFillBucket = 65,
  efunc_DriveInlineOptimizerTick = 66,
  efunc_gen_DoMapAccum_Z5 = 67,
  efunc_gen_DriveInlineOptimizerTick_A5 = 68,
  efunc_gen_DoMapAccum_Z6 = 69,
  efunc_gen_DriveInlineOptimizerTick_A4 = 70,
  efunc_gen_DoMapAccum_Z7 = 71,
  efunc_gen_DriveInlineOptimizerTick_A3 = 72,
  efunc_gen_DoMapAccum_Z8 = 73,
  efunc_gen_DriveInlineOptimizerTick_A2 = 74,
  efunc_gen_DriveInlineOptimizerTick_A2Z1 = 75,
  efunc_gen_DriveInlineOptimizerTick_A2Z2 = 76,
  efunc_gen_DriveInlineOptimizerTick_A2Z3 = 77,
  efunc_gen_DriveInlineOptimizerTick_A2Z4 = 78,
  efunc_gen_DriveInlineOptimizerTick_A1 = 79,
  efunc_gen_OptSwitch_D4 = 80,
  efunc_gen_DriveInlineOptimizerTick_A2Z5 = 81,
  efunc_gen_DriveInlineOptimizerTick_A2Z6 = 82,
  efunc_gen_DriveInlineOptimizerTick_A2Z7 = 83,
  efunc_gen_DriveInlineOptimizerTick_A2Z8 = 84,
  efunc_gen_DriveInlineOptimizerTick_A2Z9 = 85,
  efunc_gen_DriveInlineOptimizerTick_A2Z10 = 86,
  efunc_gen_DriveInlineOptimizerTick_A2Z11 = 87,
  efunc_gen_DriveInlineOptimizerTick_A2Z12 = 88,
  efunc_gen_DriveInlineOptimizerTick_A2Z13 = 89,
  efunc_gen_DriveInlineOptimizerTick_A2Z14 = 90,
  efunc_gen_DriveInlineOptimizerTick_A2Z15 = 91,
  efunc_gen_DriveInlineOptimizerTick_A2Z16 = 92,
  efunc_gen_Reduce_Z2 = 93,
  efunc_gen_IsLexpr_B1 = 94,
  efunc_IsLexprm_Aux = 95,
  efunc_gen_Map_Z6 = 96,
  efunc_gen_Map_Z7 = 97,
  efunc_gen_Reduce_Z1 = 98,
  efunc_gen_OptFunction_B1 = 99,
  efunc_gen_OptSentence_S1B1S2A1 = 100,
  efunc_gen_OptSentencem_Aux_A1 = 101,
  efunc_gen_FindOptInfom_Aux_Z1 = 102,
  efunc_gen_FindOptInfom_Aux_Z2 = 103,
  efunc_gen_FindOptInfom_Aux_Z3 = 104,
  efunc_gen_OptSentencem_Aux_D3 = 105,
  efunc_gen_OptSentence_S1B1 = 106,
  efunc_gen_DoMapAccum_Z9 = 107,
  efunc_gen_DoMapAccum_Z10 = 108,
  efunc_gen_OptSentencem_Aux_A2 = 109,
  efunc_OptSentencem_MakeSubstitutions = 110,
  efunc_MakeColdSolution = 111,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S1B1 = 112,
  efunc_Intrinsicm_Mu = 113,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1 = 114,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2 = 115,
  efunc_gen_Intrinsicm_Add_B1 = 116,
  efunc_ArithmArgs = 117,
  efunc_gen_Intrinsicm_Sub_B1 = 118,
  efunc_gen_Intrinsicm_Mul_B1 = 119,
  efunc_gen_Intrinsicm_Div_B1 = 120,
  efunc_gen_Intrinsicm_Mod_B1 = 121,
  efunc_gen_Intrinsicm_Divmod_B1 = 122,
  efunc_Intrinsicm_Compare = 123,
  efunc_Intrinsicm_Chr = 124,
  efunc_Intrinsicm_Ord = 125,
  efunc_Intrinsicm_Upper = 126,
  efunc_Intrinsicm_Lower = 127,
  efunc_Intrinsicm_Numb = 128,
  efunc_Intrinsicm_Symb = 129,
  efunc_Intrinsicm_Implode = 130,
  efunc_Intrinsicm_Implodeu_Ext = 131,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1 = 132,
  efunc_gen_Map_Z9 = 133,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z2 = 134,
  efunc_gen_Intrinsicm_Type_S4A1Z1 = 135,
  efunc_Type = 136,
  efunc_gen_Intrinsicm_Type_S4A1Z2 = 137,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z3 = 138,
  efunc_Implodeu_Ext = 139,
  efunc_gen_Intrinsicm_Type_S4A1B1D7 = 140,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z4 = 141,
  efunc_gen_Intrinsicm_Type_S4A1 = 142,
  efunc_gen_Intrinsicm_Type_D5 = 143,
  efunc_Intrinsicm_Lenw = 144,
  efunc_Intrinsicm_First = 145,
  efunc_Intrinsicm_Last = 146,
  efunc_gen_Intrinsicm_Mu_S1B1S3C1 = 147,
  efunc_ArithmeticSymbolToFunction = 148,
  efunc_gen_Intrinsicm_Mu_S1B1S4C1 = 149,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1 = 150,
  efunc_gen_Intrinsicm_Mu_S1B1S6C1 = 151,
  efunc_AllChars = 152,
  efunc_MakeSubstitutionm_FromMetatables = 153,
  efunc_gen_Intrinsicm_Mu_S1C1 = 154,
  efunc_gen_Intrinsicm_Mu_S1B1 = 155,
  efunc_DoAllChars = 156,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1 = 157,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1 = 158,
  efunc_NumberToSymbols = 159,
  efunc_gen_ArithmArgs_S1C1 = 160,
  efunc_ArithmOneArg = 161,
  efunc_gen_ArithmArgs_S1C2 = 162,
  efunc_gen_ArithmArgs_S2C1 = 163,
  efunc_gen_ArithmArgs_S3C1 = 164,
  efunc_gen_ArithmOneArg_S1C1 = 165,
  efunc_ArithmeticFunctions = 166,
  efunc_gen_ArithmOneArg_S2C1 = 167,
  efunc_Numberm_Check = 168,
  efunc_SymbolsToNumber = 169,
  efunc_Numberm_Checkm_AllNumbers = 170,
  efunc_gen_Map_Z10 = 171,
  efunc_gen_Map_Z11 = 172,
  efunc_Mul = 173,
  efunc_Div = 174,
  efunc_Mod = 175,
  efunc_gen_Intrinsicm_Divmod_B1S2A1 = 176,
  efunc_Divmod = 177,
  efunc_gen_Intrinsicm_Compare_S1C1 = 178,
  efunc_Compare = 179,
  efunc_gen_Intrinsicm_Chr_S1C1 = 180,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1 = 181,
  efunc_gen_Intrinsicm_Chr_S1A2 = 182,
  efunc_gen_StaticSubstitution_Z1 = 183,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5 = 184,
  efunc_gen_Map_Z12 = 185,
  efunc_gen_Intrinsicm_Ord_S1C1 = 186,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2 = 187,
  efunc_gen_Intrinsicm_Ord_S1A2 = 188,
  efunc_gen_StaticSubstitution_Z2 = 189,
  efunc_gen_Intrinsicm_Upper_S1C1 = 190,
  efunc_gen_Intrinsicm_Upper_S1A2 = 191,
  efunc_gen_StaticSubstitution_Z3 = 192,
  efunc_gen_Intrinsicm_Lower_S1C1 = 193,
  efunc_gen_Intrinsicm_Lower_S1A2 = 194,
  efunc_gen_StaticSubstitution_Z4 = 195,
  efunc_gen_Intrinsicm_Numb_S1C1 = 196,
  efunc_gen_Intrinsicm_Numb_S1A2 = 197,
  efunc_Numb = 198,
  efunc_gen_Intrinsicm_Symb_S1A3 = 199,
  efunc_gen_Intrinsicm_Symb_S1C1 = 200,
  efunc_Symb = 201,
  efunc_gen_Intrinsicm_Symb_S1A2 = 202,
  efunc_Explode = 203,
  efunc_gen_Intrinsicm_Implode_S1A3 = 204,
  efunc_gen_Intrinsicm_Implode_S1C1 = 205,
  efunc_gen_Intrinsicm_Implode_S1A2 = 206,
  efunc_Implode = 207,
  efunc_gen_Intrinsicm_Implodeu_Ext_S1C1 = 208,
  efunc_gen_Intrinsicm_Lenw_S1C1 = 209,
  efunc_FixedLength = 210,
  efunc_gen_Intrinsicm_Lenw_S1A2 = 211,
  efunc_Lenw = 212,
  efunc_gen_Intrinsicm_First_S1C1 = 213,
  efunc_First = 214,
  efunc_gen_Intrinsicm_First_S1C2 = 215,
  efunc_gen_Intrinsicm_Last_S1C1 = 216,
  efunc_Last = 217,
  efunc_gen_Intrinsicm_Last_S1C2 = 218,
  efunc_gen_DoOptSentencem_MakeSubstitutions_Z1 = 219,
  efunc_gen_DoOptSentencem_MakeSubstitutions_Z2 = 220,
  efunc_gen_DecreaseMode_D2 = 221,
  efunc_gen_OptSentencem_MakeSubstitutions_S3A4 = 222,
  efunc_ExtractVariables = 223,
  efunc_gen_OptSentencem_MakeSubstitutions_S3A3 = 224,
  efunc_gen_OptSentencem_MakeSubstitutions_S1C1 = 225,
  efunc_DoOptSentencem_MakeSubstitutionsm_Intrinsic = 226,
  efunc_gen_OptSentencem_MakeSubstitutions_S2C1 = 227,
  efunc_IsPassiveCall = 228,
  efunc_gen_OptSentencem_MakeSubstitutions_S3C1 = 229,
  efunc_OneOf = 230,
  efunc_gen_OptSentencem_MakeSubstitutions_S3A2 = 231,
  efunc_gen_OptSentencem_MakeSubstitutions_S3A2B1 = 232,
  efunc_IsLexpr = 233,
  efunc_gen_MakeColdSolution_S1C1 = 234,
  efunc_eDRIVEN = 235,
  efunc_RemainderFuncIncName = 236,
  efunc_gen_DoOptSentencem_MakeSubstitutions_Z3 = 237,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1 = 238,
  efunc_gen_Map_Z13 = 239,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2C1 = 240,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2 = 241,
  efunc_gen_Map_Z14 = 242,
  efunc_DoOptSentencem_MakeSubstitutions = 243,
  efunc_gen_MakeColdSolution_Z1 = 244,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1 = 245,
  efunc_Solve = 246,
  efunc_DropLeft = 247,
  efunc_gen_FindOptInfom_Aux_S2A1 = 248,
  efunc_gen_FindOptimizedCallm_Term_S3B1 = 249,
  efunc_gen_FindOptimizedCallm_Term_S1A1 = 250,
  efunc_gen_FindOptimizedCallm_Term_S2A1 = 251,
  efunc_gen_FindOptimizedCallm_Term_S3A1 = 252,
  efunc_HashName = 253,
  efunc_gen_FindOptimizedCallm_Term_S4A1 = 254,
  efunc_gen_Map_Z8 = 255,
  efunc_gen_ApplyContractionsm_Term_S3B1 = 256,
  efunc_gen_Map_Z15 = 257,
  efunc_gen_Map_Z16 = 258,
  efunc_gen_Map_Z18 = 259,
  efunc_gen_Map_Z17 = 260,
  efunc_Mu = 261,
  efunc_Up = 262,
  efunc_Evm_met = 263,
  efunc_Residue = 264,
  efunc_u_u_Metau_Residue = 265,
  efunc_MapAccum = 266,
  efunc_UnBracket = 267,
  efunc_DelAccumulator = 268,
  efunc_Inc = 269,
  efunc_Dec = 270,
  efunc_OptTreem_Drivem_Prepare = 271,
  efunc_AddStarSuffix = 272,
  efunc_BaseName = 273,
  efunc_ExtractLabels = 274,
  efunc_DoExtractLabels = 275,
  efunc_ExtractMetatableNames = 276,
  efunc_ExtractBaseNames = 277,
  efunc_ExtractExtractableFunctions = 278,
  efunc_ExtractFuncLengths = 279,
  efunc_MultiplyRemainderNames = 280,
  efunc_FormatOptFunctions = 281,
  efunc_HashSet = 282,
  efunc_BUCKETm_SIZE = 283,
  efunc_HashSetm_AsChain = 284,
  efunc_OptTreem_Drive = 285,
  efunc_OptSwitch = 286,
  efunc_IsPassiveCallm_Aux = 287,
  efunc_OptFunction = 288,
  efunc_OptSentence = 289,
  efunc_OptSentencem_Aux = 290,
  efunc_Intrinsicm_Add = 291,
  efunc_Intrinsicm_Sub = 292,
  efunc_Intrinsicm_Mul = 293,
  efunc_Intrinsicm_Div = 294,
  efunc_Intrinsicm_Mod = 295,
  efunc_Intrinsicm_Divmod = 296,
  efunc_CheckArgsm_Intrinsicm_StaticSubstitution = 297,
  efunc_StaticSubstitution = 298,
  efunc_CharToNode = 299,
  efunc_Intrinsicm_Explode = 300,
  efunc_Intrinsicm_Type = 301,
  efunc_DecreaseMode = 302,
  efunc_Cleanupm_Stepm_Drop = 303,
  efunc_FindOptInfo = 304,
  efunc_FindOptInfom_Aux = 305,
  efunc_CutSUF = 306,
  efunc_WithMetatables = 307,
  efunc_FindOptimizedCall = 308,
  efunc_FindOptimizedCallm_Term = 309,
  efunc_ApplySolutions = 310,
  efunc_ApplyAssigns = 311,
  efunc_ApplyAssignsm_Term = 312,
  efunc_ApplyContractions = 313,
  efunc_ApplyContractionsm_Term = 314,
  efunc_OptTreem_Drivem_CleanupColdCalls = 315,
  efunc_CleanupColdm_Body = 316,
  efunc_CleanupColdm_Sentence = 317,
  efunc_CleanupColdm_Result = 318,
  efunc_CleanupColdm_Term = 319,
  efunc_gen_Apply_Z4 = 320,
  efunc_gen_Map_Z1 = 321,
  efunc_gen_UpdateDriveInfo_A21L1D1 = 322,
  efunc_gen_Map_Z0 = 323,
  efunc_gen_UpdateDriveInfo_A21L1Z0 = 324,
  efunc_gen_ExtractBaseNames_A1L1D1 = 325,
  efunc_gen_ExtractBaseNames_A1L1Z0 = 326,
  efunc_gen_DoMapAccum_Z11 = 327,
  efunc_gen_MapAccum_Z0 = 328,
  efunc_gen_FormatOptFunctions_A1L1Z0 = 329,
  efunc_gen_UpdateDriveInfo_A21Z1 = 330,
  efunc_gen_UpdateDriveInfo_A20Z0 = 331,
  efunc_gen_DoMapAccum_S1A1Z1 = 332,
  efunc_gen_MultiplyRemainderNames_A1L1A2 = 333,
  efunc_gen_MultiplyRemainderNames_A1L1A2Z1 = 334,
  efunc_gen_MultiplyRemainderNames_A1L1D1 = 335,
  efunc_gen_DoMapAccum_Z0 = 336,
  efunc_gen_MultiplyRemainderNames_A1L1Z0 = 337,
  efunc_gen_DoMapAccum_S1A1Z2 = 338,
  efunc_gen_ExtractFuncLengths_L1S1A1 = 339,
  efunc_gen_ExtractFuncLengths_L1D2 = 340,
  efunc_gen_ExtractFuncLengths_L1Z0 = 341,
  efunc_gen_ExtractExtractableFunctions_A1L1 = 342,
  efunc_gen_DoMapAccum_S1A1Z3 = 343,
  efunc_gen_ExtractExtractableFunctions_A1L1Z0 = 344,
  efunc_Upper = 345,
  efunc_gen_UpdateDriveInfo_A12L1A1 = 346,
  efunc_gen_UpdateDriveInfo_A12L1D1 = 347,
  efunc_gen_UpdateDriveInfo_A12L1Z0 = 348,
  efunc_gen_HashSetm_AsChain_L1D1 = 349,
  efunc_gen_HashSetm_AsChain_L1Z0 = 350,
  efunc_gen_ExtractMetatableNames_L1D2 = 351,
  efunc_gen_DoMapAccum_S1A1Z4 = 352,
  efunc_gen_ExtractMetatableNames_L1Z0 = 353,
  efunc_gen_DoExtractLabels_Z5 = 354,
  efunc_gen_DoExtractLabels_Z0 = 355,
  efunc_gen_DoExtractLabels_Z6 = 356,
  efunc_gen_DoExtractLabels_Z7 = 357,
  efunc_gen_GenRemainderFuncNames_Z2 = 358,
  efunc_gen_MultiplyRemainderNames_A1L1A2Z0 = 359,
  efunc_gen_HashSet_L1D1 = 360,
  efunc_gen_HashSet_L1Z0 = 361,
  efunc_gen_DoHashSetm_DoFillBucket_Z2 = 362,
  efunc_gen_DoHashSetm_DoFillBucket_Z0 = 363,
  efunc_gen_DriveInlineOptimizerTick_A5L1 = 364,
  efunc_gen_DoMapAccum_S1A1Z5 = 365,
  efunc_gen_DriveInlineOptimizerTick_A5L1Z0 = 366,
  efunc_gen_DriveInlineOptimizerTick_A4L1 = 367,
  efunc_gen_DoMapAccum_S1A1Z6 = 368,
  efunc_gen_DriveInlineOptimizerTick_A4L1Z0 = 369,
  efunc_gen_Reduce_S1A1Z1 = 370,
  efunc_gen_OptFunction_L1A1 = 371,
  efunc_gen_OptFunction_L1D1 = 372,
  efunc_gen_OptFunction_L1Z0 = 373,
  efunc_gen_Reduce_Z0 = 374,
  efunc_gen_DoMapAccum_S1A1Z7 = 375,
  efunc_gen_DriveInlineOptimizerTick_A3L1Z0 = 376,
  efunc_gen_WithMetatables_L1D2 = 377,
  efunc_gen_DoMapAccum_S1A1Z8 = 378,
  efunc_gen_WithMetatables_L1Z0 = 379,
  efunc_gen_DoMapAccum_Z12 = 380,
  efunc_gen_DriveInlineOptimizerTick_A2Z0 = 381,
  efunc_gen_DoMapAccum_Z13 = 382,
  efunc_gen_DoMapAccum_Z14 = 383,
  efunc_gen_DoMapAccum_Z15 = 384,
  efunc_gen_DoMapAccum_Z16 = 385,
  efunc_gen_DoMapAccum_Z17 = 386,
  efunc_gen_DoMapAccum_Z18 = 387,
  efunc_gen_DoMapAccum_Z19 = 388,
  efunc_gen_DoMapAccum_Z20 = 389,
  efunc_gen_DoMapAccum_Z21 = 390,
  efunc_gen_DoMapAccum_Z22 = 391,
  efunc_gen_DoMapAccum_Z23 = 392,
  efunc_gen_DoMapAccum_Z24 = 393,
  efunc_gen_DoMapAccum_Z25 = 394,
  efunc_gen_DoMapAccum_Z26 = 395,
  efunc_gen_DoMapAccum_Z27 = 396,
  efunc_gen_Reduce_S1A1Z2 = 397,
  efunc_gen_IsPassiveCall_L1D2 = 398,
  efunc_gen_IsPassiveCall_L1Z0 = 399,
  efunc_gen_IsLexprm_Aux_S2L1Z0 = 400,
  efunc_gen_CleanupColdm_Sentence_D1 = 401,
  efunc_gen_CleanupColdm_Sentence_Z0 = 402,
  efunc_gen_DoMapAccum_S1A1Z9 = 403,
  efunc_gen_FindOptimizedCallm_Term_D5 = 404,
  efunc_gen_FindOptimizedCallm_Term_Z0 = 405,
  efunc_gen_ApplyContractionsm_Term_D5 = 406,
  efunc_gen_ApplyContractions_L1Z0 = 407,
  efunc_gen_DoMapAccum_S1A1Z10 = 408,
  efunc_gen_OptSentencem_Aux_L1D1 = 409,
  efunc_gen_OptSentencem_Aux_L1Z0 = 410,
  efunc_gen_FindOptInfom_Aux_S2A1Z1 = 411,
  efunc_gen_FindOptInfom_Aux_Z0 = 412,
  efunc_gen_FindOptInfom_Aux_S2A1Z2 = 413,
  efunc_gen_FindOptInfom_Aux_S2A1Z3 = 414,
  efunc_gen_CharToNode_L1D1 = 415,
  efunc_gen_CharToNode_L1Z0 = 416,
  efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z0 = 417,
  efunc_gen_Intrinsicm_Type_S4A1Z0 = 418,
  efunc_gen_SymbolsToNumber_L1D3 = 419,
  efunc_gen_SymbolsToNumber_L1Z0 = 420,
  efunc_gen_NumberToSymbols_L1D3 = 421,
  efunc_gen_NumberToSymbols_L1Z0 = 422,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0 = 423,
  efunc_gen_Map_Z19 = 424,
  efunc_gen_Chr_Z0 = 425,
  efunc_gen_StaticSubstitution_Z0 = 426,
  efunc_gen_StaticSubstitution_L1D3 = 427,
  efunc_gen_StaticSubstitution_L1Z0 = 428,
  efunc_gen_Map_Z20 = 429,
  efunc_gen_Ord_Z0 = 430,
  efunc_gen_Map_Z21 = 431,
  efunc_gen_Upper_Z0 = 432,
  efunc_gen_Map_Z22 = 433,
  efunc_gen_Lower_Z0 = 434,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1 = 435,
  efunc_gen_DoOptSentencem_MakeSubstitutions_Z0 = 436,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2 = 437,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3 = 438,
  efunc_gen_ApplyAssignsm_Term_D5 = 439,
  efunc_gen_ApplyAssigns_L1Z0 = 440,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1A1 = 441,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1D1 = 442,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1Z0 = 443,
  efunc_gen_MakeColdSolution_Z1S1C1 = 444,
  efunc_gen_MakeColdSolution_Z0 = 445,
  efunc_gen_OptTreem_Drivem_CleanupColdCalls_L1Z0 = 446,
  efunc_gen_CleanupColdm_Term_Z0 = 447,
  efunc_gen_CleanupColdm_Sentence_L1D1 = 448,
  efunc_gen_CleanupColdm_Sentence_L1Z0 = 449,
  efunc_gen_UpdateDriveInfo_A2Z1 = 450,
  efunc_gen_UpdateDriveInfo_A1Z0 = 451,
  efunc_gen_FormatOptFunctions_A1L1 = 452,
  efunc_gen_DoMapAccum_S1A1Z11 = 453,
  efunc_gen_UpdateDriveInfo_A22 = 454,
  efunc_gen_UpdateDriveInfo_A21Z0 = 455,
  efunc_gen_DoMapAccum_S1A1Z0 = 456,
  efunc_gen_GenRemainderFuncNames_Z0 = 457,
  efunc_gen_Reduce_S1A1Z0 = 458,
  efunc_gen_Reduce_Z3 = 459,
  efunc_gen_DoMapAccum_S1A1Z12 = 460,
  efunc_gen_Reduce_Z4 = 461,
  efunc_gen_DoMapAccum_S1A1Z13 = 462,
  efunc_gen_Reduce_Z5 = 463,
  efunc_gen_DoMapAccum_S1A1Z14 = 464,
  efunc_gen_Reduce_Z6 = 465,
  efunc_gen_DoMapAccum_S1A1Z15 = 466,
  efunc_gen_Reduce_Z7 = 467,
  efunc_gen_DoMapAccum_S1A1Z16 = 468,
  efunc_gen_Reduce_Z8 = 469,
  efunc_gen_DoMapAccum_S1A1Z17 = 470,
  efunc_gen_Reduce_Z9 = 471,
  efunc_gen_DoMapAccum_S1A1Z18 = 472,
  efunc_gen_Reduce_Z10 = 473,
  efunc_gen_DoMapAccum_S1A1Z19 = 474,
  efunc_gen_Reduce_Z11 = 475,
  efunc_gen_DoMapAccum_S1A1Z20 = 476,
  efunc_gen_Reduce_Z12 = 477,
  efunc_gen_DoMapAccum_S1A1Z21 = 478,
  efunc_gen_Reduce_Z13 = 479,
  efunc_gen_DoMapAccum_S1A1Z22 = 480,
  efunc_gen_Reduce_Z14 = 481,
  efunc_gen_DoMapAccum_S1A1Z23 = 482,
  efunc_gen_Reduce_Z15 = 483,
  efunc_gen_DoMapAccum_S1A1Z24 = 484,
  efunc_gen_Reduce_Z16 = 485,
  efunc_gen_DoMapAccum_S1A1Z25 = 486,
  efunc_gen_Reduce_Z17 = 487,
  efunc_gen_DoMapAccum_S1A1Z26 = 488,
  efunc_gen_Reduce_Z18 = 489,
  efunc_gen_DoMapAccum_S1A1Z27 = 490,
  efunc_gen_FindOptInfom_Aux_S2A1Z0 = 491,
  efunc_Chr = 492,
  efunc_Ord = 493,
  efunc_Lower = 494,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1 = 495,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1S2C1 = 496,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z1 = 497,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z0 = 498,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2S2C1 = 499,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z2 = 500,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z2 = 501,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3S2C1 = 502,
  efunc_gen_UpdateDriveInfo_A3Z1 = 503,
  efunc_gen_UpdateDriveInfo_A2Z0 = 504,
  efunc_gen_Reduce_S1A1Z3 = 505,
  efunc_gen_OptSentence_S1B1Z1 = 506,
  efunc_gen_Reduce_S1A1Z4 = 507,
  efunc_gen_OptSentence_S1B1Z2 = 508,
  efunc_gen_Reduce_S1A1Z5 = 509,
  efunc_gen_OptSentence_S1B1Z3 = 510,
  efunc_gen_Reduce_S1A1Z6 = 511,
  efunc_gen_OptSentence_S1B1Z4 = 512,
  efunc_gen_Reduce_S1A1Z7 = 513,
  efunc_gen_OptSentence_S1B1Z5 = 514,
  efunc_gen_Reduce_S1A1Z8 = 515,
  efunc_gen_OptSentence_S1B1Z6 = 516,
  efunc_gen_Reduce_S1A1Z9 = 517,
  efunc_gen_OptSentence_S1B1Z7 = 518,
  efunc_gen_Reduce_S1A1Z10 = 519,
  efunc_gen_OptSentence_S1B1Z8 = 520,
  efunc_gen_Reduce_S1A1Z11 = 521,
  efunc_gen_OptSentence_S1B1Z9 = 522,
  efunc_gen_Reduce_S1A1Z12 = 523,
  efunc_gen_OptSentence_S1B1Z10 = 524,
  efunc_gen_Reduce_S1A1Z13 = 525,
  efunc_gen_OptSentence_S1B1Z11 = 526,
  efunc_gen_Reduce_S1A1Z14 = 527,
  efunc_gen_OptSentence_S1B1Z12 = 528,
  efunc_gen_Reduce_S1A1Z15 = 529,
  efunc_gen_OptSentence_S1B1Z13 = 530,
  efunc_gen_Reduce_S1A1Z16 = 531,
  efunc_gen_OptSentence_S1B1Z14 = 532,
  efunc_gen_Reduce_S1A1Z17 = 533,
  efunc_gen_OptSentence_S1B1Z15 = 534,
  efunc_gen_Reduce_S1A1Z18 = 535,
  efunc_gen_OptSentence_S1B1Z16 = 536,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z0 = 537,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z0 = 538,
  efunc_gen_DoOptSentencem_MakeSubstitutions_Z4 = 539,
  efunc_gen_UpdateDriveInfo_A4Z1 = 540,
  efunc_gen_UpdateDriveInfo_A3Z0 = 541,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4 = 542,
  efunc_gen_UpdateDriveInfo_A5Z1 = 543,
  efunc_gen_UpdateDriveInfo_A4Z0 = 544,
  efunc_gen_OptSentence_S1B1Z0 = 545,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4S2C1 = 546,
  efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z3 = 547,
  efunc_gen_UpdateDriveInfo_A6Z1 = 548,
  efunc_gen_UpdateDriveInfo_A5Z0 = 549,
  efunc_gen_UpdateDriveInfo_A7Z1 = 550,
  efunc_gen_UpdateDriveInfo_A6Z0 = 551,
  efunc_gen_UpdateDriveInfo_A8Z1 = 552,
  efunc_gen_UpdateDriveInfo_A7Z0 = 553,
  efunc_gen_UpdateDriveInfo_A9Z1 = 554,
  efunc_gen_UpdateDriveInfo_A8Z0 = 555,
  efunc_gen_UpdateDriveInfo_A10Z1 = 556,
  efunc_gen_UpdateDriveInfo_A9Z0 = 557,
  efunc_gen_UpdateDriveInfo_A11Z1 = 558,
  efunc_gen_UpdateDriveInfo_A10Z0 = 559,
  efunc_gen_UpdateDriveInfo_A12Z1 = 560,
  efunc_gen_UpdateDriveInfo_A11Z0 = 561,
  efunc_gen_UpdateDriveInfo_A13Z1 = 562,
  efunc_gen_UpdateDriveInfo_A12Z0 = 563,
  efunc_gen_UpdateDriveInfo_A14Z1 = 564,
  efunc_gen_UpdateDriveInfo_A13Z0 = 565,
  efunc_gen_UpdateDriveInfo_A15Z1 = 566,
  efunc_gen_UpdateDriveInfo_A14Z0 = 567,
  efunc_gen_UpdateDriveInfo_A16Z1 = 568,
  efunc_gen_UpdateDriveInfo_A15Z0 = 569,
  efunc_gen_UpdateDriveInfo_A17Z1 = 570,
  efunc_gen_UpdateDriveInfo_A16Z0 = 571,
  efunc_gen_UpdateDriveInfo_A18Z1 = 572,
  efunc_gen_UpdateDriveInfo_A17Z0 = 573,
  efunc_gen_UpdateDriveInfo_A20Z2 = 574,
  efunc_gen_UpdateDriveInfo_A18Z0 = 575,
  efunc_gen_UpdateDriveInfo_A21Z2 = 576,
  efunc_gen_UpdateDriveInfo_A22Z1 = 577,
  efunc_gen_UpdateDriveInfo_A22Z0 = 578,
};


enum ident {
  ident_NoOpt = 0,
  ident_DriveInfo = 1,
  ident_SUF = 2,
  ident_Function = 3,
  ident_Sentences = 4,
  ident_Metatable = 5,
  ident_OptDrive = 6,
  ident_Drive = 7,
  ident_OptInline = 8,
  ident_Inline = 9,
  ident_OptIntrinsic = 10,
  ident_Intrinsic = 11,
  ident_None = 12,
  ident_ColdFunction = 13,
  ident_NewFunction = 14,
  ident_Metatables = 15,
  ident_True = 16,
  ident_Brackets = 17,
  ident_ADTm_Brackets = 18,
  ident_CallBrackets = 19,
  ident_False = 20,
  ident_ColdCallBrackets = 21,
  ident_OpenE = 22,
  ident_TkVariable = 23,
  ident_DRIVE = 24,
  ident_Symbol = 25,
  ident_Name = 26,
  ident_Ok = 27,
  ident_DRIVEN = 28,
  ident_MakeColdCall = 29,
  ident_Identifier = 30,
  ident_Number = 31,
  ident_Char = 32,
  ident_ClosureBrackets = 33,
  ident_Fails = 34,
  ident_Const = 35,
  ident_ArithmResult = 36,
  ident_GNm_Local = 37,
  ident_Success = 38,
  ident_Failure = 39,
  ident_Mu = 40,
  ident_Up = 41,
  ident_Evm_met = 42,
  ident_Residue = 43,
  ident_u_u_Metau_Residue = 44,
  ident_Apply = 45,
  ident_Map = 46,
  ident_Reduce = 47,
  ident_Fetch = 48,
  ident_MapAccum = 49,
  ident_DoMapAccum = 50,
  ident_UnBracket = 51,
  ident_DelAccumulator = 52,
  ident_Inc = 53,
  ident_Dec = 54,
  ident_Pipe = 55,
  ident_OptTreem_Drivem_Prepare = 56,
  ident_GenRemainderFuncNames = 57,
  ident_AddStarSuffix = 58,
  ident_BaseName = 59,
  ident_UpdateDriveInfo = 60,
  ident_ExtractLabels = 61,
  ident_DoExtractLabels = 62,
  ident_ExtractMetatableNames = 63,
  ident_SetNamesm_Reject = 64,
  ident_ExtractBaseNames = 65,
  ident_ExtractExtractableFunctions = 66,
  ident_ExtractFuncLengths = 67,
  ident_MultiplyRemainderNames = 68,
  ident_FormatOptFunctions = 69,
  ident_HashSet = 70,
  ident_BUCKETm_SIZE = 71,
  ident_DoHashSet = 72,
  ident_DoHashSetm_DoFillBucket = 73,
  ident_HashSetm_AsChain = 74,
  ident_OptTreem_Drive = 75,
  ident_OptSwitch = 76,
  ident_DriveInlineOptimizerTick = 77,
  ident_IsPassiveCall = 78,
  ident_IsPassiveCallm_Aux = 79,
  ident_IsLexpr = 80,
  ident_IsLexprm_Aux = 81,
  ident_OptFunction = 82,
  ident_OptSentence = 83,
  ident_OptSentencem_Aux = 84,
  ident_DoOptSentencem_MakeSubstitutionsm_Intrinsic = 85,
  ident_eDRIVEN = 86,
  ident_Intrinsicm_Mu = 87,
  ident_ArithmeticSymbolToFunction = 88,
  ident_AllChars = 89,
  ident_DoAllChars = 90,
  ident_MakeSubstitutionm_FromMetatables = 91,
  ident_Intrinsicm_Add = 92,
  ident_ArithmArgs = 93,
  ident_ArithmOneArg = 94,
  ident_Numberm_Check = 95,
  ident_Numberm_Checkm_AllNumbers = 96,
  ident_SymbolsToNumber = 97,
  ident_NumberToSymbols = 98,
  ident_ArithmeticFunctions = 99,
  ident_Intrinsicm_Sub = 100,
  ident_Intrinsicm_Mul = 101,
  ident_Intrinsicm_Div = 102,
  ident_Intrinsicm_Mod = 103,
  ident_Intrinsicm_Divmod = 104,
  ident_Intrinsicm_Compare = 105,
  ident_Intrinsicm_Chr = 106,
  ident_CheckArgsm_Intrinsicm_StaticSubstitution = 107,
  ident_StaticSubstitution = 108,
  ident_Intrinsicm_Ord = 109,
  ident_Intrinsicm_Upper = 110,
  ident_Intrinsicm_Lower = 111,
  ident_Intrinsicm_Numb = 112,
  ident_Intrinsicm_Symb = 113,
  ident_CharToNode = 114,
  ident_Intrinsicm_Implode = 115,
  ident_Intrinsicm_Implodeu_Ext = 116,
  ident_Intrinsicm_Explode = 117,
  ident_Intrinsicm_Type = 118,
  ident_Intrinsicm_Lenw = 119,
  ident_FixedLength = 120,
  ident_Intrinsicm_First = 121,
  ident_Intrinsicm_Last = 122,
  ident_OptSentencem_MakeSubstitutions = 123,
  ident_MakeColdSolution = 124,
  ident_DecreaseMode = 125,
  ident_DoOptSentencem_MakeSubstitutions = 126,
  ident_Cleanupm_Stepm_Drop = 127,
  ident_DropLeft = 128,
  ident_FindOptInfo = 129,
  ident_FindOptInfom_Aux = 130,
  ident_CutSUF = 131,
  ident_WithMetatables = 132,
  ident_FindOptimizedCall = 133,
  ident_FindOptimizedCallm_Term = 134,
  ident_ApplySolutions = 135,
  ident_ApplyAssigns = 136,
  ident_ApplyAssignsm_Term = 137,
  ident_ApplyContractions = 138,
  ident_ApplyContractionsm_Term = 139,
  ident_RemainderFuncIncName = 140,
  ident_OptTreem_Drivem_CleanupColdCalls = 141,
  ident_CleanupColdm_Body = 142,
  ident_CleanupColdm_Sentence = 143,
  ident_CleanupColdm_Result = 144,
  ident_CleanupColdm_Term = 145,
  ident_Condition = 146,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply/4 s.Fn#1/5 e.Argument#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument#1 as range 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.Argument#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.Argument#1/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure#1/9 e.Bounded#1/7 )/6 e.Argument#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded#1 as range 7
  //DEBUG: e.Argument#1: 2
  //DEBUG: t.Closure#1: 9
  //DEBUG: e.Bounded#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure#1/9 } Tile{ AsIs: e.Bounded#1/7 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Map/4 s.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      //DEBUG: t.Next#1: 9
      //DEBUG: s.Fn#1: 5
      //DEBUG: e.Tail#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Next#1/9 } & $table/13 >/14 </15 & Map/16 s.Fn#1/5/17 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t.#0/15 e.0#0/13 )/6 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0#0 as range 13
      //DEBUG: t.Next#1: 9
      //DEBUG: e.Tail#1: 11
      //DEBUG: t.#0: 15
      //DEBUG: e.0#0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t.#0/15/19 e.0#0/13/21 Tile{ AsIs: t.Next#1/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t.#0/15 AsIs: e.0#0/13 AsIs: )/6 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn#1/5 AsIs: t.Next#1/9 } >/13 </14 & Map/15 t.Fn#1/5/16 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn#1/5 (/9 e.Tail#1/7 )/10 t.Acc#2/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Tail#1: 7
  //DEBUG: t.Acc#2: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/11 } Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail#1 as range 9
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn#1/5/15 (/17 Tile{ AsIs: e.Tail#1/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument#1/2 t.Function#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Argument#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function#1/5 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn#1/5 t.Acc#1/7 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 } (/9 )/10 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn#1/5 (/9 e.Scanned#1/7 )/10 (/13 e.Tail#1/11 )/14 t.Acc#2/15 e.StepScanned#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned#1 as range 7
  // closed e.Tail#1 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#2 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Scanned#1: 7
  //DEBUG: e.Tail#1: 11
  //DEBUG: t.Acc#2: 15
  //DEBUG: e.StepScanned#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/7 } Tile{ AsIs: e.StepScanned#2/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 t.Next#1/17 e.Tail#1/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned#1 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 15
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Tail#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn#1/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail#1/15 } )/20 </21 & Apply@2/22 t.Fn#1/5/23 Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: t.Next#1/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 9
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Scanned#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn#1/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 5
  //DEBUG: e.Expr#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Dec/4 s.Num#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num#1/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num#1/2 >/1
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num#1/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func#1/5 (/9 e.Funcs#1/7 )/10 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs#1 as range 7
  // closed e.Arg#2 as range 2
  //DEBUG: t.Func#1: 5
  //DEBUG: e.Funcs#1: 7
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func#1/5 } Tile{ AsIs: e.Arg#2/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#2 as range 2
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Pipe/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Pipe/4 t.Func#1/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func#1: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func#1/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func#1/7 e.Funcs#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs#1 as range 9
    //DEBUG: t.Func#1: 7
    //DEBUG: e.Funcs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func#1/7 } (/11 Tile{ AsIs: e.Funcs#1/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_OptTreem_Drivem_Prepare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & OptTree-Drive-Prepare/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptTree-Drive-Prepare/4 (/7 s.new#1/9 s.new#2/10 )/8 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptTree-Drive-Prepare/4 (/7 # NoOpt/9 # NoOpt/10 )/8 e.AST#1/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[10] ) )
      continue;
    // closed e.AST#1 as range 11
    //DEBUG: e.AST#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptTree-Drive-Prepare/4 (/7 # NoOpt/9 # NoOpt/10 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptTree-Drive-Prepare/4 (/7 s.OptDrive#1/9 s.OptIntrinsic#1/10 )/8 e.AST-B#1/13 (/19 # DriveInfo/21 e.DriveInfo#1/17 )/20 e.AST-E#1/15 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_DriveInfo], context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.DriveInfo#1 as range 17
      // closed e.AST-E#1 as range 15
      //DEBUG: s.OptDrive#1: 9
      //DEBUG: s.OptIntrinsic#1: 10
      //DEBUG: e.AST-B#1: 13
      //DEBUG: e.DriveInfo#1: 17
      //DEBUG: e.AST-E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} (/19 # DriveInfo/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UpdateDriveInfo/7 AsIs: s.OptDrive#1/9 AsIs: s.OptIntrinsic#1/10 HalfReuse: (/8 } Tile{ AsIs: e.DriveInfo#1/17 } Tile{ AsIs: )/20 } Tile{ AsIs: e.AST-B#1/13 } Tile{ AsIs: e.AST-E#1/15 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_UpdateDriveInfo]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[8], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Drive-Prepare/4 (/7 s.OptDrive#1/9 s.OptIntrinsic#1/10 )/8 e.AST#1/2 >/1
  // closed e.AST#1 as range 2
  //DEBUG: s.OptDrive#1: 9
  //DEBUG: s.OptIntrinsic#1: 10
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.OptDrive#1/9 s.OptIntrinsic#1/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=1@1/4 HalfReuse: </7 } Tile{ HalfReuse: & DoExtractLabels@3/8 AsIs: e.AST#1/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A1Z1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoExtractLabels_Z3]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Drivem_Prepare("OptTree-Drive-Prepare", 0U, 0U, func_OptTreem_Drivem_Prepare);


static refalrts::FnResult func_GenRemainderFuncNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & GenRemainderFuncNames/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenRemainderFuncNames/4 s.new#1/5 e.new#2/2 s.new#3/7 s.new#4/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & GenRemainderFuncNames/4 s.Label#1/5 e.Name#1/8 s.End#1/7 s.End#1/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::repeated_stvar_term( vm, context[6], context[7] ) )
      continue;
    // closed e.Name#1 as range 8
    //DEBUG: s.Label#1: 5
    //DEBUG: s.End#1: 7
    //DEBUG: e.Name#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenRemainderFuncNames/4 s.Label#1/5 e.Name#1/8 s.End#1/7 s.End#1/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames/4 s.new#5/5 e.new#7/8 0/7 s.new#6/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::number_term( 0UL, context[7] ) )
      continue;
    // closed e.new#7 as range 8
    do {
      // </0 & GenRemainderFuncNames/4 s.Label#1/5 e.Name#1/10 0/7 1/6 >/1
      context[10] = context[8];
      context[11] = context[9];
      if( ! refalrts::number_term( 1UL, context[6] ) )
        continue;
      // closed e.Name#1 as range 10
      //DEBUG: s.Label#1: 5
      //DEBUG: e.Name#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} 1/6 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.Label#1/5 AsIs: e.Name#1/10 HalfReuse: )/7 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[4], context[7] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenRemainderFuncNames/4 s.Label#1/5 e.Name#1/10 0/7 s.End#1/6 >/1
    context[10] = context[8];
    context[11] = context[9];
    // closed e.Name#1 as range 10
    //DEBUG: s.Label#1: 5
    //DEBUG: s.End#1: 6
    //DEBUG: e.Name#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/12 s.Label#1/5/13 e.Name#1/10/14 )/16 (/17 s.Label#1/5/18 </19 & AddStarSuffix*1/20 e.Name#1/10/21 1/23 >/24 )/25 Tile{ AsIs: </0 AsIs: & GenRemainderFuncNames/4 AsIs: s.Label#1/5 AsIs: e.Name#1/10 Reuse: 2/7 AsIs: s.End#1/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::copy_stvar(vm, context[13], context[5]);
    refalrts::copy_evar(vm, context[14], context[15], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::copy_stvar(vm, context[18], context[5]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_AddStarSuffix_D1]);
    refalrts::copy_evar(vm, context[21], context[22], context[10], context[11]);
    refalrts::alloc_number(vm, context[23], 1UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_number(context[7], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[12], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenRemainderFuncNames/4 s.Label#1/5 e.Name#1/2 s.Cur#1/7 s.End#1/6 >/1
  // closed e.Name#1 as range 2
  //DEBUG: s.Label#1: 5
  //DEBUG: s.Cur#1: 7
  //DEBUG: s.End#1: 6
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/8 s.Label#1/5/9 </10 & AddStarSuffix*1/11 Tile{ AsIs: e.Name#1/2 } Tile{ AsIs: s.Cur#1/7 } >/12 )/13 Tile{ AsIs: </0 AsIs: & GenRemainderFuncNames/4 AsIs: s.Label#1/5 } e.Name#1/2/14 </16 & Add/17 1/18 s.Cur#1/7/19 >/20 Tile{ AsIs: s.End#1/6 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::copy_stvar(vm, context[9], context[5]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_AddStarSuffix_D1]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::copy_evar(vm, context[14], context[15], context[2], context[3]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[18], 1UL);
  refalrts::copy_stvar(vm, context[19], context[7]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenRemainderFuncNames("GenRemainderFuncNames", COOKIE1_, COOKIE2_, func_GenRemainderFuncNames);


static refalrts::FnResult func_AddStarSuffix(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & AddStarSuffix/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddStarSuffix/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & AddStarSuffix/4 e.Name#1/6 0/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Name#1 as range 6
    //DEBUG: e.Name#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AddStarSuffix/4 {REMOVED TILE} 0/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddStarSuffix/4 e.Name#1/8 # SUF/12 e.Suffix#1/10 s.Count#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = refalrts::ident_left( identifiers[ident_SUF], context[10], context[11] );
      if( ! context[12] )
        continue;
      // closed e.Suffix#1 as range 10
      //DEBUG: s.Count#1: 5
      //DEBUG: e.Name#1: 8
      //DEBUG: e.Suffix#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/8 } Tile{ AsIs: # SUF/12 } Tile{ AsIs: e.Suffix#1/10 } Tile{ HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count1 #5/1 ]] }
      refalrts::reinit_char(context[4], '*');
      refalrts::reinit_svar( context[1], context[5] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddStarSuffix/4 e.Name#1/2 s.Count#1/5 >/1
  // closed e.Name#1 as range 2
  //DEBUG: s.Count#1: 5
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count1 #5/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddStarSuffix("AddStarSuffix", COOKIE1_, COOKIE2_, func_AddStarSuffix);


static refalrts::FnResult func_BaseName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BaseName/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & BaseName/4 e.new#1/5 '*'/8 s.new#2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    context[8] = refalrts::char_right( '*', context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#1 as range 5
    do {
      // </0 & BaseName/4 e.Name#1/9 # SUF/11 '*'/8 s.Count#1/7 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_right( identifiers[ident_SUF], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Name#1 as range 9
      //DEBUG: s.Count#1: 7
      //DEBUG: e.Name#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} # SUF/11 '*'/8 s.Count#1/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/9 } Tile{ HalfReuse: s.Count1 #7/1 ]] }
      refalrts::reinit_svar( context[1], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & BaseName/4 e.Name#1/9 '*'/8 s.Count#1/7 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Name#1 as range 9
    //DEBUG: s.Count#1: 7
    //DEBUG: e.Name#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} '*'/8 s.Count#1/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/9 } Tile{ HalfReuse: s.Count1 #7/1 ]] }
    refalrts::reinit_svar( context[1], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BaseName/4 e.Name#1/2 >/1
  // closed e.Name#1 as range 2
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BaseName("BaseName", COOKIE1_, COOKIE2_, func_BaseName);


static refalrts::FnResult func_gen_UpdateDriveInfo_A22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & UpdateDriveInfo=22/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.OptFunctions#21/9 )/12 (/15 e.OptIntrinsicFuncs#22/13 )/16 (/19 e.AST#16/17 )/20 e.HashSetNames#23/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.OptFunctions#21 as range 9
  // closed e.OptIntrinsicFuncs#22 as range 13
  // closed e.AST#16 as range 17
  // closed e.HashSetNames#23 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.OptFunctions#21: 9
  //DEBUG: e.OptIntrinsicFuncs#22: 13
  //DEBUG: e.AST#16: 17
  //DEBUG: e.HashSetNames#23: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 } Tile{ AsIs: e.HashSetNames#23/2 } Tile{ AsIs: )/20 } Tile{ AsIs: e.KnownFunctions#1/5 } Tile{ AsIs: e.OptFunctions#21/9 } Tile{ AsIs: e.OptIntrinsicFuncs#22/13 } Tile{ AsIs: )/16 } Tile{ AsIs: e.AST#16/17 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A22("UpdateDriveInfo=22", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A22);


static refalrts::FnResult func_gen_UpdateDriveInfo_A18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=18/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#16/9 )/12 (/15 e.KnownNames#8/13 )/16 (/19 e.Intrinsics#11/17 )/20 (/23 e.Extracted#15/21 )/24 (/27 e.Inlines#18/25 )/28 (/31 e.Metatables#12/29 )/32 e.Drives#19/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#16 as range 9
  // closed e.KnownNames#8 as range 13
  // closed e.Intrinsics#11 as range 17
  // closed e.Extracted#15 as range 21
  // closed e.Inlines#18 as range 25
  // closed e.Metatables#12 as range 29
  // closed e.Drives#19 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#16: 9
  //DEBUG: e.KnownNames#8: 13
  //DEBUG: e.Intrinsics#11: 17
  //DEBUG: e.Extracted#15: 21
  //DEBUG: e.Inlines#18: 25
  //DEBUG: e.Metatables#12: 29
  //DEBUG: e.Drives#19: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@1/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST#16/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames#8/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives#19/2 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Inlines#18/25 AsIs: )/28 AsIs: (/31 AsIs: e.Metatables#12/29 AsIs: )/32 } (/33 Tile{ AsIs: e.Intrinsics#11/17 } )/34 </35 & FormatOptFunctions=1/36 </37 Tile{ HalfReuse: & MapAccum@1/20 AsIs: (/23 } </38 & ExtractBaseNames=1/39 </40 & Map@2/41 e.Drives#19/2/42 e.Inlines#18/25/44 e.Metatables#12/29/46 >/48 >/49 )/50 Tile{ AsIs: e.Extracted#15/21 } >/51 >/52 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_gen_FormatOptFunctions_A1]);
  refalrts::alloc_open_call(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_Map_Z2]);
  refalrts::copy_evar(vm, context[42], context[43], context[2], context[3]);
  refalrts::copy_evar(vm, context[44], context[45], context[25], context[26]);
  refalrts::copy_evar(vm, context[46], context[47], context[29], context[30]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::alloc_close_bracket(vm, context[50]);
  refalrts::alloc_close_call(vm, context[51]);
  refalrts::alloc_close_call(vm, context[52]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z1]);
  refalrts::reinit_name(context[20], functions[efunc_gen_MapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[51] );
  refalrts::push_stack( vm, context[37] );
  refalrts::link_brackets( context[23], context[50] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[51], context[52] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[38], context[50] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[34], context[37] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[24], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A18("UpdateDriveInfo=18", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A18);


static refalrts::FnResult func_gen_UpdateDriveInfo_A17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & UpdateDriveInfo=17/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#16/9 )/12 (/15 e.KnownNames#8/13 )/16 (/19 e.Intrinsics#11/17 )/20 (/23 e.Extracted#15/21 )/24 (/27 e.Metatables#12/25 )/28 (/31 e.Drives#17/29 )/32 e.Inlines#18/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#16 as range 9
  // closed e.KnownNames#8 as range 13
  // closed e.Intrinsics#11 as range 17
  // closed e.Extracted#15 as range 21
  // closed e.Metatables#12 as range 25
  // closed e.Drives#17 as range 29
  // closed e.Inlines#18 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#16: 9
  //DEBUG: e.KnownNames#8: 13
  //DEBUG: e.Intrinsics#11: 17
  //DEBUG: e.Extracted#15: 21
  //DEBUG: e.Metatables#12: 25
  //DEBUG: e.Drives#17: 29
  //DEBUG: e.Inlines#18: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=18/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST#16/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames#8/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics#11/17 AsIs: )/20 AsIs: (/23 AsIs: e.Extracted#15/21 AsIs: )/24 AsIs: (/27 } e.Inlines#18/2/33 )/35 (/36 Tile{ AsIs: e.Metatables#12/25 } )/37 </38 Tile{ HalfReuse: & SetNames-Reject/28 AsIs: (/31 AsIs: e.Drives#17/29 AsIs: )/32 } (/39 Tile{ AsIs: e.Inlines#18/2 } )/40 >/41 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[33], context[34], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A18]);
  refalrts::reinit_name(context[28], functions[efunc_SetNamesm_Reject]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[38] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[27], context[35] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[28], context[32] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A17("UpdateDriveInfo=17", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A17);


static refalrts::FnResult func_gen_UpdateDriveInfo_A16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & UpdateDriveInfo=16/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#16/9 )/12 (/15 e.KnownNames#8/13 )/16 (/19 e.Intrinsics#11/17 )/20 (/23 e.Extracted#15/21 )/24 (/27 e.Metatables#12/25 )/28 (/31 e.Lengths#16/29 )/32 (/35 e.Inlines#10/33 )/36 e.Drives#17/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#16 as range 9
  // closed e.KnownNames#8 as range 13
  // closed e.Intrinsics#11 as range 17
  // closed e.Extracted#15 as range 21
  // closed e.Metatables#12 as range 25
  // closed e.Lengths#16 as range 29
  // closed e.Inlines#10 as range 33
  // closed e.Drives#17 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#16: 9
  //DEBUG: e.KnownNames#8: 13
  //DEBUG: e.Intrinsics#11: 17
  //DEBUG: e.Extracted#15: 21
  //DEBUG: e.Metatables#12: 25
  //DEBUG: e.Lengths#16: 29
  //DEBUG: e.Inlines#10: 33
  //DEBUG: e.Drives#17: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=17/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST#16/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames#8/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics#11/17 AsIs: )/20 AsIs: (/23 AsIs: e.Extracted#15/21 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables#12/25 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.Drives#17/2 } )/37 </38 & MultiplyRemainderNames=1/39 </40 & DoMapAccum@1/41 (/42 Tile{ AsIs: e.Lengths#16/29 } Tile{ AsIs: )/32 AsIs: (/35 } Tile{ AsIs: )/36 } Tile{ AsIs: e.Inlines#10/33 } >/43 >/44 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[42], context[32] );
  refalrts::link_brackets( context[31], context[37] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[43], context[44] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[32], context[35] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[37], context[42] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A16("UpdateDriveInfo=16", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A16);


static refalrts::FnResult func_gen_UpdateDriveInfo_A15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & UpdateDriveInfo=15/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Intrinsics#11/13 )/16 (/19 e.Extracted#15/17 )/20 (/23 e.Metatables#12/21 )/24 (/27 e.Inlines#10/25 )/28 (/31 e.Drives#9/29 )/32 (/35 e.Lengths#16/33 )/36 e.AST#16/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Intrinsics#11 as range 13
  // closed e.Extracted#15 as range 17
  // closed e.Metatables#12 as range 21
  // closed e.Inlines#10 as range 25
  // closed e.Drives#9 as range 29
  // closed e.Lengths#16 as range 33
  // closed e.AST#16 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Intrinsics#11: 13
  //DEBUG: e.Extracted#15: 17
  //DEBUG: e.Metatables#12: 21
  //DEBUG: e.Inlines#10: 25
  //DEBUG: e.Drives#9: 29
  //DEBUG: e.Lengths#16: 33
  //DEBUG: e.AST#16: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=16/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions#1/5 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.AST#16/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted#15/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables#12/21 AsIs: )/24 AsIs: (/27 } e.Lengths#16/33/37 )/39 (/40 Tile{ AsIs: e.Inlines#10/25 } )/41 </42 & MultiplyRemainderNames=1/43 </44 Tile{ HalfReuse: & DoMapAccum@1/32 AsIs: (/35 AsIs: e.Lengths#16/33 AsIs: )/36 } (/45 )/46 Tile{ AsIs: e.Drives#9/29 } >/47 >/48 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[37], context[38], context[33], context[34]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_open_bracket(vm, context[40]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_open_bracket(vm, context[45]);
  refalrts::alloc_close_bracket(vm, context[46]);
  refalrts::alloc_close_call(vm, context[47]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A16]);
  refalrts::reinit_name(context[32], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[27], context[39] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[31], context[8] );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[32], context[36] );
  res = refalrts::splice_evar( res, context[41], context[44] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[8], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[31] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A15("UpdateDriveInfo=15", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A15);


static refalrts::FnResult func_gen_UpdateDriveInfo_A14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & UpdateDriveInfo=14/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Intrinsics#11/13 )/16 (/19 e.Metatables#12/17 )/20 (/23 e.Inlines#10/21 )/24 (/27 e.Drives#9/25 )/28 (/31 e.Extracted#15/29 )/32 e.AST#15/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Intrinsics#11 as range 13
  // closed e.Metatables#12 as range 17
  // closed e.Inlines#10 as range 21
  // closed e.Drives#9 as range 25
  // closed e.Extracted#15 as range 29
  // closed e.AST#15 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Intrinsics#11: 13
  //DEBUG: e.Metatables#12: 17
  //DEBUG: e.Inlines#10: 21
  //DEBUG: e.Drives#9: 25
  //DEBUG: e.Extracted#15: 29
  //DEBUG: e.AST#15: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=15/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics#11/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Extracted#15/29 } )/33 (/34 Tile{ AsIs: e.Metatables#12/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Inlines#10/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives#9/25 AsIs: )/28 HalfReuse: </31 } & DoMapAccum@2/35 (/36 )/37 (/38 Tile{ AsIs: )/32 AsIs: e.AST#15/2 AsIs: >/1 } >/39 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_bracket(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A15]);
  refalrts::reinit_open_call(context[31]);
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[38], context[32] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[34], context[20] );
  refalrts::link_brackets( context[19], context[33] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[32], context[1] );
  res = refalrts::splice_evar( res, context[35], context[38] );
  res = refalrts::splice_evar( res, context[20], context[31] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A14("UpdateDriveInfo=14", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A14);


static refalrts::FnResult func_gen_UpdateDriveInfo_A13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & UpdateDriveInfo=13/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Intrinsics#11/13 )/16 (/19 e.Metatables#12/17 )/20 (/23 e.Inlines#10/21 )/24 (/27 e.Drives#9/25 )/28 (/31 e.AST#5/29 )/32 e.ExtractedNames#14/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Intrinsics#11 as range 13
  // closed e.Metatables#12 as range 17
  // closed e.Inlines#10 as range 21
  // closed e.Drives#9 as range 25
  // closed e.AST#5 as range 29
  // closed e.ExtractedNames#14 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Intrinsics#11: 13
  //DEBUG: e.Metatables#12: 17
  //DEBUG: e.Inlines#10: 21
  //DEBUG: e.Drives#9: 25
  //DEBUG: e.AST#5: 29
  //DEBUG: e.ExtractedNames#14: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=14/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables#12/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines#10/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives#9/25 AsIs: )/28 HalfReuse: </31 } & ExtractExtractableFunctions=1/33 </34 & DoMapAccum@3/35 (/36 (/37 Tile{ AsIs: e.ExtractedNames#14/2 } Tile{ AsIs: )/32 } )/38 (/39 )/40 Tile{ AsIs: e.AST#5/29 } >/41 >/42 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractExtractableFunctions_A1]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A14]);
  refalrts::reinit_open_call(context[31]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[36], context[38] );
  refalrts::link_brackets( context[37], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[38], context[40] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A13("UpdateDriveInfo=13", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A13);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & UpdateDriveInfo=12/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Intrinsics#11/13 )/16 (/19 e.Metatables#12/17 )/20 (/23 e.Inlines#10/21 )/24 (/27 e.Drives#9/25 )/28 (/31 e.AST#5/29 )/32 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Intrinsics#11 as range 13
  // closed e.Metatables#12 as range 17
  // closed e.Inlines#10 as range 21
  // closed e.Drives#9 as range 25
  // closed e.AST#5 as range 29
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Intrinsics#11: 13
  //DEBUG: e.Metatables#12: 17
  //DEBUG: e.Inlines#10: 21
  //DEBUG: e.Drives#9: 25
  //DEBUG: e.AST#5: 29

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=13/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables#12/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines#10/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives#9/25 AsIs: )/28 AsIs: (/31 AsIs: e.AST#5/29 AsIs: )/32 HalfReuse: </1 } & ExtractBaseNames=1/33 </34 & Map@2/35 e.Drives#9/25/36 e.Inlines#10/21/38 e.Metatables#12/17/40 >/42 >/43 >/44 Tile{ ]] }
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z2]);
  refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
  refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
  refalrts::copy_evar(vm, context[40], context[41], context[17], context[18]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A13]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[33], context[44] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12("UpdateDriveInfo=12", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & UpdateDriveInfo=12\1=1/4 (/7 e.Name#13/5 )/8 e.Label#14/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name#13 as range 5
  // closed e.Label#14 as range 2
  //DEBUG: e.Name#13: 5
  //DEBUG: e.Label#14: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-PutLine/4 HalfReuse: 'N'/7 }"ew "/9 Tile{ AsIs: e.Label#14/2 } Tile{ HalfReuse: ' '/8 }"function: "/11 </13 & DisplayName/14 Tile{ AsIs: e.Name#13/5 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[9], context[10], "ew ", 3);
  refalrts::alloc_chars(vm, context[11], context[12], "function: ", 10);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_Logm_PutLine]);
  refalrts::reinit_char(context[7], 'N');
  refalrts::reinit_char(context[8], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12L1A1("UpdateDriveInfo=12\\1=1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12L1A1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & UpdateDriveInfo=11/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Intrinsics#11/13 )/16 (/19 e.Inlines#10/17 )/20 (/23 e.Drives#9/21 )/24 (/27 e.AST#5/25 )/28 e.Metatables#12/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Intrinsics#11 as range 13
  // closed e.Inlines#10 as range 17
  // closed e.Drives#9 as range 21
  // closed e.AST#5 as range 25
  // closed e.Metatables#12 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Intrinsics#11: 13
  //DEBUG: e.Inlines#10: 17
  //DEBUG: e.Drives#9: 21
  //DEBUG: e.AST#5: 25
  //DEBUG: e.Metatables#12: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics#11/13 AsIs: )/16 AsIs: (/19 } e.Metatables#12/2/29 )/31 (/32 Tile{ AsIs: e.Inlines#10/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Drives#9/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST#5/25 AsIs: )/28 } </33 & Map@3/34 e.Drives#9/21/35 e.Inlines#10/17/37 e.Intrinsics#11/13/39 Tile{ AsIs: e.Metatables#12/2 } >/41 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[29], context[30], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z3]);
  refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
  refalrts::copy_evar(vm, context[37], context[38], context[17], context[18]);
  refalrts::copy_evar(vm, context[39], context[40], context[13], context[14]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[32], context[20] );
  refalrts::link_brackets( context[19], context[31] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[20], context[28] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A11("UpdateDriveInfo=11", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A11);


static refalrts::FnResult func_gen_UpdateDriveInfo_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=10/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Inlines#10/13 )/16 (/19 e.Drives#9/17 )/20 (/23 e.AST#5/21 )/24 (/27 e.Metatables#5/25 )/28 e.Intrinsics#11/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Inlines#10 as range 13
  // closed e.Drives#9 as range 17
  // closed e.AST#5 as range 21
  // closed e.Metatables#5 as range 25
  // closed e.Intrinsics#11 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Inlines#10: 13
  //DEBUG: e.Drives#9: 17
  //DEBUG: e.AST#5: 21
  //DEBUG: e.Metatables#5: 25
  //DEBUG: e.Intrinsics#11: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=11/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames#8/9 } )/29 (/30 Tile{ AsIs: e.Intrinsics#11/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inlines#10/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives#9/17 AsIs: )/20 AsIs: (/23 AsIs: e.AST#5/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Metatables#5/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames#8/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A11]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A10("UpdateDriveInfo=10", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A10);


static refalrts::FnResult func_gen_UpdateDriveInfo_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=9/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.Drives#9/13 )/16 (/19 e.AST#5/17 )/20 (/23 e.Metatables#5/21 )/24 (/27 e.Intrinsics#4/25 )/28 e.Inlines#10/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.Drives#9 as range 13
  // closed e.AST#5 as range 17
  // closed e.Metatables#5 as range 21
  // closed e.Intrinsics#4 as range 25
  // closed e.Inlines#10 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.Drives#9: 13
  //DEBUG: e.AST#5: 17
  //DEBUG: e.Metatables#5: 21
  //DEBUG: e.Intrinsics#4: 25
  //DEBUG: e.Inlines#10: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=10/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames#8/9 } )/29 (/30 Tile{ AsIs: e.Inlines#10/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Drives#9/13 AsIs: )/16 AsIs: (/19 AsIs: e.AST#5/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables#5/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Intrinsics#4/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames#8/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A10]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A9("UpdateDriveInfo=9", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A9);


static refalrts::FnResult func_gen_UpdateDriveInfo_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=8/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#8/9 )/12 (/15 e.AST#5/13 )/16 (/19 e.Metatables#5/17 )/20 (/23 e.Intrinsics#4/21 )/24 (/27 e.Inlines#7/25 )/28 e.Drives#9/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#8 as range 9
  // closed e.AST#5 as range 13
  // closed e.Metatables#5 as range 17
  // closed e.Intrinsics#4 as range 21
  // closed e.Inlines#7 as range 25
  // closed e.Drives#9 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#8: 9
  //DEBUG: e.AST#5: 13
  //DEBUG: e.Metatables#5: 17
  //DEBUG: e.Intrinsics#4: 21
  //DEBUG: e.Inlines#7: 25
  //DEBUG: e.Drives#9: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=9/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames#8/9 } )/29 (/30 Tile{ AsIs: e.Drives#9/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.AST#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables#5/17 AsIs: )/20 AsIs: (/23 AsIs: e.Intrinsics#4/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Inlines#7/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames#8/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A9]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A8("UpdateDriveInfo=8", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A8);


static refalrts::FnResult func_gen_UpdateDriveInfo_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=7/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#5/9 )/12 (/15 e.Metatables#5/13 )/16 (/19 e.Intrinsics#4/17 )/20 (/23 e.Inlines#7/21 )/24 (/27 e.Drives#6/25 )/28 e.KnownNames#8/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#5 as range 9
  // closed e.Metatables#5 as range 13
  // closed e.Intrinsics#4 as range 17
  // closed e.Inlines#7 as range 21
  // closed e.Drives#6 as range 25
  // closed e.KnownNames#8 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#5: 9
  //DEBUG: e.Metatables#5: 13
  //DEBUG: e.Intrinsics#4: 17
  //DEBUG: e.Inlines#7: 21
  //DEBUG: e.Drives#6: 25
  //DEBUG: e.KnownNames#8: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=8/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions#1/5 } Tile{ AsIs: )/28 } (/29 Tile{ AsIs: e.KnownNames#8/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics#4/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines#7/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/30 (/31 Tile{ AsIs: e.Drives#6/25 } )/32 (/33 e.KnownNames#8/2/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A8]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[29], context[8] );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[37] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[8], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A7("UpdateDriveInfo=7", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A7);


static refalrts::FnResult func_gen_UpdateDriveInfo_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & UpdateDriveInfo=6/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#5/9 )/12 (/15 e.Metatables#5/13 )/16 (/19 e.Intrinsics#4/17 )/20 (/23 e.Drives#6/21 )/24 (/27 e.KnownNames#1/25 )/28 e.Inlines#7/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#5 as range 9
  // closed e.Metatables#5 as range 13
  // closed e.Intrinsics#4 as range 17
  // closed e.Drives#6 as range 21
  // closed e.KnownNames#1 as range 25
  // closed e.Inlines#7 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#5: 9
  //DEBUG: e.Metatables#5: 13
  //DEBUG: e.Intrinsics#4: 17
  //DEBUG: e.Drives#6: 21
  //DEBUG: e.KnownNames#1: 25
  //DEBUG: e.Inlines#7: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=7/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics#4/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Inlines#7/2 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Drives#6/21 } Tile{ AsIs: )/28 } </29 & Map@4/30 Tile{ AsIs: e.KnownNames#1/25 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A6("UpdateDriveInfo=6", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A6);


static refalrts::FnResult func_gen_UpdateDriveInfo_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=5/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.AST#5/9 )/12 (/15 e.Metatables#5/13 )/16 (/19 e.Intrinsics#4/17 )/20 (/23 e.KnownNames#1/21 )/24 (/27 e.Inlines#3/25 )/28 e.Drives#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.AST#5 as range 9
  // closed e.Metatables#5 as range 13
  // closed e.Intrinsics#4 as range 17
  // closed e.KnownNames#1 as range 21
  // closed e.Inlines#3 as range 25
  // closed e.Drives#6 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.AST#5: 9
  //DEBUG: e.Metatables#5: 13
  //DEBUG: e.Intrinsics#4: 17
  //DEBUG: e.KnownNames#1: 21
  //DEBUG: e.Inlines#3: 25
  //DEBUG: e.Drives#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=6/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics#4/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Drives#6/2 } )/29 (/30 Tile{ AsIs: e.KnownNames#1/21 } )/31 </32 Tile{ HalfReuse: & SetNames-Reject/24 AsIs: (/27 AsIs: e.Inlines#3/25 AsIs: )/28 } (/33 e.Intrinsics#4/17/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[17], context[18]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A6]);
  refalrts::reinit_name(context[24], functions[efunc_SetNamesm_Reject]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[23], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_evar( res, context[24], context[28] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A5("UpdateDriveInfo=5", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A5);


static refalrts::FnResult func_gen_UpdateDriveInfo_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=4/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.Intrinsics#4/9 )/12 (/15 e.KnownNames#1/13 )/16 (/19 e.Inlines#3/17 )/20 (/23 e.Drives#2/21 )/24 (/27 e.Metatables#5/25 )/28 e.AST#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.Intrinsics#4 as range 9
  // closed e.KnownNames#1 as range 13
  // closed e.Inlines#3 as range 17
  // closed e.Drives#2 as range 21
  // closed e.Metatables#5 as range 25
  // closed e.AST#5 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.Intrinsics#4: 9
  //DEBUG: e.KnownNames#1: 13
  //DEBUG: e.Inlines#3: 17
  //DEBUG: e.Drives#2: 21
  //DEBUG: e.Metatables#5: 25
  //DEBUG: e.AST#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=5/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions#1/5 } )/29 (/30 Tile{ AsIs: e.AST#5/2 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Metatables#5/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics#4/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines#3/17 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Drives#2/21 } Tile{ AsIs: )/28 } (/33 e.Intrinsics#4/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A5]);
  refalrts::reinit_open_call(context[23]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[27], context[8] );
  refalrts::link_brackets( context[30], context[24] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A4("UpdateDriveInfo=4", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & UpdateDriveInfo=3/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#1/9 )/12 (/15 e.Inlines#3/13 )/16 (/19 e.Drives#2/17 )/20 (/23 e.Intrinsics#4/21 )/24 e.AST#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#1 as range 9
  // closed e.Inlines#3 as range 13
  // closed e.Drives#2 as range 17
  // closed e.Intrinsics#4 as range 21
  // closed e.AST#4 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#1: 9
  //DEBUG: e.Inlines#3: 13
  //DEBUG: e.Drives#2: 17
  //DEBUG: e.Intrinsics#4: 21
  //DEBUG: e.AST#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=4/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions#1/5 } )/25 (/26 Tile{ AsIs: e.Intrinsics#4/21 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Inlines#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives#2/17 AsIs: )/20 HalfReuse: </23 } & DoMapAccum@4/27 (/28 )/29 (/30 Tile{ AsIs: )/24 AsIs: e.AST#4/2 AsIs: >/1 } >/31 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A4]);
  refalrts::reinit_open_call(context[23]);
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[30], context[24] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[8] );
  refalrts::link_brackets( context[7], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_evar( res, context[27], context[30] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A3("UpdateDriveInfo=3", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A3);


static refalrts::FnResult func_gen_UpdateDriveInfo_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & UpdateDriveInfo=2/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#1/9 )/12 (/15 e.Drives#2/13 )/16 (/19 e.Inlines#3/17 )/20 e.AST#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#1 as range 9
  // closed e.Drives#2 as range 13
  // closed e.Inlines#3 as range 17
  // closed e.AST#3 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#1: 9
  //DEBUG: e.Drives#2: 13
  //DEBUG: e.Inlines#3: 17
  //DEBUG: e.AST#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=3/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#1/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Inlines#3/17 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives#2/13 } )/21 </22 Tile{ HalfReuse: & DoExtractLabels@1/20 AsIs: e.AST#3/2 AsIs: >/1 } >/23 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A3]);
  refalrts::reinit_name(context[20], functions[efunc_gen_DoExtractLabels_Z1]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A2("UpdateDriveInfo=2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & UpdateDriveInfo=1/4 (/7 e.KnownFunctions#1/5 )/8 (/11 e.KnownNames#1/9 )/12 (/15 e.Drives#2/13 )/16 e.AST#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.KnownFunctions#1 as range 5
  // closed e.KnownNames#1 as range 9
  // closed e.Drives#2 as range 13
  // closed e.AST#2 as range 2
  //DEBUG: e.KnownFunctions#1: 5
  //DEBUG: e.KnownNames#1: 9
  //DEBUG: e.Drives#2: 13
  //DEBUG: e.AST#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=2/4 AsIs: (/7 AsIs: e.KnownFunctions#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives#2/13 AsIs: )/16 } </17 & DoExtractLabels@2/18 Tile{ AsIs: e.AST#2/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoExtractLabels_Z2]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A1("UpdateDriveInfo=1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A1);


static refalrts::FnResult func_UpdateDriveInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & UpdateDriveInfo/4 s.OptDrive#1/5 s.OptIntrinsic#1/6 (/9 (/13 e.KnownNames#1/11 )/14 e.KnownFunctions#1/7 )/10 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.KnownNames#1 as range 11
  // closed e.KnownFunctions#1 as range 7
  // closed e.AST#1 as range 2
  //DEBUG: s.OptDrive#1: 5
  //DEBUG: s.OptIntrinsic#1: 6
  //DEBUG: e.KnownNames#1: 11
  //DEBUG: e.KnownFunctions#1: 7
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.OptDrive#1/5 s.OptIntrinsic#1/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=1/4 } (/15 Tile{ AsIs: e.KnownFunctions#1/7 } Tile{ HalfReuse: )/9 AsIs: (/13 AsIs: e.KnownNames#1/11 AsIs: )/14 } </16 Tile{ HalfReuse: & DoExtractLabels@3/10 AsIs: e.AST#1/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A1]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_name(context[10], functions[efunc_gen_DoExtractLabels_Z3]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[10], context[1] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UpdateDriveInfo("UpdateDriveInfo", COOKIE1_, COOKIE2_, func_UpdateDriveInfo);


static refalrts::FnResult func_ExtractLabels(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & ExtractLabels/4 s.Label#1/5 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST#1 as range 2
  //DEBUG: s.Label#1: 5
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@4/4 AsIs: s.Label#1/5 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractLabels("ExtractLabels", COOKIE1_, COOKIE2_, func_ExtractLabels);


static refalrts::FnResult func_DoExtractLabels(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & DoExtractLabels/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoExtractLabels/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & DoExtractLabels/4 s.Label#1/5 (/8 e.FoundLabels#1/14 )/9 (/12 e.Scanned#1/16 )/13 e.AST-B#1/20 (/26 s.Label#1/28 e.Name#1/24 )/27 e.AST-E#1/22 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.FoundLabels#1 as range 14
    // closed e.Scanned#1 as range 16
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[18];
      context[23] = context[19];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[5], context[24], context[25] ) )
        continue;
      // closed e.Name#1 as range 24
      // closed e.AST-E#1 as range 22
      //DEBUG: s.Label#1: 5
      //DEBUG: e.FoundLabels#1: 14
      //DEBUG: e.Scanned#1: 16
      //DEBUG: e.AST-B#1: 20
      //DEBUG: e.Name#1: 24
      //DEBUG: e.AST-E#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label#1/28 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels/4 AsIs: s.Label#1/5 AsIs: (/8 AsIs: e.FoundLabels#1/14 HalfReuse: (/9 HalfReuse: s.Label1 #28/12 } Tile{ AsIs: e.Name#1/24 } Tile{ AsIs: )/13 } )/29 Tile{ AsIs: (/26 } Tile{ AsIs: e.Scanned#1/16 } Tile{ AsIs: e.AST-B#1/20 } Tile{ AsIs: )/27 AsIs: e.AST-E#1/22 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_svar( context[12], context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[8], context[29] );
      refalrts::link_brackets( context[9], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels/4 s.Label#1/5 (/8 e.FoundLabels#1/6 )/9 (/12 e.Scanned#1/10 )/13 e.AST#1/2 >/1
  // closed e.FoundLabels#1 as range 6
  // closed e.Scanned#1 as range 10
  // closed e.AST#1 as range 2
  //DEBUG: s.Label#1: 5
  //DEBUG: e.FoundLabels#1: 6
  //DEBUG: e.Scanned#1: 10
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoExtractLabels/4 s.Label#1/5 {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.FoundLabels#1/6 AsIs: )/9 } Tile{ AsIs: e.Scanned#1/10 } Tile{ AsIs: e.AST#1/2 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoExtractLabels("DoExtractLabels", COOKIE1_, COOKIE2_, func_DoExtractLabels);


static refalrts::FnResult func_ExtractMetatableNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ExtractMetatableNames/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@4/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractMetatableNames("ExtractMetatableNames", COOKIE1_, COOKIE2_, func_ExtractMetatableNames);


static refalrts::FnResult func_SetNamesm_Reject(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & SetNames-Reject/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & SetNames-Reject/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  do {
    // </0 & SetNames-Reject/4 (/7 e.Minuent-B#1/17 (/25 s._M#1/27 e.Name#1/23 )/26 e.Minuent-E#1/19 )/8 (/11 e.Subtr-B#1/28 (/34 s.Label#1/38 e.Name#1/36 )/35 e.Subtr-E#1/30 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      // closed e.Minuent-E#1 as range 19
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e.Name#1 as range 23
      context[28] = 0;
      context[29] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[30] = context[21];
        context[31] = context[22];
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        if( ! refalrts::repeated_evar_right( vm, context[36], context[37], context[23], context[24], context[32], context[33] ) )
          continue;
        // closed e.Subtr-E#1 as range 30
        if( ! refalrts::svar_left( context[38], context[32], context[33] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.Minuent-B#1: 17
        //DEBUG: e.Minuent-E#1: 19
        //DEBUG: s._M#1: 27
        //DEBUG: e.Name#1: 23
        //DEBUG: e.Subtr-B#1: 28
        //DEBUG: e.Subtr-E#1: 30
        //DEBUG: s.Label#1: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} (/25 s._M#1/27 e.Name#1/23 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Minuent-B#1/17 } Tile{ AsIs: </0 AsIs: & SetNames-Reject/4 } Tile{ HalfReuse: (/26 AsIs: e.Minuent-E#1/19 AsIs: )/8 AsIs: (/11 AsIs: e.Subtr-B#1/28 AsIs: (/34 AsIs: s.Label#1/38 AsIs: e.Name#1/36 AsIs: )/35 AsIs: e.Subtr-E#1/30 AsIs: )/12 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[26], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[28], context[29], context[21], context[22] ) );
    } while ( refalrts::open_evar_advance( context[17], context[18], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SetNames-Reject/4 (/7 e.Minuent#1/5 )/8 (/11 e.Subtrahend#1/9 )/12 >/1
  // closed e.Minuent#1 as range 5
  // closed e.Subtrahend#1 as range 9
  //DEBUG: e.Minuent#1: 5
  //DEBUG: e.Subtrahend#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SetNames-Reject/4 (/7 {REMOVED TILE} )/8 (/11 e.Subtrahend#1/9 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Minuent#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SetNamesm_Reject("SetNames-Reject", COOKIE1_, COOKIE2_, func_SetNamesm_Reject);


static refalrts::FnResult func_gen_ExtractBaseNames_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & ExtractBaseNames=1/4 e.BaseOptNames#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.BaseOptNames#2 as range 2
  //DEBUG: e.BaseOptNames#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Unique/4 AsIs: e.BaseOptNames#2/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Unique]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractBaseNames_A1("ExtractBaseNames=1", COOKIE1_, COOKIE2_, func_gen_ExtractBaseNames_A1);


static refalrts::FnResult func_ExtractBaseNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ExtractBaseNames/4 e.OptNames#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.OptNames#1 as range 2
  //DEBUG: e.OptNames#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & ExtractBaseNames=1/6 Tile{ AsIs: </0 Reuse: & Map@2/4 AsIs: e.OptNames#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractBaseNames("ExtractBaseNames", COOKIE1_, COOKIE2_, func_ExtractBaseNames);


static refalrts::FnResult func_gen_ExtractExtractableFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ExtractExtractableFunctions=1/4 (/7 (/11 )/12 e.Extracted#2/5 )/8 e.AST#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Extracted#2 as range 5
  // closed e.AST#2 as range 2
  //DEBUG: e.Extracted#2: 5
  //DEBUG: e.AST#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractExtractableFunctions=1/4 (/7 (/11 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: e.Extracted#2/5 AsIs: )/8 } Tile{ AsIs: e.AST#2/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractExtractableFunctions_A1("ExtractExtractableFunctions=1", COOKIE1_, COOKIE2_, func_gen_ExtractExtractableFunctions_A1);


static refalrts::FnResult func_gen_ExtractExtractableFunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & ExtractExtractableFunctions=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.new#1/9 )/12 e.new#2/5 )/8 t.new#3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 9
  // closed e.new#2 as range 5
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.Names-B#2/27 (/33 s._#2/37 e.Name#2/35 )/34 e.Names-E#2/29 )/12 e.Extracted#2/17 )/8 (/13 # Function/21 s.ScopeClass#2/22 (/25 e.Name#2/23 )/26 e.Body#2/19 )/14 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    context[21] = refalrts::ident_left( identifiers[ident_Function], context[19], context[20] );
    if( ! context[21] )
      continue;
    // closed e.Extracted#2 as range 17
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.Name#2 as range 23
    // closed e.Body#2 as range 19
    context[27] = 0;
    context[28] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[29] = context[15];
      context[30] = context[16];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      if( ! refalrts::repeated_evar_right( vm, context[35], context[36], context[23], context[24], context[31], context[32] ) )
        continue;
      // closed e.Names-E#2 as range 29
      if( ! refalrts::svar_left( context[37], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      //DEBUG: e.Extracted#2: 17
      //DEBUG: s.ScopeClass#2: 22
      //DEBUG: e.Name#2: 23
      //DEBUG: e.Body#2: 19
      //DEBUG: e.Names-B#2: 27
      //DEBUG: e.Names-E#2: 29
      //DEBUG: s._#2: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s._#2/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 } Tile{ AsIs: e.Names-B#2/27 } Tile{ AsIs: e.Names-E#2/29 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Extracted#2/17 } Tile{ AsIs: (/33 } Tile{ HalfReuse: # Function/0 HalfReuse: s.ScopeClass2 #22/4 } (/38 Tile{ AsIs: e.Name#2/35 } Tile{ AsIs: )/34 } e.Body#2/19/39 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/13 AsIs: # Function/21 AsIs: s.ScopeClass#2/22 AsIs: (/25 AsIs: e.Name#2/23 AsIs: )/26 AsIs: e.Body#2/19 AsIs: )/14 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
      refalrts::reinit_ident(context[0], identifiers[ident_Function]);
      refalrts::reinit_svar( context[4], context[22] );
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[33], context[1] );
      refalrts::link_brackets( context[38], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[27], context[28], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.Names#2/9 )/12 e.Extracted#2/5 )/8 t.Other#2/13 >/1
  // closed e.Names#2 as range 9
  // closed e.Extracted#2 as range 5
  //DEBUG: t.Other#2: 13
  //DEBUG: e.Names#2: 9
  //DEBUG: e.Extracted#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractExtractableFunctions=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Names#2/9 AsIs: )/12 AsIs: e.Extracted#2/5 AsIs: )/8 AsIs: t.Other#2/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractExtractableFunctions_A1L1("ExtractExtractableFunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_ExtractExtractableFunctions_A1L1);


static refalrts::FnResult func_ExtractExtractableFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & ExtractExtractableFunctions/4 (/7 e.Names#1/5 )/8 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Names#1 as range 5
  // closed e.AST#1 as range 2
  //DEBUG: e.Names#1: 5
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & ExtractExtractableFunctions=1/10 </11 Tile{ HalfReuse: & DoMapAccum@3/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Names#1/5 AsIs: )/8 } )/12 (/13 )/14 Tile{ AsIs: e.AST#1/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ExtractExtractableFunctions_A1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractExtractableFunctions("ExtractExtractableFunctions", COOKIE1_, COOKIE2_, func_ExtractExtractableFunctions);


static refalrts::FnResult func_gen_ExtractFuncLengths_L1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ExtractFuncLengths\1$1=1/4 (/7 e.Lengths#2/5 )/8 (/11 e.Name#2/9 )/12 s.ScopeClass#2/13 s.SentencesCount#3/14 e.Sentences#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Lengths#2 as range 5
  // closed e.Name#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentences#3 as range 2
  //DEBUG: e.Lengths#2: 5
  //DEBUG: e.Name#2: 9
  //DEBUG: s.ScopeClass#2: 13
  //DEBUG: s.SentencesCount#3: 14
  //DEBUG: e.Sentences#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass#2/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 Tile{ AsIs: e.Lengths#2/5 } (/16 e.Name#2/9/17 Tile{ AsIs: s.SentencesCount#3/14 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } # Function/19 Tile{ HalfReuse: s.ScopeClass2 #13/8 AsIs: (/11 AsIs: e.Name#2/9 AsIs: )/12 } # Sentences/20 Tile{ AsIs: e.Sentences#3/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::copy_evar(vm, context[17], context[18], context[9], context[10]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Function]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Sentences]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_svar( context[8], context[13] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::link_brackets( context[16], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractFuncLengths_L1S1A1("ExtractFuncLengths\\1$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractFuncLengths_L1S1A1);


static refalrts::FnResult func_ExtractFuncLengths(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ExtractFuncLengths/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractFuncLengths("ExtractFuncLengths", COOKIE1_, COOKIE2_, func_ExtractFuncLengths);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & MultiplyRemainderNames=1/4 (/7 e._#2/5 )/8 e.RemainderNames#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e._#2 as range 5
  // closed e.RemainderNames#2 as range 2
  //DEBUG: e._#2: 5
  //DEBUG: e.RemainderNames#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MultiplyRemainderNames=1/4 (/7 e._#2/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.RemainderNames#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1("MultiplyRemainderNames=1", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1L1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & MultiplyRemainderNames=1\1=2/4 (/7 e.BaseName#3/5 )/8 s.Label#2/9 s.StartNum#3/10 e.Lengths-B#4/11 (/17 e.BaseName#3/19 s.SentencesCount#4/21 )/18 e.Lengths-E#4/13 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.BaseName#3 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    if( ! refalrts::repeated_evar_left( vm, context[19], context[20], context[5], context[6], context[15], context[16] ) )
      continue;
    // closed e.Lengths-E#4 as range 13
    if( ! refalrts::svar_left( context[21], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    //DEBUG: e.BaseName#3: 5
    //DEBUG: s.Label#2: 9
    //DEBUG: s.StartNum#3: 10
    //DEBUG: e.Lengths-B#4: 11
    //DEBUG: e.Lengths-E#4: 13
    //DEBUG: s.SentencesCount#4: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label#2/9 s.StartNum#3/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/22 Tile{ AsIs: e.Lengths-B#4/11 } Tile{ AsIs: (/17 AsIs: e.BaseName#3/19 AsIs: s.SentencesCount#4/21 AsIs: )/18 AsIs: e.Lengths-E#4/13 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames/4 HalfReuse: s.Label2 #9/7 AsIs: e.BaseName#3/5 HalfReuse: s.StartNum3 #10/8 } s.SentencesCount#4/21/23 >/24 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_stvar(vm, context[23], context[21]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::update_name(context[4], functions[efunc_GenRemainderFuncNames]);
    refalrts::reinit_svar( context[7], context[9] );
    refalrts::reinit_svar( context[8], context[10] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[1] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1L1A2("MultiplyRemainderNames=1\\1=2", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1L1A2);


static refalrts::FnResult func_MultiplyRemainderNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & MultiplyRemainderNames/4 (/7 e.Lengths#1/5 )/8 e.FuncNames#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Lengths#1 as range 5
  // closed e.FuncNames#1 as range 2
  //DEBUG: e.Lengths#1: 5
  //DEBUG: e.FuncNames#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & MultiplyRemainderNames=1/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.Lengths#1/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.FuncNames#1/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MultiplyRemainderNames("MultiplyRemainderNames", COOKIE1_, COOKIE2_, func_MultiplyRemainderNames);


static refalrts::FnResult func_gen_FormatOptFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & FormatOptFunctions=1/4 (/7 e._#2/5 )/8 e.OptFunctions#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e._#2 as range 5
  // closed e.OptFunctions#2 as range 2
  //DEBUG: e._#2: 5
  //DEBUG: e.OptFunctions#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FormatOptFunctions=1/4 (/7 e._#2/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFunctions#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FormatOptFunctions_A1("FormatOptFunctions=1", COOKIE1_, COOKIE2_, func_gen_FormatOptFunctions_A1);


static refalrts::FnResult func_gen_FormatOptFunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FormatOptFunctions=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FormatOptFunctions=1\1/4 (/7 e.new#1/5 )/8 (/11 # Function/13 s.new#2/14 (/17 e.new#3/15 )/18 s.new#4/19 e.new#5/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_Function], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[9], context[10] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#3 as range 15
  if( ! refalrts::svar_left( context[19], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 9
  do {
    // </0 & FormatOptFunctions=1\1/4 (/7 e.Names-B#2/26 (/32 # Metatable/34 e.Name#2/35 )/33 e.Names-E#2/28 )/8 (/11 # Function/13 s.ScopeClass#2/14 (/17 e.Name#2/22 )/18 # Metatable/19 e.Body#2/24 )/12 >/1
    context[20] = context[5];
    context[21] = context[6];
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[9];
    context[25] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[19] ) )
      continue;
    // closed e.Name#2 as range 22
    // closed e.Body#2 as range 24
    context[26] = 0;
    context[27] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[28] = context[20];
      context[29] = context[21];
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Metatable], context[30], context[31] );
      if( ! context[34] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[35], context[36], context[22], context[23], context[30], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Names-E#2 as range 28
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.Name#2: 22
      //DEBUG: e.Body#2: 24
      //DEBUG: e.Names-B#2: 26
      //DEBUG: e.Names-E#2: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & FormatOptFunctions=1\1/4 (/7 {REMOVED TILE} (/32 # Metatable/34 e.Name#2/35 )/33 {REMOVED TILE} {REMOVED TILE} s.ScopeClass#2/14 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Names-B#2/26 } Tile{ AsIs: e.Names-E#2/28 } Tile{ AsIs: )/8 AsIs: (/11 Reuse: # Metatable/13 } Tile{ AsIs: (/17 AsIs: e.Name#2/22 AsIs: )/18 AsIs: # Metatable/19 AsIs: e.Body#2/24 AsIs: )/12 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_ident(context[13], identifiers[ident_Metatable]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[12] );
      res = refalrts::splice_evar( res, context[8], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[26], context[27], context[20], context[21] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatOptFunctions=1\1/4 (/7 e.Names-B#2/20 (/26 s.Label#2/30 e.Name#2/28 )/27 e.Names-E#2/22 )/8 (/11 # Function/13 s.ScopeClass#2/14 (/17 e.Name#2/15 )/18 # Sentences/19 e.Sentences#2/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_Sentences], context[19] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#2 as range 15
  // closed e.Sentences#2 as range 9
  context[20] = 0;
  context[21] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[22] = context[5];
    context[23] = context[6];
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[15], context[16], context[24], context[25] ) )
      continue;
    // closed e.Names-E#2 as range 22
    if( ! refalrts::svar_left( context[30], context[24], context[25] ) )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    //DEBUG: s.ScopeClass#2: 14
    //DEBUG: e.Name#2: 15
    //DEBUG: e.Sentences#2: 9
    //DEBUG: e.Names-B#2: 20
    //DEBUG: e.Names-E#2: 22
    //DEBUG: s.Label#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & FormatOptFunctions=1\1/4 (/7 {REMOVED TILE} (/26 s.Label#2/30 e.Name#2/28 )/27 {REMOVED TILE} {REMOVED TILE} s.ScopeClass#2/14 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Names-B#2/20 } Tile{ AsIs: e.Names-E#2/22 } Tile{ AsIs: )/8 AsIs: (/11 HalfReuse: s.Label2 #30/13 } Tile{ AsIs: (/17 AsIs: e.Name#2/15 AsIs: )/18 AsIs: # Sentences/19 AsIs: e.Sentences#2/9 AsIs: )/12 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[13], context[30] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[12] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[20], context[21], context[5], context[6] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_FormatOptFunctions_A1L1("FormatOptFunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_FormatOptFunctions_A1L1);


static refalrts::FnResult func_FormatOptFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & FormatOptFunctions/4 (/7 e.OptNames#1/5 )/8 e.Functions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptNames#1 as range 5
  // closed e.Functions#1 as range 2
  //DEBUG: e.OptNames#1: 5
  //DEBUG: e.Functions#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FormatOptFunctions=1/4 HalfReuse: </7 } & MapAccum@1/9 (/10 </11 & ExtractBaseNames=1/12 </13 & Map@2/14 Tile{ AsIs: e.OptNames#1/5 } >/15 >/16 Tile{ AsIs: )/8 AsIs: e.Functions#1/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[10], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatOptFunctions("FormatOptFunctions", COOKIE1_, COOKIE2_, func_FormatOptFunctions);


static refalrts::FnResult func_HashSet(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & HashSet/4 e.Names#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Names#1 as range 2
  //DEBUG: e.Names#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoHashSet/6 Tile{ AsIs: </0 Reuse: & Map@5/4 AsIs: e.Names#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_DoHashSet]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HashSet("HashSet", COOKIE1_, COOKIE2_, func_HashSet);


static refalrts::FnResult func_BUCKETm_SIZE(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BUCKET-SIZE/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BUCKET-SIZE/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 101/1 ]] }
  refalrts::reinit_number(context[1], 101UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BUCKETm_SIZE("BUCKET-SIZE", COOKIE1_, COOKIE2_, func_BUCKETm_SIZE);


static refalrts::FnResult func_gen_DoHashSet_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & DoHashSet$1=1/4 e.Names#2/2 (/7 e.Bucket#2/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Names#2 as range 2
  // closed e.Bucket#2 as range 5
  //DEBUG: e.Names#2: 2
  //DEBUG: e.Bucket#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Bucket#2/5 AsIs: )/8 HalfReuse: </1 } Tile{ Reuse: & DoHashSet/4 } Tile{ AsIs: e.Names#2/2 } Tile{ HalfReuse: >/0 } Tile{ ]] }
  refalrts::reinit_open_call(context[1]);
  refalrts::update_name(context[4], functions[efunc_DoHashSet]);
  refalrts::reinit_close_call(context[0]);
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSet_S1A1("DoHashSet$1=1", COOKIE1_, COOKIE2_, func_gen_DoHashSet_S1A1);


static refalrts::FnResult func_DoHashSet(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DoHashSet/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoHashSet/4 (/9 s.Hash#1/11 e.Name#1/7 )/10 e.Names#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.Names#1 as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.Name#1 as range 7
    //DEBUG: e.Names#1: 5
    //DEBUG: s.Hash#1: 11
    //DEBUG: e.Name#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoHashSet$1=1/4 HalfReuse: </9 } & DoHashSet-DoFillBucket@1/12 (/13 Tile{ AsIs: e.Names#1/5 } )/14 Tile{ AsIs: s.Hash#1/11 AsIs: e.Name#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoHashSetm_DoFillBucket_Z1]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_gen_DoHashSet_S1A1]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoHashSet/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoHashSet("DoHashSet", COOKIE1_, COOKIE2_, func_DoHashSet);


static refalrts::FnResult func_DoHashSetm_DoFillBucket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoHashSet-DoFillBucket/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoHashSet-DoFillBucket/4 e.new#1/2 (/7 s.new#2/9 e.new#3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 5
  do {
    // </0 & DoHashSet-DoFillBucket/4 e.Names-OtherHash#1/14 (/20 s.Hash#1/22 e.Name#1/18 )/21 e.UnscannedNames#1/16 (/7 s.Hash#1/9 e.Bucket#1/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    // closed e.Bucket#1 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_stvar_left( vm, context[22], context[9], context[18], context[19] ) )
        continue;
      // closed e.Name#1 as range 18
      // closed e.UnscannedNames#1 as range 16
      //DEBUG: s.Hash#1: 9
      //DEBUG: e.Bucket#1: 12
      //DEBUG: e.Names-OtherHash#1: 14
      //DEBUG: e.Name#1: 18
      //DEBUG: e.UnscannedNames#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash#1/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/14 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DoHashSet-DoFillBucket/21 AsIs: e.UnscannedNames#1/16 AsIs: (/7 AsIs: s.Hash#1/9 AsIs: e.Bucket#1/12 HalfReuse: (/8 } Tile{ AsIs: e.Name#1/18 } Tile{ HalfReuse: )/20 } Tile{ HalfReuse: )/4 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[21], functions[efunc_DoHashSetm_DoFillBucket]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[8], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket/4 e.Names-OtherHash#1/2 (/7 s.Hash#1/9 e.Bucket#1/5 )/8 >/1
  // closed e.Names-OtherHash#1 as range 2
  // closed e.Bucket#1 as range 5
  //DEBUG: s.Hash#1: 9
  //DEBUG: e.Names-OtherHash#1: 2
  //DEBUG: e.Bucket#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoHashSet-DoFillBucket/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/2 } Tile{ AsIs: (/7 AsIs: s.Hash#1/9 AsIs: e.Bucket#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoHashSetm_DoFillBucket("DoHashSet-DoFillBucket", COOKIE1_, COOKIE2_, func_DoHashSetm_DoFillBucket);


static refalrts::FnResult func_HashSetm_AsChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & HashSet-AsChain/4 e.HashSet#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.HashSet#1 as range 2
  //DEBUG: e.HashSet#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.HashSet#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HashSetm_AsChain("HashSet-AsChain", COOKIE1_, COOKIE2_, func_HashSetm_AsChain);


static refalrts::FnResult func_OptTreem_Drive(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & OptTree-Drive/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptTree-Drive/4 (/7 s.new#1/9 s.new#2/10 )/8 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptTree-Drive/4 (/7 # NoOpt/9 # NoOpt/10 )/8 e.AST#1/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[10] ) )
      continue;
    // closed e.AST#1 as range 11
    //DEBUG: e.AST#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptTree-Drive/4 (/7 # NoOpt/9 # NoOpt/10 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Drive/4 (/7 s.OptDrive#1/9 s.OptIntrinsic#1/10 )/8 e.AST-B#1/11 (/17 # DriveInfo/19 e.DriveInfo#1/15 )/18 e.AST-E#1/13 >/1
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = refalrts::ident_left( identifiers[ident_DriveInfo], context[15], context[16] );
    if( ! context[19] )
      continue;
    // closed e.DriveInfo#1 as range 15
    // closed e.AST-E#1 as range 13
    //DEBUG: s.OptDrive#1: 9
    //DEBUG: s.OptIntrinsic#1: 10
    //DEBUG: e.AST-B#1: 11
    //DEBUG: e.DriveInfo#1: 15
    //DEBUG: e.AST-E#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/17 # DriveInfo/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick/4 AsIs: (/7 } Tile{ AsIs: e.DriveInfo#1/15 } Tile{ AsIs: )/18 } Tile{ AsIs: e.AST-B#1/11 } Tile{ AsIs: e.AST-E#1/13 } Tile{ AsIs: s.OptDrive#1/9 AsIs: s.OptIntrinsic#1/10 HalfReuse: >/8 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DriveInlineOptimizerTick]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_OptTreem_Drive("OptTree-Drive", 0U, 0U, func_OptTreem_Drive);


static refalrts::FnResult func_OptSwitch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & OptSwitch/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSwitch/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSwitch/4 # OptDrive/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptDrive/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Drive/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Drive]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSwitch/4 # OptInline/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptInline/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Inline/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Inline]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSwitch/4 # OptIntrinsic/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptIntrinsic/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Intrinsic/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Intrinsic]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSwitch/4 # NoOpt/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # NoOpt/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # None/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_None]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSwitch("OptSwitch", COOKIE1_, COOKIE2_, func_OptSwitch);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DriveInlineOptimizerTick=5/4 (/7 e.OptNames#4/5 )/8 (/11 e.OptInfo#4/9 )/12 (/15 e.NewFunctions#6/13 )/16 e.AST#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptNames#4 as range 5
  // closed e.OptInfo#4 as range 9
  // closed e.NewFunctions#6 as range 13
  // closed e.AST#6 as range 2
  //DEBUG: e.OptNames#4: 5
  //DEBUG: e.OptInfo#4: 9
  //DEBUG: e.NewFunctions#6: 13
  //DEBUG: e.AST#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 AsIs: e.OptNames#4/5 AsIs: )/8 } Tile{ AsIs: e.OptInfo#4/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.AST#6/2 } Tile{ AsIs: e.NewFunctions#6/13 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A5("DriveInlineOptimizerTick=5", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A5);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A5L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DriveInlineOptimizerTick=5\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.new#7/11 )/8 (/9 s.new#3/15 s.new#4/16 t.new#5/17 e.new#6/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#7 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    context[18] = refalrts::tvar_left( context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.News-B#6/25 (/31 # Function/33 s.ScopeClass#6/34 (/37 e.Name#6/39 )/38 e._#6/29 )/32 e.News-E#6/27 )/8 (/9 # Function/15 s.ScopeClass#6/16 (/17 e.Name#6/23 )/18 e.Body#6/21 )/10 >/1
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[13];
      context[22] = context[14];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Function], context[15] ) )
        continue;
      // closed e.Name#6 as range 23
      // closed e.Body#6 as range 21
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        context[33] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[33] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[34], context[16], context[29], context[30] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[29], context[30] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[23], context[24], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        // closed e._#6 as range 29
        // closed e.News-E#6 as range 27
        //DEBUG: s.ScopeClass#6: 16
        //DEBUG: e.Name#6: 23
        //DEBUG: e.Body#6: 21
        //DEBUG: e.News-B#6: 25
        //DEBUG: e._#6: 29
        //DEBUG: e.News-E#6: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=5\1/4 (/7 {REMOVED TILE} (/31 # Function/33 s.ScopeClass#6/34 (/37 e.Name#6/39 )/38 e._#6/29 )/32 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.News-B#6/25 } Tile{ AsIs: e.News-E#6/27 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Function/15 AsIs: s.ScopeClass#6/16 AsIs: (/17 AsIs: e.Name#6/23 AsIs: )/18 AsIs: e.Body#6/21 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[10] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[25], context[26], context[19], context[20] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.News-B#6/27 (/33 # Function/35 s.ScopeClass#6/36 (/39 e.Name#6/41 )/40 e._#6/31 )/34 e.News-E#6/29 )/8 (/9 # ColdFunction/15 s.ColdBy#6/16 s.ScopeClass#6/17 (/25 e.Name#6/23 )/26 e.Body#6/21 )/10 >/1
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::svar_term( context[17], context[17] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_ColdFunction], context[15] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.Name#6 as range 23
    // closed e.Body#6 as range 21
    context[27] = 0;
    context[28] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[29] = context[19];
      context[30] = context[20];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = refalrts::ident_left( identifiers[ident_Function], context[31], context[32] );
      if( ! context[35] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[36], context[17], context[31], context[32] ) )
        continue;
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[23], context[24], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e._#6 as range 31
      // closed e.News-E#6 as range 29
      //DEBUG: s.ScopeClass#6: 17
      //DEBUG: s.ColdBy#6: 16
      //DEBUG: e.Name#6: 23
      //DEBUG: e.Body#6: 21
      //DEBUG: e.News-B#6: 27
      //DEBUG: e._#6: 31
      //DEBUG: e.News-E#6: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=5\1/4 (/7 {REMOVED TILE} (/33 # Function/35 s.ScopeClass#6/36 (/39 e.Name#6/41 )/40 e._#6/31 )/34 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.News-B#6/27 } Tile{ AsIs: e.News-E#6/29 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # ColdFunction/15 AsIs: s.ColdBy#6/16 AsIs: s.ScopeClass#6/17 AsIs: (/25 AsIs: e.Name#6/23 AsIs: )/26 AsIs: e.Body#6/21 AsIs: )/10 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[27], context[28], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.NewFunctions#6/5 )/8 t.Other#6/9 >/1
  // closed e.NewFunctions#6 as range 5
  //DEBUG: t.Other#6: 9
  //DEBUG: e.NewFunctions#6: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=5\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.NewFunctions#6/5 AsIs: )/8 AsIs: t.Other#6/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A5L1("DriveInlineOptimizerTick=5\\1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A5L1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DriveInlineOptimizerTick=4/4 (/7 e.OptNames#4/5 )/8 (/11 e.OptInfo#4/9 )/12 (/15 e.NewFunctions#5/13 )/16 e.AST#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptNames#4 as range 5
  // closed e.OptInfo#4 as range 9
  // closed e.NewFunctions#5 as range 13
  // closed e.AST#5 as range 2
  //DEBUG: e.OptNames#4: 5
  //DEBUG: e.OptInfo#4: 9
  //DEBUG: e.NewFunctions#5: 13
  //DEBUG: e.AST#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=5/4 AsIs: (/7 AsIs: e.OptNames#4/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptInfo#4/9 AsIs: )/12 HalfReuse: </15 } & DoMapAccum@5/17 (/18 Tile{ AsIs: e.NewFunctions#5/13 } )/19 (/20 Tile{ AsIs: )/16 AsIs: e.AST#5/2 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A4("DriveInlineOptimizerTick=4", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A4);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A4L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DriveInlineOptimizerTick=4\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.new#6/11 )/8 (/9 # NewFunction/15 s.new#3/16 (/19 e.new#4/17 )/20 e.new#5/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_NewFunction], context[13], context[14] );
    if( ! context[15] )
      continue;
    // closed e.new#6 as range 11
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.new#4 as range 17
    // closed e.new#5 as range 13
    do {
      // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.News-B#5/27 (/33 # Function/35 s.ScopeClass#5/36 (/39 e.Name#5/41 )/40 e.Body#5/31 )/34 e.News-E#5/29 )/8 (/9 # NewFunction/15 s.ScopeClass#5/16 (/19 e.Name#5/23 )/20 e._#5/25 )/10 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[13];
      context[26] = context[14];
      // closed e.Name#5 as range 23
      // closed e._#5 as range 25
      context[27] = 0;
      context[28] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[29] = context[21];
        context[30] = context[22];
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        context[35] = refalrts::ident_left( identifiers[ident_Function], context[31], context[32] );
        if( ! context[35] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[36], context[16], context[31], context[32] ) )
          continue;
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[23], context[24], context[37], context[38] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Body#5 as range 31
        // closed e.News-E#5 as range 29
        //DEBUG: s.ScopeClass#5: 16
        //DEBUG: e.Name#5: 23
        //DEBUG: e._#5: 25
        //DEBUG: e.News-B#5: 27
        //DEBUG: e.Body#5: 31
        //DEBUG: e.News-E#5: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=4\1/4 {REMOVED TILE} (/9 # NewFunction/15 s.ScopeClass#5/16 (/19 e.Name#5/23 )/20 e._#5/25 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.News-B#5/27 AsIs: (/33 AsIs: # Function/35 AsIs: s.ScopeClass#5/36 AsIs: (/39 AsIs: e.Name#5/41 AsIs: )/40 AsIs: e.Body#5/31 AsIs: )/34 AsIs: e.News-E#5/29 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[27], context[28], context[21], context[22] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.NewFunctions#5/21 )/8 (/9 # NewFunction/15 s.ScopeClass#5/16 (/19 e.Name#5/23 )/20 e.Body#5/25 )/10 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[13];
    context[26] = context[14];
    // closed e.NewFunctions#5 as range 21
    // closed e.Name#5 as range 23
    // closed e.Body#5 as range 25
    //DEBUG: s.ScopeClass#5: 16
    //DEBUG: e.NewFunctions#5: 21
    //DEBUG: e.Name#5: 23
    //DEBUG: e.Body#5: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=4\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.NewFunctions#5/21 } Tile{ AsIs: (/9 Reuse: # Function/15 AsIs: s.ScopeClass#5/16 AsIs: (/19 AsIs: e.Name#5/23 AsIs: )/20 AsIs: e.Body#5/25 AsIs: )/10 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_ident(context[15], identifiers[ident_Function]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.NewFunctions#5/5 )/8 t.Other#5/9 >/1
  // closed e.NewFunctions#5 as range 5
  //DEBUG: t.Other#5: 9
  //DEBUG: e.NewFunctions#5: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=4\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.NewFunctions#5/5 AsIs: )/8 AsIs: t.Other#5/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A4L1("DriveInlineOptimizerTick=4\\1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A4L1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DriveInlineOptimizerTick=3/4 (/7 (/11 e.OptNames#4/9 )/12 t.Metatables#4/13 e.OptInfo#4/5 )/8 e.AST#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OptNames#4 as range 9
  // closed e.AST#4 as range 2
  context[14] = refalrts::tvar_left( context[13], context[5], context[6] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptInfo#4 as range 5
  //DEBUG: e.OptNames#4: 9
  //DEBUG: e.AST#4: 2
  //DEBUG: t.Metatables#4: 13
  //DEBUG: e.OptInfo#4: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Metatables#4/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DriveInlineOptimizerTick=4/7 AsIs: (/11 AsIs: e.OptNames#4/9 AsIs: )/12 } (/15 Tile{ AsIs: e.OptInfo#4/5 } )/16 Tile{ AsIs: </0 } & DoMapAccum@6/17 (/18 )/19 (/20 Tile{ AsIs: )/8 AsIs: e.AST#4/2 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z6]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_DriveInlineOptimizerTick_A4]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A3("DriveInlineOptimizerTick=3", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A3);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DriveInlineOptimizerTick=2/4 t.Mode#2/5 (/9 e.AST#1/7 )/10 t.OptInfo#3/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.AST#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Mode#2: 5
  //DEBUG: e.AST#1: 7
  //DEBUG: t.OptInfo#3: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 } </13 & DoMapAccum@7/14 Tile{ AsIs: t.Mode#2/5 } Tile{ AsIs: t.OptInfo#3/11 } (/15 Tile{ HalfReuse: )/9 AsIs: e.AST#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2("DriveInlineOptimizerTick=2", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DriveInlineOptimizerTick=1/4 (/7 e.AST#1/5 )/8 (/11 e.OptNames#1/9 )/12 (/15 e.OptInfo#1/13 )/16 t.Mode#2/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.AST#1 as range 5
  // closed e.OptNames#1 as range 9
  // closed e.OptInfo#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.AST#1: 5
  //DEBUG: e.OptNames#1: 9
  //DEBUG: e.OptInfo#1: 13
  //DEBUG: t.Mode#2: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=2/4 } Tile{ AsIs: t.Mode#2/17 } Tile{ AsIs: (/7 AsIs: e.AST#1/5 AsIs: )/8 AsIs: (/11 } (/19 Tile{ AsIs: e.OptNames#1/9 } )/20 </21 & DoMapAccum@8/22 (/23 # Metatables/24 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 } Tile{ AsIs: e.OptInfo#1/13 } >/25 )/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Metatables]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[23], context[12] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A1("DriveInlineOptimizerTick=1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A1);


static refalrts::FnResult func_DriveInlineOptimizerTick(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DriveInlineOptimizerTick/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new#1/9 )/12 e.new#2/5 )/8 e.new#3/2 s.new#4/14 s.new#5/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 9
  // closed e.new#2 as range 5
  if( ! refalrts::svar_right( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new#9/15 )/12 e.new#8/17 )/8 e.new#7/19 # OptDrive/14 s.new#6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[14] ) )
      continue;
    // closed e.new#9 as range 15
    // closed e.new#8 as range 17
    // closed e.new#7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptDrive/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@1/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z1]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptDrive/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@2/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z2]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptDrive/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@3/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z3]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptDrive/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@4/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z4]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptDrive/14 s.OptIntrinsic#1/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames#1 as range 21
    // closed e.OptInfo#1 as range 23
    // closed e.AST#1 as range 25
    //DEBUG: s.OptIntrinsic#1: 13
    //DEBUG: e.OptNames#1: 21
    //DEBUG: e.OptInfo#1: 23
    //DEBUG: e.AST#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo#1/23 } )/28 (/29 # Drive/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic#1/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Drive]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new#9/15 )/12 e.new#8/17 )/8 e.new#7/19 # OptInline/14 s.new#6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[14] ) )
      continue;
    // closed e.new#9 as range 15
    // closed e.new#8 as range 17
    // closed e.new#7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptInline/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@5/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z5]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptInline/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@6/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z6]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptInline/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@7/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z7]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptInline/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@8/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z8]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptInline/14 s.OptIntrinsic#1/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames#1 as range 21
    // closed e.OptInfo#1 as range 23
    // closed e.AST#1 as range 25
    //DEBUG: s.OptIntrinsic#1: 13
    //DEBUG: e.OptNames#1: 21
    //DEBUG: e.OptInfo#1: 23
    //DEBUG: e.AST#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo#1/23 } )/28 (/29 # Inline/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic#1/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Inline]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new#9/15 )/12 e.new#8/17 )/8 e.new#7/19 # OptIntrinsic/14 s.new#6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[14] ) )
      continue;
    // closed e.new#9 as range 15
    // closed e.new#8 as range 17
    // closed e.new#7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptIntrinsic/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@9/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z9]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptIntrinsic/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@10/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z10]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptIntrinsic/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@11/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z11]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptIntrinsic/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@12/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z12]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # OptIntrinsic/14 s.OptIntrinsic#1/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames#1 as range 21
    // closed e.OptInfo#1 as range 23
    // closed e.AST#1 as range 25
    //DEBUG: s.OptIntrinsic#1: 13
    //DEBUG: e.OptNames#1: 21
    //DEBUG: e.OptInfo#1: 23
    //DEBUG: e.AST#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo#1/23 } )/28 (/29 # Intrinsic/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic#1/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Intrinsic]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new#9/15 )/12 e.new#8/17 )/8 e.new#7/19 # NoOpt/14 s.new#6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[14] ) )
      continue;
    // closed e.new#9 as range 15
    // closed e.new#8 as range 17
    // closed e.new#7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # NoOpt/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@13/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z13]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # NoOpt/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@14/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z14]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # NoOpt/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@15/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z15]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # NoOpt/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames#1 as range 21
      // closed e.OptInfo#1 as range 23
      // closed e.AST#1 as range 25
      //DEBUG: e.OptNames#1: 21
      //DEBUG: e.OptInfo#1: 23
      //DEBUG: e.AST#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@16/27 (/28 Tile{ AsIs: e.AST#1/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo#1/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z16]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/21 )/12 e.OptInfo#1/23 )/8 e.AST#1/25 # NoOpt/14 s.OptIntrinsic#1/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames#1 as range 21
    // closed e.OptInfo#1 as range 23
    // closed e.AST#1 as range 25
    //DEBUG: s.OptIntrinsic#1: 13
    //DEBUG: e.OptNames#1: 21
    //DEBUG: e.OptInfo#1: 23
    //DEBUG: e.AST#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo#1/23 } )/28 (/29 # None/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic#1/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_None]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/15 )/12 e.OptInfo#1/17 )/8 e.AST#1/19 s.OptDrive#1/14 # OptDrive/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
      continue;
    // closed e.OptNames#1 as range 15
    // closed e.OptInfo#1 as range 17
    // closed e.AST#1 as range 19
    //DEBUG: s.OptDrive#1: 14
    //DEBUG: e.OptNames#1: 15
    //DEBUG: e.OptInfo#1: 17
    //DEBUG: e.AST#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo#1/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive#1/14 } >/26 # Drive/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Drive]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/15 )/12 e.OptInfo#1/17 )/8 e.AST#1/19 s.OptDrive#1/14 # OptInline/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
      continue;
    // closed e.OptNames#1 as range 15
    // closed e.OptInfo#1 as range 17
    // closed e.AST#1 as range 19
    //DEBUG: s.OptDrive#1: 14
    //DEBUG: e.OptNames#1: 15
    //DEBUG: e.OptInfo#1: 17
    //DEBUG: e.AST#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo#1/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive#1/14 } >/26 # Inline/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Inline]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/15 )/12 e.OptInfo#1/17 )/8 e.AST#1/19 s.OptDrive#1/14 # OptIntrinsic/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
      continue;
    // closed e.OptNames#1 as range 15
    // closed e.OptInfo#1 as range 17
    // closed e.AST#1 as range 19
    //DEBUG: s.OptDrive#1: 14
    //DEBUG: e.OptNames#1: 15
    //DEBUG: e.OptInfo#1: 17
    //DEBUG: e.AST#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo#1/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive#1/14 } >/26 # Intrinsic/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Intrinsic]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/15 )/12 e.OptInfo#1/17 )/8 e.AST#1/19 s.OptDrive#1/14 # NoOpt/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
      continue;
    // closed e.OptNames#1 as range 15
    // closed e.OptInfo#1 as range 17
    // closed e.AST#1 as range 19
    //DEBUG: s.OptDrive#1: 14
    //DEBUG: e.OptNames#1: 15
    //DEBUG: e.OptInfo#1: 17
    //DEBUG: e.AST#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo#1/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive#1/14 } >/26 # None/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_None]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames#1/9 )/12 e.OptInfo#1/5 )/8 e.AST#1/2 s.OptDrive#1/14 s.OptIntrinsic#1/13 >/1
  // closed e.OptNames#1 as range 9
  // closed e.OptInfo#1 as range 5
  // closed e.AST#1 as range 2
  //DEBUG: s.OptDrive#1: 14
  //DEBUG: s.OptIntrinsic#1: 13
  //DEBUG: e.OptNames#1: 9
  //DEBUG: e.OptInfo#1: 5
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST#1/2 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames#1/9 AsIs: )/12 } (/15 Tile{ AsIs: e.OptInfo#1/5 } )/16 (/17 </18 & OptSwitch*4/19 Tile{ AsIs: s.OptDrive#1/14 } >/20 </21 & OptSwitch*4/22 Tile{ AsIs: s.OptIntrinsic#1/13 AsIs: >/1 } )/23 >/24 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_OptSwitch_D4]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_OptSwitch_D4]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DriveInlineOptimizerTick("DriveInlineOptimizerTick", COOKIE1_, COOKIE2_, func_DriveInlineOptimizerTick);


static refalrts::FnResult func_IsPassiveCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & IsPassiveCall/4 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr#1 as range 2
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Reduce@2/0 HalfReuse: # True/4 AsIs: e.Expr#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z2]);
  refalrts::reinit_ident(context[4], identifiers[ident_True]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPassiveCall("IsPassiveCall", COOKIE1_, COOKIE2_, func_IsPassiveCall);


static refalrts::FnResult func_IsPassiveCallm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsPassiveCall-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & IsPassiveCall-Aux/4 t.new#1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsPassiveCall-Aux/4 (/5 s.new#2/9 e.new#3/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new#3 as range 7
    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # Brackets/9 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[9] ) )
        continue;
      // closed e.Expr#1 as range 10
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # Brackets/9 {REMOVED TILE} )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 HalfReuse: # True/5 } Tile{ AsIs: e.Expr#1/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
      refalrts::reinit_ident(context[5], identifiers[ident_True]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # ADT-Brackets/9 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
        continue;
      // closed e.Expr#1 as range 10
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # ADT-Brackets/9 {REMOVED TILE} )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 HalfReuse: # True/5 } Tile{ AsIs: e.Expr#1/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
      refalrts::reinit_ident(context[5], identifiers[ident_True]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # CallBrackets/9 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[9] ) )
        continue;
      // closed e.Expr#1 as range 10
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 (/5 # CallBrackets/9 e.Expr#1/10 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsPassiveCall-Aux/4 (/5 # ColdCallBrackets/9 e.Expr#1/10 )/6 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[9] ) )
      continue;
    // closed e.Expr#1 as range 10
    //DEBUG: e.Expr#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 (/5 # ColdCallBrackets/9 e.Expr#1/10 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsPassiveCall-Aux/4 t.Other#1/5 >/1
  //DEBUG: t.Other#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 t.Other#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPassiveCallm_Aux("IsPassiveCall-Aux", COOKIE1_, COOKIE2_, func_IsPassiveCallm_Aux);


static refalrts::FnResult func_gen_IsLexpr_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & IsLexpr:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & IsLexpr:1/4 e.Res-B#2/7 # OpenE/11 e.Res-E#2/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_left( identifiers[ident_OpenE], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Res-E#2 as range 9
      //DEBUG: e.Res-B#2: 7
      //DEBUG: e.Res-E#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Res-B#2/7 # OpenE/11 e.Res-E#2/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsLexpr:1/4 e.Res-B#2/7 (/13 s.Mode#2/15 e.Index#2/11 )/14 e.Res-M#2/16 (/22 s.Mode#2/24 e.Index#2/25 )/23 e.Res-E#2/18 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      // closed e.Index#2 as range 11
      context[16] = 0;
      context[17] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[18] = context[9];
        context[19] = context[10];
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
        if( ! context[22] )
          continue;
        refalrts::bracket_pointers(context[22], context[23]);
        if( ! refalrts::repeated_stvar_left( vm, context[24], context[15], context[20], context[21] ) )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[25], context[26], context[11], context[12], context[20], context[21] ) )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Res-E#2 as range 18
        //DEBUG: e.Res-B#2: 7
        //DEBUG: s.Mode#2: 15
        //DEBUG: e.Index#2: 11
        //DEBUG: e.Res-M#2: 16
        //DEBUG: e.Res-E#2: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Res-B#2/7 (/13 s.Mode#2/15 e.Index#2/11 )/14 e.Res-M#2/16 (/22 s.Mode#2/24 e.Index#2/25 )/23 e.Res-E#2/18 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[16], context[17], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsLexpr:1/4 e.Other#2/2 >/1
  // closed e.Other#2 as range 2
  //DEBUG: e.Other#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Other#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsLexpr_B1("IsLexpr:1", COOKIE1_, COOKIE2_, func_gen_IsLexpr_B1);


static refalrts::FnResult func_IsLexpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IsLexpr/4 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr#1 as range 2
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & IsLexpr:1/6 Tile{ AsIs: </0 Reuse: & IsLexpr-Aux/4 AsIs: e.Expr#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_IsLexpr_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsLexpr("IsLexpr", COOKIE1_, COOKIE2_, func_IsLexpr);


static refalrts::FnResult func_IsLexprm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & IsLexpr-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & IsLexpr-Aux/4 e.Expr-B#1/7 (/13 # TkVariable/15 'e'/16 e.Index1#1/11 )/14 e.Expr-M#1/17 (/23 # TkVariable/25 'e'/26 e.Index2#1/21 )/24 e.Expr-E#1/19 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_TkVariable], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e.Index1#1 as range 11
      context[17] = 0;
      context[18] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[19] = context[9];
        context[20] = context[10];
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        context[25] = refalrts::ident_left( identifiers[ident_TkVariable], context[21], context[22] );
        if( ! context[25] )
          continue;
        context[26] = refalrts::char_left( 'e', context[21], context[22] );
        if( ! context[26] )
          continue;
        // closed e.Index2#1 as range 21
        // closed e.Expr-E#1 as range 19
        //DEBUG: e.Expr-B#1: 7
        //DEBUG: e.Index1#1: 11
        //DEBUG: e.Expr-M#1: 17
        //DEBUG: e.Index2#1: 21
        //DEBUG: e.Expr-E#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsLexpr-Aux/4 e.Expr-B#1/7 (/13 # TkVariable/15 'e'/16 e.Index1#1/11 )/14 e.Expr-M#1/17 (/23 # TkVariable/25 'e'/26 e.Index2#1/21 )/24 e.Expr-E#1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # OpenE/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_OpenE]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[17], context[18], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsLexpr-Aux/4 e.Expr#1/2 >/1
  // closed e.Expr#1 as range 2
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 AsIs: e.Expr#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsLexprm_Aux("IsLexpr-Aux", COOKIE1_, COOKIE2_, func_IsLexprm_Aux);


static refalrts::FnResult func_gen_OptFunction_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & OptFunction:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptFunction:1/4 (/7 e.new#1/5 )/8 s.new#2/25 (/15 e.new#3/13 )/16 (/11 t.new#4/26 (/23 e.new#5/21 )/24 (/19 e.new#6/17 )/20 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[9], context[10] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#3 as range 13
  // closed e.new#5 as range 21
  // closed e.new#6 as range 17
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = refalrts::tvar_left( context[26], context[9], context[10] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptFunction:1/4 (/7 e.Sentences#1/28 )/8 s.ScopeClass#1/25 (/15 e.Name#1/30 )/16 (/11 t.OptInfo#2/26 (/23 e.Sentences#1/34 )/24 (/19 )/20 )/12 >/1
    context[28] = context[5];
    context[29] = context[6];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[21];
    context[33] = context[22];
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Sentences#1 as range 28
    if( ! refalrts::repeated_evar_left( vm, context[34], context[35], context[28], context[29], context[32], context[33] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.Name#1 as range 30
    //DEBUG: t.OptInfo#2: 26
    //DEBUG: s.ScopeClass#1: 25
    //DEBUG: e.Sentences#1: 28
    //DEBUG: e.Name#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Sentences#1/34 )/24 (/19 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo#2/26 AsIs: (/23 } Tile{ HalfReuse: # ColdFunction/20 } Tile{ HalfReuse: # DRIVE/8 AsIs: s.ScopeClass#1/25 AsIs: (/15 AsIs: e.Name#1/30 AsIs: )/16 HalfReuse: # Sentences/11 } Tile{ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.Sentences#1/28 } Tile{ HalfReuse: >/12 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[20], identifiers[ident_ColdFunction]);
    refalrts::reinit_ident(context[8], identifiers[ident_DRIVE]);
    refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[23], context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[26], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptFunction:1/4 (/7 e.Sentences#1/5 )/8 s.ScopeClass#1/25 (/15 e.Name#1/13 )/16 (/11 t.OptInfo#2/26 (/23 e.Sentences#2/21 )/24 (/19 e.NewFunctions#2/17 )/20 )/12 >/1
  // closed e.Sentences#1 as range 5
  // closed e.Name#1 as range 13
  // closed e.Sentences#2 as range 21
  // closed e.NewFunctions#2 as range 17
  //DEBUG: t.OptInfo#2: 26
  //DEBUG: s.ScopeClass#1: 25
  //DEBUG: e.Sentences#1: 5
  //DEBUG: e.Name#1: 13
  //DEBUG: e.Sentences#2: 21
  //DEBUG: e.NewFunctions#2: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptFunction:1/4 (/7 e.Sentences#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/24 (/19 {REMOVED TILE} )/20 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo#2/26 AsIs: (/23 } Tile{ HalfReuse: # Function/8 AsIs: s.ScopeClass#1/25 AsIs: (/15 AsIs: e.Name#1/13 AsIs: )/16 HalfReuse: # Sentences/11 } Tile{ AsIs: e.Sentences#2/21 } Tile{ AsIs: )/12 } Tile{ AsIs: e.NewFunctions#2/17 } Tile{ ]] }
  refalrts::reinit_ident(context[8], identifiers[ident_Function]);
  refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
  refalrts::link_brackets( context[23], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[26], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptFunction_B1("OptFunction:1", COOKIE1_, COOKIE2_, func_gen_OptFunction_B1);


static refalrts::FnResult func_gen_OptFunction_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & OptFunction\1=1/4 (/7 e.SntAcc#2/5 )/8 (/11 e.FunAcc#2/9 )/12 t.OptInfo#3/13 (/17 e.NewFunctions#3/15 )/18 e.NewSentences#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SntAcc#2 as range 5
  // closed e.FunAcc#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.NewFunctions#3 as range 15
  // closed e.NewSentences#3 as range 2
  //DEBUG: e.SntAcc#2: 5
  //DEBUG: e.FunAcc#2: 9
  //DEBUG: t.OptInfo#3: 13
  //DEBUG: e.NewFunctions#3: 15
  //DEBUG: e.NewSentences#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptFunction\1=1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: t.OptInfo#3/13 AsIs: (/17 } Tile{ AsIs: e.SntAcc#2/5 } Tile{ AsIs: e.NewSentences#3/2 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.FunAcc#2/9 } Tile{ AsIs: e.NewFunctions#3/15 } Tile{ AsIs: )/18 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[11], context[18] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptFunction_L1A1("OptFunction\\1=1", COOKIE1_, COOKIE2_, func_gen_OptFunction_L1A1);


static refalrts::FnResult func_OptFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & OptFunction/4 (/7 # Function/9 s.ScopeClass#1/10 (/13 e.Name#1/11 )/14 # Sentences/15 e.Sentences#1/5 )/8 t.OptInfo#1/16 t.Mode#1/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::ident_left( identifiers[ident_Function], context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = refalrts::ident_left( identifiers[ident_Sentences], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 11
  // closed e.Sentences#1 as range 5
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.ScopeClass#1: 10
  //DEBUG: e.Name#1: 11
  //DEBUG: e.Sentences#1: 5
  //DEBUG: t.OptInfo#1: 16
  //DEBUG: t.Mode#1: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptFunction:1/4 AsIs: (/7 } Tile{ AsIs: e.Sentences#1/5 } Tile{ HalfReuse: )/9 AsIs: s.ScopeClass#1/10 AsIs: (/13 AsIs: e.Name#1/11 AsIs: )/14 HalfReuse: </15 } & Reduce@1/20 Tile{ AsIs: t.Mode#1/18 } Tile{ HalfReuse: (/8 AsIs: t.OptInfo#1/16 } (/21 )/22 (/23 )/24 )/25 e.Sentences#1/5/26 >/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Reduce_Z1]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::copy_evar(vm, context[26], context[27], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_OptFunction_B1]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[8], context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[28] );
  res = refalrts::splice_evar( res, context[8], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptFunction("OptFunction", COOKIE1_, COOKIE2_, func_OptFunction);


static refalrts::FnResult func_gen_OptSentence_S1B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & OptSentence$1:1$2=1/4 (/7 e.OptFuncNames#2/5 )/8 (/11 e.OptFuncs#3/9 )/12 (/15 e.NewFunctions#3/13 )/16 e.NewSentences#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptFuncNames#2 as range 5
  // closed e.OptFuncs#3 as range 9
  // closed e.NewFunctions#3 as range 13
  // closed e.NewSentences#3 as range 2
  //DEBUG: e.OptFuncNames#2: 5
  //DEBUG: e.OptFuncs#3: 9
  //DEBUG: e.NewFunctions#3: 13
  //DEBUG: e.NewSentences#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/5 } Tile{ HalfReuse: )/11 AsIs: e.OptFuncs#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.NewFunctions#3/13 AsIs: )/16 } Tile{ AsIs: e.NewSentences#3/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[0], context[12] );
  refalrts::link_brackets( context[4], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1S2A1("OptSentence$1:1$2=1", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1S2A1);


static refalrts::FnResult func_gen_OptSentence_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & OptSentence$1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 (/17 e.new#4/15 t.new#5/19 )/18 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#6 as range 2
  context[20] = refalrts::tvar_right( context[19], context[15], context[16] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 15
  do {
    // </0 & OptSentence$1:1/4 (/7 e.OptFuncs#1/21 )/8 (/11 e.Left#1/23 )/12 t.Mode#1/13 (/17 e.OptFuncNames#2/25 # None/19 )/18 e.Right#2/27 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_None], context[19] ) )
      continue;
    // closed e.OptFuncs#1 as range 21
    // closed e.Left#1 as range 23
    // closed e.OptFuncNames#2 as range 25
    // closed e.Right#2 as range 27
    //DEBUG: t.Mode#1: 13
    //DEBUG: e.OptFuncs#1: 21
    //DEBUG: e.Left#1: 23
    //DEBUG: e.OptFuncNames#2: 25
    //DEBUG: e.Right#2: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Mode#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/25 } Tile{ HalfReuse: )/7 AsIs: e.OptFuncs#1/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: )/12 } (/29 Tile{ AsIs: (/17 } Tile{ AsIs: e.Left#1/23 } Tile{ HalfReuse: )/19 HalfReuse: (/18 AsIs: e.Right#2/27 HalfReuse: )/1 } )/30 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_close_bracket(context[19]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[18], context[1] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[4], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[19], context[1] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSentence$1:1/4 (/7 t.new#10/42 e.new#11/21 )/8 (/11 e.new#12/23 )/12 (/13 s.new#7/40 s.new#8/41 )/14 (/17 e.new#15/25 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.new#13/34 )/37 e.new#14/31 )/20 )/18 e.new#9/27 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    context[29] = 0;
    context[30] = 0;
    if( ! refalrts::brackets_term( context[29], context[30], context[13] ) )
      continue;
    context[31] = 0;
    context[32] = 0;
    if( ! refalrts::brackets_term( context[31], context[32], context[19] ) )
      continue;
    context[33] = refalrts::ident_left( identifiers[ident_CallBrackets], context[31], context[32] );
    if( ! context[33] )
      continue;
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[31], context[32] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[38] = refalrts::ident_left( identifiers[ident_Symbol], context[34], context[35] );
    if( ! context[38] )
      continue;
    context[39] = refalrts::ident_left( identifiers[ident_Name], context[34], context[35] );
    if( ! context[39] )
      continue;
    // closed e.new#12 as range 23
    // closed e.new#15 as range 25
    // closed e.new#13 as range 34
    // closed e.new#14 as range 31
    // closed e.new#9 as range 27
    if( ! refalrts::svar_left( context[40], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[41], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    context[43] = refalrts::tvar_left( context[42], context[21], context[22] );
    if( ! context[43] )
      continue;
    // closed e.new#11 as range 21
    do {
      // </0 & OptSentence$1:1/4 (/7 t.new#19/42 e.new#20/44 )/8 (/11 e.new#21/46 )/12 (/13 s.new#16/40 s.new#17/41 )/14 (/17 e.new#25/48 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.new#23/50 '*'/57 s.new#24/56 )/37 e.new#22/52 )/20 )/18 e.new#18/54 >/1
      context[44] = context[21];
      context[45] = context[22];
      context[46] = context[23];
      context[47] = context[24];
      context[48] = context[25];
      context[49] = context[26];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[31];
      context[53] = context[32];
      context[54] = context[27];
      context[55] = context[28];
      // closed e.new#20 as range 44
      // closed e.new#21 as range 46
      // closed e.new#25 as range 48
      // closed e.new#22 as range 52
      // closed e.new#18 as range 54
      if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
        continue;
      context[57] = refalrts::char_right( '*', context[50], context[51] );
      if( ! context[57] )
        continue;
      // closed e.new#23 as range 50
      do {
        // </0 & OptSentence$1:1/4 (/7 t.#0/42 e.1#0/58 )/8 (/11 e.Left#1/60 )/12 (/13 s.DriveMode#1/40 s.IntrinsicMode#1/41 )/14 (/17 e.OptFuncNames#2/62 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.01#0/64 # SUF/70 '*'/57 s.N#2/56 )/37 e.5#0/66 )/20 )/18 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
        if( ! context[70] )
          continue;
        // closed e.1#0 as range 58
        // closed e.Left#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.01#0 as range 64
        // closed e.5#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.DriveMode#1: 40
        //DEBUG: s.IntrinsicMode#1: 41
        //DEBUG: s.N#2: 56
        //DEBUG: e.1#0: 58
        //DEBUG: e.Left#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.01#0: 64
        //DEBUG: e.5#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/14 HalfReuse: </17 } Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left#1/60 AsIs: )/12 AsIs: (/13 } Tile{ AsIs: e.Right#2/68 } Tile{ AsIs: )/18 } Tile{ AsIs: s.DriveMode#1/40 AsIs: s.IntrinsicMode#1/41 } Tile{ HalfReuse: (/37 AsIs: e.5#0/66 AsIs: )/20 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </19 HalfReuse: & FindOptInfo-Aux@1/33 AsIs: (/36 } Tile{ AsIs: e.1#0/58 } Tile{ HalfReuse: )/39 AsIs: e.01#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } Tile{ HalfReuse: >/38 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_open_bracket(context[37]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[33], functions[efunc_gen_FindOptInfom_Aux_Z1]);
        refalrts::reinit_close_bracket(context[39]);
        refalrts::reinit_svar( context[70], context[56] );
        refalrts::reinit_close_call(context[57]);
        refalrts::reinit_close_call(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[36], context[39] );
        refalrts::link_brackets( context[37], context[20] );
        refalrts::link_brackets( context[13], context[18] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[39], context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[37], context[20] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[13] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1/4 (/7 t.#0/42 e.1#0/58 )/8 (/11 e.Left#1/60 )/12 (/13 s.DriveMode#1/40 s.IntrinsicMode#1/41 )/14 (/17 e.OptFuncNames#2/62 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.00#0/64 '*'/57 s.N#2/56 )/37 e.5#0/66 )/20 )/18 e.Right#2/68 >/1
      context[58] = context[44];
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      // closed e.1#0 as range 58
      // closed e.Left#1 as range 60
      // closed e.OptFuncNames#2 as range 62
      // closed e.00#0 as range 64
      // closed e.5#0 as range 66
      // closed e.Right#2 as range 68
      //DEBUG: t.#0: 42
      //DEBUG: s.DriveMode#1: 40
      //DEBUG: s.IntrinsicMode#1: 41
      //DEBUG: s.N#2: 56
      //DEBUG: e.1#0: 58
      //DEBUG: e.Left#1: 60
      //DEBUG: e.OptFuncNames#2: 62
      //DEBUG: e.00#0: 64
      //DEBUG: e.5#0: 66
      //DEBUG: e.Right#2: 68

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/14 HalfReuse: </17 } Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left#1/60 AsIs: )/12 AsIs: (/13 } Tile{ AsIs: e.Right#2/68 } Tile{ AsIs: )/18 } Tile{ AsIs: s.DriveMode#1/40 AsIs: s.IntrinsicMode#1/41 } Tile{ HalfReuse: (/37 AsIs: e.5#0/66 AsIs: )/20 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </19 HalfReuse: & FindOptInfo-Aux@2/33 AsIs: (/36 } Tile{ AsIs: e.1#0/58 } Tile{ HalfReuse: )/39 AsIs: e.00#0/64 HalfReuse: s.N2 #56/57 } Tile{ HalfReuse: >/38 } >/70 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[70]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[33], functions[efunc_gen_FindOptInfom_Aux_Z2]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[57], context[56] );
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[36], context[39] );
      refalrts::link_brackets( context[37], context[20] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[39], context[57] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[19], context[36] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[37], context[20] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[8], context[13] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1/4 (/7 t.#0/42 e.1#0/44 )/8 (/11 e.Left#1/46 )/12 (/13 s.DriveMode#1/40 s.IntrinsicMode#1/41 )/14 (/17 e.OptFuncNames#2/48 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.8#0/50 )/37 e.5#0/52 )/20 )/18 e.Right#2/54 >/1
    context[44] = context[21];
    context[45] = context[22];
    context[46] = context[23];
    context[47] = context[24];
    context[48] = context[25];
    context[49] = context[26];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[31];
    context[53] = context[32];
    context[54] = context[27];
    context[55] = context[28];
    // closed e.1#0 as range 44
    // closed e.Left#1 as range 46
    // closed e.OptFuncNames#2 as range 48
    // closed e.8#0 as range 50
    // closed e.5#0 as range 52
    // closed e.Right#2 as range 54
    //DEBUG: t.#0: 42
    //DEBUG: s.DriveMode#1: 40
    //DEBUG: s.IntrinsicMode#1: 41
    //DEBUG: e.1#0: 44
    //DEBUG: e.Left#1: 46
    //DEBUG: e.OptFuncNames#2: 48
    //DEBUG: e.8#0: 50
    //DEBUG: e.5#0: 52
    //DEBUG: e.Right#2: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/14 HalfReuse: </17 } Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left#1/46 AsIs: )/12 AsIs: (/13 } Tile{ AsIs: e.Right#2/54 } )/56 Tile{ AsIs: s.DriveMode#1/40 AsIs: s.IntrinsicMode#1/41 } Tile{ HalfReuse: (/37 AsIs: e.5#0/52 AsIs: )/20 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </19 HalfReuse: & FindOptInfo-Aux@3/33 AsIs: (/36 } Tile{ AsIs: e.1#0/44 } Tile{ AsIs: )/18 } Tile{ AsIs: e.8#0/50 } Tile{ HalfReuse: >/38 HalfReuse: >/39 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[33], functions[efunc_gen_FindOptInfom_Aux_Z3]);
    refalrts::reinit_close_call(context[38]);
    refalrts::reinit_close_call(context[39]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[36], context[18] );
    refalrts::link_brackets( context[37], context[20] );
    refalrts::link_brackets( context[13], context[56] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[19], context[36] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[37], context[20] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1/4 (/7 e.OptFuncs#1/5 )/8 (/11 e.Left#1/9 )/12 t.Mode#1/13 (/17 e.OptFuncNames#2/15 t.Call#2/19 )/18 e.Right#2/2 >/1
  // closed e.OptFuncs#1 as range 5
  // closed e.Left#1 as range 9
  // closed e.OptFuncNames#2 as range 15
  // closed e.Right#2 as range 2
  //DEBUG: t.Mode#1: 13
  //DEBUG: t.Call#2: 19
  //DEBUG: e.OptFuncs#1: 5
  //DEBUG: e.Left#1: 9
  //DEBUG: e.OptFuncNames#2: 15
  //DEBUG: e.Right#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/15 } Tile{ AsIs: )/18 } </21 & OptSentence-Aux*3/22 Tile{ AsIs: t.Mode#1/13 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left#1/9 AsIs: )/12 } Tile{ AsIs: (/17 } Tile{ AsIs: e.Right#2/2 } )/23 )/24 Tile{ AsIs: t.Call#2/19 } Tile{ AsIs: e.OptFuncs#1/5 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_OptSentencem_Aux_D3]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1("OptSentence$1:1", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1);


static refalrts::FnResult func_OptSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & OptSentence/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence/4 t.new#1/5 t.new#2/7 t.new#3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSentence/4 (/5 (/17 e.Left#1/15 )/18 (/21 e.Right#1/19 )/22 )/6 (/7 (/25 e.OptFuncNames#1/23 )/26 e.OptFuncs#1/13 )/8 t.Mode#1/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[7] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[11], context[12] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[13], context[14] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Left#1 as range 15
    // closed e.Right#1 as range 19
    // closed e.OptFuncNames#1 as range 23
    // closed e.OptFuncs#1 as range 13
    //DEBUG: t.Mode#1: 9
    //DEBUG: e.Left#1: 15
    //DEBUG: e.Right#1: 19
    //DEBUG: e.OptFuncNames#1: 23
    //DEBUG: e.OptFuncs#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1/4 AsIs: (/5 } Tile{ AsIs: e.OptFuncs#1/13 } Tile{ AsIs: )/8 } Tile{ AsIs: (/17 AsIs: e.Left#1/15 AsIs: )/18 } Tile{ AsIs: t.Mode#1/9 } Tile{ HalfReuse: </6 HalfReuse: & DoMapAccum@9/7 AsIs: (/25 AsIs: e.OptFuncNames#1/23 HalfReuse: # None/26 } )/27 (/28 Tile{ HalfReuse: )/21 AsIs: e.Right#1/19 HalfReuse: >/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1]);
    refalrts::reinit_open_call(context[6]);
    refalrts::reinit_name(context[7], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::reinit_ident(context[26], identifiers[ident_None]);
    refalrts::reinit_close_bracket(context[21]);
    refalrts::reinit_close_call(context[22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[6] );
    refalrts::link_brackets( context[28], context[21] );
    refalrts::link_brackets( context[25], context[27] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[5], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[6], context[26] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence/4 t.Sentence#1/5 t.OptInfo#1/7 t.Mode#1/9 >/1
  //DEBUG: t.Sentence#1: 5
  //DEBUG: t.OptInfo#1: 7
  //DEBUG: t.Mode#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Mode#1/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo#1/7 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: t.Sentence#1/5 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSentence("OptSentence", COOKIE1_, COOKIE2_, func_OptSentence);


static refalrts::FnResult func_gen_OptSentencem_Aux_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & OptSentence-Aux=2/4 (/7 e.OptFuncs#2/5 )/8 (/11 e.Left#1/9 )/12 (/15 e.Right#1/13 )/16 t.Metatables#3/17 e.SubstitutionPacks#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptFuncs#2 as range 5
  // closed e.Left#1 as range 9
  // closed e.Right#1 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  // closed e.SubstitutionPacks#3 as range 2
  //DEBUG: e.OptFuncs#2: 5
  //DEBUG: e.Left#1: 9
  //DEBUG: e.Right#1: 13
  //DEBUG: t.Metatables#3: 17
  //DEBUG: e.SubstitutionPacks#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/19 Tile{ AsIs: t.Metatables#3/17 } Tile{ AsIs: e.OptFuncs#2/5 } )/20 </21 Tile{ HalfReuse: & DoMapAccum@10/8 AsIs: (/11 AsIs: e.Left#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Right#1/13 AsIs: )/16 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 } )/22 Tile{ AsIs: e.SubstitutionPacks#3/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_Aux_A2("OptSentence-Aux=2", COOKIE1_, COOKIE2_, func_gen_OptSentencem_Aux_A2);


static refalrts::FnResult func_gen_OptSentencem_Aux_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & OptSentence-Aux=1/4 (/7 e.Left#1/5 )/8 (/11 e.Right#1/9 )/12 s.DriveMode#1/13 s.IntrinsicMode#1/14 (/17 e.Args#1/15 )/18 t.Metatables#1/19 e.OptFuncs#2/2 t.FunctionForDrive#2/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Left#1 as range 5
  // closed e.Right#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Args#1 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[22] = refalrts::tvar_right( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncs#2 as range 2
  //DEBUG: e.Left#1: 5
  //DEBUG: e.Right#1: 9
  //DEBUG: s.DriveMode#1: 13
  //DEBUG: s.IntrinsicMode#1: 14
  //DEBUG: e.Args#1: 15
  //DEBUG: t.Metatables#1: 19
  //DEBUG: t.FunctionForDrive#2: 21
  //DEBUG: e.OptFuncs#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & OptSentence-Aux=2/24 (/25 Tile{ AsIs: e.OptFuncs#2/2 } )/26 (/27 e.Left#1/5/28 )/30 (/31 e.Right#1/9/32 )/34 </35 & OptSentence-MakeSubstitutions/36 (/37 Tile{ AsIs: s.DriveMode#1/13 AsIs: s.IntrinsicMode#1/14 } Tile{ HalfReuse: )/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Left#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Right#1/9 AsIs: )/12 } )/38 Tile{ AsIs: (/17 AsIs: e.Args#1/15 AsIs: )/18 } Tile{ AsIs: t.FunctionForDrive#2/21 } Tile{ AsIs: t.Metatables#1/19 } >/39 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_OptSentencem_Aux_A2]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::copy_evar(vm, context[28], context[29], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::copy_evar(vm, context[32], context[33], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_OptSentencem_MakeSubstitutions]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[35] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[4], context[38] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[37], context[0] );
  refalrts::link_brackets( context[31], context[34] );
  refalrts::link_brackets( context[27], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[26], context[37] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_Aux_A1("OptSentence-Aux=1", COOKIE1_, COOKIE2_, func_gen_OptSentencem_Aux_A1);


static refalrts::FnResult func_OptSentencem_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & OptSentence-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence-Aux/4 (/7 s.new#1/32 s.new#2/33 )/8 (/11 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 )/12 (/23 # CallBrackets/25 (/28 # Symbol/30 # Name/31 e.new#5/26 )/29 e.new#6/21 )/24 t.new#7/34 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = refalrts::ident_left( identifiers[ident_CallBrackets], context[21], context[22] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[21], context[22] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = refalrts::ident_left( identifiers[ident_Symbol], context[26], context[27] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  context[31] = refalrts::ident_left( identifiers[ident_Name], context[26], context[27] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 26
  // closed e.new#6 as range 21
  if( ! refalrts::svar_left( context[32], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[33], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[35] = refalrts::tvar_left( context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#8 as range 2
  do {
    // </0 & OptSentence-Aux/4 (/7 s.new#11/32 s.new#12/33 )/8 (/11 (/15 e.new#14/36 )/16 (/19 e.new#15/38 )/20 )/12 (/23 # CallBrackets/25 (/28 # Symbol/30 # Name/31 e.new#16/40 '*'/47 s.new#17/46 )/29 e.new#13/42 )/24 t.new#9/34 e.new#10/44 >/1
    context[36] = context[13];
    context[37] = context[14];
    context[38] = context[17];
    context[39] = context[18];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[21];
    context[43] = context[22];
    context[44] = context[2];
    context[45] = context[3];
    // closed e.new#14 as range 36
    // closed e.new#15 as range 38
    // closed e.new#13 as range 42
    // closed e.new#10 as range 44
    if( ! refalrts::svar_right( context[46], context[40], context[41] ) )
      continue;
    context[47] = refalrts::char_right( '*', context[40], context[41] );
    if( ! context[47] )
      continue;
    // closed e.new#16 as range 40
    do {
      // </0 & OptSentence-Aux/4 (/7 s.DriveMode#1/32 s.IntrinsicMode#1/33 )/8 (/11 (/15 e.Left#1/48 )/16 (/19 e.Right#1/50 )/20 )/12 (/23 # CallBrackets/25 (/28 # Symbol/30 # Name/31 e.#0/52 # SUF/58 '*'/47 s.N#2/46 )/29 e.Args#1/54 )/24 t.Metatables#1/34 e.OptFuncs#1/56 >/1
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[38];
      context[51] = context[39];
      context[52] = context[40];
      context[53] = context[41];
      context[54] = context[42];
      context[55] = context[43];
      context[56] = context[44];
      context[57] = context[45];
      context[58] = refalrts::ident_right( identifiers[ident_SUF], context[52], context[53] );
      if( ! context[58] )
        continue;
      // closed e.Left#1 as range 48
      // closed e.Right#1 as range 50
      // closed e.#0 as range 52
      // closed e.Args#1 as range 54
      // closed e.OptFuncs#1 as range 56
      //DEBUG: t.Metatables#1: 34
      //DEBUG: s.DriveMode#1: 32
      //DEBUG: s.IntrinsicMode#1: 33
      //DEBUG: s.N#2: 46
      //DEBUG: e.Left#1: 48
      //DEBUG: e.Right#1: 50
      //DEBUG: e.#0: 52
      //DEBUG: e.Args#1: 54
      //DEBUG: e.OptFuncs#1: 56

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.DriveMode#1/32 s.IntrinsicMode#1/33 {REMOVED TILE} (/28 # Symbol/30 {REMOVED TILE} s.N#2/46 )/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & OptSentence-Aux=1/11 AsIs: (/15 AsIs: e.Left#1/48 AsIs: )/16 AsIs: (/19 AsIs: e.Right#1/50 AsIs: )/20 HalfReuse: s.DriveMode1 #32/12 HalfReuse: s.IntrinsicMode1 #33/23 HalfReuse: (/25 } Tile{ AsIs: e.Args#1/54 } Tile{ AsIs: )/24 AsIs: t.Metatables#1/34 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs#1/56 } Tile{ HalfReuse: )/31 AsIs: e.#0/52 HalfReuse: s.N2 #46/58 HalfReuse: >/47 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_svar( context[12], context[32] );
      refalrts::reinit_svar( context[23], context[33] );
      refalrts::reinit_open_bracket(context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z1]);
      refalrts::reinit_close_bracket(context[31]);
      refalrts::reinit_svar( context[58], context[46] );
      refalrts::reinit_close_call(context[47]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[31] );
      refalrts::link_brackets( context[25], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[47] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[24], context[35] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence-Aux/4 (/7 s.DriveMode#1/32 s.IntrinsicMode#1/33 )/8 (/11 (/15 e.Left#1/48 )/16 (/19 e.Right#1/50 )/20 )/12 (/23 # CallBrackets/25 (/28 # Symbol/30 # Name/31 e.0#0/52 '*'/47 s.N#2/46 )/29 e.Args#1/54 )/24 t.Metatables#1/34 e.OptFuncs#1/56 >/1
    context[48] = context[36];
    context[49] = context[37];
    context[50] = context[38];
    context[51] = context[39];
    context[52] = context[40];
    context[53] = context[41];
    context[54] = context[42];
    context[55] = context[43];
    context[56] = context[44];
    context[57] = context[45];
    // closed e.Left#1 as range 48
    // closed e.Right#1 as range 50
    // closed e.0#0 as range 52
    // closed e.Args#1 as range 54
    // closed e.OptFuncs#1 as range 56
    //DEBUG: t.Metatables#1: 34
    //DEBUG: s.DriveMode#1: 32
    //DEBUG: s.IntrinsicMode#1: 33
    //DEBUG: s.N#2: 46
    //DEBUG: e.Left#1: 48
    //DEBUG: e.Right#1: 50
    //DEBUG: e.0#0: 52
    //DEBUG: e.Args#1: 54
    //DEBUG: e.OptFuncs#1: 56

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.DriveMode#1/32 s.IntrinsicMode#1/33 {REMOVED TILE} (/28 {REMOVED TILE} {REMOVED TILE} s.N#2/46 )/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & OptSentence-Aux=1/11 AsIs: (/15 AsIs: e.Left#1/48 AsIs: )/16 AsIs: (/19 AsIs: e.Right#1/50 AsIs: )/20 HalfReuse: s.DriveMode1 #32/12 HalfReuse: s.IntrinsicMode1 #33/23 HalfReuse: (/25 } Tile{ AsIs: e.Args#1/54 } Tile{ AsIs: )/24 AsIs: t.Metatables#1/34 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@2/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs#1/56 } Tile{ HalfReuse: )/31 AsIs: e.0#0/52 HalfReuse: s.N2 #46/47 } Tile{ HalfReuse: >/30 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[11], functions[efunc_gen_OptSentencem_Aux_A1]);
    refalrts::reinit_svar( context[12], context[32] );
    refalrts::reinit_svar( context[23], context[33] );
    refalrts::reinit_open_bracket(context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z2]);
    refalrts::reinit_close_bracket(context[31]);
    refalrts::reinit_svar( context[47], context[46] );
    refalrts::reinit_close_call(context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[31] );
    refalrts::link_brackets( context[25], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[31], context[47] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[24], context[35] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[8], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence-Aux/4 (/7 s.DriveMode#1/32 s.IntrinsicMode#1/33 )/8 (/11 (/15 e.Left#1/13 )/16 (/19 e.Right#1/17 )/20 )/12 (/23 # CallBrackets/25 (/28 # Symbol/30 # Name/31 e.Name#1/26 )/29 e.Args#1/21 )/24 t.Metatables#1/34 e.OptFuncs#1/2 >/1
  // closed e.Left#1 as range 13
  // closed e.Right#1 as range 17
  // closed e.Name#1 as range 26
  // closed e.Args#1 as range 21
  // closed e.OptFuncs#1 as range 2
  //DEBUG: t.Metatables#1: 34
  //DEBUG: s.DriveMode#1: 32
  //DEBUG: s.IntrinsicMode#1: 33
  //DEBUG: e.Left#1: 13
  //DEBUG: e.Right#1: 17
  //DEBUG: e.Name#1: 26
  //DEBUG: e.Args#1: 21
  //DEBUG: e.OptFuncs#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.DriveMode#1/32 s.IntrinsicMode#1/33 {REMOVED TILE} (/28 # Symbol/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & OptSentence-Aux=1/11 AsIs: (/15 AsIs: e.Left#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Right#1/17 AsIs: )/20 HalfReuse: s.DriveMode1 #32/12 HalfReuse: s.IntrinsicMode1 #33/23 HalfReuse: (/25 } Tile{ AsIs: e.Args#1/21 } Tile{ AsIs: )/24 AsIs: t.Metatables#1/34 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@3/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs#1/2 } Tile{ HalfReuse: )/31 AsIs: e.Name#1/26 HalfReuse: >/29 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[11], functions[efunc_gen_OptSentencem_Aux_A1]);
  refalrts::reinit_svar( context[12], context[32] );
  refalrts::reinit_svar( context[23], context[33] );
  refalrts::reinit_open_bracket(context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z3]);
  refalrts::reinit_close_bracket(context[31]);
  refalrts::reinit_close_call(context[29]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[31] );
  refalrts::link_brackets( context[25], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[29] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[24], context[35] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[8], context[25] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSentencem_Aux("OptSentence-Aux", COOKIE1_, COOKIE2_, func_OptSentencem_Aux);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$1:1/4 t.new#1/5 (/9 e.new#2/7 )/10 t.new#3/11 s.new#4/13 e.new#5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$1:1/4 t.IntrinsicFunction#1/5 (/9 e.Args#1/14 )/10 t.Metatables#2/11 # Ok/13 e.Result#2/16 >/1
    context[14] = context[7];
    context[15] = context[8];
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Ok], context[13] ) )
      continue;
    // closed e.Args#1 as range 14
    // closed e.Result#2 as range 16
    //DEBUG: t.IntrinsicFunction#1: 5
    //DEBUG: t.Metatables#2: 11
    //DEBUG: e.Args#1: 14
    //DEBUG: e.Result#2: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} e.Args#1/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#2/11 } Tile{ AsIs: (/9 } Tile{ HalfReuse: (/0 HalfReuse: (/4 } # TkVariable/18 'e'/19 # DRIVEN/20 0/21 Tile{ AsIs: )/10 } Tile{ HalfReuse: ':'/13 AsIs: e.Result#2/16 HalfReuse: )/1 } (/22 )/23 )/24 Tile{ ]] }
    refalrts::alloc_ident(vm, context[18], identifiers[ident_TkVariable]);
    refalrts::alloc_char(vm, context[19], 'e');
    refalrts::alloc_ident(vm, context[20], identifiers[ident_DRIVEN]);
    refalrts::alloc_number(vm, context[21], 0UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[24] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[4], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$1:1/4 t.IntrinsicFunction#1/5 (/9 e.Args#1/7 )/10 t.Metatables#2/11 # MakeColdCall/13 >/1
  if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args#1 as range 7
  //DEBUG: t.IntrinsicFunction#1: 5
  //DEBUG: t.Metatables#2: 11
  //DEBUG: e.Args#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} # MakeColdCall/13 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#2/11 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: e.Args#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S1B1("DoOptSentence-MakeSubstitutions-Intrinsic$1:1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S1B1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 t.Metatables#1/5 e.Substitutions#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Substitutions#3 as range 2
  //DEBUG: t.Metatables#1: 5
  //DEBUG: e.Substitutions#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ AsIs: e.Substitutions#3/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2("DoOptSentence-MakeSubstitutions-Intrinsic$2=2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/4 t.new#1/5 (/9 e.new#2/7 )/10 s.new#3/11 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/4 t.IntrinsicFunction#1/5 (/9 e.Args#1/12 )/10 # Ok/11 e.Result#3/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Ok], context[11] ) )
      continue;
    // closed e.Args#1 as range 12
    // closed e.Result#3 as range 14
    //DEBUG: t.IntrinsicFunction#1: 5
    //DEBUG: e.Args#1: 12
    //DEBUG: e.Result#3: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} e.Args#1/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # TkVariable/16 'e'/17 # DRIVEN/18 0/19 Tile{ AsIs: )/10 HalfReuse: ':'/11 AsIs: e.Result#3/14 HalfReuse: )/1 } (/20 )/21 )/22 Tile{ ]] }
    refalrts::alloc_ident(vm, context[16], identifiers[ident_TkVariable]);
    refalrts::alloc_char(vm, context[17], 'e');
    refalrts::alloc_ident(vm, context[18], identifiers[ident_DRIVEN]);
    refalrts::alloc_number(vm, context[19], 0UL);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[11], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[4], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[22] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/4 t.IntrinsicFunction#1/5 (/9 e.Args#1/7 )/10 # MakeColdCall/11 >/1
  if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[11] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args#1 as range 7
  //DEBUG: t.IntrinsicFunction#1: 5
  //DEBUG: e.Args#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 # MakeColdCall/11 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: e.Args#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1("DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1);


static refalrts::FnResult func_DoOptSentencem_MakeSubstitutionsm_Intrinsic(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#5/5 t.new#6/7 (/11 e.new#11/13 )/12 e.new#7/15 s.new#8/19 s.new#9/18 s.new#10/17 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new#11 as range 13
    if( ! refalrts::svar_right( context[17], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_right( context[18], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[15], context[16] ) )
      continue;
    // closed e.new#7 as range 15
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/20 )/12 '_'/24 '_'/25 'M'/26 'e'/27 't'/28 'a'/29 '_'/19 'M'/18 'u'/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      if( ! refalrts::char_term( '_', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'M', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'u', context[17] ) )
        continue;
      context[24] = refalrts::char_left( '_', context[22], context[23] );
      if( ! context[24] )
        continue;
      context[25] = refalrts::char_left( '_', context[22], context[23] );
      if( ! context[25] )
        continue;
      context[26] = refalrts::char_left( 'M', context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( 't', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( 'a', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Args#1 as range 20
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'M'/26 'e'/27 't'/28 'a'/29 '_'/19 'M'/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$1:1/4 AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/20 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Mu/25 } e.Args#1/20/30 Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[30], context[31], context[20], context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S1B1]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Intrinsicm_Mu]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[11], context[25] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#12/5 t.new#13/7 (/11 e.new#17/20 )/12 s.new#16/19 s.new#15/18 s.new#14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new#17 as range 20
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/22 )/12 'A'/19 'd'/18 'd'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'A', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[17] ) )
          continue;
        // closed e.Args#1 as range 22
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </24 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Add:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args#1/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Add_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#18/5 t.new#19/7 (/11 e.new#22/22 )/12 s.new#21/19 'u'/18 s.new#20/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'u', context[18] ) )
          continue;
        // closed e.new#22 as range 22
        do {
          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/24 )/12 'S'/19 'u'/18 'b'/17 >/1
          context[24] = context[22];
          context[25] = context[23];
          if( ! refalrts::char_term( 'S', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'b', context[17] ) )
            continue;
          // closed e.Args#1 as range 24
          //DEBUG: t.IntrinsicFunction#1: 5
          //DEBUG: t.Metatables#1: 7
          //DEBUG: e.Args#1: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </26 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/27 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/24 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Sub:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args#1/24/28 >/30 >/31 >/32 >/33 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
          refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Sub_B1]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[11], context[1] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/24 )/12 'M'/19 'u'/18 'l'/17 >/1
        context[24] = context[22];
        context[25] = context[23];
        if( ! refalrts::char_term( 'M', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'l', context[17] ) )
          continue;
        // closed e.Args#1 as range 24
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </26 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/27 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/24 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Mul:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args#1/24/28 >/30 >/31 >/32 >/33 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Mul_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[30], context[33] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/22 )/12 'D'/19 'i'/18 'v'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'D', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'i', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'v', context[17] ) )
          continue;
        // closed e.Args#1 as range 22
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </24 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Div:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args#1/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Div_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/22 )/12 'M'/19 'o'/18 'd'/17 >/1
      context[22] = context[20];
      context[23] = context[21];
      if( ! refalrts::char_term( 'M', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'o', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'd', context[17] ) )
        continue;
      // closed e.Args#1 as range 22
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </24 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Mod:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args#1/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Mod_B1]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#12/5 t.new#13/7 (/11 e.new#21/20 )/12 e.new#17/22 s.new#18/26 s.new#19/25 s.new#20/24 s.new#16/19 s.new#15/18 s.new#14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      // closed e.new#21 as range 20
      if( ! refalrts::svar_right( context[24], context[22], context[23] ) )
        continue;
      if( ! refalrts::svar_right( context[25], context[22], context[23] ) )
        continue;
      if( ! refalrts::svar_right( context[26], context[22], context[23] ) )
        continue;
      // closed e.new#17 as range 22
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/27 )/12 'D'/26 'i'/25 'v'/24 'm'/19 'o'/18 'd'/17 >/1
        context[27] = context[20];
        context[28] = context[21];
        if( ! refalrts::char_term( 'D', context[26] ) )
          continue;
        if( ! refalrts::char_term( 'i', context[25] ) )
          continue;
        if( ! refalrts::char_term( 'v', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'm', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'o', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[17] ) )
          continue;
        if( ! refalrts::empty_seq( context[22], context[23] ) )
          continue;
        // closed e.Args#1 as range 27
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </29 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/27 AsIs: )/12 HalfReuse: </26 HalfReuse: & Intrinsic-Divmod:1/25 HalfReuse: </24 HalfReuse: & ArithmArgs/19 } e.Args#1/27/31 >/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[26]);
        refalrts::reinit_name(context[25], functions[efunc_gen_Intrinsicm_Divmod_B1]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_ArithmArgs]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/27 )/12 'C'/31 'o'/26 'm'/25 'p'/24 'a'/19 'r'/18 'e'/17 >/1
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[23];
      if( ! refalrts::char_term( 'o', context[26] ) )
        continue;
      if( ! refalrts::char_term( 'm', context[25] ) )
        continue;
      if( ! refalrts::char_term( 'p', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'a', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'e', context[17] ) )
        continue;
      context[31] = refalrts::char_left( 'C', context[29], context[30] );
      if( ! context[31] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Args#1 as range 27
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'm'/25 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </24 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/19 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/27 AsIs: )/12 HalfReuse: </31 HalfReuse: & Intrinsic-Compare/26 } e.Args#1/27/32 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::reinit_open_call(context[31]);
      refalrts::reinit_name(context[26], functions[efunc_Intrinsicm_Compare]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[11], context[26] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#12/5 t.new#13/7 (/11 e.new#17/20 )/12 s.new#16/19 s.new#15/18 s.new#14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new#17 as range 20
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/22 )/12 'C'/19 'h'/18 'r'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'C', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'h', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'r', context[17] ) )
          continue;
        // closed e.Args#1 as range 22
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </24 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Chr/18 } e.Args#1/22/26 >/28 Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_Intrinsicm_Chr]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[17];
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[18] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/22 )/12 'O'/19 'r'/18 'd'/17 >/1
      context[22] = context[20];
      context[23] = context[21];
      if( ! refalrts::char_term( 'O', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'd', context[17] ) )
        continue;
      // closed e.Args#1 as range 22
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </24 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Ord/18 } e.Args#1/22/26 >/28 Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_Intrinsicm_Ord]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[11], context[18] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#12/5 t.new#13/7 (/11 e.new#19/20 )/12 e.new#17/22 s.new#18/24 s.new#16/19 s.new#15/18 s.new#14/17 >/1
    context[20] = context[13];
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[16];
    // closed e.new#19 as range 20
    if( ! refalrts::svar_right( context[24], context[22], context[23] ) )
      continue;
    // closed e.new#17 as range 22
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#20/5 t.new#21/7 (/11 e.new#25/25 )/12 s.new#24/29 s.new#23/24 s.new#22/19 'e'/18 'r'/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[23];
      if( ! refalrts::char_term( 'e', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[17] ) )
        continue;
      // closed e.new#25 as range 25
      if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/30 )/12 'U'/29 'p'/24 'p'/19 'e'/18 'r'/17 >/1
        context[30] = context[25];
        context[31] = context[26];
        if( ! refalrts::char_term( 'U', context[29] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[19] ) )
          continue;
        // closed e.Args#1 as range 30
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </19 } & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/30 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Upper/24 } e.Args#1/30/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_Upper]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[11], context[24] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/30 )/12 'L'/29 'o'/24 'w'/19 'e'/18 'r'/17 >/1
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::char_term( 'L', context[29] ) )
        continue;
      if( ! refalrts::char_term( 'o', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'w', context[19] ) )
        continue;
      // closed e.Args#1 as range 30
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </19 } & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/30 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Lower/24 } e.Args#1/30/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_open_call(context[29]);
      refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_Lower]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[11], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#20/5 t.new#21/7 (/11 e.new#24/25 )/12 s.new#23/24 s.new#22/19 'm'/18 'b'/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      if( ! refalrts::char_term( 'm', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'b', context[17] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new#24 as range 25
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/27 )/12 'N'/24 'u'/19 'm'/18 'b'/17 >/1
        context[27] = context[25];
        context[28] = context[26];
        if( ! refalrts::char_term( 'N', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'u', context[19] ) )
          continue;
        // closed e.Args#1 as range 27
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </29 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Numb/19 } e.Args#1/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Numb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/27 )/12 'S'/24 'y'/19 'm'/18 'b'/17 >/1
      context[27] = context[25];
      context[28] = context[26];
      if( ! refalrts::char_term( 'S', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'y', context[19] ) )
        continue;
      // closed e.Args#1 as range 27
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </29 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Symb/19 } e.Args#1/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Symb]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[11], context[19] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#20/5 t.new#21/7 (/11 e.new#29/25 )/12 s.new#26/29 s.new#27/30 'p'/31 e.new#28/27 s.new#25/24 s.new#24/19 s.new#23/18 s.new#22/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[23];
      // closed e.new#29 as range 25
      if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
        continue;
      if( ! refalrts::svar_left( context[30], context[27], context[28] ) )
        continue;
      context[31] = refalrts::char_left( 'p', context[27], context[28] );
      if( ! context[31] )
        continue;
      // closed e.new#28 as range 27
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#30/5 t.new#31/7 (/11 e.new#37/32 )/12 'I'/29 'm'/30 'p'/31 e.new#36/34 s.new#35/24 s.new#34/19 s.new#33/18 s.new#32/17 >/1
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[28];
        if( ! refalrts::char_term( 'I', context[29] ) )
          continue;
        if( ! refalrts::char_term( 'm', context[30] ) )
          continue;
        // closed e.new#37 as range 32
        // closed e.new#36 as range 34
        do {
          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/36 )/12 'I'/29 'm'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
          context[36] = context[32];
          context[37] = context[33];
          if( ! refalrts::char_term( 'l', context[24] ) )
            continue;
          if( ! refalrts::char_term( 'o', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'd', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'e', context[17] ) )
            continue;
          if( ! refalrts::empty_seq( context[34], context[35] ) )
            continue;
          // closed e.Args#1 as range 36
          //DEBUG: t.IntrinsicFunction#1: 5
          //DEBUG: t.Metatables#1: 7
          //DEBUG: e.Args#1: 36

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </24 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/19 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/36 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Implode/30 } e.Args#1/36/38 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[38], context[39], context[36], context[37]);
          refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[19], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_Intrinsicm_Implode]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[11], context[30] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[24], context[19] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/36 )/12 'I'/29 'm'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        if( ! refalrts::char_term( '_', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'x', context[18] ) )
          continue;
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        context[40] = refalrts::char_left( 'l', context[38], context[39] );
        if( ! context[40] )
          continue;
        context[41] = refalrts::char_left( 'o', context[38], context[39] );
        if( ! context[41] )
          continue;
        context[42] = refalrts::char_left( 'd', context[38], context[39] );
        if( ! context[42] )
          continue;
        context[43] = refalrts::char_left( 'e', context[38], context[39] );
        if( ! context[43] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Args#1 as range 36
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/31 'l'/40 'o'/41 {REMOVED TILE} '_'/24 'E'/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </42 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/43 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/36 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Implode_Ext/30 } e.Args#1/36/44 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[44], context[45], context[36], context[37]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[42]);
        refalrts::reinit_name(context[43], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_Intrinsicm_Implodeu_Ext]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[11], context[30] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#30/5 t.new#31/7 (/11 e.new#37/32 )/12 'E'/29 'x'/30 'p'/31 e.new#36/34 s.new#35/24 s.new#34/19 s.new#33/18 s.new#32/17 >/1
      context[32] = context[25];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[28];
      if( ! refalrts::char_term( 'E', context[29] ) )
        continue;
      if( ! refalrts::char_term( 'x', context[30] ) )
        continue;
      // closed e.new#37 as range 32
      // closed e.new#36 as range 34
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#38/5 t.new#39/7 (/11 e.new#40/36 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
        context[36] = context[32];
        context[37] = context[33];
        if( ! refalrts::char_term( 'l', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'o', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'e', context[17] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        // closed e.new#40 as range 36
        do {
          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/42 # Symbol/44 # Identifier/45 e.2#0/40 )/43 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
          context[38] = context[36];
          context[39] = context[37];
          context[40] = 0;
          context[41] = 0;
          context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          refalrts::bracket_pointers(context[42], context[43]);
          context[44] = refalrts::ident_left( identifiers[ident_Symbol], context[40], context[41] );
          if( ! context[44] )
            continue;
          context[45] = refalrts::ident_left( identifiers[ident_Identifier], context[40], context[41] );
          if( ! context[45] )
            continue;
          if( ! refalrts::empty_seq( context[38], context[39] ) )
            continue;
          // closed e.2#0 as range 40
          //DEBUG: t.IntrinsicFunction#1: 5
          //DEBUG: t.Metatables#1: 7
          //DEBUG: e.2#0: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/44 {REMOVED TILE} 'p'/31 'l'/24 'o'/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/42 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ HalfReuse: (/45 AsIs: e.2#0/40 AsIs: )/43 HalfReuse: # Ok/12 HalfReuse: </29 HalfReuse: & Map@9/30 } e.2#0/40/46 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
          refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[42], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1]);
          refalrts::reinit_open_bracket(context[45]);
          refalrts::reinit_ident(context[12], identifiers[ident_Ok]);
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_gen_Map_Z9]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[11] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[45], context[43] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[45], context[30] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[7], context[42] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/38 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
        context[38] = context[36];
        context[39] = context[37];
        // closed e.Args#1 as range 38
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/12 'E'/29 'x'/30 {REMOVED TILE} 'l'/24 'o'/19 'd'/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/31 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: e.Args#1/38 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[31], functions[efunc_MakeColdSolution]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[17];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#38/5 t.new#39/7 (/11 e.new#40/36 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
      context[36] = context[32];
      context[37] = context[33];
      context[38] = context[34];
      context[39] = context[35];
      if( ! refalrts::char_term( '_', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'E', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'x', context[18] ) )
        continue;
      if( ! refalrts::char_term( 't', context[17] ) )
        continue;
      context[40] = refalrts::char_left( 'l', context[38], context[39] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::char_left( 'o', context[38], context[39] );
      if( ! context[41] )
        continue;
      context[42] = refalrts::char_left( 'd', context[38], context[39] );
      if( ! context[42] )
        continue;
      context[43] = refalrts::char_left( 'e', context[38], context[39] );
      if( ! context[43] )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new#40 as range 36
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/48 # Symbol/50 # Identifier/51 e.2#0/46 )/49 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
        context[44] = context[36];
        context[45] = context[37];
        context[46] = 0;
        context[47] = 0;
        context[48] = refalrts::brackets_left( context[46], context[47], context[44], context[45] );
        if( ! context[48] )
          continue;
        refalrts::bracket_pointers(context[48], context[49]);
        context[50] = refalrts::ident_left( identifiers[ident_Symbol], context[46], context[47] );
        if( ! context[50] )
          continue;
        context[51] = refalrts::ident_left( identifiers[ident_Identifier], context[46], context[47] );
        if( ! context[51] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        // closed e.2#0 as range 46
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.2#0: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/50 {REMOVED TILE} 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/48 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ HalfReuse: (/51 AsIs: e.2#0/46 AsIs: )/49 HalfReuse: # Ok/12 HalfReuse: </29 HalfReuse: & Map@9/30 } e.2#0/46/52 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[52], context[53], context[46], context[47]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[48], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1]);
        refalrts::reinit_open_bracket(context[51]);
        refalrts::reinit_ident(context[12], identifiers[ident_Ok]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_gen_Map_Z9]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[51], context[49] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[51], context[30] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[7], context[48] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/44 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
      context[44] = context[36];
      context[45] = context[37];
      // closed e.Args#1 as range 44
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 {REMOVED TILE} '_'/24 'E'/19 'x'/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/43 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: e.Args#1/44 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[43], functions[efunc_MakeColdSolution]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#20/5 t.new#21/7 (/11 e.new#26/25 )/12 s.new#25/24 s.new#24/19 s.new#23/18 s.new#22/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new#26 as range 25
      do {
        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#27/5 t.new#28/7 (/11 e.new#29/27 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
        context[27] = context[25];
        context[28] = context[26];
        if( ! refalrts::char_term( 'T', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'y', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'e', context[17] ) )
          continue;
        // closed e.new#29 as range 27
        do {
          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#30/5 t.new#31/7 (/11 t.new#32/31 e.new#33/29 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          context[29] = context[27];
          context[30] = context[28];
          context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
          if( ! context[32] )
            continue;
          // closed e.new#33 as range 29
          do {
            // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#34/5 t.new#35/7 (/11 (/31 s.new#36/37 e.new#37/35 )/32 e.new#38/33 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
            context[33] = context[29];
            context[34] = context[30];
            context[35] = 0;
            context[36] = 0;
            if( ! refalrts::brackets_term( context[35], context[36], context[31] ) )
              continue;
            // closed e.new#38 as range 33
            if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
              continue;
            // closed e.new#37 as range 35
            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # CallBrackets/37 e.1#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
                continue;
              // closed e.1#0 as range 38
              // closed e.#0 as range 40
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.1#0: 38
              //DEBUG: e.#0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/31 AsIs: # CallBrackets/37 AsIs: e.1#0/38 AsIs: )/32 AsIs: e.#0/40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # ColdCallBrackets/37 e.1#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[37] ) )
                continue;
              // closed e.1#0 as range 38
              // closed e.#0 as range 40
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.1#0: 38
              //DEBUG: e.#0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/31 AsIs: # ColdCallBrackets/37 AsIs: e.1#0/38 AsIs: )/32 AsIs: e.#0/40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # TkVariable/37 e.1#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[37] ) )
                continue;
              // closed e.1#0 as range 38
              // closed e.#0 as range 40
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.1#0: 38
              //DEBUG: e.#0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/31 AsIs: # TkVariable/37 AsIs: e.1#0/38 AsIs: )/32 AsIs: e.#0/40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#39/5 t.new#40/7 (/11 (/31 # Symbol/37 s.new#41/42 e.new#42/38 )/32 e.new#43/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_Symbol], context[37] ) )
                continue;
              // closed e.new#43 as range 40
              if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
                continue;
              // closed e.new#42 as range 38
              do {
                // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#44/5 t.new#45/7 (/11 (/31 # Symbol/37 s.new#46/42 s.new#47/47 )/32 e.new#48/45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[43] = context[38];
                context[44] = context[39];
                context[45] = context[40];
                context[46] = context[41];
                // closed e.new#48 as range 45
                if( ! refalrts::svar_left( context[47], context[43], context[44] ) )
                  continue;
                if( ! refalrts::empty_seq( context[43], context[44] ) )
                  continue;
                do {
                  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # Symbol/37 # Number/42 s._#2/47 )/32 e.#0/48 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                  context[48] = context[45];
                  context[49] = context[46];
                  if( ! refalrts::ident_term( identifiers[ident_Number], context[42] ) )
                    continue;
                  // closed e.#0 as range 48
                  //DEBUG: t.IntrinsicFunction#1: 5
                  //DEBUG: t.Metatables#1: 7
                  //DEBUG: s._#2: 47
                  //DEBUG: e.#0: 48

                  refalrts::reset_allocator(vm);
                  //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 } (/50 (/51 Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } 0/52 )/53 ':'/54 (/55 # Symbol/56 # Char/57 'N'/58 )/59 (/60 # Symbol/61 # Char/62 '0'/63 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Symbol/37 AsIs: # Number/42 AsIs: s._#2/47 AsIs: )/32 AsIs: e.#0/48 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
                  refalrts::alloc_open_bracket(vm, context[50]);
                  refalrts::alloc_open_bracket(vm, context[51]);
                  refalrts::alloc_number(vm, context[52], 0UL);
                  refalrts::alloc_close_bracket(vm, context[53]);
                  refalrts::alloc_char(vm, context[54], ':');
                  refalrts::alloc_open_bracket(vm, context[55]);
                  refalrts::alloc_ident(vm, context[56], identifiers[ident_Symbol]);
                  refalrts::alloc_ident(vm, context[57], identifiers[ident_Char]);
                  refalrts::alloc_char(vm, context[58], 'N');
                  refalrts::alloc_close_bracket(vm, context[59]);
                  refalrts::alloc_open_bracket(vm, context[60]);
                  refalrts::alloc_ident(vm, context[61], identifiers[ident_Symbol]);
                  refalrts::alloc_ident(vm, context[62], identifiers[ident_Char]);
                  refalrts::alloc_char(vm, context[63], '0');
                  refalrts::reinit_open_bracket(context[0]);
                  refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
                  refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
                  refalrts::reinit_close_bracket(context[11]);
                  refalrts::reinit_open_bracket(context[24]);
                  refalrts::reinit_close_bracket(context[19]);
                  refalrts::reinit_close_bracket(context[18]);
                  refalrts::link_brackets( context[50], context[18] );
                  refalrts::link_brackets( context[24], context[19] );
                  refalrts::link_brackets( context[51], context[12] );
                  refalrts::link_brackets( context[31], context[32] );
                  refalrts::link_brackets( context[60], context[11] );
                  refalrts::link_brackets( context[55], context[59] );
                  refalrts::link_brackets( context[0], context[53] );
                  refalrts::Iter trash_prev = arg_begin->prev;
                  refalrts::use(trash_prev);
                  refalrts::Iter res = arg_end->next;
                  res = refalrts::splice_evar( res, context[11], context[18] );
                  res = refalrts::splice_evar( res, context[52], context[63] );
                  res = refalrts::splice_evar( res, context[17], context[1] );
                  res = refalrts::splice_evar( res, context[0], context[4] );
                  res = refalrts::splice_evar( res, context[50], context[51] );
                  res = refalrts::splice_evar( res, context[7], context[8] );
                  refalrts::splice_to_freelist_open( vm, trash_prev, res );
                  return refalrts::cSuccess;
                } while ( 0 );
                refalrts::stop_sentence(vm);

                // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # Symbol/37 # Char/42 s.Char#2/47 )/32 e.#0/48 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[48] = context[45];
                context[49] = context[46];
                if( ! refalrts::ident_term( identifiers[ident_Char], context[42] ) )
                  continue;
                // closed e.#0 as range 48
                //DEBUG: t.IntrinsicFunction#1: 5
                //DEBUG: t.Metatables#1: 7
                //DEBUG: s.Char#2: 47
                //DEBUG: e.#0: 48

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/50 Tile{ AsIs: t.IntrinsicFunction#1/5 } s.Char#2/47/51 (/52 e.#0/48/53 Tile{ HalfReuse: )/31 HalfReuse: </37 HalfReuse: & Intrinsic-Type$4=1@1/42 AsIs: s.Char#2/47 HalfReuse: (/32 AsIs: e.#0/48 AsIs: )/12 HalfReuse: </24 HalfReuse: & Type/19 HalfReuse: s.Char2 #47/18 HalfReuse: >/17 AsIs: >/1 } >/55 >/56 Tile{ ]] }
                refalrts::alloc_name(vm, context[50], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z2]);
                refalrts::copy_stvar(vm, context[51], context[47]);
                refalrts::alloc_open_bracket(vm, context[52]);
                refalrts::copy_evar(vm, context[53], context[54], context[48], context[49]);
                refalrts::alloc_close_call(vm, context[55]);
                refalrts::alloc_close_call(vm, context[56]);
                refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
                refalrts::reinit_open_call(context[11]);
                refalrts::reinit_close_bracket(context[31]);
                refalrts::reinit_open_call(context[37]);
                refalrts::reinit_name(context[42], functions[efunc_gen_Intrinsicm_Type_S4A1Z1]);
                refalrts::reinit_open_bracket(context[32]);
                refalrts::reinit_open_call(context[24]);
                refalrts::reinit_name(context[19], functions[efunc_Type]);
                refalrts::reinit_svar( context[18], context[47] );
                refalrts::reinit_close_call(context[17]);
                refalrts::push_stack( vm, context[56] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[55] );
                refalrts::push_stack( vm, context[11] );
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[37] );
                refalrts::push_stack( vm, context[17] );
                refalrts::push_stack( vm, context[24] );
                refalrts::link_brackets( context[32], context[12] );
                refalrts::link_brackets( context[52], context[31] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[55], context[56] );
                res = refalrts::splice_evar( res, context[31], context[1] );
                res = refalrts::splice_evar( res, context[53], context[54] );
                res = refalrts::splice_evar( res, context[51], context[52] );
                res = refalrts::splice_evar( res, context[5], context[6] );
                res = refalrts::splice_elem( res, context[50] );
                res = refalrts::splice_evar( res, context[7], context[11] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              do {
                // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # Symbol/37 # Identifier/42 e.2#0/43 )/32 e.#0/45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[43] = context[38];
                context[44] = context[39];
                context[45] = context[40];
                context[46] = context[41];
                if( ! refalrts::ident_term( identifiers[ident_Identifier], context[42] ) )
                  continue;
                // closed e.2#0 as range 43
                // closed e.#0 as range 45
                //DEBUG: t.IntrinsicFunction#1: 5
                //DEBUG: t.Metatables#1: 7
                //DEBUG: e.2#0: 43
                //DEBUG: e.#0: 45

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 HalfReuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/31 } Tile{ AsIs: t.IntrinsicFunction#1/5 } (/47 Tile{ AsIs: e.2#0/43 } Tile{ HalfReuse: )/37 HalfReuse: (/42 } e.#0/45/48 )/50 </51 & Intrinsic-Type$4=1@2/52 (/53 e.2#0/43/54 )/56 Tile{ HalfReuse: (/32 AsIs: e.#0/45 AsIs: )/12 HalfReuse: </24 HalfReuse: & Type/19 HalfReuse: </18 HalfReuse: & Implode_Ext/17 } e.2#0/43/57 >/59 >/60 >/61 >/62 Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[47]);
                refalrts::copy_evar(vm, context[48], context[49], context[45], context[46]);
                refalrts::alloc_close_bracket(vm, context[50]);
                refalrts::alloc_open_call(vm, context[51]);
                refalrts::alloc_name(vm, context[52], functions[efunc_gen_Intrinsicm_Type_S4A1Z2]);
                refalrts::alloc_open_bracket(vm, context[53]);
                refalrts::copy_evar(vm, context[54], context[55], context[43], context[44]);
                refalrts::alloc_close_bracket(vm, context[56]);
                refalrts::copy_evar(vm, context[57], context[58], context[43], context[44]);
                refalrts::alloc_close_call(vm, context[59]);
                refalrts::alloc_close_call(vm, context[60]);
                refalrts::alloc_close_call(vm, context[61]);
                refalrts::alloc_close_call(vm, context[62]);
                refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
                refalrts::reinit_open_call(context[11]);
                refalrts::reinit_name(context[31], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z3]);
                refalrts::reinit_close_bracket(context[37]);
                refalrts::reinit_open_bracket(context[42]);
                refalrts::reinit_open_bracket(context[32]);
                refalrts::reinit_open_call(context[24]);
                refalrts::reinit_name(context[19], functions[efunc_Type]);
                refalrts::reinit_open_call(context[18]);
                refalrts::reinit_name(context[17], functions[efunc_Implodeu_Ext]);
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[62] );
                refalrts::push_stack( vm, context[11] );
                refalrts::push_stack( vm, context[61] );
                refalrts::push_stack( vm, context[51] );
                refalrts::push_stack( vm, context[60] );
                refalrts::push_stack( vm, context[24] );
                refalrts::push_stack( vm, context[59] );
                refalrts::push_stack( vm, context[18] );
                refalrts::link_brackets( context[32], context[12] );
                refalrts::link_brackets( context[53], context[56] );
                refalrts::link_brackets( context[42], context[50] );
                refalrts::link_brackets( context[47], context[37] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[59], context[62] );
                res = refalrts::splice_evar( res, context[57], context[58] );
                res = refalrts::splice_evar( res, context[32], context[17] );
                res = refalrts::splice_evar( res, context[50], context[56] );
                res = refalrts::splice_evar( res, context[48], context[49] );
                res = refalrts::splice_evar( res, context[37], context[42] );
                res = refalrts::splice_evar( res, context[43], context[44] );
                res = refalrts::splice_elem( res, context[47] );
                res = refalrts::splice_evar( res, context[5], context[6] );
                res = refalrts::splice_evar( res, context[7], context[31] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # Symbol/37 # Name/42 e.2#0/43 )/32 e.#0/45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[43] = context[38];
              context[44] = context[39];
              context[45] = context[40];
              context[46] = context[41];
              if( ! refalrts::ident_term( identifiers[ident_Name], context[42] ) )
                continue;
              // closed e.2#0 as range 43
              // closed e.#0 as range 45
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.2#0: 43
              //DEBUG: e.#0: 45

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 } (/47 (/48 Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } 0/49 )/50 ':'/51 (/52 # Symbol/53 # Char/54 'F'/55 )/56 (/57 # Symbol/58 # Char/59 'g'/60 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Symbol/37 AsIs: # Name/42 AsIs: e.2#0/43 AsIs: )/32 AsIs: e.#0/45 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[47]);
              refalrts::alloc_open_bracket(vm, context[48]);
              refalrts::alloc_number(vm, context[49], 0UL);
              refalrts::alloc_close_bracket(vm, context[50]);
              refalrts::alloc_char(vm, context[51], ':');
              refalrts::alloc_open_bracket(vm, context[52]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[54], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[55], 'F');
              refalrts::alloc_close_bracket(vm, context[56]);
              refalrts::alloc_open_bracket(vm, context[57]);
              refalrts::alloc_ident(vm, context[58], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[59], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[60], 'g');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[47], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[48], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[57], context[11] );
              refalrts::link_brackets( context[52], context[56] );
              refalrts::link_brackets( context[0], context[50] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[49], context[60] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[47], context[48] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # ClosureBrackets/37 e.1#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[37] ) )
                continue;
              // closed e.1#0 as range 38
              // closed e.#0 as range 40
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.1#0: 38
              //DEBUG: e.#0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 } (/42 (/43 Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } 0/44 )/45 ':'/46 (/47 # Symbol/48 # Char/49 'F'/50 )/51 (/52 # Symbol/53 # Char/54 'c'/55 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # ClosureBrackets/37 AsIs: e.1#0/38 AsIs: )/32 AsIs: e.#0/40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[42]);
              refalrts::alloc_open_bracket(vm, context[43]);
              refalrts::alloc_number(vm, context[44], 0UL);
              refalrts::alloc_close_bracket(vm, context[45]);
              refalrts::alloc_char(vm, context[46], ':');
              refalrts::alloc_open_bracket(vm, context[47]);
              refalrts::alloc_ident(vm, context[48], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[49], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[50], 'F');
              refalrts::alloc_close_bracket(vm, context[51]);
              refalrts::alloc_open_bracket(vm, context[52]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[54], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[55], 'c');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[42], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[43], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[52], context[11] );
              refalrts::link_brackets( context[47], context[51] );
              refalrts::link_brackets( context[0], context[45] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[44], context[55] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # Brackets/37 e.1#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
                continue;
              // closed e.1#0 as range 38
              // closed e.#0 as range 40
              //DEBUG: t.IntrinsicFunction#1: 5
              //DEBUG: t.Metatables#1: 7
              //DEBUG: e.1#0: 38
              //DEBUG: e.#0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 } (/42 (/43 Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } 0/44 )/45 ':'/46 (/47 # Symbol/48 # Char/49 'B'/50 )/51 (/52 # Symbol/53 # Char/54 '0'/55 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Brackets/37 AsIs: e.1#0/38 AsIs: )/32 AsIs: e.#0/40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[42]);
              refalrts::alloc_open_bracket(vm, context[43]);
              refalrts::alloc_number(vm, context[44], 0UL);
              refalrts::alloc_close_bracket(vm, context[45]);
              refalrts::alloc_char(vm, context[46], ':');
              refalrts::alloc_open_bracket(vm, context[47]);
              refalrts::alloc_ident(vm, context[48], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[49], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[50], 'B');
              refalrts::alloc_close_bracket(vm, context[51]);
              refalrts::alloc_open_bracket(vm, context[52]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[54], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[55], '0');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[42], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[43], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[52], context[11] );
              refalrts::link_brackets( context[47], context[51] );
              refalrts::link_brackets( context[0], context[45] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[44], context[55] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 (/31 # ADT-Brackets/37 (/44 e.3#0/42 )/45 e.2#0/38 )/32 e.#0/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
            context[38] = context[35];
            context[39] = context[36];
            context[40] = context[33];
            context[41] = context[34];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
              continue;
            context[42] = 0;
            context[43] = 0;
            context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
            if( ! context[44] )
              continue;
            refalrts::bracket_pointers(context[44], context[45]);
            // closed e.3#0 as range 42
            // closed e.2#0 as range 38
            // closed e.#0 as range 40
            //DEBUG: t.IntrinsicFunction#1: 5
            //DEBUG: t.Metatables#1: 7
            //DEBUG: e.3#0: 42
            //DEBUG: e.2#0: 38
            //DEBUG: e.#0: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 } (/46 (/47 Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } 0/48 )/49 ':'/50 (/51 # Symbol/52 # Char/53 'B'/54 )/55 (/56 # Symbol/57 # Char/58 'a'/59 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # ADT-Brackets/37 AsIs: (/44 AsIs: e.3#0/42 AsIs: )/45 AsIs: e.2#0/38 AsIs: )/32 AsIs: e.#0/40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[46]);
            refalrts::alloc_open_bracket(vm, context[47]);
            refalrts::alloc_number(vm, context[48], 0UL);
            refalrts::alloc_close_bracket(vm, context[49]);
            refalrts::alloc_char(vm, context[50], ':');
            refalrts::alloc_open_bracket(vm, context[51]);
            refalrts::alloc_ident(vm, context[52], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[54], 'B');
            refalrts::alloc_close_bracket(vm, context[55]);
            refalrts::alloc_open_bracket(vm, context[56]);
            refalrts::alloc_ident(vm, context[57], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[58], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[59], 'a');
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
            refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
            refalrts::reinit_close_bracket(context[11]);
            refalrts::reinit_open_bracket(context[24]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::reinit_close_bracket(context[18]);
            refalrts::link_brackets( context[46], context[18] );
            refalrts::link_brackets( context[24], context[19] );
            refalrts::link_brackets( context[47], context[12] );
            refalrts::link_brackets( context[31], context[32] );
            refalrts::link_brackets( context[44], context[45] );
            refalrts::link_brackets( context[56], context[11] );
            refalrts::link_brackets( context[51], context[55] );
            refalrts::link_brackets( context[0], context[49] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[11], context[18] );
            res = refalrts::splice_evar( res, context[48], context[59] );
            res = refalrts::splice_evar( res, context[17], context[1] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[46], context[47] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 t.#0/31 e.#0/33 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          context[33] = context[29];
          context[34] = context[30];
          // closed e.#0 as range 33
          //DEBUG: t.IntrinsicFunction#1: 5
          //DEBUG: t.Metatables#1: 7
          //DEBUG: t.#0: 31
          //DEBUG: e.#0: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </35 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/36 Tile{ AsIs: t.Metatables#1/7 } Tile{ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 AsIs: t.IntrinsicFunction#1/5 } t.#0/31/37 (/39 Tile{ AsIs: e.#0/33 } Tile{ AsIs: )/12 HalfReuse: </24 } Tile{ HalfReuse: & Intrinsic-Type$4=1/11 AsIs: t.#0/31 } (/40 e.#0/33/41 )/43 </44 & Intrinsic-Type$4=1:1*7/45 t.#0/31/46 Tile{ HalfReuse: >/19 HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
          refalrts::copy_evar(vm, context[37], context[38], context[31], context[32]);
          refalrts::alloc_open_bracket(vm, context[39]);
          refalrts::alloc_open_bracket(vm, context[40]);
          refalrts::copy_evar(vm, context[41], context[42], context[33], context[34]);
          refalrts::alloc_close_bracket(vm, context[43]);
          refalrts::alloc_open_call(vm, context[44]);
          refalrts::alloc_name(vm, context[45], functions[efunc_gen_Intrinsicm_Type_S4A1B1D7]);
          refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
          refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z4]);
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[11], functions[efunc_gen_Intrinsicm_Type_S4A1]);
          refalrts::reinit_close_call(context[19]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[44] );
          refalrts::link_brackets( context[40], context[43] );
          refalrts::link_brackets( context[39], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[19];
          res = refalrts::splice_evar( res, context[40], context[47] );
          res = refalrts::splice_evar( res, context[11], context[32] );
          res = refalrts::splice_evar( res, context[12], context[24] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          if( ! refalrts::empty_seq( context[27], context[28] ) )
            continue;
          //DEBUG: t.IntrinsicFunction#1: 5
          //DEBUG: t.Metatables#1: 7

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction#1/5 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/7 AsIs: (/11 HalfReuse: (/12 HalfReuse: (/24 HalfReuse: # TkVariable/19 Reuse: 'e'/18 HalfReuse: # DRIVEN/17 HalfReuse: 0/1 } )/29 Tile{ HalfReuse: ':'/0 HalfReuse: (/4 } # Symbol/30 # Char/31 '*'/32 )/33 (/34 # Symbol/35 # Char/36 '0'/37 )/38 )/39 (/40 )/41 )/42 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[29]);
          refalrts::alloc_ident(vm, context[30], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[31], identifiers[ident_Char]);
          refalrts::alloc_char(vm, context[32], '*');
          refalrts::alloc_close_bracket(vm, context[33]);
          refalrts::alloc_open_bracket(vm, context[34]);
          refalrts::alloc_ident(vm, context[35], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[36], identifiers[ident_Char]);
          refalrts::alloc_char(vm, context[37], '0');
          refalrts::alloc_close_bracket(vm, context[38]);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::alloc_open_bracket(vm, context[40]);
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::alloc_close_bracket(vm, context[42]);
          refalrts::reinit_open_bracket(context[12]);
          refalrts::reinit_open_bracket(context[24]);
          refalrts::reinit_ident(context[19], identifiers[ident_TkVariable]);
          refalrts::update_char(context[18], 'e');
          refalrts::reinit_ident(context[17], identifiers[ident_DRIVEN]);
          refalrts::reinit_number(context[1], 0UL);
          refalrts::reinit_char(context[0], ':');
          refalrts::reinit_open_bracket(context[4]);
          refalrts::link_brackets( context[11], context[42] );
          refalrts::link_brackets( context[40], context[41] );
          refalrts::link_brackets( context[12], context[39] );
          refalrts::link_brackets( context[34], context[38] );
          refalrts::link_brackets( context[4], context[33] );
          refalrts::link_brackets( context[24], context[29] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[30], context[42] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[7], context[1] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/29 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
        context[29] = context[27];
        context[30] = context[28];
        // closed e.Args#1 as range 29
        //DEBUG: t.IntrinsicFunction#1: 5
        //DEBUG: t.Metatables#1: 7
        //DEBUG: e.Args#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </31 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/29 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Type*5/19 } e.Args#1/29/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
        refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_gen_Intrinsicm_Type_D5]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/27 )/12 'L'/24 'e'/19 'n'/18 'w'/17 >/1
      context[27] = context[25];
      context[28] = context[26];
      if( ! refalrts::char_term( 'L', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'e', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'n', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'w', context[17] ) )
        continue;
      // closed e.Args#1 as range 27
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </29 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Lenw/19 } e.Args#1/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Lenw]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[11], context[19] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.new#20/5 t.new#21/7 (/11 e.new#25/25 )/12 e.new#24/27 s.new#23/24 s.new#22/19 's'/18 't'/17 >/1
    context[25] = context[20];
    context[26] = context[21];
    context[27] = context[22];
    context[28] = context[23];
    if( ! refalrts::char_term( 's', context[18] ) )
      continue;
    if( ! refalrts::char_term( 't', context[17] ) )
      continue;
    // closed e.new#25 as range 25
    // closed e.new#24 as range 27
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/29 )/12 'F'/33 'i'/24 'r'/19 's'/18 't'/17 >/1
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      context[32] = context[28];
      if( ! refalrts::char_term( 'i', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[19] ) )
        continue;
      context[33] = refalrts::char_left( 'F', context[31], context[32] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.Args#1 as range 29
      //DEBUG: t.IntrinsicFunction#1: 5
      //DEBUG: t.Metatables#1: 7
      //DEBUG: e.Args#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } Tile{ HalfReuse: </19 } & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/34 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/29 AsIs: )/12 HalfReuse: </33 HalfReuse: & Intrinsic-First/24 } e.Args#1/29/35 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
      refalrts::copy_evar(vm, context[35], context[36], context[29], context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_open_call(context[33]);
      refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_First]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[11], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/29 )/12 'L'/24 'a'/19 's'/18 't'/17 >/1
    context[29] = context[25];
    context[30] = context[26];
    if( ! refalrts::char_term( 'L', context[24] ) )
      continue;
    if( ! refalrts::char_term( 'a', context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.Args#1 as range 29
    //DEBUG: t.IntrinsicFunction#1: 5
    //DEBUG: t.Metatables#1: 7
    //DEBUG: e.Args#1: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 } </31 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: (/11 AsIs: e.Args#1/29 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Last/19 } e.Args#1/29/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1]);
    refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
    refalrts::reinit_open_call(context[24]);
    refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Last]);
    refalrts::reinit_close_call(context[18]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[11], context[19] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic/4 t.IntrinsicFunction#1/5 t.Metatables#1/7 (/11 e.Args#1/9 )/12 e.BehaviorName#1/2 >/1
  // closed e.Args#1 as range 9
  // closed e.BehaviorName#1 as range 2
  //DEBUG: t.IntrinsicFunction#1: 5
  //DEBUG: t.Metatables#1: 7
  //DEBUG: e.Args#1: 9
  //DEBUG: e.BehaviorName#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.BehaviorName#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2/4 } Tile{ AsIs: t.Metatables#1/7 HalfReuse: </11 } & MakeColdSolution/13 Tile{ AsIs: t.IntrinsicFunction#1/5 } Tile{ AsIs: e.Args#1/9 } Tile{ HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_MakeColdSolution]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOptSentencem_MakeSubstitutionsm_Intrinsic("DoOptSentence-MakeSubstitutions-Intrinsic", COOKIE1_, COOKIE2_, func_DoOptSentencem_MakeSubstitutionsm_Intrinsic);


static refalrts::FnResult func_eDRIVEN(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & eDRIVEN/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkVariable/4 HalfReuse: 'e'/1 } # DRIVEN/5 0/6 )/7 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_DRIVEN]);
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
  refalrts::reinit_char(context[1], 'e');
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_eDRIVEN("eDRIVEN", COOKIE1_, COOKIE2_, func_eDRIVEN);


static refalrts::FnResult func_gen_Intrinsicm_Mu_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & Intrinsic-Mu$1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Intrinsic-Mu$1:1/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 t.new#4/15 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Intrinsic-Mu$1:1/4 t.new#5/5 (/9 e.new#8/17 )/10 (/13 e.new#9/19 )/14 (/15 s.new#6/23 e.new#7/21 )/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = 0;
    context[22] = 0;
    if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
      continue;
    // closed e.new#8 as range 17
    // closed e.new#9 as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    // closed e.new#7 as range 21
    do {
      // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/24 )/10 (/13 e.MetatableName#2/26 )/14 (/15 # Symbol/23 # Name/30 e.Name#3/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[23] ) )
        continue;
      context[30] = refalrts::ident_left( identifiers[ident_Name], context[28], context[29] );
      if( ! context[30] )
        continue;
      // closed e.MuArg#2 as range 24
      // closed e.MetatableName#2 as range 26
      // closed e.Name#3 as range 28
      //DEBUG: t.Metatables#1: 5
      //DEBUG: e.MuArg#2: 24
      //DEBUG: e.MetatableName#2: 26
      //DEBUG: e.Name#3: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} e.MetatableName#2/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ HalfReuse: # Ok/10 AsIs: (/13 } Tile{ HalfReuse: # CallBrackets/14 AsIs: (/15 AsIs: # Symbol/23 AsIs: # Name/30 AsIs: e.Name#3/28 AsIs: )/16 } Tile{ AsIs: e.MuArg#2/24 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[14], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/24 )/10 (/13 e.MetatableName#2/26 )/14 (/15 # ClosureBrackets/23 e.Body#3/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[23] ) )
        continue;
      // closed e.MuArg#2 as range 24
      // closed e.MetatableName#2 as range 26
      // closed e.Body#3 as range 28
      //DEBUG: t.Metatables#1: 5
      //DEBUG: e.MuArg#2: 24
      //DEBUG: e.MetatableName#2: 26
      //DEBUG: e.Body#3: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} e.MetatableName#2/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ HalfReuse: # Ok/10 AsIs: (/13 } Tile{ HalfReuse: # CallBrackets/14 AsIs: (/15 AsIs: # ClosureBrackets/23 AsIs: e.Body#3/28 AsIs: )/16 } Tile{ AsIs: e.MuArg#2/24 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[14], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Intrinsic-Mu$1:1/4 t.new#10/5 (/9 e.new#13/24 )/10 (/13 e.new#14/26 )/14 (/15 # Symbol/23 s.new#11/30 e.new#12/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[23] ) )
        continue;
      // closed e.new#13 as range 24
      // closed e.new#14 as range 26
      if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
        continue;
      // closed e.new#12 as range 28
      do {
        // </0 & Intrinsic-Mu$1:1/4 t.new#15/5 (/9 e.new#18/31 )/10 (/13 e.new#19/33 )/14 (/15 # Symbol/23 s.new#16/30 s.new#17/37 )/16 >/1
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[28];
        context[36] = context[29];
        // closed e.new#18 as range 31
        // closed e.new#19 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        do {
          // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/38 )/10 (/13 e.MetatableName#2/40 )/14 (/15 # Symbol/23 # Identifier/30 s.Name#3/37 )/16 >/1
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[33];
          context[41] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Identifier], context[30] ) )
            continue;
          // closed e.MuArg#2 as range 38
          // closed e.MetatableName#2 as range 40
          //DEBUG: t.Metatables#1: 5
          //DEBUG: s.Name#3: 37
          //DEBUG: e.MuArg#2: 38
          //DEBUG: e.MetatableName#2: 40
          //5: t.Metatables#1
          //37: s.Name#3
          //38: e.MuArg#2
          //40: e.MetatableName#2
          //47: s.Name#3

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[44], functions[efunc_gen_Intrinsicm_Mu_S1B1S3C1]);
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_name(vm, context[46], functions[efunc_ArithmeticSymbolToFunction]);
          refalrts::copy_stvar(vm, context[47], context[37]);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::alloc_close_call(vm, context[43]);
          refalrts::push_stack( vm, context[43] );
          refalrts::push_stack( vm, context[42] );
          res = refalrts::splice_elem( res, context[43] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[45] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_stvar( res, context[47] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_elem( res, context[42] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </42 & Intrinsic-Mu$1:1$3?1/46 # True/47 e.FunctionName#4/44 >/43
            context[44] = 0;
            context[45] = 0;
            context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
            context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
            if( ! context[47] )
              continue;
            // closed e.FunctionName#4 as range 44
            //DEBUG: t.Metatables#1: 5
            //DEBUG: s.Name#3: 37
            //DEBUG: e.MuArg#2: 38
            //DEBUG: e.MetatableName#2: 40
            //DEBUG: e.FunctionName#4: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/13 e.MetatableName#2/40 {REMOVED TILE} # Symbol/23 # Identifier/30 s.Name#3/37 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ HalfReuse: # Ok/14 AsIs: (/15 } Tile{ HalfReuse: # CallBrackets/16 HalfReuse: (/42 HalfReuse: # Symbol/46 Reuse: # Name/47 AsIs: e.FunctionName#4/44 HalfReuse: )/43 } Tile{ AsIs: e.MuArg#2/38 } Tile{ HalfReuse: )/1 ]] }
            refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
            refalrts::reinit_ident(context[16], identifiers[ident_CallBrackets]);
            refalrts::reinit_open_bracket(context[42]);
            refalrts::reinit_ident(context[46], identifiers[ident_Symbol]);
            refalrts::update_ident(context[47], identifiers[ident_Name]);
            refalrts::reinit_close_bracket(context[43]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[15], context[1] );
            refalrts::link_brackets( context[42], context[43] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[38], context[39] );
            res = refalrts::splice_evar( res, context[16], context[43] );
            res = refalrts::splice_evar( res, context[14], context[15] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[42], context[43]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/38 )/10 (/13 e.MetatableName#2/40 )/14 (/15 # Symbol/23 # Char/30 s.Name#3/37 )/16 >/1
        context[38] = context[31];
        context[39] = context[32];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Char], context[30] ) )
          continue;
        // closed e.MuArg#2 as range 38
        // closed e.MetatableName#2 as range 40
        //DEBUG: t.Metatables#1: 5
        //DEBUG: s.Name#3: 37
        //DEBUG: e.MuArg#2: 38
        //DEBUG: e.MetatableName#2: 40
        //5: t.Metatables#1
        //37: s.Name#3
        //38: e.MuArg#2
        //40: e.MetatableName#2
        //47: s.Name#3

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Intrinsicm_Mu_S1B1S4C1]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_ArithmeticSymbolToFunction]);
        refalrts::copy_stvar(vm, context[47], context[37]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[45] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_stvar( res, context[47] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Intrinsic-Mu$1:1$4?1/46 # True/47 e.FunctionName#4/44 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
          if( ! context[47] )
            continue;
          // closed e.FunctionName#4 as range 44
          //DEBUG: t.Metatables#1: 5
          //DEBUG: s.Name#3: 37
          //DEBUG: e.MuArg#2: 38
          //DEBUG: e.MetatableName#2: 40
          //DEBUG: e.FunctionName#4: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/13 e.MetatableName#2/40 {REMOVED TILE} # Symbol/23 # Char/30 s.Name#3/37 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ HalfReuse: # Ok/14 AsIs: (/15 } Tile{ HalfReuse: # CallBrackets/16 HalfReuse: (/42 HalfReuse: # Symbol/46 Reuse: # Name/47 AsIs: e.FunctionName#4/44 HalfReuse: )/43 } Tile{ AsIs: e.MuArg#2/38 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
          refalrts::reinit_ident(context[16], identifiers[ident_CallBrackets]);
          refalrts::reinit_open_bracket(context[42]);
          refalrts::reinit_ident(context[46], identifiers[ident_Symbol]);
          refalrts::update_ident(context[47], identifiers[ident_Name]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[15], context[1] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[16], context[43] );
          res = refalrts::splice_evar( res, context[14], context[15] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/31 )/10 (/13 e.MetatableName#2/33 )/14 (/15 # Symbol/23 # Identifier/30 e.Name#3/35 )/16 >/1
      context[31] = context[24];
      context[32] = context[25];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[28];
      context[36] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_Identifier], context[30] ) )
        continue;
      // closed e.MuArg#2 as range 31
      // closed e.MetatableName#2 as range 33
      // closed e.Name#3 as range 35
      //DEBUG: t.Metatables#1: 5
      //DEBUG: e.MuArg#2: 31
      //DEBUG: e.MetatableName#2: 33
      //DEBUG: e.Name#3: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/23 # Identifier/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeSubstitution-FromMetatables:1/10 AsIs: (/13 AsIs: e.MetatableName#2/33 AsIs: )/14 AsIs: (/15 } Tile{ AsIs: e.Name#3/35 } Tile{ AsIs: )/16 } Tile{ AsIs: (/9 } Tile{ AsIs: e.MuArg#2/31 } Tile{ HalfReuse: )/4 AsIs: t.Metatables#1/5 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[4] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[4], context[6] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/24 )/10 (/13 e.MetatableName#2/26 )/14 (/15 # Brackets/23 e.Chars#3/28 )/16 >/1
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[23] ) )
      continue;
    // closed e.MuArg#2 as range 24
    // closed e.MetatableName#2 as range 26
    // closed e.Chars#3 as range 28
    //DEBUG: t.Metatables#1: 5
    //DEBUG: e.MuArg#2: 24
    //DEBUG: e.MetatableName#2: 26
    //DEBUG: e.Chars#3: 28
    //5: t.Metatables#1
    //24: e.MuArg#2
    //26: e.MetatableName#2
    //28: e.Chars#3
    //35: e.Chars#3

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_Intrinsicm_Mu_S1B1S6C1]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[35], context[36], context[28], context[29]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[30] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </30 & Intrinsic-Mu$1:1$6?1/34 # Ok/35 e.Name#4/32 >/31
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
      context[35] = refalrts::ident_left( identifiers[ident_Ok], context[32], context[33] );
      if( ! context[35] )
        continue;
      // closed e.Name#4 as range 32
      //DEBUG: t.Metatables#1: 5
      //DEBUG: e.MuArg#2: 24
      //DEBUG: e.MetatableName#2: 26
      //DEBUG: e.Chars#3: 28
      //DEBUG: e.Name#4: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 (/13 {REMOVED TILE} {REMOVED TILE} # Brackets/23 e.Chars#3/28 )/16 </30 & Intrinsic-Mu$1:1$6?1/34 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeSubstitution-FromMetatables/4 AsIs: t.Metatables#1/5 AsIs: (/9 } Tile{ AsIs: e.MetatableName#2/26 } Tile{ AsIs: )/14 AsIs: (/15 } Tile{ AsIs: e.MuArg#2/24 } Tile{ HalfReuse: )/35 AsIs: e.Name#4/32 AsIs: >/31 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_MakeSubstitutionm_FromMetatables]);
      refalrts::reinit_close_bracket(context[35]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[35] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[31] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[30], context[31]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mu$1:1/4 t.Metatables#1/5 (/9 e.MuArg#2/7 )/10 (/13 e.MetatableName#2/11 )/14 t._#3/15 >/1
  // closed e.MuArg#2 as range 7
  // closed e.MetatableName#2 as range 11
  //DEBUG: t.Metatables#1: 5
  //DEBUG: t._#3: 15
  //DEBUG: e.MuArg#2: 7
  //DEBUG: e.MetatableName#2: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 e.MuArg#2/7 )/10 (/13 e.MetatableName#2/11 )/14 t._#3/15 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mu_S1B1("Intrinsic-Mu$1:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mu_S1B1);


static refalrts::FnResult func_Intrinsicm_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Intrinsic-Mu/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Intrinsic-Mu/4 e.new#1/2 t.new#2/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Intrinsic-Mu/4 e.Args#1/7 t.Metatables#1/5 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Args#1 as range 7
    //DEBUG: t.Metatables#1: 5
    //DEBUG: e.Args#1: 7
    //5: t.Metatables#1
    //7: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Intrinsicm_Mu_S1C1]);
    refalrts::copy_evar(vm, context[12], context[13], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </9 & Intrinsic-Mu$1?1/13 t.Function#2/20 e.MuArg#2/11 (/16 # Symbol/18 # Name/19 e.MetatableName#2/14 )/17 >/10
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::call_left( context[11], context[12], context[9], context[10] );
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_right( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = refalrts::ident_left( identifiers[ident_Symbol], context[14], context[15] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::ident_left( identifiers[ident_Name], context[14], context[15] );
      if( ! context[19] )
        continue;
      // closed e.MetatableName#2 as range 14
      context[21] = refalrts::tvar_left( context[20], context[11], context[12] );
      if( ! context[21] )
        continue;
      // closed e.MuArg#2 as range 11
      //DEBUG: t.Metatables#1: 5
      //DEBUG: e.Args#1: 7
      //DEBUG: e.MetatableName#2: 14
      //DEBUG: t.Function#2: 20
      //DEBUG: e.MuArg#2: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args#1/7 {REMOVED TILE} & Intrinsic-Mu$1?1/13 {REMOVED TILE} {REMOVED TILE} (/16 {REMOVED TILE} >/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Mu$1:1/4 } Tile{ AsIs: t.Metatables#1/5 HalfReuse: (/9 } Tile{ AsIs: e.MuArg#2/11 } Tile{ HalfReuse: )/18 HalfReuse: (/19 AsIs: e.MetatableName#2/14 AsIs: )/17 } Tile{ AsIs: t.Function#2/20 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Mu_S1B1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[17] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[18], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[5], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[9], context[10]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mu/4 e._#1/2 t.Metatables#1/5 >/1
  // closed e._#1 as range 2
  //DEBUG: t.Metatables#1: 5
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mu("Intrinsic-Mu", COOKIE1_, COOKIE2_, func_Intrinsicm_Mu);


static refalrts::FnResult func_ArithmeticSymbolToFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ArithmeticSymbolToFunction/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ArithmeticSymbolToFunction/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ArithmeticSymbolToFunction/4 '+'/5 >/1
    if( ! refalrts::char_term( '+', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'A'/4 Reuse: 'd'/5 HalfReuse: 'd'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'A');
    refalrts::update_char(context[5], 'd');
    refalrts::reinit_char(context[1], 'd');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '-'/5 >/1
    if( ! refalrts::char_term( '-', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'S'/4 Reuse: 'u'/5 HalfReuse: 'b'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'S');
    refalrts::update_char(context[5], 'u');
    refalrts::reinit_char(context[1], 'b');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '/'/5 >/1
    if( ! refalrts::char_term( '/', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'D'/4 Reuse: 'i'/5 HalfReuse: 'v'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'D');
    refalrts::update_char(context[5], 'i');
    refalrts::reinit_char(context[1], 'v');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '*'/5 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'M'/4 Reuse: 'u'/5 HalfReuse: 'l'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'M');
    refalrts::update_char(context[5], 'u');
    refalrts::reinit_char(context[1], 'l');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '%'/5 >/1
    if( ! refalrts::char_term( '%', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'M'/4 Reuse: 'o'/5 HalfReuse: 'd'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'M');
    refalrts::update_char(context[5], 'o');
    refalrts::reinit_char(context[1], 'd');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '?'/5 >/1
    if( ! refalrts::char_term( '?', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'R'/4 Reuse: 'e'/5 HalfReuse: 's'/1 }"idue"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "idue", 4);
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'R');
    refalrts::update_char(context[5], 'e');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmeticSymbolToFunction/4 s._#1/5 >/1
  //DEBUG: s._#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmeticSymbolToFunction/4 s._#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmeticSymbolToFunction("ArithmeticSymbolToFunction", COOKIE1_, COOKIE2_, func_ArithmeticSymbolToFunction);


static refalrts::FnResult func_AllChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & AllChars/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & AllChars/4 (/9 # Symbol/11 # Char/12 s.Char#1/13 )/10 e.#0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Char], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.#0 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.#0: 5
    //DEBUG: s.Char#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AllChars/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & DoAllChars/11 HalfReuse: (/12 AsIs: s.Char#1/13 AsIs: )/10 AsIs: e.#0/5 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[11], functions[efunc_DoAllChars]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[12], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllChars/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AllChars/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllChars/4 e.Terms#1/2 >/1
  // closed e.Terms#1 as range 2
  //DEBUG: e.Terms#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AllChars/4 e.Terms#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllChars("AllChars", COOKIE1_, COOKIE2_, func_AllChars);


static refalrts::FnResult func_DoAllChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoAllChars/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoAllChars/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DoAllChars/4 (/7 e.Chars#1/9 )/8 (/15 # Symbol/17 # Char/18 s.Char#1/19 )/16 e.Rest#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left( identifiers[ident_Symbol], context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::ident_left( identifiers[ident_Char], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.Chars#1 as range 9
    // closed e.Rest#1 as range 11
    if( ! refalrts::svar_left( context[19], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: e.Chars#1: 9
    //DEBUG: e.Rest#1: 11
    //DEBUG: s.Char#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Symbol/17 # Char/18 s.Char#1/19 )/16 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoAllChars/4 AsIs: (/7 AsIs: e.Chars#1/9 HalfReuse: s.Char1 #19/8 HalfReuse: )/15 } Tile{ AsIs: e.Rest#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_svar( context[8], context[19] );
    refalrts::reinit_close_bracket(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[15], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoAllChars/4 (/7 e.Chars#1/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Chars#1 as range 9
    //DEBUG: e.Chars#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoAllChars/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Chars#1/9 } Tile{ ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoAllChars/4 (/7 e.Chars#1/5 )/8 e.Rest#1/2 >/1
  // closed e.Chars#1 as range 5
  // closed e.Rest#1 as range 2
  //DEBUG: e.Chars#1: 5
  //DEBUG: e.Rest#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoAllChars/4 (/7 e.Chars#1/5 )/8 e.Rest#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoAllChars("DoAllChars", COOKIE1_, COOKIE2_, func_DoAllChars);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & MakeSubstitution-FromMetatables:1$1=1/4 (/7 e.Tables-B#2/5 )/8 (/11 e.MetatableName#1/9 )/12 (/15 e.Map#2/13 )/16 (/19 e.Tables-E#2/17 )/20 e.Result#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Tables-B#2 as range 5
  // closed e.MetatableName#1 as range 9
  // closed e.Map#2 as range 13
  // closed e.Tables-E#2 as range 17
  // closed e.Result#3 as range 2
  //DEBUG: e.Tables-B#2: 5
  //DEBUG: e.MetatableName#1: 9
  //DEBUG: e.Map#2: 13
  //DEBUG: e.Tables-E#2: 17
  //DEBUG: e.Result#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # Metatables/7 AsIs: e.Tables-B#2/5 HalfReuse: (/8 AsIs: (/11 AsIs: e.MetatableName#1/9 AsIs: )/12 HalfReuse: # Metatable/15 AsIs: e.Map#2/13 AsIs: )/16 } Tile{ AsIs: e.Tables-E#2/17 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Result#3/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Metatables]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[15], identifiers[ident_Metatable]);
  refalrts::link_brackets( context[4], context[20] );
  refalrts::link_brackets( context[8], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[4], context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1S1A1("MakeSubstitution-FromMetatables:1$1=1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1S1A1);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name#1/13 )/8 (/11 e.MuArg#1/15 )/12 e._#3/19 (/25 (/29 # Symbol/31 # Identifier/32 e.Name#1/33 )/30 t.Pointer#3/35 )/26 e._0#3/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Name#1 as range 13
    // closed e.MuArg#1 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = refalrts::ident_left( identifiers[ident_Symbol], context[27], context[28] );
      if( ! context[31] )
        continue;
      context[32] = refalrts::ident_left( identifiers[ident_Identifier], context[27], context[28] );
      if( ! context[32] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[13], context[14], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e._0#3 as range 21
      context[36] = refalrts::tvar_left( context[35], context[23], context[24] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      //DEBUG: e.Name#1: 13
      //DEBUG: e.MuArg#1: 15
      //DEBUG: e._#3: 19
      //DEBUG: e._0#3: 21
      //DEBUG: t.Pointer#3: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name#1/13 )/8 (/11 {REMOVED TILE} )/12 e._#3/19 {REMOVED TILE} # Identifier/32 e.Name#1/33 )/30 {REMOVED TILE} )/26 e._0#3/21 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/25 AsIs: (/29 Reuse: # CallBrackets/31 } Tile{ AsIs: t.Pointer#3/35 } Tile{ AsIs: e.MuArg#1/15 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[25], identifiers[ident_Ok]);
      refalrts::update_ident(context[31], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[29], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name#1/5 )/8 (/11 e.MuArg#1/9 )/12 e.Other#3/2 >/1
  // closed e.Name#1 as range 5
  // closed e.MuArg#1 as range 9
  // closed e.Other#3 as range 2
  //DEBUG: e.Name#1: 5
  //DEBUG: e.MuArg#1: 9
  //DEBUG: e.Other#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name#1/5 )/8 (/11 e.MuArg#1/9 )/12 e.Other#3/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1("MakeSubstitution-FromMetatables:1$1=1:1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & MakeSubstitution-FromMetatables:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 t.new#4/17 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName#1/19 )/8 (/11 e.Name#1/21 )/12 (/15 e.MuArg#1/23 )/16 (/17 # Metatables/27 e.Tables-B#2/28 (/34 (/38 e.MetatableName#1/41 )/39 # Metatable/40 e.Map#2/32 )/35 e.Tables-E#2/30 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = 0;
    context[26] = 0;
    if( ! refalrts::brackets_term( context[25], context[26], context[17] ) )
      continue;
    context[27] = refalrts::ident_left( identifiers[ident_Metatables], context[25], context[26] );
    if( ! context[27] )
      continue;
    // closed e.MetatableName#1 as range 19
    // closed e.Name#1 as range 21
    // closed e.MuArg#1 as range 23
    context[28] = 0;
    context[29] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[30] = context[25];
      context[31] = context[26];
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[32], context[33] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Metatable], context[32], context[33] );
      if( ! context[40] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[19], context[20], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      // closed e.Map#2 as range 32
      // closed e.Tables-E#2 as range 30
      //DEBUG: e.MetatableName#1: 19
      //DEBUG: e.Name#1: 21
      //DEBUG: e.MuArg#1: 23
      //DEBUG: e.Tables-B#2: 28
      //DEBUG: e.Map#2: 32
      //DEBUG: e.Tables-E#2: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.MetatableName#1/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & MakeSubstitution-FromMetatables:1$1=1/17 HalfReuse: (/27 AsIs: e.Tables-B#2/28 HalfReuse: )/34 AsIs: (/38 AsIs: e.MetatableName#1/41 AsIs: )/39 HalfReuse: (/40 AsIs: e.Map#2/32 AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tables-E#2/30 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeSubstitution-FromMetatables:1$1=1:1/8 AsIs: (/11 AsIs: e.Name#1/21 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.MuArg#1/23 } )/43 e.Map#2/32/44 Tile{ HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[32], context[33]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[17], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_open_bracket(context[40]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[43] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[40], context[35] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[27], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[16], context[35] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[28], context[29], context[25], context[26] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName#1/5 )/8 (/11 e.Name#1/9 )/12 (/15 e.MuArg#1/13 )/16 t.Metatable#2/17 >/1
  // closed e.MetatableName#1 as range 5
  // closed e.Name#1 as range 9
  // closed e.MuArg#1 as range 13
  //DEBUG: t.Metatable#2: 17
  //DEBUG: e.MetatableName#1: 5
  //DEBUG: e.Name#1: 9
  //DEBUG: e.MuArg#1: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName#1/5 )/8 (/11 e.Name#1/9 )/12 (/15 e.MuArg#1/13 )/16 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatable#2/17 HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1("MakeSubstitution-FromMetatables:1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1);


static refalrts::FnResult func_MakeSubstitutionm_FromMetatables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & MakeSubstitution-FromMetatables/4 t.Metatables#1/5 (/9 e.MetatableName#1/7 )/10 (/13 e.MuArg#1/11 )/14 e.Name#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.MetatableName#1 as range 7
  // closed e.MuArg#1 as range 11
  // closed e.Name#1 as range 2
  //DEBUG: t.Metatables#1: 5
  //DEBUG: e.MetatableName#1: 7
  //DEBUG: e.MuArg#1: 11
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeSubstitution-FromMetatables:1/4 } Tile{ AsIs: (/9 AsIs: e.MetatableName#1/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Name#1/2 } )/15 (/16 Tile{ AsIs: e.MuArg#1/11 } Tile{ AsIs: )/14 } Tile{ AsIs: t.Metatables#1/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[14] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeSubstitutionm_FromMetatables("MakeSubstitution-FromMetatables", COOKIE1_, COOKIE2_, func_MakeSubstitutionm_FromMetatables);


static refalrts::FnResult func_gen_Intrinsicm_Add_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Add:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 s.new#1/16 e.new#2/8 )/11 (/14 s.new#3/17 e.new#4/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[8], context[9] ) )
      continue;
    // closed e.new#2 as range 8
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    // closed e.new#4 as range 12
    do {
      // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 e.new#5/18 )/11 (/14 s.new#6/17 e.new#7/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[16] ) )
        continue;
      // closed e.new#5 as range 18
      // closed e.new#7 as range 20
      do {
        // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 e.Left#2/22 )/11 (/14 # Const/17 e.Right#2/24 )/15 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
          continue;
        // closed e.Left#2 as range 22
        // closed e.Right#2 as range 24
        //DEBUG: e.Left#2: 22
        //DEBUG: e.Right#2: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Add/10 HalfReuse: (/16 AsIs: e.Left#2/22 AsIs: )/11 } Tile{ AsIs: e.Right#2/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::update_ident(context[17], identifiers[ident_Ok]);
        refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[10], functions[efunc_Add]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[7] );
        refalrts::link_brackets( context[16], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[17] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 0/26 )/11 (/14 # ArithmResult/17 t.ArithmCall#2/27 )/15 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
        continue;
      context[26] = refalrts::number_left( 0UL, context[22], context[23] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: t.ArithmCall#2: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 0/26 )/11 (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall#2/27 } Tile{ ]] }
      refalrts::update_ident(context[17], identifiers[ident_Ok]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # ArithmResult/16 t.ArithmCall#2/23 )/11 (/14 # Const/17 0/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[16] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 0UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/17 0/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 AsIs: t.ArithmCall#2/23 } Tile{ ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Add:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Add_B1("Intrinsic-Add:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Add_B1);


static refalrts::FnResult func_Intrinsicm_Add(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Add/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Add:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Add_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Add("Intrinsic-Add", COOKIE1_, COOKIE2_, func_Intrinsicm_Add);


static refalrts::FnResult func_ArithmArgs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & ArithmArgs/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & ArithmArgs/4 (/9 s.new#1/11 e.new#2/7 )/10 e.new#3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new#3 as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new#2 as range 7
    do {
      // </0 & ArithmArgs/4 (/9 # Brackets/11 e.Left#1/12 )/10 e.Right#1/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[11] ) )
        continue;
      // closed e.Left#1 as range 12
      // closed e.Right#1 as range 14
      //DEBUG: e.Left#1: 12
      //DEBUG: e.Right#1: 14
      //12: e.Left#1
      //14: e.Right#1
      //21: e.Left#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_ArithmArgs_S1C1]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_ArithmOneArg]);
      refalrts::copy_evar(vm, context[21], context[22], context[12], context[13]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[19] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </16 & ArithmArgs$1?1/20 # Ok/21 e.Left#2/18 >/17
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::call_left( context[18], context[19], context[16], context[17] );
        context[21] = refalrts::ident_left( identifiers[ident_Ok], context[18], context[19] );
        if( ! context[21] )
          continue;
        // closed e.Left#2 as range 18
        //DEBUG: e.Left#1: 12
        //DEBUG: e.Right#1: 14
        //DEBUG: e.Left#2: 18
        //12: e.Left#1
        //14: e.Right#1
        //18: e.Left#2
        //27: e.Right#1

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_ArithmArgs_S1C2]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_ArithmOneArg]);
        refalrts::copy_evar(vm, context[27], context[28], context[14], context[15]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[25] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[22] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </22 & ArithmArgs$1?2/26 # Ok/27 e.Right#3/24 >/23
          context[24] = 0;
          context[25] = 0;
          context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
          context[27] = refalrts::ident_left( identifiers[ident_Ok], context[24], context[25] );
          if( ! context[27] )
            continue;
          // closed e.Right#3 as range 24
          //DEBUG: e.Left#1: 12
          //DEBUG: e.Right#1: 14
          //DEBUG: e.Left#2: 18
          //DEBUG: e.Right#3: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 (/9 # Brackets/11 e.Left#1/12 )/10 e.Right#1/14 </16 {REMOVED TILE} & ArithmArgs$1?2/26 # Ok/27 {REMOVED TILE} >/23 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/20 HalfReuse: (/21 AsIs: e.Left#2/18 HalfReuse: )/17 HalfReuse: (/22 } Tile{ AsIs: e.Right#3/24 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_ident(context[20], identifiers[ident_Ok]);
          refalrts::reinit_open_bracket(context[21]);
          refalrts::reinit_close_bracket(context[17]);
          refalrts::reinit_open_bracket(context[22]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[22], context[1] );
          refalrts::link_brackets( context[21], context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[20], context[22] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[22], context[23]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[16], context[17]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ArithmArgs/4 (/9 # Symbol/11 s.new#5/16 s.new#6/17 )/10 e.new#4/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Symbol], context[11] ) )
      continue;
    // closed e.new#4 as range 14
    if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    do {
      // </0 & ArithmArgs/4 (/9 # Symbol/11 # Char/16 s.Sign#1/17 )/10 (/22 # Symbol/24 # Number/25 s.Left#1/26 )/23 e.Right#1/18 >/1
      context[18] = context[14];
      context[19] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Char], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      context[24] = refalrts::ident_left( identifiers[ident_Symbol], context[20], context[21] );
      if( ! context[24] )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Number], context[20], context[21] );
      if( ! context[25] )
        continue;
      // closed e.Right#1 as range 18
      if( ! refalrts::svar_left( context[26], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: s.Sign#1: 17
      //DEBUG: e.Right#1: 18
      //DEBUG: s.Left#1: 26
      //17: s.Sign#1
      //18: e.Right#1
      //26: s.Left#1
      //32: e.Right#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_ArithmArgs_S2C1]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ArithmOneArg]);
      refalrts::copy_evar(vm, context[32], context[33], context[18], context[19]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </27 & ArithmArgs$2?1/31 # Ok/32 e.Right#2/29 >/28
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
        context[32] = refalrts::ident_left( identifiers[ident_Ok], context[29], context[30] );
        if( ! context[32] )
          continue;
        // closed e.Right#2 as range 29
        //DEBUG: s.Sign#1: 17
        //DEBUG: e.Right#1: 18
        //DEBUG: s.Left#1: 26
        //DEBUG: e.Right#2: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 (/9 # Symbol/11 # Char/16 s.Sign#1/17 {REMOVED TILE} e.Right#1/18 </27 & ArithmArgs$2?1/31 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/10 AsIs: (/22 Reuse: # Const/24 HalfReuse: s.Sign1 #17/25 AsIs: s.Left#1/26 AsIs: )/23 } Tile{ HalfReuse: (/32 AsIs: e.Right#2/29 HalfReuse: )/28 } Tile{ ]] }
        refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
        refalrts::update_ident(context[24], identifiers[ident_Const]);
        refalrts::reinit_svar( context[25], context[17] );
        refalrts::reinit_open_bracket(context[32]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::link_brackets( context[32], context[28] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[28] );
        res = refalrts::splice_evar( res, context[10], context[23] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[27], context[28]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ArithmArgs/4 (/9 # Symbol/11 # Number/16 s.Left#1/17 )/10 e.Right#1/18 >/1
    context[18] = context[14];
    context[19] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_Number], context[16] ) )
      continue;
    // closed e.Right#1 as range 18
    //DEBUG: s.Left#1: 17
    //DEBUG: e.Right#1: 18
    //17: s.Left#1
    //18: e.Right#1
    //25: e.Right#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_ArithmArgs_S3C1]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_ArithmOneArg]);
    refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[23] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </20 & ArithmArgs$3?1/24 # Ok/25 e.Right#2/22 >/21
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::call_left( context[22], context[23], context[20], context[21] );
      context[25] = refalrts::ident_left( identifiers[ident_Ok], context[22], context[23] );
      if( ! context[25] )
        continue;
      // closed e.Right#2 as range 22
      //DEBUG: s.Left#1: 17
      //DEBUG: e.Right#1: 18
      //DEBUG: e.Right#2: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 {REMOVED TILE} e.Right#1/18 </20 & ArithmArgs$3?1/24 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/9 HalfReuse: (/11 Reuse: # Const/16 AsIs: s.Left#1/17 AsIs: )/10 } Tile{ HalfReuse: (/25 AsIs: e.Right#2/22 HalfReuse: )/21 } Tile{ ]] }
      refalrts::reinit_ident(context[9], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::update_ident(context[16], identifiers[ident_Const]);
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::link_brackets( context[25], context[21] );
      refalrts::link_brackets( context[11], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[21] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[20], context[21]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmArgs/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmArgs("ArithmArgs", COOKIE1_, COOKIE2_, func_ArithmArgs);


static refalrts::FnResult func_ArithmOneArg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ArithmOneArg/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & ArithmOneArg/4 (/9 # ColdCallBrackets/11 (/14 # Symbol/16 # Name/17 e.Name#1/12 )/15 e.Arg#1/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_ColdCallBrackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[7], context[8] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Symbol], context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::ident_left( identifiers[ident_Name], context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Name#1 as range 12
    // closed e.Arg#1 as range 7
    //DEBUG: e.Name#1: 12
    //DEBUG: e.Arg#1: 7
    //7: e.Arg#1
    //12: e.Name#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ArithmOneArg_S1C1]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_ArithmeticFunctions]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & ArithmOneArg$1?1/22 e._#2/23 (/29 e.Name#1/31 )/30 e._0#2/25 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[20];
        context[26] = context[21];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[12], context[13], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        // closed e._0#2 as range 25
        //DEBUG: e.Name#1: 12
        //DEBUG: e.Arg#1: 7
        //DEBUG: e._#2: 23
        //DEBUG: e._0#2: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </18 & ArithmOneArg$1?1/22 e._#2/23 (/29 e.Name#1/31 )/30 e._0#2/25 >/19 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: # ArithmResult/4 AsIs: (/9 AsIs: # ColdCallBrackets/11 AsIs: (/14 AsIs: # Symbol/16 AsIs: # Name/17 AsIs: e.Name#1/12 AsIs: )/15 AsIs: e.Arg#1/7 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
        refalrts::reinit_ident(context[4], identifiers[ident_ArithmResult]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[23], context[24], context[20], context[21] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmOneArg/4 e.Number#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Number#1 as range 5
    //DEBUG: e.Number#1: 5
    //5: e.Number#1
    //12: e.Number#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_ArithmOneArg_S2C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Numberm_Check]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & ArithmOneArg$2?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Number#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/12 HalfReuse: # Const/8 HalfReuse: </1 } & Add/13 0/14 Tile{ AsIs: </0 Reuse: & SymbolsToNumber/4 AsIs: e.Number#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[14], 0UL);
      refalrts::update_ident(context[12], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[8], identifiers[ident_Const]);
      refalrts::reinit_open_call(context[1]);
      refalrts::update_name(context[4], functions[efunc_SymbolsToNumber]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmOneArg/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmOneArg/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmOneArg("ArithmOneArg", COOKIE1_, COOKIE2_, func_ArithmOneArg);


static refalrts::FnResult func_Numberm_Check(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Number-Check/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 s.new#1/13 )/10 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Char], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.new#2 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 '+'/13 )/10 e.Rest#1/14 >/1
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '+', context[13] ) )
        continue;
      // closed e.Rest#1 as range 14
      //DEBUG: e.Rest#1: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest#1/14 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 '-'/13 )/10 e.Rest#1/14 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.Rest#1 as range 14
    //DEBUG: e.Rest#1: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest#1/14 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Number-Check/4 e.Rest#1/2 >/1
  // closed e.Rest#1 as range 2
  //DEBUG: e.Rest#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number-Check-AllNumbers/4 AsIs: e.Rest#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Numberm_Checkm_AllNumbers]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numberm_Check("Number-Check", COOKIE1_, COOKIE2_, func_Numberm_Check);


static refalrts::FnResult func_Numberm_Checkm_AllNumbers(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Number-Check-AllNumbers/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s.new#1/13 )/10 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.new#2 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._#1/13 )/10 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: s._#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._#1/13 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._#1/13 )/10 e.Rest#1/14 >/1
    context[14] = context[5];
    context[15] = context[6];
    // closed e.Rest#1 as range 14
    //DEBUG: s._#1: 13
    //DEBUG: e.Rest#1: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._#1/13 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest#1/14 AsIs: >/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Number-Check-AllNumbers/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Number-Check-AllNumbers/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numberm_Checkm_AllNumbers("Number-Check-AllNumbers", COOKIE1_, COOKIE2_, func_Numberm_Checkm_AllNumbers);


static refalrts::FnResult func_SymbolsToNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & SymbolsToNumber/4 e.Symbols#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Symbols#1 as range 2
  //DEBUG: e.Symbols#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Symbols#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SymbolsToNumber("SymbolsToNumber", COOKIE1_, COOKIE2_, func_SymbolsToNumber);


static refalrts::FnResult func_NumberToSymbols(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & NumberToSymbols/4 e.Number#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Number#1 as range 2
  //DEBUG: e.Number#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: e.Number#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberToSymbols("NumberToSymbols", COOKIE1_, COOKIE2_, func_NumberToSymbols);


static refalrts::FnResult func_ArithmeticFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ArithmeticFunctions/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 'A'/4 HalfReuse: 'd'/1 } 'd'/5 )/6 (/7"Div"/8 )/10 (/11"Divmod"/12 )/14 (/15"Mod"/16 )/18 (/19"Mul"/20 )/22 (/23"Sub"/24 )/26 (/27"Numb"/28 )/30 Tile{ ]] }
  refalrts::alloc_char(vm, context[5], 'd');
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Div", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "Divmod", 6);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "Mod", 3);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_chars(vm, context[20], context[21], "Mul", 3);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "Sub", 3);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "Numb", 4);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], 'A');
  refalrts::reinit_char(context[1], 'd');
  refalrts::link_brackets( context[27], context[30] );
  refalrts::link_brackets( context[23], context[26] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmeticFunctions("ArithmeticFunctions", COOKIE1_, COOKIE2_, func_ArithmeticFunctions);


static refalrts::FnResult func_gen_Intrinsicm_Sub_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Intrinsic-Sub:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 s.new#1/17 e.new#2/8 )/11 (/14 # Const/16 e.new#3/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new#3 as range 12
    if( ! refalrts::svar_left( context[17], context[8], context[9] ) )
      continue;
    // closed e.new#2 as range 8
    do {
      // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 # Const/17 e.Left#2/18 )/11 (/14 # Const/16 e.Right#2/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
        continue;
      // closed e.Left#2 as range 18
      // closed e.Right#2 as range 20
      //DEBUG: e.Left#2: 18
      //DEBUG: e.Right#2: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Sub/10 HalfReuse: (/17 AsIs: e.Left#2/18 AsIs: )/11 } Tile{ AsIs: e.Right#2/20 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_ident(context[16], identifiers[ident_Ok]);
      refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Sub]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 # ArithmResult/17 t.ArithmCall#2/23 )/11 (/14 # Const/16 0/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 0UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/16 0/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall#2/23 } Tile{ ]] }
    refalrts::update_ident(context[17], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Sub:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Sub:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Sub_B1("Intrinsic-Sub:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Sub_B1);


static refalrts::FnResult func_Intrinsicm_Sub(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Sub/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Sub:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Sub_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Sub("Intrinsic-Sub", COOKIE1_, COOKIE2_, func_Intrinsicm_Sub);


static refalrts::FnResult func_gen_Intrinsicm_Mul_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Mul:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 s.new#1/16 e.new#2/8 )/11 (/14 s.new#3/17 e.new#4/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[8], context[9] ) )
      continue;
    // closed e.new#2 as range 8
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    // closed e.new#4 as range 12
    do {
      // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 e.new#5/18 )/11 (/14 s.new#6/17 e.new#7/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[16] ) )
        continue;
      // closed e.new#5 as range 18
      // closed e.new#7 as range 20
      do {
        // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 e.Left#2/22 )/11 (/14 # Const/17 e.Right#2/24 )/15 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
          continue;
        // closed e.Left#2 as range 22
        // closed e.Right#2 as range 24
        //DEBUG: e.Left#2: 22
        //DEBUG: e.Right#2: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Mul/10 HalfReuse: (/16 AsIs: e.Left#2/22 AsIs: )/11 } Tile{ AsIs: e.Right#2/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::update_ident(context[17], identifiers[ident_Ok]);
        refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[10], functions[efunc_Mul]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[7] );
        refalrts::link_brackets( context[16], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[17] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 1/26 )/11 (/14 # ArithmResult/17 t.ArithmCall#2/27 )/15 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
        continue;
      context[26] = refalrts::number_left( 1UL, context[22], context[23] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: t.ArithmCall#2: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 1/26 )/11 (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall#2/27 } Tile{ ]] }
      refalrts::update_ident(context[17], identifiers[ident_Ok]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # ArithmResult/16 t.ArithmCall#2/23 )/11 (/14 # Const/17 1/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[16] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 1UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/17 1/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 AsIs: t.ArithmCall#2/23 } Tile{ ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mul:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mul_B1("Intrinsic-Mul:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mul_B1);


static refalrts::FnResult func_Intrinsicm_Mul(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Mul/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Mul:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Mul_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mul("Intrinsic-Mul", COOKIE1_, COOKIE2_, func_Intrinsicm_Mul);


static refalrts::FnResult func_gen_Intrinsicm_Div_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Div:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e.new#1/8 )/11 (/14 # Const/16 e.new#2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new#1 as range 8
    // closed e.new#2 as range 12
    do {
      // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._#2 as range 17
      //DEBUG: e._#2: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 s.new#3/21 e.new#4/17 )/11 (/14 # Const/16 e.new#5/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    // closed e.new#5 as range 19
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new#4 as range 17
    do {
      // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 # Const/21 e.Left#2/22 )/11 (/14 # Const/16 e.Right#2/24 )/15 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[21] ) )
        continue;
      // closed e.Left#2 as range 22
      // closed e.Right#2 as range 24
      //DEBUG: e.Left#2: 22
      //DEBUG: e.Right#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Div/10 HalfReuse: (/21 AsIs: e.Left#2/22 AsIs: )/11 } Tile{ AsIs: e.Right#2/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_ident(context[16], identifiers[ident_Ok]);
      refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Div]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[21], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 # ArithmResult/21 t.ArithmCall#2/27 )/11 (/14 # Const/16 1/26 )/15 >/1
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    context[25] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[21] ) )
      continue;
    context[26] = refalrts::number_left( 1UL, context[24], context[25] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    //DEBUG: t.ArithmCall#2: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/16 1/26 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/21 AsIs: t.ArithmCall#2/27 } Tile{ ]] }
    refalrts::update_ident(context[21], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Div:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Div_B1("Intrinsic-Div:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Div_B1);


static refalrts::FnResult func_Intrinsicm_Div(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Div/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Div:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Div_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Div("Intrinsic-Div", COOKIE1_, COOKIE2_, func_Intrinsicm_Div);


static refalrts::FnResult func_gen_Intrinsicm_Mod_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Intrinsic-Mod:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e.new#1/8 )/11 (/14 # Const/16 e.new#2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new#1 as range 8
    // closed e.new#2 as range 12
    do {
      // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._#2 as range 17
      //DEBUG: e._#2: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 # Const/21 e.Left#2/17 )/11 (/14 # Const/16 e.Right#2/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    context[21] = refalrts::ident_left( identifiers[ident_Const], context[17], context[18] );
    if( ! context[21] )
      continue;
    // closed e.Left#2 as range 17
    // closed e.Right#2 as range 19
    //DEBUG: e.Left#2: 17
    //DEBUG: e.Right#2: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Mod/10 HalfReuse: (/21 AsIs: e.Left#2/17 AsIs: )/11 } Tile{ AsIs: e.Right#2/19 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[10], functions[efunc_Mod]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_close_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[21], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mod:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mod:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mod_B1("Intrinsic-Mod:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mod_B1);


static refalrts::FnResult func_Intrinsicm_Mod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Mod/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Mod:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Mod_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mod("Intrinsic-Mod", COOKIE1_, COOKIE2_, func_Intrinsicm_Mod);


static refalrts::FnResult func_gen_Intrinsicm_Divmod_B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Intrinsic-Divmod:1$2=1/4 (/7 e.Q#3/5 )/8 e.R#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Q#3 as range 5
  // closed e.R#3 as range 2
  //DEBUG: e.Q#3: 5
  //DEBUG: e.R#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 HalfReuse: # Brackets/7 } </9 & Map@11/10 Tile{ AsIs: e.Q#3/5 } >/11 )/12 </13 Tile{ HalfReuse: & Map@11/8 AsIs: e.R#3/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z11]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Brackets]);
  refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Divmod_B1S2A1("Intrinsic-Divmod:1$2=1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Divmod_B1S2A1);


static refalrts::FnResult func_gen_Intrinsicm_Divmod_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Divmod:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e.new#1/8 )/11 (/14 # Const/16 e.new#2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new#1 as range 8
    // closed e.new#2 as range 12
    do {
      // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._#2 as range 17
      //DEBUG: e._#2: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e._#2/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 s.new#3/21 e.new#4/17 )/11 (/14 # Const/16 e.new#5/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    // closed e.new#5 as range 19
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new#4 as range 17
    do {
      // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 # Const/21 e.Left#2/22 )/11 (/14 # Const/16 e.Right#2/24 )/15 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[21] ) )
        continue;
      // closed e.Left#2 as range 22
      // closed e.Right#2 as range 24
      //DEBUG: e.Left#2: 22
      //DEBUG: e.Right#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/14 # Const/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Divmod:1$2=1/4 HalfReuse: </7 HalfReuse: & Divmod/10 HalfReuse: (/21 AsIs: e.Left#2/22 AsIs: )/11 } Tile{ AsIs: e.Right#2/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Divmod_B1S2A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[21], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 # ArithmResult/21 t.ArithmCall#2/27 )/11 (/14 # Const/16 1/26 )/15 >/1
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    context[25] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[21] ) )
      continue;
    context[26] = refalrts::number_left( 1UL, context[24], context[25] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    //DEBUG: t.ArithmCall#2: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Ok/7 AsIs: (/10 Reuse: # Brackets/21 AsIs: t.ArithmCall#2/27 AsIs: )/11 AsIs: (/14 Reuse: # Symbol/16 HalfReuse: # Number/26 HalfReuse: 0/15 HalfReuse: )/1 ]] }
    refalrts::update_ident(context[21], identifiers[ident_Brackets]);
    refalrts::update_ident(context[16], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[26], identifiers[ident_Number]);
    refalrts::reinit_number(context[15], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[14], context[1] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Divmod:1/4 e._#2/2 >/1
  // closed e._#2 as range 2
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 e._#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Divmod_B1("Intrinsic-Divmod:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Divmod_B1);


static refalrts::FnResult func_Intrinsicm_Divmod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Divmod/4 e.Args#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Divmod:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Divmod_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Divmod("Intrinsic-Divmod", COOKIE1_, COOKIE2_, func_Intrinsicm_Divmod);


static refalrts::FnResult func_Intrinsicm_Compare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Intrinsic-Compare/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Compare/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Compare_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_ArithmArgs]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Compare$1?1/11 # Ok/12 (/15 # Const/17 e.Left#2/13 )/16 (/20 # Const/22 e.Right#2/18 )/21 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left( identifiers[ident_Const], context[13], context[14] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[9], context[10] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Const], context[18], context[19] );
      if( ! context[22] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      // closed e.Left#2 as range 13
      // closed e.Right#2 as range 18
      //DEBUG: e.Args#1: 5
      //DEBUG: e.Left#2: 13
      //DEBUG: e.Right#2: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args#1/5 {REMOVED TILE} (/20 # Const/22 {REMOVED TILE} )/21 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } Tile{ HalfReuse: # Symbol/7 HalfReuse: # Char/11 HalfReuse: </12 HalfReuse: & Compare/15 HalfReuse: (/17 AsIs: e.Left#2/13 AsIs: )/16 } Tile{ AsIs: e.Right#2/18 } Tile{ AsIs: >/8 HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[11], identifiers[ident_Char]);
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[15], functions[efunc_Compare]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[17], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[16] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Compare/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Compare/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Compare("Intrinsic-Compare", COOKIE1_, COOKIE2_, func_Intrinsicm_Compare);


static refalrts::FnResult func_gen_Intrinsicm_Chr_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Chr$1=2/4 e.Substitution#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution#3 as range 2
  //DEBUG: e.Substitution#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Chr$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution#3/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Chr_S1A2("Intrinsic-Chr$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Chr_S1A2);


static refalrts::FnResult func_Intrinsicm_Chr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Chr/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Chr/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Chr_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Chr$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Chr$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@1/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Chr_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z1]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Chr/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Chr/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Chr("Intrinsic-Chr", COOKIE1_, COOKIE2_, func_Intrinsicm_Chr);


static refalrts::FnResult func_CheckArgsm_Intrinsicm_StaticSubstitution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 e.new#1/5 )/8 s.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t.new#4/12 e.new#5/10 )/8 s.new#3/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[13] = refalrts::tvar_left( context[12], context[10], context[11] );
    if( ! context[13] )
      continue;
    // closed e.new#5 as range 10
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 s.new#7/18 e.new#8/16 )/13 e.new#9/14 )/8 s.new#6/9 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = 0;
      context[17] = 0;
      if( ! refalrts::brackets_term( context[16], context[17], context[12] ) )
        continue;
      // closed e.new#9 as range 14
      if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
        continue;
      // closed e.new#8 as range 16
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # Symbol/18 s.SymbolName#1/23 e.2#0/19 )/13 e.#0/21 )/8 s.SymbolName#1/9 >/1
        context[19] = context[16];
        context[20] = context[17];
        context[21] = context[14];
        context[22] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[18] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[23], context[9], context[19], context[20] ) )
          continue;
        // closed e.2#0 as range 19
        // closed e.#0 as range 21
        //DEBUG: s.SymbolName#1: 9
        //DEBUG: e.2#0: 19
        //DEBUG: e.#0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 (/12 # Symbol/18 s.SymbolName#1/23 e.2#0/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e.#0/21 AsIs: )/8 AsIs: s.SymbolName#1/9 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # TkVariable/18 e.1#0/19 )/13 e.#0/21 )/8 s.SymbolName#1/9 >/1
        context[19] = context[16];
        context[20] = context[17];
        context[21] = context[14];
        context[22] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[18] ) )
          continue;
        // closed e.1#0 as range 19
        // closed e.#0 as range 21
        //DEBUG: s.SymbolName#1: 9
        //DEBUG: e.1#0: 19
        //DEBUG: e.#0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 (/12 # TkVariable/18 e.1#0/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e.#0/21 AsIs: )/8 AsIs: s.SymbolName#1/9 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # ColdCallBrackets/18 e.1#0/19 )/13 e.#0/21 )/8 s.SymbolName#1/9 >/1
      context[19] = context[16];
      context[20] = context[17];
      context[21] = context[14];
      context[22] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[18] ) )
        continue;
      // closed e.1#0 as range 19
      // closed e.#0 as range 21
      //DEBUG: s.SymbolName#1: 9
      //DEBUG: e.1#0: 19
      //DEBUG: e.#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 (/12 # ColdCallBrackets/18 e.1#0/19 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e.#0/21 AsIs: )/8 AsIs: s.SymbolName#1/9 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t.#0/12 e.#0/14 )/8 s.SymbolName#1/9 >/1
    context[14] = context[10];
    context[15] = context[11];
    // closed e.#0 as range 14
    //DEBUG: t.#0: 12
    //DEBUG: s.SymbolName#1: 9
    //DEBUG: e.#0: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t.#0/12 e.#0/14 )/8 s.SymbolName#1/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 )/8 s.SymbolName#1/9 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.SymbolName#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 )/8 s.SymbolName#1/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 e.Args#1/5 )/8 s.SymbolName#1/9 >/1
  // closed e.Args#1 as range 5
  //DEBUG: s.SymbolName#1: 9
  //DEBUG: e.Args#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.SymbolName#1/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/4 HalfReuse: s.SymbolName1 #9/7 AsIs: e.Args#1/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckArgsm_Intrinsicm_StaticSubstitution("CheckArgs-Intrinsic-StaticSubstitution", COOKIE1_, COOKIE2_, func_CheckArgsm_Intrinsicm_StaticSubstitution);


static refalrts::FnResult func_StaticSubstitution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & StaticSubstitution/4 (/7 e.Args#1/5 )/8 (/11 e.FuncName#1/9 )/12 s.Func#1/13 s.SymbolFrom#1/14 s.SymbolTo#1/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Args#1 as range 5
  // closed e.FuncName#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Args#1: 5
  //DEBUG: e.FuncName#1: 9
  //DEBUG: s.Func#1: 13
  //DEBUG: s.SymbolFrom#1: 14
  //DEBUG: s.SymbolTo#1: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Func#1/13 s.SymbolFrom#1/14 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@12/4 HalfReuse: s.SymbolFrom1 #14/7 } Tile{ AsIs: s.SymbolTo#1/15 } Tile{ HalfReuse: s.Func1 #13/8 AsIs: (/11 AsIs: e.FuncName#1/9 AsIs: )/12 } Tile{ AsIs: e.Args#1/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
  refalrts::reinit_svar( context[7], context[14] );
  refalrts::reinit_svar( context[8], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StaticSubstitution("StaticSubstitution", COOKIE1_, COOKIE2_, func_StaticSubstitution);


static refalrts::FnResult func_gen_Intrinsicm_Ord_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Ord$1=2/4 e.Substitution#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution#3 as range 2
  //DEBUG: e.Substitution#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Ord$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution#3/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Ord_S1A2("Intrinsic-Ord$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Ord_S1A2);


static refalrts::FnResult func_Intrinsicm_Ord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Ord/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Ord/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Ord_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Ord$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Ord$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@2/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Ord_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z2]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Ord/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Ord/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Ord("Intrinsic-Ord", COOKIE1_, COOKIE2_, func_Intrinsicm_Ord);


static refalrts::FnResult func_gen_Intrinsicm_Upper_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Upper$1=2/4 e.Substitution#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution#3 as range 2
  //DEBUG: e.Substitution#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Upper$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution#3/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Upper_S1A2("Intrinsic-Upper$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Upper_S1A2);


static refalrts::FnResult func_Intrinsicm_Upper(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Upper/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Upper/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Upper_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Upper$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Upper$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@3/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Upper_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z3]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Upper/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Upper/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Upper("Intrinsic-Upper", COOKIE1_, COOKIE2_, func_Intrinsicm_Upper);


static refalrts::FnResult func_gen_Intrinsicm_Lower_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Lower$1=2/4 e.Substitution#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution#3 as range 2
  //DEBUG: e.Substitution#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Lower$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution#3/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Lower_S1A2("Intrinsic-Lower$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Lower_S1A2);


static refalrts::FnResult func_Intrinsicm_Lower(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Lower/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Lower/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Lower_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Lower$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Lower$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@4/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Lower_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z4]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Lower/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Lower/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Lower("Intrinsic-Lower", COOKIE1_, COOKIE2_, func_Intrinsicm_Lower);


static refalrts::FnResult func_gen_Intrinsicm_Numb_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Numb$1=2/4 e.Result#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result#3 as range 2
  //DEBUG: e.Result#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Numb$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Result#3/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Numb_S1A2("Intrinsic-Numb$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Numb_S1A2);


static refalrts::FnResult func_Intrinsicm_Numb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Numb/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Numb/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Numb_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Numb$1?1/11 # Ok/12 e.Chars#2/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars#2 as range 9
      //DEBUG: e.Args#1: 5
      //DEBUG: e.Chars#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args#1/5 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Numb$1=2/4 } </13 Tile{ HalfReuse: & NumberToSymbols/7 HalfReuse: </11 HalfReuse: & Numb/12 AsIs: e.Chars#2/9 AsIs: >/8 AsIs: >/1 } >/14 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Numb_S1A2]);
      refalrts::reinit_name(context[7], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_Numb]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Numb/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Numb/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Numb("Intrinsic-Numb", COOKIE1_, COOKIE2_, func_Intrinsicm_Numb);


static refalrts::FnResult func_gen_Intrinsicm_Symb_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Symb$1=3/4 e.Result#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result#4 as range 2
  //DEBUG: e.Result#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Symb$1=3/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Result#4/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Symb_S1A3("Intrinsic-Symb$1=3", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Symb_S1A3);


static refalrts::FnResult func_gen_Intrinsicm_Symb_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Symb$1=2/4 e.Numbers#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Numbers#3 as range 2
  //DEBUG: e.Numbers#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Symb$1=3/6 Tile{ AsIs: </0 Reuse: & Map@9/4 AsIs: e.Numbers#3/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Symb_S1A3]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Symb_S1A2("Intrinsic-Symb$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Symb_S1A2);


static refalrts::FnResult func_Intrinsicm_Symb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Symb/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Symb/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Symb_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_ArithmOneArg]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Symb$1?1/11 # Ok/12 # Const/13 e._#2/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Const], context[9], context[10] );
      if( ! context[13] )
        continue;
      // closed e._#2 as range 9
      //DEBUG: e.Args#1: 5
      //DEBUG: e._#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._#2/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Symb$1=2/1 } Tile{ HalfReuse: </13 } & Symb/14 Tile{ AsIs: </0 Reuse: & SymbolsToNumber/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 HalfReuse: >/12 } Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Symb]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Symb_S1A2]);
      refalrts::reinit_open_call(context[13]);
      refalrts::update_name(context[4], functions[efunc_SymbolsToNumber]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Symb/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Symb/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Symb("Intrinsic-Symb", COOKIE1_, COOKIE2_, func_Intrinsicm_Symb);


static refalrts::FnResult func_CharToNode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CharToNode/4 e.Char#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Char#1 as range 2
  //DEBUG: e.Char#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: e.Char#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CharToNode("CharToNode", COOKIE1_, COOKIE2_, func_CharToNode);


static refalrts::FnResult func_gen_Intrinsicm_Implode_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Intrinsic-Implode$1=3/4 (/7 e.NonIdent#3/5 )/8 e.Result#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.NonIdent#3 as range 5
  // closed e.Result#4 as range 2
  //DEBUG: e.NonIdent#3: 5
  //DEBUG: e.Result#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 } Tile{ AsIs: e.Result#4/2 } Tile{ AsIs: </0 Reuse: & Map@9/4 } Tile{ AsIs: e.NonIdent#3/5 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Implode_S1A3("Intrinsic-Implode$1=3", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Implode_S1A3);


static refalrts::FnResult func_gen_Intrinsicm_Implode_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode$1=2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Intrinsic-Implode$1=2/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Intrinsic-Implode$1=2/4 0/5 e.NonIdent#3/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.NonIdent#3 as range 6
    //DEBUG: e.NonIdent#3: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/8 (/9 # Symbol/10 # Number/11 0/12 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@9/5 AsIs: e.NonIdent#3/6 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[8], identifiers[ident_Ok]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_ident(vm, context[10], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Number]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[9], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[8], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode$1=2/4 s.Ident#3/5 e.NonIdent#3/2 >/1
  // closed e.NonIdent#3 as range 2
  //DEBUG: s.Ident#3: 5
  //DEBUG: e.NonIdent#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Implode$1=3/4 } (/6 Tile{ AsIs: e.NonIdent#3/2 } )/7 (/8 # Symbol/9 # Identifier/10 </11 & Explode/12 Tile{ AsIs: s.Ident#3/5 } >/13 )/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Identifier]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Explode]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Implode_S1A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Implode_S1A2("Intrinsic-Implode$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Implode_S1A2);


static refalrts::FnResult func_Intrinsicm_Implode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Implode/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Implode_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Implode$1?1/11 # Ok/12 e.Chars#2/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars#2 as range 9
      //DEBUG: e.Args#1: 5
      //DEBUG: e.Chars#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Intrinsic-Implode/4 e.Args#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Intrinsic-Implode$1=2/7 HalfReuse: </11 HalfReuse: & Implode/12 AsIs: e.Chars#2/9 AsIs: >/8 AsIs: >/1 ]] }
      refalrts::reinit_name(context[7], functions[efunc_gen_Intrinsicm_Implode_S1A2]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_Implode]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Implode/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Implode("Intrinsic-Implode", COOKIE1_, COOKIE2_, func_Intrinsicm_Implode);


static refalrts::FnResult func_Intrinsicm_Implodeu_Ext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode_Ext/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Implode_Ext/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Implodeu_Ext_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Implode_Ext$1?1/11 # Ok/12 e.Chars#2/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars#2 as range 9
      //DEBUG: e.Args#1: 5
      //DEBUG: e.Chars#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Intrinsic-Implode_Ext/4 e.Args#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ HalfReuse: (/7 HalfReuse: # Symbol/11 Reuse: # Identifier/12 AsIs: e.Chars#2/9 HalfReuse: )/8 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[7]);
      refalrts::reinit_ident(context[11], identifiers[ident_Symbol]);
      refalrts::update_ident(context[12], identifiers[ident_Identifier]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode_Ext/4 e.Args#1/2 >/1
  // closed e.Args#1 as range 2
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Implode_Ext/4 e.Args#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Implodeu_Ext("Intrinsic-Implode_Ext", COOKIE1_, COOKIE2_, func_Intrinsicm_Implodeu_Ext);


static refalrts::FnResult func_Intrinsicm_Explode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Intrinsic-Explode/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Explode/4 (/9 # Symbol/11 # Identifier/12 e.Name#1/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Identifier], context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Name#1 as range 7
    //DEBUG: e.Name#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Explode/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/9 HalfReuse: </11 HalfReuse: & Map@9/12 AsIs: e.Name#1/7 HalfReuse: >/10 } Tile{ ]] }
    refalrts::reinit_ident(context[9], identifiers[ident_Ok]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_gen_Map_Z9]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Explode/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Explode/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Explode("Intrinsic-Explode", COOKIE1_, COOKIE2_, func_Intrinsicm_Explode);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Intrinsic-Type$4=1/4 t.Term#1/5 (/9 e.Rest#1/7 )/10 s.Type#2/11 s.SubType#2/12 e._#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Rest#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e._#2 as range 2
  //DEBUG: t.Term#1: 5
  //DEBUG: e.Rest#1: 7
  //DEBUG: s.Type#2: 11
  //DEBUG: s.SubType#2: 12
  //DEBUG: e._#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._#2/2 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } # Symbol/13 Tile{ HalfReuse: # Char/10 AsIs: s.Type#2/11 } )/14 Tile{ AsIs: (/9 } # Symbol/15 # Char/16 Tile{ AsIs: s.SubType#2/12 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.Term#1/5 } Tile{ AsIs: e.Rest#1/7 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Symbol]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Char]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[10], identifiers[ident_Char]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[9], context[1] );
  refalrts::link_brackets( context[4], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1("Intrinsic-Type$4=1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1);


static refalrts::FnResult func_Intrinsicm_Type(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Intrinsic-Type/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Type/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Intrinsic-Type/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Intrinsic-Type/4 (/7 # CallBrackets/13 e._#1/14 )/8 e._0#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e._#1 as range 14
        // closed e._0#1 as range 16
        //DEBUG: e._#1: 14
        //DEBUG: e._0#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # CallBrackets/13 e._#1/14 )/8 e._0#1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # ColdCallBrackets/13 e._#1/14 )/8 e._0#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
          continue;
        // closed e._#1 as range 14
        // closed e._0#1 as range 16
        //DEBUG: e._#1: 14
        //DEBUG: e._0#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # ColdCallBrackets/13 e._#1/14 )/8 e._0#1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # TkVariable/13 e._#1/14 )/8 e._0#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e._#1 as range 14
        // closed e._0#1 as range 16
        //DEBUG: e._#1: 14
        //DEBUG: e._0#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # TkVariable/13 e._#1/14 )/8 e._0#1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # Symbol/13 s.new#6/18 e.new#7/14 )/8 e.new#8/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        // closed e.new#8 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new#7 as range 14
        do {
          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 s.new#9/18 s.new#10/23 )/8 e.new#11/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          // closed e.new#11 as range 21
          if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Number/18 s._#2/23 )/8 e.Rest#1/24 >/1
            context[24] = context[21];
            context[25] = context[22];
            if( ! refalrts::ident_term( identifiers[ident_Number], context[18] ) )
              continue;
            // closed e.Rest#1 as range 24
            //DEBUG: s._#2: 23
            //DEBUG: e.Rest#1: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/26 # Symbol/27 # Char/28 'N'/29 )/30 (/31 # Symbol/32 # Char/33 Tile{ HalfReuse: '0'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Symbol/13 AsIs: # Number/18 AsIs: s._#2/23 AsIs: )/8 } Tile{ AsIs: e.Rest#1/24 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[26]);
            refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[28], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[29], 'N');
            refalrts::alloc_close_bracket(vm, context[30]);
            refalrts::alloc_open_bracket(vm, context[31]);
            refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[33], identifiers[ident_Char]);
            refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
            refalrts::reinit_char(context[0], '0');
            refalrts::reinit_close_bracket(context[4]);
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[31], context[4] );
            refalrts::link_brackets( context[26], context[30] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[26], context[33] );
            res = refalrts::splice_elem( res, context[1] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Char/18 s.Char#2/23 )/8 e.Rest#1/24 >/1
          context[24] = context[21];
          context[25] = context[22];
          if( ! refalrts::ident_term( identifiers[ident_Char], context[18] ) )
            continue;
          // closed e.Rest#1 as range 24
          //DEBUG: s.Char#2: 23
          //DEBUG: e.Rest#1: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Intrinsic-Type$4=1@1/18 AsIs: s.Char#2/23 HalfReuse: (/8 AsIs: e.Rest#1/24 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & Type/4 HalfReuse: s.Char2 #23/7 } >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Type_S4A1Z1]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::update_name(context[4], functions[efunc_Type]);
          refalrts::reinit_svar( context[7], context[23] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Identifier/18 e.1#0/19 )/8 e.Rest#1/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_Identifier], context[18] ) )
            continue;
          // closed e.1#0 as range 19
          // closed e.Rest#1 as range 21
          //DEBUG: e.1#0: 19
          //DEBUG: e.Rest#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1@2/4 AsIs: (/7 } e.1#0/19/23 )/25 (/26 Tile{ AsIs: e.Rest#1/21 } )/27 </28 & Type/29 Tile{ HalfReuse: </13 HalfReuse: & Implode_Ext/18 AsIs: e.1#0/19 HalfReuse: >/8 } >/30 Tile{ AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[23], context[24], context[19], context[20]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Type]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1Z2]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[18], functions[efunc_Implodeu_Ext]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[13] );
          refalrts::link_brackets( context[26], context[27] );
          refalrts::link_brackets( context[7], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[13], context[8] );
          res = refalrts::splice_evar( res, context[27], context[29] );
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Name/18 e.1#0/19 )/8 e.Rest#1/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[18] ) )
          continue;
        // closed e.1#0 as range 19
        // closed e.Rest#1 as range 21
        //DEBUG: e.1#0: 19
        //DEBUG: e.Rest#1: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/23 # Symbol/24 # Char/25 'F'/26 )/27 (/28 # Symbol/29 # Char/30 Tile{ HalfReuse: 'g'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Symbol/13 AsIs: # Name/18 AsIs: e.1#0/19 AsIs: )/8 } Tile{ AsIs: e.Rest#1/21 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[26], 'F');
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_bracket(vm, context[28]);
        refalrts::alloc_ident(vm, context[29], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[30], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], 'g');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[28], context[4] );
        refalrts::link_brackets( context[23], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[23], context[30] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # ClosureBrackets/13 e.0#0/14 )/8 e.Rest#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Rest#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Rest#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/18 # Symbol/19 # Char/20 'F'/21 )/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: 'c'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ClosureBrackets/13 AsIs: e.0#0/14 AsIs: )/8 } Tile{ AsIs: e.Rest#1/16 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[20], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[21], 'F');
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], 'c');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[23], context[4] );
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # Brackets/13 e.0#0/14 )/8 e.Rest#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Rest#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Rest#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/18 # Symbol/19 # Char/20 'B'/21 )/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: '0'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Brackets/13 AsIs: e.0#0/14 AsIs: )/8 } Tile{ AsIs: e.Rest#1/16 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[20], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[21], 'B');
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], '0');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[23], context[4] );
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Type/4 (/7 # ADT-Brackets/13 (/20 e.2#0/18 )/21 e.1#0/14 )/8 e.Rest#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.2#0 as range 18
      // closed e.1#0 as range 14
      // closed e.Rest#1 as range 16
      //DEBUG: e.2#0: 18
      //DEBUG: e.1#0: 14
      //DEBUG: e.Rest#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Ok/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: 'B'/1 } )/26 (/27 # Symbol/28 # Char/29 Tile{ HalfReuse: 'a'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.2#0/18 AsIs: )/21 AsIs: e.1#0/14 AsIs: )/8 } Tile{ AsIs: e.Rest#1/16 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Ok]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_Char]);
      refalrts::reinit_char(context[1], 'B');
      refalrts::reinit_char(context[0], 'a');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[27], context[4] );
      refalrts::link_brackets( context[23], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[26], context[29] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Type/4 t.Term#1/7 e.Rest#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Rest#1 as range 9
    //DEBUG: t.Term#1: 7
    //DEBUG: e.Rest#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1/4 AsIs: t.Term#1/7 } (/11 Tile{ AsIs: e.Rest#1/9 } )/12 </13 & Intrinsic-Type$4=1:1*7/14 t.Term#1/7/15 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Intrinsicm_Type_S4A1B1D7]);
    refalrts::copy_evar(vm, context[15], context[16], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 HalfReuse: # Symbol/1 } # Char/5 '*'/6 )/7 (/8 # Symbol/9 # Char/10 '0'/11 )/12 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_Char]);
  refalrts::alloc_char(vm, context[6], '*');
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_char(vm, context[11], '0');
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
  refalrts::link_brackets( context[8], context[12] );
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Type("Intrinsic-Type", COOKIE1_, COOKIE2_, func_Intrinsicm_Type);


static refalrts::FnResult func_gen_Intrinsicm_Lenw_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Lenw$1=2/4 s.Len#3/5 e.Args#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args#3 as range 2
  //DEBUG: s.Len#3: 5
  //DEBUG: e.Args#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } Tile{ HalfReuse: # Symbol/1 } # Number/6 Tile{ AsIs: s.Len#3/5 } )/7 Tile{ AsIs: e.Args#3/2 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_Number]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Lenw_S1A2("Intrinsic-Lenw$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Lenw_S1A2);


static refalrts::FnResult func_Intrinsicm_Lenw(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Lenw/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Lenw/4 e.Args#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args#1 as range 5
    //DEBUG: e.Args#1: 5
    //5: e.Args#1
    //12: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Lenw_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_FixedLength]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Lenw$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Lenw$1=2/1 } Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Args#1/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Lenw_S1A2]);
      refalrts::update_name(context[4], functions[efunc_Lenw]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Lenw/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Lenw/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Lenw("Intrinsic-Lenw", COOKIE1_, COOKIE2_, func_Intrinsicm_Lenw);


static refalrts::FnResult func_FixedLength(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & FixedLength/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & FixedLength/4 e._#1/7 (/13 # TkVariable/15 'e'/16 e._0#1/11 )/14 e._1#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_TkVariable], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e._0#1 as range 11
      // closed e._1#1 as range 9
      //DEBUG: e._#1: 7
      //DEBUG: e._0#1: 11
      //DEBUG: e._1#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._#1/7 (/13 # TkVariable/15 'e'/16 e._0#1/11 )/14 e._1#1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FixedLength/4 e._#1/7 (/13 # CallBrackets/15 e._0#1/11 )/14 e._1#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_CallBrackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e._0#1 as range 11
      // closed e._1#1 as range 9
      //DEBUG: e._#1: 7
      //DEBUG: e._0#1: 11
      //DEBUG: e._1#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._#1/7 (/13 # CallBrackets/15 e._0#1/11 )/14 e._1#1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FixedLength/4 e._#1/7 (/13 # ColdCallBrackets/15 e._0#1/11 )/14 e._1#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_ColdCallBrackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e._0#1 as range 11
      // closed e._1#1 as range 9
      //DEBUG: e._#1: 7
      //DEBUG: e._0#1: 11
      //DEBUG: e._1#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._#1/7 (/13 # ColdCallBrackets/15 e._0#1/11 )/14 e._1#1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FixedLength/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FixedLength("FixedLength", COOKIE1_, COOKIE2_, func_FixedLength);


static refalrts::FnResult func_Intrinsicm_First(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Intrinsic-First/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-First/4 (/9 # Symbol/11 # Number/12 s.N#1/13 )/10 e.Expr#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.Expr#1 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.Expr#1: 5
    //DEBUG: s.N#1: 13
    //5: e.Expr#1
    //13: s.N#1
    //19: s.N#1
    //20: e.Expr#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Intrinsicm_First_S1C1]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_First]);
    refalrts::copy_stvar(vm, context[19], context[13]);
    refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_stvar( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Intrinsic-First$1?1/18 (/21 e.Prefix#2/19 )/22 e.Suffix#2/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Prefix#2 as range 19
      // closed e.Suffix#2 as range 16
      //DEBUG: e.Expr#1: 5
      //DEBUG: s.N#1: 13
      //DEBUG: e.Prefix#2: 19
      //DEBUG: e.Suffix#2: 16
      //5: e.Expr#1
      //13: s.N#1
      //16: e.Suffix#2
      //19: e.Prefix#2
      //28: e.Prefix#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Intrinsicm_First_S1C2]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_FixedLength]);
      refalrts::copy_evar(vm, context[28], context[29], context[19], context[20]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[26] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </23 & Intrinsic-First$1?2/27 # True/28 >/24
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
        context[28] = refalrts::ident_left( identifiers[ident_True], context[25], context[26] );
        if( ! context[28] )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: e.Expr#1: 5
        //DEBUG: s.N#1: 13
        //DEBUG: e.Prefix#2: 19
        //DEBUG: e.Suffix#2: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-First/4 (/9 # Symbol/11 # Number/12 s.N#1/13 )/10 e.Expr#1/5 {REMOVED TILE} {REMOVED TILE} >/15 </23 & Intrinsic-First$1?2/27 # True/28 >/24 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/14 HalfReuse: (/18 HalfReuse: # Brackets/21 AsIs: e.Prefix#2/19 AsIs: )/22 } Tile{ AsIs: e.Suffix#2/16 } Tile{ ]] }
        refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[21], identifiers[ident_Brackets]);
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[23], context[24]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-First/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-First/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_First("Intrinsic-First", COOKIE1_, COOKIE2_, func_Intrinsicm_First);


static refalrts::FnResult func_Intrinsicm_Last(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Intrinsic-Last/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Intrinsic-Last/4 (/9 # Symbol/11 # Number/12 s.N#1/13 )/10 e.Expr#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.Expr#1 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.Expr#1: 5
    //DEBUG: s.N#1: 13
    //5: e.Expr#1
    //13: s.N#1
    //19: s.N#1
    //20: e.Expr#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Intrinsicm_Last_S1C1]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Last]);
    refalrts::copy_stvar(vm, context[19], context[13]);
    refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_stvar( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Intrinsic-Last$1?1/18 (/21 e.Prefix#2/19 )/22 e.Suffix#2/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Prefix#2 as range 19
      // closed e.Suffix#2 as range 16
      //DEBUG: e.Expr#1: 5
      //DEBUG: s.N#1: 13
      //DEBUG: e.Prefix#2: 19
      //DEBUG: e.Suffix#2: 16
      //5: e.Expr#1
      //13: s.N#1
      //16: e.Suffix#2
      //19: e.Prefix#2
      //28: e.Suffix#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Intrinsicm_Last_S1C2]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_FixedLength]);
      refalrts::copy_evar(vm, context[28], context[29], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[26] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </23 & Intrinsic-Last$1?2/27 # True/28 >/24
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
        context[28] = refalrts::ident_left( identifiers[ident_True], context[25], context[26] );
        if( ! context[28] )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: e.Expr#1: 5
        //DEBUG: s.N#1: 13
        //DEBUG: e.Prefix#2: 19
        //DEBUG: e.Suffix#2: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Last/4 (/9 # Symbol/11 # Number/12 s.N#1/13 )/10 e.Expr#1/5 {REMOVED TILE} {REMOVED TILE} >/15 </23 & Intrinsic-Last$1?2/27 # True/28 >/24 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/14 HalfReuse: (/18 HalfReuse: # Brackets/21 AsIs: e.Prefix#2/19 AsIs: )/22 } Tile{ AsIs: e.Suffix#2/16 } Tile{ ]] }
        refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[21], identifiers[ident_Brackets]);
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[23], context[24]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Last/4 e._#1/2 >/1
  // closed e._#1 as range 2
  //DEBUG: e._#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Last/4 e._#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Last("Intrinsic-Last", COOKIE1_, COOKIE2_, func_Intrinsicm_Last);


static refalrts::FnResult func_gen_OptSentencem_MakeSubstitutions_S3A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & OptSentence-MakeSubstitutions$3=4/4 t.Metatables#1/5 (/9 e.SentenceVars#4/7 )/10 (/13 e.Args#1/11 )/14 (/17 e.Name#1/15 )/18 (/21 e.Body#1/19 )/22 s.DriveMode#5/23 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.SentenceVars#4 as range 7
  // closed e.Args#1 as range 11
  // closed e.Name#1 as range 15
  // closed e.Body#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Metatables#1: 5
  //DEBUG: e.SentenceVars#4: 7
  //DEBUG: e.Args#1: 11
  //DEBUG: e.Name#1: 15
  //DEBUG: e.Body#1: 19
  //DEBUG: s.DriveMode#5: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@1/4 } Tile{ AsIs: s.DriveMode#5/23 } Tile{ AsIs: (/9 AsIs: e.SentenceVars#4/7 AsIs: )/10 } Tile{ AsIs: e.Args#1/11 } Tile{ AsIs: (/13 } Tile{ HalfReuse: # Function/14 AsIs: (/17 AsIs: e.Name#1/15 AsIs: )/18 HalfReuse: # Sentences/21 AsIs: e.Body#1/19 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z1]);
  refalrts::reinit_ident(context[14], identifiers[ident_Function]);
  refalrts::reinit_ident(context[21], identifiers[ident_Sentences]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_MakeSubstitutions_S3A4("OptSentence-MakeSubstitutions$3=4", COOKIE1_, COOKIE2_, func_gen_OptSentencem_MakeSubstitutions_S3A4);


static refalrts::FnResult func_gen_OptSentencem_MakeSubstitutions_S3A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & OptSentence-MakeSubstitutions$3=3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence-MakeSubstitutions$3=3/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 (/17 e.new#4/15 )/18 s.new#5/19 s.new#6/20 e.new#7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 2
  do {
    // </0 & OptSentence-MakeSubstitutions$3=3/4 t.Metatables#1/5 (/9 e.Args#1/21 )/10 (/13 e.Name#1/23 )/14 (/17 e.Body#1/25 )/18 # Inline/19 s.FuncMode#1/20 e.SentenceVars#4/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Inline], context[19] ) )
      continue;
    // closed e.Args#1 as range 21
    // closed e.Name#1 as range 23
    // closed e.Body#1 as range 25
    // closed e.SentenceVars#4 as range 27
    //DEBUG: t.Metatables#1: 5
    //DEBUG: s.FuncMode#1: 20
    //DEBUG: e.Args#1: 21
    //DEBUG: e.Name#1: 23
    //DEBUG: e.Body#1: 25
    //DEBUG: e.SentenceVars#4: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.FuncMode#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@2/4 } Tile{ AsIs: (/9 } Tile{ AsIs: e.SentenceVars#4/27 } )/29 Tile{ AsIs: e.Args#1/21 } Tile{ HalfReuse: (/1 } Tile{ HalfReuse: # Function/10 AsIs: (/13 AsIs: e.Name#1/23 AsIs: )/14 HalfReuse: # Sentences/17 AsIs: e.Body#1/25 AsIs: )/18 HalfReuse: >/19 } Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z2]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_ident(context[10], identifiers[ident_Function]);
    refalrts::reinit_ident(context[17], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[1], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSentence-MakeSubstitutions$3=3/4 t.Metatables#1/5 (/9 e.Args#1/21 )/10 (/13 e.Name#1/23 )/14 (/17 e.Body#1/25 )/18 # Drive/19 s.FuncMode#1/20 e.SentenceVars#4/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Drive], context[19] ) )
      continue;
    // closed e.Args#1 as range 21
    // closed e.Name#1 as range 23
    // closed e.Body#1 as range 25
    // closed e.SentenceVars#4 as range 27
    //DEBUG: t.Metatables#1: 5
    //DEBUG: s.FuncMode#1: 20
    //DEBUG: e.Args#1: 21
    //DEBUG: e.Name#1: 23
    //DEBUG: e.Body#1: 25
    //DEBUG: e.SentenceVars#4: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/5 } Tile{ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@1/4 } Tile{ AsIs: s.FuncMode#1/20 } Tile{ AsIs: (/9 } Tile{ AsIs: e.SentenceVars#4/27 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Args#1/21 } (/29 Tile{ HalfReuse: # Function/10 AsIs: (/13 AsIs: e.Name#1/23 AsIs: )/14 HalfReuse: # Sentences/17 AsIs: e.Body#1/25 AsIs: )/18 HalfReuse: >/19 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z1]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_ident(context[10], identifiers[ident_Function]);
    refalrts::reinit_ident(context[17], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[19] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence-MakeSubstitutions$3=3/4 t.Metatables#1/5 (/9 e.Args#1/7 )/10 (/13 e.Name#1/11 )/14 (/17 e.Body#1/15 )/18 s.DriveMode#3/19 s.FuncMode#1/20 e.SentenceVars#4/2 >/1
  // closed e.Args#1 as range 7
  // closed e.Name#1 as range 11
  // closed e.Body#1 as range 15
  // closed e.SentenceVars#4 as range 2
  //DEBUG: t.Metatables#1: 5
  //DEBUG: s.DriveMode#3: 19
  //DEBUG: s.FuncMode#1: 20
  //DEBUG: e.Args#1: 7
  //DEBUG: e.Name#1: 11
  //DEBUG: e.Body#1: 15
  //DEBUG: e.SentenceVars#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence-MakeSubstitutions$3=4/4 AsIs: t.Metatables#1/5 } (/21 Tile{ AsIs: e.SentenceVars#4/2 } )/22 Tile{ AsIs: (/9 AsIs: e.Args#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.Name#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Body#1/15 AsIs: )/18 } </23 & DecreaseMode*2/24 Tile{ AsIs: s.DriveMode#3/19 AsIs: s.FuncMode#1/20 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_DecreaseMode_D2]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentencem_MakeSubstitutions_S3A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[9], context[18] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_MakeSubstitutions_S3A3("OptSentence-MakeSubstitutions$3=3", COOKIE1_, COOKIE2_, func_gen_OptSentencem_MakeSubstitutions_S3A3);


static refalrts::FnResult func_gen_OptSentencem_MakeSubstitutions_S3A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & OptSentence-MakeSubstitutions$3=2/4 t.Metatables#1/5 (/9 e.Args#1/7 )/10 (/13 e.Name#1/11 )/14 (/17 e.Body#1/15 )/18 s.FuncMode#1/19 (/22 e.Left#1/20 )/23 (/26 e.Expr#1/24 )/27 s.DriveMode#3/28 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Args#1 as range 7
  // closed e.Name#1 as range 11
  // closed e.Body#1 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.Left#1 as range 20
  // closed e.Expr#1 as range 24
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Metatables#1: 5
  //DEBUG: e.Args#1: 7
  //DEBUG: e.Name#1: 11
  //DEBUG: e.Body#1: 15
  //DEBUG: s.FuncMode#1: 19
  //DEBUG: e.Left#1: 20
  //DEBUG: e.Expr#1: 24
  //DEBUG: s.DriveMode#3: 28

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence-MakeSubstitutions$3=3/4 AsIs: t.Metatables#1/5 AsIs: (/9 AsIs: e.Args#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.Name#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Body#1/15 AsIs: )/18 } Tile{ AsIs: s.DriveMode#3/28 } Tile{ AsIs: s.FuncMode#1/19 } </29 & ExtractVariables/30 (/31 Tile{ AsIs: (/22 AsIs: e.Left#1/20 AsIs: )/23 AsIs: (/26 AsIs: e.Expr#1/24 AsIs: )/27 } )/32 >/33 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_ExtractVariables]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentencem_MakeSubstitutions_S3A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[22], context[27] );
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_MakeSubstitutions_S3A2("OptSentence-MakeSubstitutions$3=2", COOKIE1_, COOKIE2_, func_gen_OptSentencem_MakeSubstitutions_S3A2);


static refalrts::FnResult func_gen_OptSentencem_MakeSubstitutions_S3A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & OptSentence-MakeSubstitutions$3=2:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence-MakeSubstitutions$3=2:1/4 s.new#1/5 s.new#2/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSentence-MakeSubstitutions$3=2:1/4 s.DriveMode#1/5 # True/6 >/1
    if( ! refalrts::ident_term( identifiers[ident_True], context[6] ) )
      continue;
    //DEBUG: s.DriveMode#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSentence-MakeSubstitutions$3=2:1/4 s.DriveMode#1/5 # True/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.DriveMode1 #5/1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence-MakeSubstitutions$3=2:1/4 s.DriveMode#1/5 # False/6 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[6] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.DriveMode#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptSentence-MakeSubstitutions$3=2:1/4 s.DriveMode#1/5 # False/6 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Inline/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Inline]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentencem_MakeSubstitutions_S3A2B1("OptSentence-MakeSubstitutions$3=2:1", COOKIE1_, COOKIE2_, func_gen_OptSentencem_MakeSubstitutions_S3A2B1);


static refalrts::FnResult func_OptSentencem_MakeSubstitutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & OptSentence-MakeSubstitutions/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence-MakeSubstitutions/4 t.new#1/5 (/9 (/13 e.new#2/11 )/14 (/17 e.new#3/15 )/18 )/10 (/21 e.new#4/19 )/22 t.new#5/23 t.new#6/25 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[7], context[8] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  if( ! refalrts::empty_seq( context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 11
  // closed e.new#3 as range 15
  // closed e.new#4 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[26] = refalrts::tvar_left( context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSentence-MakeSubstitutions/4 (/5 s.DriveMode#1/36 # Intrinsic/35 )/6 (/9 (/13 e.Left#1/27 )/14 (/17 e.Expr#1/29 )/18 )/10 (/21 e.Args#1/31 )/22 t.IntrinsicFunction#1/23 t.Metatables#1/25 >/1
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = 0;
    context[34] = 0;
    if( ! refalrts::brackets_term( context[33], context[34], context[5] ) )
      continue;
    context[35] = refalrts::ident_right( identifiers[ident_Intrinsic], context[33], context[34] );
    if( ! context[35] )
      continue;
    // closed e.Left#1 as range 27
    // closed e.Expr#1 as range 29
    // closed e.Args#1 as range 31
    if( ! refalrts::svar_left( context[36], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: t.IntrinsicFunction#1: 23
    //DEBUG: t.Metatables#1: 25
    //DEBUG: e.Left#1: 27
    //DEBUG: e.Expr#1: 29
    //DEBUG: e.Args#1: 31
    //DEBUG: s.DriveMode#1: 36
    //23: t.IntrinsicFunction#1
    //25: t.Metatables#1
    //27: e.Left#1
    //29: e.Expr#1
    //31: e.Args#1
    //36: s.DriveMode#1
    //40: t.IntrinsicFunction#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_OptSentencem_MakeSubstitutions_S1C1]);
    refalrts::copy_stvar(vm, context[40], context[23]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[37] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_stvar( res, context[40] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_elem( res, context[37] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </37 & OptSentence-MakeSubstitutions$1?1/41 (/44 # Intrinsic/46 (/49 e._#2/47 )/50 # Intrinsic/51 e.BehaviorName#2/42 )/45 >/38
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::call_left( context[39], context[40], context[37], context[38] );
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[39], context[40] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = refalrts::ident_left( identifiers[ident_Intrinsic], context[42], context[43] );
      if( ! context[46] )
        continue;
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[42], context[43] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_left( identifiers[ident_Intrinsic], context[42], context[43] );
      if( ! context[51] )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e._#2 as range 47
      // closed e.BehaviorName#2 as range 42
      //DEBUG: t.IntrinsicFunction#1: 23
      //DEBUG: t.Metatables#1: 25
      //DEBUG: e.Left#1: 27
      //DEBUG: e.Expr#1: 29
      //DEBUG: e.Args#1: 31
      //DEBUG: s.DriveMode#1: 36
      //DEBUG: e._#2: 47
      //DEBUG: e.BehaviorName#2: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/5 s.DriveMode#1/36 # Intrinsic/35 )/6 (/9 (/13 e.Left#1/27 )/14 (/17 e.Expr#1/29 )/18 )/10 {REMOVED TILE} {REMOVED TILE} </37 & OptSentence-MakeSubstitutions$1?1/41 (/44 # Intrinsic/46 (/49 e._#2/47 )/50 # Intrinsic/51 {REMOVED TILE} )/45 >/38 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic/4 } Tile{ AsIs: t.IntrinsicFunction#1/23 AsIs: t.Metatables#1/25 } Tile{ AsIs: (/21 AsIs: e.Args#1/31 AsIs: )/22 } Tile{ AsIs: e.BehaviorName#2/42 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoOptSentencem_MakeSubstitutionsm_Intrinsic]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[37], context[38]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSentence-MakeSubstitutions/4 t.Mode#1/5 (/9 (/13 e.Left#1/27 )/14 (/17 e.Expr#1/29 )/18 )/10 (/21 e.Args#1/31 )/22 t.Function#1/23 t.Metatables#1/25 >/1
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[19];
    context[32] = context[20];
    // closed e.Left#1 as range 27
    // closed e.Expr#1 as range 29
    // closed e.Args#1 as range 31
    //DEBUG: t.Mode#1: 5
    //DEBUG: t.Function#1: 23
    //DEBUG: t.Metatables#1: 25
    //DEBUG: e.Left#1: 27
    //DEBUG: e.Expr#1: 29
    //DEBUG: e.Args#1: 31
    //5: t.Mode#1
    //23: t.Function#1
    //25: t.Metatables#1
    //27: e.Left#1
    //29: e.Expr#1
    //31: e.Args#1
    //38: e.Args#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_MakeSubstitutions_S2C1]);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_IsPassiveCall]);
    refalrts::copy_evar(vm, context[38], context[39], context[31], context[32]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[33] );
    res = refalrts::splice_elem( res, context[34] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[36] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </33 & OptSentence-MakeSubstitutions$2?1/37 # False/38 >/34
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::call_left( context[35], context[36], context[33], context[34] );
      context[38] = refalrts::ident_left( identifiers[ident_False], context[35], context[36] );
      if( ! context[38] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      //DEBUG: t.Mode#1: 5
      //DEBUG: t.Function#1: 23
      //DEBUG: t.Metatables#1: 25
      //DEBUG: e.Left#1: 27
      //DEBUG: e.Expr#1: 29
      //DEBUG: e.Args#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & OptSentence-MakeSubstitutions/4 t.Mode#1/5 (/9 (/13 e.Left#1/27 )/14 (/17 e.Expr#1/29 )/18 )/10 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE} # False/38 >/34 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/25 AsIs: </33 Reuse: & MakeColdSolution/37 } Tile{ AsIs: t.Function#1/23 } Tile{ AsIs: e.Args#1/31 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[37], functions[efunc_MakeColdSolution]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[25], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[33], context[34]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSentence-MakeSubstitutions/4 (/5 s.DriveMode#1/37 s.IntrinsicMode#1/38 )/6 (/9 (/13 e.Left#1/27 )/14 (/17 e.Expr#1/29 )/18 )/10 (/21 e.Args#1/31 )/22 (/23 s.FuncMode#1/39 (/42 e.Name#1/40 )/43 # Sentences/44 e.Body#1/35 )/24 t.Metatables#1/25 >/1
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = 0;
    context[34] = 0;
    if( ! refalrts::brackets_term( context[33], context[34], context[5] ) )
      continue;
    context[35] = 0;
    context[36] = 0;
    if( ! refalrts::brackets_term( context[35], context[36], context[23] ) )
      continue;
    // closed e.Left#1 as range 27
    // closed e.Expr#1 as range 29
    // closed e.Args#1 as range 31
    if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[38], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[39], context[35], context[36] ) )
      continue;
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = refalrts::ident_left( identifiers[ident_Sentences], context[35], context[36] );
    if( ! context[44] )
      continue;
    // closed e.Name#1 as range 40
    // closed e.Body#1 as range 35
    //DEBUG: t.Metatables#1: 25
    //DEBUG: e.Left#1: 27
    //DEBUG: e.Expr#1: 29
    //DEBUG: e.Args#1: 31
    //DEBUG: s.DriveMode#1: 37
    //DEBUG: s.IntrinsicMode#1: 38
    //DEBUG: s.FuncMode#1: 39
    //DEBUG: e.Name#1: 40
    //DEBUG: e.Body#1: 35
    //25: t.Metatables#1
    //27: e.Left#1
    //29: e.Expr#1
    //31: e.Args#1
    //35: e.Body#1
    //37: s.DriveMode#1
    //38: s.IntrinsicMode#1
    //39: s.FuncMode#1
    //40: e.Name#1
    //50: s.DriveMode#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_OptSentencem_MakeSubstitutions_S3C1]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[50], context[37]);
    refalrts::alloc_ident(vm, context[51], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[52], identifiers[ident_Inline]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[45] );
    res = refalrts::splice_elem( res, context[46] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[48] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_elem( res, context[52] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_stvar( res, context[50] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_elem( res, context[45] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </45 & OptSentence-MakeSubstitutions$3?1/49 # True/50 >/46
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::call_left( context[47], context[48], context[45], context[46] );
      context[50] = refalrts::ident_left( identifiers[ident_True], context[47], context[48] );
      if( ! context[50] )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      //DEBUG: t.Metatables#1: 25
      //DEBUG: e.Left#1: 27
      //DEBUG: e.Expr#1: 29
      //DEBUG: e.Args#1: 31
      //DEBUG: s.DriveMode#1: 37
      //DEBUG: s.IntrinsicMode#1: 38
      //DEBUG: s.FuncMode#1: 39
      //DEBUG: e.Name#1: 40
      //DEBUG: e.Body#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} s.IntrinsicMode#1/38 {REMOVED TILE} {REMOVED TILE} )/22 {REMOVED TILE} s.FuncMode#1/39 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence-MakeSubstitutions$3=2/4 } Tile{ AsIs: t.Metatables#1/25 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Args#1/31 } Tile{ AsIs: )/24 } Tile{ AsIs: (/42 AsIs: e.Name#1/40 AsIs: )/43 HalfReuse: (/44 } Tile{ AsIs: e.Body#1/35 } Tile{ AsIs: )/6 HalfReuse: s.FuncMode1 #39/9 AsIs: (/13 AsIs: e.Left#1/27 AsIs: )/14 AsIs: (/17 AsIs: e.Expr#1/29 AsIs: )/18 HalfReuse: </10 HalfReuse: & OptSentence-MakeSubstitutions$3=2:1/21 } Tile{ AsIs: s.DriveMode#1/37 } Tile{ AsIs: </45 Reuse: & IsLexpr/49 } e.Left#1/27/51 Tile{ HalfReuse: >/50 AsIs: >/46 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[51], context[52], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentencem_MakeSubstitutions_S3A2]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_svar( context[9], context[39] );
      refalrts::reinit_open_call(context[10]);
      refalrts::reinit_name(context[21], functions[efunc_gen_OptSentencem_MakeSubstitutions_S3A2B1]);
      refalrts::update_name(context[49], functions[efunc_IsLexpr]);
      refalrts::reinit_close_call(context[50]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[44], context[6] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[6], context[21] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[42], context[44] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[45], context[46]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence-MakeSubstitutions/4 t.Mode#1/5 (/9 (/13 e.Left#1/11 )/14 (/17 e.Expr#1/15 )/18 )/10 (/21 e.Args#1/19 )/22 t.Function#1/23 t.Metatables#1/25 >/1
  // closed e.Left#1 as range 11
  // closed e.Expr#1 as range 15
  // closed e.Args#1 as range 19
  //DEBUG: t.Mode#1: 5
  //DEBUG: t.Function#1: 23
  //DEBUG: t.Metatables#1: 25
  //DEBUG: e.Left#1: 11
  //DEBUG: e.Expr#1: 15
  //DEBUG: e.Args#1: 19

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} t.Mode#1/5 (/9 (/13 e.Left#1/11 )/14 (/17 e.Expr#1/15 )/18 )/10 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables#1/25 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.Function#1/23 } Tile{ AsIs: e.Args#1/19 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSentencem_MakeSubstitutions("OptSentence-MakeSubstitutions", COOKIE1_, COOKIE2_, func_OptSentencem_MakeSubstitutions);


static refalrts::FnResult func_MakeColdSolution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & MakeColdSolution/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeColdSolution/4 (/7 s.new#1/9 (/12 e.new#2/10 )/13 s.new#3/14 e.new#4/5 )/8 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#5 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 10
  if( ! refalrts::svar_left( context[14], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 5
  do {
    // </0 & MakeColdSolution/4 (/7 s.FuncMode#1/9 (/12 e.Name#1/15 )/13 s.BodyLabel#1/14 e.Body#1/17 )/8 e.Args#1/19 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name#1 as range 15
    // closed e.Body#1 as range 17
    // closed e.Args#1 as range 19
    //DEBUG: s.FuncMode#1: 9
    //DEBUG: s.BodyLabel#1: 14
    //DEBUG: e.Name#1: 15
    //DEBUG: e.Body#1: 17
    //DEBUG: e.Args#1: 19
    //9: s.FuncMode#1
    //14: s.BodyLabel#1
    //15: e.Name#1
    //17: e.Body#1
    //19: e.Args#1
    //24: e.Name#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_MakeColdSolution_S1C1]);
    refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </21 & MakeColdSolution$1?1/25 e.Prefix#2/23 '*'/27 s.Num#2/26 >/22
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
      if( ! refalrts::svar_right( context[26], context[23], context[24] ) )
        continue;
      context[27] = refalrts::char_right( '*', context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Prefix#2 as range 23
      //DEBUG: s.FuncMode#1: 9
      //DEBUG: s.BodyLabel#1: 14
      //DEBUG: e.Name#1: 15
      //DEBUG: e.Body#1: 17
      //DEBUG: e.Args#1: 19
      //DEBUG: s.Num#2: 26
      //DEBUG: e.Prefix#2: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.FuncMode#1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Prefix#2/23 {REMOVED TILE} s.Num#2/26 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/27 } (/28 Tile{ AsIs: </0 Reuse: & eDRIVEN/4 HalfReuse: >/7 } Tile{ HalfReuse: ':'/21 HalfReuse: (/25 } # ColdCallBrackets/29 (/30 # Symbol/31 # Name/32 e.Name#1/15/33 )/35 Tile{ AsIs: e.Args#1/19 } )/36 )/37 (/38 (/39 # NewFunction/40 # GN-Local/41 Tile{ AsIs: (/12 AsIs: e.Name#1/15 AsIs: )/13 AsIs: s.BodyLabel#1/14 AsIs: e.Body#1/17 AsIs: )/8 } Tile{ HalfReuse: )/22 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[33], context[34], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_NewFunction]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_GNm_Local]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::update_name(context[4], functions[efunc_eDRIVEN]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_char(context[21], ':');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_close_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[27], context[1] );
      refalrts::link_brackets( context[38], context[22] );
      refalrts::link_brackets( context[39], context[8] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[28], context[37] );
      refalrts::link_brackets( context[25], context[36] );
      refalrts::link_brackets( context[30], context[35] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[22];
      res = refalrts::splice_evar( res, context[12], context[8] );
      res = refalrts::splice_evar( res, context[36], context[41] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[29], context[35] );
      res = refalrts::splice_evar( res, context[21], context[25] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[21], context[22]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeColdSolution/4 (/7 s.FuncMode#1/9 (/12 e.Name#1/10 )/13 s.BodyLabel#1/14 e.Body#1/5 )/8 e.Args#1/2 >/1
  // closed e.Name#1 as range 10
  // closed e.Body#1 as range 5
  // closed e.Args#1 as range 2
  //DEBUG: s.FuncMode#1: 9
  //DEBUG: s.BodyLabel#1: 14
  //DEBUG: e.Name#1: 10
  //DEBUG: e.Body#1: 5
  //DEBUG: e.Args#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FuncMode#1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BodyLabel#1/14 e.Body#1/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # TkVariable/15 'e'/16 # DRIVEN/17 0/18 Tile{ AsIs: )/13 } ':'/19 Tile{ AsIs: (/12 } # ColdCallBrackets/20 (/21 # Symbol/22 # Name/23 Tile{ AsIs: e.Name#1/10 } Tile{ AsIs: )/8 AsIs: e.Args#1/2 HalfReuse: )/1 } )/24 (/25 )/26 )/27 Tile{ ]] }
  refalrts::alloc_ident(vm, context[15], identifiers[ident_TkVariable]);
  refalrts::alloc_char(vm, context[16], 'e');
  refalrts::alloc_ident(vm, context[17], identifiers[ident_DRIVEN]);
  refalrts::alloc_number(vm, context[18], 0UL);
  refalrts::alloc_char(vm, context[19], ':');
  refalrts::alloc_ident(vm, context[20], identifiers[ident_ColdCallBrackets]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[23], identifiers[ident_Name]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[27] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[4], context[24] );
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[21], context[8] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeColdSolution("MakeColdSolution", COOKIE1_, COOKIE2_, func_MakeColdSolution);


static refalrts::FnResult func_DecreaseMode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DecreaseMode/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DecreaseMode/4 s.new#1/5 s.new#2/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DecreaseMode/4 # Inline/5 s.Mode#1/6 >/1
    if( ! refalrts::ident_term( identifiers[ident_Inline], context[5] ) )
      continue;
    //DEBUG: s.Mode#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecreaseMode/4 # Inline/5 s.Mode#1/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Inline/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Inline]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecreaseMode/4 # Drive/5 s.Mode#1/6 >/1
  if( ! refalrts::ident_term( identifiers[ident_Drive], context[5] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode#1: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DecreaseMode/4 # Drive/5 s.Mode#1/6 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Mode1 #6/1 ]] }
  refalrts::reinit_svar( context[1], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecreaseMode("DecreaseMode", COOKIE1_, COOKIE2_, func_DecreaseMode);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1/4 (/7 e.Substitutions#1/5 )/8 e.CallReplacer#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Substitutions#1 as range 5
  // closed e.CallReplacer#4 as range 2
  //DEBUG: e.Substitutions#1: 5
  //DEBUG: e.CallReplacer#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions#1/5 } Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # TkVariable/9 'e'/10 # DRIVEN/11 0/12 )/13 Tile{ HalfReuse: ':'/8 AsIs: e.CallReplacer#4/2 HalfReuse: )/1 } (/14 )/15 )/16 Tile{ ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_TkVariable]);
  refalrts::alloc_char(vm, context[10], 'e');
  refalrts::alloc_ident(vm, context[11], identifiers[ident_DRIVEN]);
  refalrts::alloc_number(vm, context[12], 0UL);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_char(context[8], ':');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1("DoOptSentence-MakeSubstitutions$1:1$1=1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2/4 s.Mode#1/5 (/8 e.SentenceVars#1/6 )/9 (/12 e.Args#1/10 )/13 (/16 e.Substitutions#1/14 )/17 (/20 e.Name#1/18 )/21 (/24 e.Rest#1/22 )/25 e.NewSubsts#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.SentenceVars#1 as range 6
  // closed e.Args#1 as range 10
  // closed e.Substitutions#1 as range 14
  // closed e.Name#1 as range 18
  // closed e.Rest#1 as range 22
  // closed e.NewSubsts#5 as range 2
  //DEBUG: s.Mode#1: 5
  //DEBUG: e.SentenceVars#1: 6
  //DEBUG: e.Args#1: 10
  //DEBUG: e.Substitutions#1: 14
  //DEBUG: e.Name#1: 18
  //DEBUG: e.Rest#1: 22
  //DEBUG: e.NewSubsts#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@3/4 AsIs: s.Mode#1/5 AsIs: (/8 AsIs: e.SentenceVars#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Substitutions#1/14 AsIs: )/17 } Tile{ AsIs: e.NewSubsts#5/2 } Tile{ AsIs: (/20 } # Function/26 (/27 </28 & RemainderFuncIncName/29 Tile{ AsIs: e.Name#1/18 } >/30 Tile{ AsIs: )/21 HalfReuse: # Sentences/24 AsIs: e.Rest#1/22 AsIs: )/25 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[26], identifiers[ident_Function]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_RemainderFuncIncName]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z3]);
  refalrts::reinit_ident(context[24], identifiers[ident_Sentences]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[27], context[21] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2("DoOptSentence-MakeSubstitutions$1:1$2=2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2\1=1/4 (/7 e.Contrs#5/5 )/8 e.CallReplacer#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Contrs#5 as range 5
  // closed e.CallReplacer#6 as range 2
  //DEBUG: e.Contrs#5: 5
  //DEBUG: e.CallReplacer#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Contrs#5/5 HalfReuse: (/8 } (/9 # TkVariable/10 Tile{ HalfReuse: 'e'/0 HalfReuse: # DRIVEN/4 } 0/11 )/12 ':'/13 Tile{ AsIs: e.CallReplacer#6/2 } )/14 (/15 )/16 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkVariable]);
  refalrts::alloc_number(vm, context[11], 0UL);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_char(vm, context[13], ':');
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_char(context[0], 'e');
  refalrts::reinit_ident(context[4], identifiers[ident_DRIVEN]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[14] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1A1("DoOptSentence-MakeSubstitutions$1:1$2=2\\1=1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1A1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 95 elems
  refalrts::Iter context[95];
  refalrts::zeros( context, 95 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 e.new#9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.new#13/34 )/8 (/11 e.new#14/36 )/12 s.new#10/13 (/16 e.new#15/38 )/17 (/20 e.new#16/40 )/21 (/24 e.new#17/42 )/25 (/28 e.new#18/44 )/29 (/32 e.new#19/46 )/33 s.new#11/50 e.new#12/48 >/1
    context[34] = context[5];
    context[35] = context[6];
    context[36] = context[9];
    context[37] = context[10];
    context[38] = context[14];
    context[39] = context[15];
    context[40] = context[18];
    context[41] = context[19];
    context[42] = context[22];
    context[43] = context[23];
    context[44] = context[26];
    context[45] = context[27];
    context[46] = context[30];
    context[47] = context[31];
    context[48] = context[2];
    context[49] = context[3];
    // closed e.new#13 as range 34
    // closed e.new#14 as range 36
    // closed e.new#15 as range 38
    // closed e.new#16 as range 40
    // closed e.new#17 as range 42
    // closed e.new#18 as range 44
    // closed e.new#19 as range 46
    if( ! refalrts::svar_left( context[50], context[48], context[49] ) )
      continue;
    // closed e.new#12 as range 48
    do {
      // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.new#22/51 )/8 (/11 e.new#23/53 )/12 s.new#20/13 (/16 e.new#24/55 )/17 (/20 e.new#25/57 )/21 (/24 e.new#26/59 )/25 (/28 e.new#27/61 )/29 (/32 e.new#28/63 )/33 # Success/50 e.new#21/65 >/1
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[40];
      context[58] = context[41];
      context[59] = context[42];
      context[60] = context[43];
      context[61] = context[44];
      context[62] = context[45];
      context[63] = context[46];
      context[64] = context[47];
      context[65] = context[48];
      context[66] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[50] ) )
        continue;
      // closed e.new#22 as range 51
      // closed e.new#23 as range 53
      // closed e.new#24 as range 55
      // closed e.new#25 as range 57
      // closed e.new#26 as range 59
      // closed e.new#27 as range 61
      // closed e.new#28 as range 63
      // closed e.new#21 as range 65
      do {
        // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.Substitutions#1/67 )/8 (/11 e.RS#2/69 )/12 s.Mode#1/13 (/16 e.SentenceVars#1/71 )/17 (/20 e.Args#1/73 )/21 (/24 e.Name#1/75 )/25 (/28 e.Rest#1/77 )/29 (/32 e.LS#1/79 )/33 # Success/50 (/85 (/89 )/90 (/93 e.Assigns#3/91 )/94 )/86 >/1
        context[67] = context[51];
        context[68] = context[52];
        context[69] = context[53];
        context[70] = context[54];
        context[71] = context[55];
        context[72] = context[56];
        context[73] = context[57];
        context[74] = context[58];
        context[75] = context[59];
        context[76] = context[60];
        context[77] = context[61];
        context[78] = context[62];
        context[79] = context[63];
        context[80] = context[64];
        context[81] = context[65];
        context[82] = context[66];
        context[83] = 0;
        context[84] = 0;
        context[85] = refalrts::brackets_left( context[83], context[84], context[81], context[82] );
        if( ! context[85] )
          continue;
        refalrts::bracket_pointers(context[85], context[86]);
        context[87] = 0;
        context[88] = 0;
        context[89] = refalrts::brackets_left( context[87], context[88], context[83], context[84] );
        if( ! context[89] )
          continue;
        refalrts::bracket_pointers(context[89], context[90]);
        context[91] = 0;
        context[92] = 0;
        context[93] = refalrts::brackets_left( context[91], context[92], context[83], context[84] );
        if( ! context[93] )
          continue;
        refalrts::bracket_pointers(context[93], context[94]);
        if( ! refalrts::empty_seq( context[87], context[88] ) )
          continue;
        if( ! refalrts::empty_seq( context[83], context[84] ) )
          continue;
        if( ! refalrts::empty_seq( context[81], context[82] ) )
          continue;
        // closed e.Substitutions#1 as range 67
        // closed e.RS#2 as range 69
        // closed e.SentenceVars#1 as range 71
        // closed e.Args#1 as range 73
        // closed e.Name#1 as range 75
        // closed e.Rest#1 as range 77
        // closed e.LS#1 as range 79
        // closed e.Assigns#3 as range 91
        //DEBUG: s.Mode#1: 13
        //DEBUG: e.Substitutions#1: 67
        //DEBUG: e.RS#2: 69
        //DEBUG: e.SentenceVars#1: 71
        //DEBUG: e.Args#1: 73
        //DEBUG: e.Name#1: 75
        //DEBUG: e.Rest#1: 77
        //DEBUG: e.LS#1: 79
        //DEBUG: e.Assigns#3: 91

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 s.Mode#1/13 (/16 e.SentenceVars#1/71 )/17 (/20 e.Args#1/73 )/21 (/24 e.Name#1/75 )/25 (/28 e.Rest#1/77 )/29 (/32 e.LS#1/79 )/33 # Success/50 (/85 (/89 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$1=1/4 AsIs: (/7 AsIs: e.Substitutions#1/67 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Map@13/90 AsIs: (/93 AsIs: e.Assigns#3/91 AsIs: )/94 } Tile{ AsIs: e.RS#2/69 } Tile{ HalfReuse: >/86 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[90], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[86]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[86] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[93], context[94] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[86];
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[90], context[94] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.Substitutions#1/67 )/8 (/11 e.RS#2/69 )/12 s.Mode#1/13 (/16 e.SentenceVars#1/71 )/17 (/20 e.Args#1/73 )/21 (/24 e.Name#1/75 )/25 (/28 e.Rest#1/77 )/29 (/32 e.LS#1/79 )/33 # Success/50 e.M#3/81 >/1
      context[67] = context[51];
      context[68] = context[52];
      context[69] = context[53];
      context[70] = context[54];
      context[71] = context[55];
      context[72] = context[56];
      context[73] = context[57];
      context[74] = context[58];
      context[75] = context[59];
      context[76] = context[60];
      context[77] = context[61];
      context[78] = context[62];
      context[79] = context[63];
      context[80] = context[64];
      context[81] = context[65];
      context[82] = context[66];
      // closed e.Substitutions#1 as range 67
      // closed e.RS#2 as range 69
      // closed e.SentenceVars#1 as range 71
      // closed e.Args#1 as range 73
      // closed e.Name#1 as range 75
      // closed e.Rest#1 as range 77
      // closed e.LS#1 as range 79
      // closed e.M#3 as range 81
      //DEBUG: s.Mode#1: 13
      //DEBUG: e.Substitutions#1: 67
      //DEBUG: e.RS#2: 69
      //DEBUG: e.SentenceVars#1: 71
      //DEBUG: e.Args#1: 73
      //DEBUG: e.Name#1: 75
      //DEBUG: e.Rest#1: 77
      //DEBUG: e.LS#1: 79
      //DEBUG: e.M#3: 81
      //13: s.Mode#1
      //67: e.Substitutions#1
      //69: e.RS#2
      //71: e.SentenceVars#1
      //73: e.Args#1
      //75: e.Name#1
      //77: e.Rest#1
      //79: e.LS#1
      //81: e.M#3
      //86: s.Mode#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[83]);
      refalrts::alloc_name(vm, context[85], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2C1]);
      refalrts::copy_stvar(vm, context[86], context[13]);
      refalrts::alloc_close_call(vm, context[84]);
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[83] );
      res = refalrts::splice_elem( res, context[84] );
      res = refalrts::splice_stvar( res, context[86] );
      res = refalrts::splice_elem( res, context[85] );
      res = refalrts::splice_elem( res, context[83] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </83 & DoOptSentence-MakeSubstitutions$1:1$2?1/87 # Drive/88 >/84
        context[85] = 0;
        context[86] = 0;
        context[87] = refalrts::call_left( context[85], context[86], context[83], context[84] );
        context[88] = refalrts::ident_left( identifiers[ident_Drive], context[85], context[86] );
        if( ! context[88] )
          continue;
        if( ! refalrts::empty_seq( context[85], context[86] ) )
          continue;
        //DEBUG: s.Mode#1: 13
        //DEBUG: e.Substitutions#1: 67
        //DEBUG: e.RS#2: 69
        //DEBUG: e.SentenceVars#1: 71
        //DEBUG: e.Args#1: 73
        //DEBUG: e.Name#1: 75
        //DEBUG: e.Rest#1: 77
        //DEBUG: e.LS#1: 79
        //DEBUG: e.M#3: 81

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS#1/79 {REMOVED TILE} # Success/50 {REMOVED TILE} </83 & DoOptSentence-MakeSubstitutions$1:1$2?1/87 # Drive/88 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2/12 AsIs: s.Mode#1/13 AsIs: (/16 AsIs: e.SentenceVars#1/71 AsIs: )/17 AsIs: (/20 AsIs: e.Args#1/73 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Substitutions#1/67 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Name#1/75 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Rest#1/77 AsIs: )/29 HalfReuse: </32 } Tile{ Reuse: & Map@14/4 AsIs: (/7 } Tile{ AsIs: e.RS#2/69 } Tile{ AsIs: )/33 } Tile{ AsIs: e.M#3/81 } Tile{ AsIs: >/84 AsIs: >/1 ]] }
        refalrts::reinit_name(context[12], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2]);
        refalrts::reinit_open_call(context[32]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[84] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[7], context[33] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[11], context[25] );
        refalrts::link_brackets( context[24], context[8] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[84];
        res = refalrts::splice_evar( res, context[81], context[82] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[25], context[32] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_evar( res, context[12], context[24] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[83], context[84]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.Substitutions#1/51 )/8 (/11 e.RS#2/53 )/12 s.Mode#1/13 (/16 e.SentenceVars#1/55 )/17 (/20 e.Args#1/57 )/21 (/24 e.Name#1/59 )/25 (/28 e.Rest#1/61 )/29 (/32 e.LS#1/63 )/33 # Failure/50 >/1
    context[51] = context[34];
    context[52] = context[35];
    context[53] = context[36];
    context[54] = context[37];
    context[55] = context[38];
    context[56] = context[39];
    context[57] = context[40];
    context[58] = context[41];
    context[59] = context[42];
    context[60] = context[43];
    context[61] = context[44];
    context[62] = context[45];
    context[63] = context[46];
    context[64] = context[47];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[50] ) )
      continue;
    if( ! refalrts::empty_seq( context[48], context[49] ) )
      continue;
    // closed e.Substitutions#1 as range 51
    // closed e.RS#2 as range 53
    // closed e.SentenceVars#1 as range 55
    // closed e.Args#1 as range 57
    // closed e.Name#1 as range 59
    // closed e.Rest#1 as range 61
    // closed e.LS#1 as range 63
    //DEBUG: s.Mode#1: 13
    //DEBUG: e.Substitutions#1: 51
    //DEBUG: e.RS#2: 53
    //DEBUG: e.SentenceVars#1: 55
    //DEBUG: e.Args#1: 57
    //DEBUG: e.Name#1: 59
    //DEBUG: e.Rest#1: 61
    //DEBUG: e.LS#1: 63

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.RS#2/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS#1/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions/12 AsIs: s.Mode#1/13 AsIs: (/16 AsIs: e.SentenceVars#1/55 AsIs: )/17 AsIs: (/20 AsIs: e.Args#1/57 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Substitutions#1/51 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # Function/4 AsIs: (/7 } Tile{ HalfReuse: </33 HalfReuse: & RemainderFuncIncName/50 } Tile{ AsIs: e.Name#1/59 } Tile{ AsIs: >/1 } Tile{ AsIs: )/25 HalfReuse: # Sentences/28 AsIs: e.Rest#1/61 AsIs: )/29 HalfReuse: >/32 } Tile{ ]] }
    refalrts::reinit_name(context[12], functions[efunc_DoOptSentencem_MakeSubstitutions]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_open_call(context[33]);
    refalrts::reinit_name(context[50], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_ident(context[28], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[32]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::link_brackets( context[7], context[25] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[24], context[8] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[32] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[33], context[50] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1/4 (/7 e.Substitutions#1/5 )/8 (/11 e.RS#2/9 )/12 s.Mode#1/13 (/16 e.SentenceVars#1/14 )/17 (/20 e.Args#1/18 )/21 (/24 e.Name#1/22 )/25 (/28 e.Rest#1/26 )/29 (/32 e.LS#1/30 )/33 e.Other#3/2 >/1
  // closed e.Substitutions#1 as range 5
  // closed e.RS#2 as range 9
  // closed e.SentenceVars#1 as range 14
  // closed e.Args#1 as range 18
  // closed e.Name#1 as range 22
  // closed e.Rest#1 as range 26
  // closed e.LS#1 as range 30
  // closed e.Other#3 as range 2
  //DEBUG: s.Mode#1: 13
  //DEBUG: e.Substitutions#1: 5
  //DEBUG: e.RS#2: 9
  //DEBUG: e.SentenceVars#1: 14
  //DEBUG: e.Args#1: 18
  //DEBUG: e.Name#1: 22
  //DEBUG: e.Rest#1: 26
  //DEBUG: e.LS#1: 30
  //DEBUG: e.Other#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1/4 (/7 {REMOVED TILE} {REMOVED TILE} s.Mode#1/13 (/16 e.SentenceVars#1/14 )/17 (/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other#3/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions#1/5 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/21 AsIs: (/24 AsIs: e.Name#1/22 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.LS#1/30 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.RS#2/9 AsIs: )/12 } Tile{ AsIs: (/32 } Tile{ AsIs: e.Rest#1/26 } Tile{ AsIs: )/33 } Tile{ AsIs: e.Args#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_name(context[21], functions[efunc_gen_MakeColdSolution_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[28], context[8] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[21], context[28] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1("DoOptSentence-MakeSubstitutions$1:1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1);


static refalrts::FnResult func_DoOptSentencem_MakeSubstitutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 88 elems
  refalrts::Iter context[88];
  refalrts::zeros( context, 88 );
  // </0 & DoOptSentence-MakeSubstitutions/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 t.new#5/18 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoOptSentence-MakeSubstitutions/4 s.new#6/5 (/8 e.new#11/20 )/9 (/12 e.new#12/22 )/13 (/16 e.new#13/24 )/17 (/18 # Function/28 (/31 e.new#7/29 )/32 # Sentences/33 (/36 (/40 e.new#8/38 )/41 (/44 e.new#9/42 )/45 )/37 e.new#10/26 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = 0;
    context[27] = 0;
    if( ! refalrts::brackets_term( context[26], context[27], context[18] ) )
      continue;
    context[28] = refalrts::ident_left( identifiers[ident_Function], context[26], context[27] );
    if( ! context[28] )
      continue;
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_left( context[29], context[30], context[26], context[27] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[26], context[27] );
    if( ! context[33] )
      continue;
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[26], context[27] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[38] = 0;
    context[39] = 0;
    context[40] = refalrts::brackets_left( context[38], context[39], context[34], context[35] );
    if( ! context[40] )
      continue;
    refalrts::bracket_pointers(context[40], context[41]);
    context[42] = 0;
    context[43] = 0;
    context[44] = refalrts::brackets_left( context[42], context[43], context[34], context[35] );
    if( ! context[44] )
      continue;
    refalrts::bracket_pointers(context[44], context[45]);
    if( ! refalrts::empty_seq( context[34], context[35] ) )
      continue;
    // closed e.new#11 as range 20
    // closed e.new#12 as range 22
    // closed e.new#13 as range 24
    // closed e.new#7 as range 29
    // closed e.new#8 as range 38
    // closed e.new#9 as range 42
    // closed e.new#10 as range 26
    do {
      // </0 & DoOptSentence-MakeSubstitutions/4 s.Mode#1/5 (/8 e.SentenceVars#1/46 )/9 (/12 e.Args#1/48 )/13 (/16 e.Substitutions#1/50 )/17 (/18 # Function/28 (/31 e.Name#1/52 )/32 # Sentences/33 (/36 (/40 e.LS#1/54 )/41 (/44 (/62 # CallBrackets/64 (/67 # Symbol/69 # Name/70 '_'/71 '_'/72 'S'/73 't'/74 'e'/75 'p'/76 '-'/77 'D'/78 'r'/79 'o'/80 'p'/81 )/68 )/63 e.#0/56 )/45 )/37 e.Rest#1/58 )/19 >/1
      context[46] = context[20];
      context[47] = context[21];
      context[48] = context[22];
      context[49] = context[23];
      context[50] = context[24];
      context[51] = context[25];
      context[52] = context[29];
      context[53] = context[30];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[42];
      context[57] = context[43];
      context[58] = context[26];
      context[59] = context[27];
      context[60] = 0;
      context[61] = 0;
      context[62] = refalrts::brackets_left( context[60], context[61], context[56], context[57] );
      if( ! context[62] )
        continue;
      refalrts::bracket_pointers(context[62], context[63]);
      context[64] = refalrts::ident_left( identifiers[ident_CallBrackets], context[60], context[61] );
      if( ! context[64] )
        continue;
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_left( context[65], context[66], context[60], context[61] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      context[69] = refalrts::ident_left( identifiers[ident_Symbol], context[65], context[66] );
      if( ! context[69] )
        continue;
      context[70] = refalrts::ident_left( identifiers[ident_Name], context[65], context[66] );
      if( ! context[70] )
        continue;
      context[71] = refalrts::char_left( '_', context[65], context[66] );
      if( ! context[71] )
        continue;
      context[72] = refalrts::char_left( '_', context[65], context[66] );
      if( ! context[72] )
        continue;
      context[73] = refalrts::char_left( 'S', context[65], context[66] );
      if( ! context[73] )
        continue;
      context[74] = refalrts::char_left( 't', context[65], context[66] );
      if( ! context[74] )
        continue;
      context[75] = refalrts::char_left( 'e', context[65], context[66] );
      if( ! context[75] )
        continue;
      context[76] = refalrts::char_left( 'p', context[65], context[66] );
      if( ! context[76] )
        continue;
      context[77] = refalrts::char_left( '-', context[65], context[66] );
      if( ! context[77] )
        continue;
      context[78] = refalrts::char_left( 'D', context[65], context[66] );
      if( ! context[78] )
        continue;
      context[79] = refalrts::char_left( 'r', context[65], context[66] );
      if( ! context[79] )
        continue;
      context[80] = refalrts::char_left( 'o', context[65], context[66] );
      if( ! context[80] )
        continue;
      context[81] = refalrts::char_left( 'p', context[65], context[66] );
      if( ! context[81] )
        continue;
      if( ! refalrts::empty_seq( context[65], context[66] ) )
        continue;
      if( ! refalrts::empty_seq( context[60], context[61] ) )
        continue;
      // closed e.SentenceVars#1 as range 46
      // closed e.Args#1 as range 48
      // closed e.Substitutions#1 as range 50
      // closed e.Name#1 as range 52
      // closed e.LS#1 as range 54
      // closed e.#0 as range 56
      // closed e.Rest#1 as range 58
      //DEBUG: s.Mode#1: 5
      //DEBUG: e.SentenceVars#1: 46
      //DEBUG: e.Args#1: 48
      //DEBUG: e.Substitutions#1: 50
      //DEBUG: e.Name#1: 52
      //DEBUG: e.LS#1: 54
      //DEBUG: e.#0: 56
      //DEBUG: e.Rest#1: 58

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Name/70 '_'/71 '_'/72 {REMOVED TILE} 'e'/75 'p'/76 '-'/77 'D'/78 'r'/79 'o'/80 'p'/81 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1/73 HalfReuse: (/74 } Tile{ AsIs: e.Substitutions#1/50 } Tile{ AsIs: )/68 HalfReuse: (/63 } Tile{ AsIs: e.#0/56 } Tile{ HalfReuse: )/4 AsIs: s.Mode#1/5 AsIs: (/8 AsIs: e.SentenceVars#1/46 AsIs: )/9 AsIs: (/12 AsIs: e.Args#1/48 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name#1/52 } Tile{ AsIs: )/45 HalfReuse: (/37 AsIs: e.Rest#1/58 AsIs: )/19 HalfReuse: (/1 } e.LS#1/54/82 Tile{ AsIs: )/17 HalfReuse: </18 HalfReuse: & Solve/28 AsIs: (/31 } e.SentenceVars#1/46/84 Tile{ AsIs: )/32 } Tile{ AsIs: (/67 HalfReuse: (/69 } e.Args#1/48/86 Tile{ HalfReuse: )/33 HalfReuse: ':'/36 AsIs: (/40 AsIs: e.LS#1/54 AsIs: )/41 HalfReuse: )/44 HalfReuse: >/62 HalfReuse: >/64 } Tile{ ]] }
      refalrts::copy_evar(vm, context[82], context[83], context[54], context[55]);
      refalrts::copy_evar(vm, context[84], context[85], context[46], context[47]);
      refalrts::copy_evar(vm, context[86], context[87], context[48], context[49]);
      refalrts::reinit_name(context[73], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1]);
      refalrts::reinit_open_bracket(context[74]);
      refalrts::reinit_open_bracket(context[63]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[28], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[69]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_char(context[36], ':');
      refalrts::reinit_close_bracket(context[44]);
      refalrts::reinit_close_call(context[62]);
      refalrts::reinit_close_call(context[64]);
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[67], context[44] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[69], context[33] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[1], context[17] );
      refalrts::link_brackets( context[37], context[19] );
      refalrts::link_brackets( context[16], context[45] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[63], context[4] );
      refalrts::link_brackets( context[74], context[68] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[64] );
      res = refalrts::splice_evar( res, context[86], context[87] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[84], context[85] );
      res = refalrts::splice_evar( res, context[17], context[31] );
      res = refalrts::splice_evar( res, context[82], context[83] );
      res = refalrts::splice_evar( res, context[45], context[1] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[4], context[16] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[68], context[63] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions/4 s.Mode#1/5 (/8 e.SentenceVars#1/46 )/9 (/12 e.Args#1/48 )/13 (/16 e.Substitutions#1/50 )/17 (/18 # Function/28 (/31 e.Name#1/52 )/32 # Sentences/33 (/36 (/40 e.LS#1/54 )/41 (/44 e.RS#1/56 )/45 )/37 e.Rest#1/58 )/19 >/1
    context[46] = context[20];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[23];
    context[50] = context[24];
    context[51] = context[25];
    context[52] = context[29];
    context[53] = context[30];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[42];
    context[57] = context[43];
    context[58] = context[26];
    context[59] = context[27];
    // closed e.SentenceVars#1 as range 46
    // closed e.Args#1 as range 48
    // closed e.Substitutions#1 as range 50
    // closed e.Name#1 as range 52
    // closed e.LS#1 as range 54
    // closed e.RS#1 as range 56
    // closed e.Rest#1 as range 58
    //DEBUG: s.Mode#1: 5
    //DEBUG: e.SentenceVars#1: 46
    //DEBUG: e.Args#1: 48
    //DEBUG: e.Substitutions#1: 50
    //DEBUG: e.Name#1: 52
    //DEBUG: e.LS#1: 54
    //DEBUG: e.RS#1: 56
    //DEBUG: e.Rest#1: 58

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptSentence-MakeSubstitutions$1:1/60 (/61 Tile{ AsIs: e.Substitutions#1/50 } )/62 (/63 Tile{ AsIs: e.RS#1/56 } Tile{ HalfReuse: )/4 AsIs: s.Mode#1/5 AsIs: (/8 AsIs: e.SentenceVars#1/46 AsIs: )/9 AsIs: (/12 AsIs: e.Args#1/48 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name#1/52 } Tile{ AsIs: )/45 HalfReuse: (/37 AsIs: e.Rest#1/58 AsIs: )/19 HalfReuse: (/1 } e.LS#1/54/64 Tile{ AsIs: )/17 HalfReuse: </18 HalfReuse: & Solve/28 AsIs: (/31 } e.SentenceVars#1/46/66 Tile{ AsIs: )/32 } (/68 (/69 e.Args#1/48/70 Tile{ HalfReuse: )/33 HalfReuse: ':'/36 AsIs: (/40 AsIs: e.LS#1/54 AsIs: )/41 HalfReuse: )/44 } >/72 >/73 Tile{ ]] }
    refalrts::alloc_name(vm, context[60], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::copy_evar(vm, context[64], context[65], context[54], context[55]);
    refalrts::copy_evar(vm, context[66], context[67], context[46], context[47]);
    refalrts::alloc_open_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[48], context[49]);
    refalrts::alloc_close_call(vm, context[72]);
    refalrts::alloc_close_call(vm, context[73]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[18]);
    refalrts::reinit_name(context[28], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[33]);
    refalrts::reinit_char(context[36], ':');
    refalrts::reinit_close_bracket(context[44]);
    refalrts::push_stack( vm, context[73] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[72] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[68], context[44] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[69], context[33] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[1], context[17] );
    refalrts::link_brackets( context[37], context[19] );
    refalrts::link_brackets( context[16], context[45] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[63], context[4] );
    refalrts::link_brackets( context[61], context[62] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[72], context[73] );
    res = refalrts::splice_evar( res, context[33], context[44] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[17], context[31] );
    res = refalrts::splice_evar( res, context[64], context[65] );
    res = refalrts::splice_evar( res, context[45], context[1] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[4], context[16] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions/4 s.Mode#1/5 (/8 e.SentenceVars#1/6 )/9 (/12 e.Args#1/10 )/13 (/16 e.Substitutions#1/14 )/17 t.RestFunction#1/18 >/1
  // closed e.SentenceVars#1 as range 6
  // closed e.Args#1 as range 10
  // closed e.Substitutions#1 as range 14
  //DEBUG: t.RestFunction#1: 18
  //DEBUG: s.Mode#1: 5
  //DEBUG: e.SentenceVars#1: 6
  //DEBUG: e.Args#1: 10
  //DEBUG: e.Substitutions#1: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode#1/5 (/8 e.SentenceVars#1/6 )/9 (/12 {REMOVED TILE} )/13 (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions#1/14 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction#1/18 } Tile{ AsIs: e.Args#1/10 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOptSentencem_MakeSubstitutions("DoOptSentence-MakeSubstitutions", COOKIE1_, COOKIE2_, func_DoOptSentencem_MakeSubstitutions);


static refalrts::FnResult func_Cleanupm_Stepm_Drop(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Cleanup-Step-Drop/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Cleanup-Step-Drop/4 (/9 # CallBrackets/11 (/14 # Symbol/16 # Name/17 '_'/18 '_'/19 'S'/20 't'/21 'e'/22 'p'/23 '-'/24 'D'/25 'r'/26 'o'/27 'p'/28 )/15 )/10 e.RS#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_CallBrackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[7], context[8] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Symbol], context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::ident_left( identifiers[ident_Name], context[12], context[13] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[12], context[13] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[12], context[13] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[12], context[13] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[12], context[13] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[12], context[13] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'p', context[12], context[13] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '-', context[12], context[13] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'D', context[12], context[13] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'r', context[12], context[13] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[12], context[13] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'p', context[12], context[13] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.RS#1 as range 5
    //DEBUG: e.RS#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Cleanup-Step-Drop/4 (/9 # CallBrackets/11 (/14 # Symbol/16 # Name/17 '_'/18 '_'/19 'S'/20 't'/21 'e'/22 'p'/23 '-'/24 'D'/25 'r'/26 'o'/27 'p'/28 )/15 )/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.RS#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Cleanup-Step-Drop/4 e.RS#1/2 >/1
  // closed e.RS#1 as range 2
  //DEBUG: e.RS#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Cleanup-Step-Drop/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.RS#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Cleanupm_Stepm_Drop("Cleanup-Step-Drop", COOKIE1_, COOKIE2_, func_Cleanupm_Stepm_Drop);


static refalrts::FnResult func_DropLeft(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & DropLeft/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DropLeft/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & DropLeft/4 e.List#1/6 0/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.List#1 as range 6
    //DEBUG: e.List#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DropLeft/4 {REMOVED TILE} 0/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.List#1/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DropLeft/4 t.Head#1/6 e.Tail#1/2 s.N#1/5 >/1
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: s.N#1: 5
  //DEBUG: t.Head#1: 6
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} t.Head#1/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DropLeft/4 } Tile{ AsIs: e.Tail#1/2 } </8 & Sub/9 Tile{ AsIs: s.N#1/5 } 1/10 >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[10], 1UL);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DropLeft("DropLeft", COOKIE1_, COOKIE2_, func_DropLeft);


static refalrts::FnResult func_FindOptInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & FindOptInfo/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & FindOptInfo/4 e.new#3/9 (/7 e.new#4/11 '*'/14 s.new#5/13 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    // closed e.new#3 as range 9
    if( ! refalrts::svar_right( context[13], context[11], context[12] ) )
      continue;
    context[14] = refalrts::char_right( '*', context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & FindOptInfo/4 e.OptFuncs#1/15 (/7 e.#0/17 # SUF/19 '*'/14 s.N#2/13 )/8 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = refalrts::ident_right( identifiers[ident_SUF], context[17], context[18] );
      if( ! context[19] )
        continue;
      // closed e.OptFuncs#1 as range 15
      // closed e.#0 as range 17
      //DEBUG: s.N#2: 13
      //DEBUG: e.OptFuncs#1: 15
      //DEBUG: e.#0: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.N#2/13 )/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } Tile{ HalfReuse: & FindOptInfo-Aux@1/0 HalfReuse: (/4 AsIs: e.OptFuncs#1/15 HalfReuse: )/7 AsIs: e.#0/17 HalfReuse: s.N2 #13/19 HalfReuse: >/14 } Tile{ ]] }
      refalrts::reinit_open_call(context[1]);
      refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z1]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_svar( context[19], context[13] );
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptInfo/4 e.OptFuncs#1/15 (/7 e.0#0/17 '*'/14 s.N#2/13 )/8 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.OptFuncs#1 as range 15
    // closed e.0#0 as range 17
    //DEBUG: s.N#2: 13
    //DEBUG: e.OptFuncs#1: 15
    //DEBUG: e.0#0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.N#2/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & FindOptInfo-Aux@2/0 HalfReuse: (/4 AsIs: e.OptFuncs#1/15 HalfReuse: )/7 AsIs: e.0#0/17 HalfReuse: s.N2 #13/14 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z2]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_svar( context[14], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[4], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo/4 e.OptFuncs#1/2 (/7 e.Name#1/5 )/8 >/1
  // closed e.OptFuncs#1 as range 2
  // closed e.Name#1 as range 5
  //DEBUG: e.OptFuncs#1: 2
  //DEBUG: e.Name#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } Tile{ HalfReuse: & FindOptInfo-Aux@3/0 HalfReuse: (/4 AsIs: e.OptFuncs#1/2 HalfReuse: )/7 AsIs: e.Name#1/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::reinit_open_call(context[1]);
  refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z3]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptInfo("FindOptInfo", COOKIE1_, COOKIE2_, func_FindOptInfo);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & FindOptInfo-Aux$2=1/4 (/7 e.OptFuncs-B#1/5 )/8 s.Mode#1/9 (/12 e.LookupName#1/10 )/13 (/16 e.Body#1/14 )/17 (/20 e.OptFuncs-E#1/18 )/21 (/24 e.Name#1/22 )/25 s.Drop#1/26 # Sentences/27 e.Sentences#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptFuncs-B#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.LookupName#1 as range 10
  // closed e.Body#1 as range 14
  // closed e.OptFuncs-E#1 as range 18
  // closed e.Name#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = refalrts::ident_left( identifiers[ident_Sentences], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentences#2 as range 2
  //DEBUG: e.OptFuncs-B#1: 5
  //DEBUG: s.Mode#1: 9
  //DEBUG: e.LookupName#1: 10
  //DEBUG: e.Body#1: 14
  //DEBUG: e.OptFuncs-E#1: 18
  //DEBUG: e.Name#1: 22
  //DEBUG: s.Drop#1: 26
  //DEBUG: e.Sentences#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Drop#1/26 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B#1/5 } Tile{ HalfReuse: (/8 AsIs: s.Mode#1/9 AsIs: (/12 AsIs: e.LookupName#1/10 AsIs: )/13 } Tile{ AsIs: e.Body#1/14 } Tile{ AsIs: )/17 } Tile{ AsIs: e.OptFuncs-E#1/18 } Tile{ AsIs: (/20 } Tile{ HalfReuse: s.Mode1 #9/21 AsIs: (/24 AsIs: e.Name#1/22 AsIs: )/25 } Tile{ HalfReuse: # Sentences/16 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/27 AsIs: e.Sentences#2/2 HalfReuse: s.Drop1 #26/1 } Tile{ HalfReuse: >/4 HalfReuse: )/7 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_svar( context[21], context[9] );
  refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
  refalrts::reinit_name(context[27], functions[efunc_DropLeft]);
  refalrts::reinit_svar( context[1], context[26] );
  refalrts::reinit_close_call(context[4]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::link_brackets( context[20], context[7] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[8], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[27], context[1] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1("FindOptInfo-Aux$2=1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1);


static refalrts::FnResult func_FindOptInfom_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FindOptInfo-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux/4 e.new#1/2 (/12 e.new#2/10 )/13 (/8 e.new#3/6 )/9 s.new#4/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_right( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_right( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 10
  // closed e.new#3 as range 6
  do {
    // </0 & FindOptInfo-Aux/4 e.OptFuncs-B#1/20 (/26 # Intrinsic/28 (/31 e.LookupName#1/33 )/32 e.Body#1/24 )/27 e.OptFuncs-E#1/22 (/12 e.Name#1/16 )/13 (/8 e.LookupName#1/18 )/9 s._#1/5 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[6];
    context[19] = context[7];
    // closed e.Name#1 as range 16
    // closed e.LookupName#1 as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[14];
      context[23] = context[15];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      context[28] = refalrts::ident_left( identifiers[ident_Intrinsic], context[24], context[25] );
      if( ! context[28] )
        continue;
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[24], context[25] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[18], context[19], context[29], context[30] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Body#1 as range 24
      // closed e.OptFuncs-E#1 as range 22
      //DEBUG: s._#1: 5
      //DEBUG: e.Name#1: 16
      //DEBUG: e.LookupName#1: 18
      //DEBUG: e.OptFuncs-B#1: 20
      //DEBUG: e.Body#1: 24
      //DEBUG: e.OptFuncs-E#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FindOptInfo-Aux/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LookupName#1/18 {REMOVED TILE} s._#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B#1/20 } Tile{ AsIs: (/26 AsIs: # Intrinsic/28 AsIs: (/31 AsIs: e.LookupName#1/33 AsIs: )/32 AsIs: e.Body#1/24 AsIs: )/27 AsIs: e.OptFuncs-E#1/22 AsIs: (/12 } Tile{ HalfReuse: # Intrinsic/13 AsIs: (/8 } Tile{ AsIs: e.Name#1/16 } Tile{ AsIs: )/9 } e.Body#1/24/35 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[35], context[36], context[24], context[25]);
      refalrts::reinit_ident(context[13], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[12], context[1] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[13], context[8] );
      res = refalrts::splice_evar( res, context[26], context[12] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux/4 e.OptFuncs-B#1/14 (/20 s.Mode#1/22 (/25 e.LookupName#1/27 )/26 e.Body#1/18 )/21 e.OptFuncs-E#1/16 (/12 e.Name#1/10 )/13 (/8 e.LookupName#1/6 )/9 s.Drop#1/5 >/1
  // closed e.Name#1 as range 10
  // closed e.LookupName#1 as range 6
  context[14] = 0;
  context[15] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.OptFuncs-E#1 as range 16
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[6], context[7], context[23], context[24] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.Body#1 as range 18
    //DEBUG: s.Drop#1: 5
    //DEBUG: e.Name#1: 10
    //DEBUG: e.LookupName#1: 6
    //DEBUG: e.OptFuncs-B#1: 14
    //DEBUG: e.OptFuncs-E#1: 16
    //DEBUG: s.Mode#1: 22
    //DEBUG: e.Body#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LookupName#1/6 {REMOVED TILE} s.Drop#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 Tile{ HalfReuse: & FindOptInfo-Aux$2=1/0 HalfReuse: (/4 AsIs: e.OptFuncs-B#1/14 HalfReuse: )/20 AsIs: s.Mode#1/22 AsIs: (/25 AsIs: e.LookupName#1/27 AsIs: )/26 } (/30 Tile{ AsIs: e.Body#1/18 } Tile{ AsIs: )/21 } (/31 Tile{ AsIs: e.OptFuncs-E#1/16 } Tile{ AsIs: )/9 } Tile{ AsIs: (/12 AsIs: e.Name#1/10 AsIs: )/13 HalfReuse: s.Drop1 #5/8 } e.Body#1/18/32 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::copy_evar(vm, context[32], context[33], context[18], context[19]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_S2A1]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_svar( context[8], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[31], context[9] );
    refalrts::link_brackets( context[30], context[21] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[4], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[12], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[0], context[26] );
    res = refalrts::splice_elem( res, context[29] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[14], context[15], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_FindOptInfom_Aux("FindOptInfo-Aux", COOKIE1_, COOKIE2_, func_FindOptInfom_Aux);


static refalrts::FnResult func_CutSUF(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CutSUF/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & CutSUF/4 e.Prefix#1/5 # SUF/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_right( identifiers[ident_SUF], context[5], context[6] );
    if( ! context[7] )
      continue;
    // closed e.Prefix#1 as range 5
    //DEBUG: e.Prefix#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CutSUF/4 {REMOVED TILE} # SUF/7 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Prefix#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CutSUF/4 e.Prefix#1/2 >/1
  // closed e.Prefix#1 as range 2
  //DEBUG: e.Prefix#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CutSUF/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Prefix#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CutSUF("CutSUF", COOKIE1_, COOKIE2_, func_CutSUF);


static refalrts::FnResult func_WithMetatables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & WithMetatables/4 e.OptFuncs#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.OptFuncs#1 as range 2
  //DEBUG: e.OptFuncs#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@8/6 (/7 # Metatables/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.OptFuncs#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Metatables]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_WithMetatables("WithMetatables", COOKIE1_, COOKIE2_, func_WithMetatables);


static refalrts::FnResult func_FindOptimizedCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & FindOptimizedCall/4 (/7 e.OptFuncNames#1/5 )/8 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptFuncNames#1 as range 5
  // closed e.Expr#1 as range 2
  //DEBUG: e.OptFuncNames#1: 5
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.OptFuncNames#1/5 HalfReuse: # None/8 } )/9 (/10 )/11 Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::reinit_ident(context[8], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptimizedCall("FindOptimizedCall", COOKIE1_, COOKIE2_, func_FindOptimizedCall);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & FindOptimizedCall-Term$1=1/4 (/7 e.OptFuncNames#2/5 t.Found#2/9 )/8 e.Expr#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr#2 as range 2
  context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames#2 as range 5
  //DEBUG: e.Expr#2: 2
  //DEBUG: t.Found#2: 9
  //DEBUG: e.OptFuncNames#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames#2/5 AsIs: t.Found#2/9 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # Brackets/4 } Tile{ AsIs: e.Expr#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S1A1("FindOptimizedCall-Term$1=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S1A1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & FindOptimizedCall-Term$2=1/4 (/7 e.Name#1/5 )/8 (/11 e.OptFuncNames#2/9 t.Found#2/13 )/12 e.Expr#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Name#1 as range 5
  // closed e.Expr#2 as range 2
  context[14] = refalrts::tvar_right( context[13], context[9], context[10] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames#2 as range 9
  //DEBUG: e.Name#1: 5
  //DEBUG: e.Expr#2: 2
  //DEBUG: t.Found#2: 13
  //DEBUG: e.OptFuncNames#2: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.OptFuncNames#2/9 AsIs: t.Found#2/13 AsIs: )/12 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name#1/5 AsIs: )/8 } Tile{ AsIs: e.Expr#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S2A1("FindOptimizedCall-Term$2=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S2A1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & FindOptimizedCall-Term$3:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptimizedCall-Term$3:1/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 t.new#4/14 )/13 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#5 as range 2
  context[15] = refalrts::tvar_right( context[14], context[10], context[11] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 10
  do {
    // </0 & FindOptimizedCall-Term$3:1/4 s.new#6/5 (/8 e.new#8/16 )/9 (/12 e.new#9/18 # None/14 )/13 e.new#7/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[10];
    context[19] = context[11];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_None], context[14] ) )
      continue;
    // closed e.new#8 as range 16
    // closed e.new#9 as range 18
    // closed e.new#7 as range 20
    do {
      // </0 & FindOptimizedCall-Term$3:1/4 s.Hash#2/5 (/8 e.Name#1/22 )/9 (/12 e.Buckets-B#3/28 (/34 s.Hash#2/36 e.OptFuncNames-B#3/37 (/43 s.Label#3/47 e.Name#1/45 )/44 e.OptFuncNames-E#3/39 )/35 e.Buckets-E#3/30 # None/14 )/13 e.Arg#3/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      // closed e.Name#1 as range 22
      // closed e.Arg#3 as range 26
      context[28] = 0;
      context[29] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[30] = context[24];
        context[31] = context[25];
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        if( ! refalrts::repeated_stvar_left( vm, context[36], context[5], context[32], context[33] ) )
          continue;
        // closed e.Buckets-E#3 as range 30
        context[37] = 0;
        context[38] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[39] = context[32];
          context[40] = context[33];
          context[41] = 0;
          context[42] = 0;
          context[43] = refalrts::brackets_left( context[41], context[42], context[39], context[40] );
          if( ! context[43] )
            continue;
          refalrts::bracket_pointers(context[43], context[44]);
          if( ! refalrts::repeated_evar_right( vm, context[45], context[46], context[22], context[23], context[41], context[42] ) )
            continue;
          // closed e.OptFuncNames-E#3 as range 39
          if( ! refalrts::svar_left( context[47], context[41], context[42] ) )
            continue;
          if( ! refalrts::empty_seq( context[41], context[42] ) )
            continue;
          //DEBUG: s.Hash#2: 5
          //DEBUG: e.Name#1: 22
          //DEBUG: e.Arg#3: 26
          //DEBUG: e.Buckets-B#3: 28
          //DEBUG: e.Buckets-E#3: 30
          //DEBUG: e.OptFuncNames-B#3: 37
          //DEBUG: e.OptFuncNames-E#3: 39
          //DEBUG: s.Label#3: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Hash#2/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: e.Buckets-B#3/28 AsIs: (/34 AsIs: s.Hash#2/36 } Tile{ AsIs: (/43 AsIs: s.Label#3/47 AsIs: e.Name#1/45 AsIs: )/44 } Tile{ AsIs: e.OptFuncNames-B#3/37 } Tile{ AsIs: e.OptFuncNames-E#3/39 } Tile{ AsIs: )/35 AsIs: e.Buckets-E#3/30 HalfReuse: (/14 HalfReuse: # CallBrackets/13 } Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 } Tile{ HalfReuse: # Name/8 AsIs: e.Name#1/22 AsIs: )/9 } Tile{ AsIs: e.Arg#3/26 } )/48 )/49 (/50 # TkVariable/51 'e'/52 # DRIVEN/53 0/54 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_close_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_ident(vm, context[51], identifiers[ident_TkVariable]);
          refalrts::alloc_char(vm, context[52], 'e');
          refalrts::alloc_ident(vm, context[53], identifiers[ident_DRIVEN]);
          refalrts::alloc_number(vm, context[54], 0UL);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
          refalrts::reinit_ident(context[8], identifiers[ident_Name]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[50], context[1] );
          refalrts::link_brackets( context[12], context[49] );
          refalrts::link_brackets( context[14], context[48] );
          refalrts::link_brackets( context[0], context[9] );
          refalrts::link_brackets( context[34], context[35] );
          refalrts::link_brackets( context[43], context[44] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[48], context[54] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[35], context[13] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[12], context[36] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[37], context[38], context[32], context[33] ) );
      } while ( refalrts::open_evar_advance( context[28], context[29], context[24], context[25] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptimizedCall-Term$3:1/4 s.Hash#2/5 (/8 e.Name#1/22 )/9 (/12 e.OptFuncNames#3/24 # None/14 )/13 e.Arg#3/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.Name#1 as range 22
    // closed e.OptFuncNames#3 as range 24
    // closed e.Arg#3 as range 26
    //DEBUG: s.Hash#2: 5
    //DEBUG: e.Name#1: 22
    //DEBUG: e.OptFuncNames#3: 24
    //DEBUG: e.Arg#3: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Hash#2/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: e.OptFuncNames#3/24 AsIs: # None/14 AsIs: )/13 } (/28 Tile{ HalfReuse: # ColdCallBrackets/0 HalfReuse: (/4 } # Symbol/29 Tile{ HalfReuse: # Name/8 AsIs: e.Name#1/22 AsIs: )/9 } Tile{ AsIs: e.Arg#3/26 } Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_ident(vm, context[29], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[0], identifiers[ident_ColdCallBrackets]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[8], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[28], context[1] );
    refalrts::link_brackets( context[4], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptimizedCall-Term$3:1/4 s.Hash#2/5 (/8 e.Name#1/6 )/9 (/12 e.OptFuncNames#3/10 t.Found#3/14 )/13 e.Arg#3/2 >/1
  // closed e.Name#1 as range 6
  // closed e.OptFuncNames#3 as range 10
  // closed e.Arg#3 as range 2
  //DEBUG: t.Found#3: 14
  //DEBUG: s.Hash#2: 5
  //DEBUG: e.Name#1: 6
  //DEBUG: e.OptFuncNames#3: 10
  //DEBUG: e.Arg#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Hash#2/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: e.OptFuncNames#3/10 AsIs: t.Found#3/14 AsIs: )/13 } (/16 Tile{ HalfReuse: # CallBrackets/0 HalfReuse: (/4 } # Symbol/17 Tile{ HalfReuse: # Name/8 AsIs: e.Name#1/6 AsIs: )/9 } Tile{ AsIs: e.Arg#3/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[0], identifiers[ident_CallBrackets]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[8], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[16], context[1] );
  refalrts::link_brackets( context[4], context[9] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S3B1("FindOptimizedCall-Term$3:1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S3B1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & FindOptimizedCall-Term$3=1/4 (/7 e.Name#1/5 )/8 (/11 e.OptFuncNames#1/9 )/12 (/15 e.Arg#1/13 )/16 s.Hash#2/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Name#1 as range 5
  // closed e.OptFuncNames#1 as range 9
  // closed e.Arg#1 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Name#1: 5
  //DEBUG: e.OptFuncNames#1: 9
  //DEBUG: e.Arg#1: 13
  //DEBUG: s.Hash#2: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash#2/17 {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 Tile{ HalfReuse: & FindOptimizedCall-Term$3:1/0 HalfReuse: s.Hash2 #17/4 AsIs: (/7 AsIs: e.Name#1/5 AsIs: )/8 HalfReuse: </11 } & DoMapAccum@9/19 (/20 Tile{ AsIs: e.OptFuncNames#1/9 } # None/21 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Arg#1/13 } >/22 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_ident(vm, context[21], identifiers[ident_None]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_FindOptimizedCallm_Term_S3B1]);
  refalrts::reinit_svar( context[4], context[17] );
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[20], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S3A1("FindOptimizedCall-Term$3=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S3A1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & FindOptimizedCall-Term$4=1/4 (/7 e.OptFuncNames#2/5 t.Found#2/9 )/8 e.Expr#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr#2 as range 2
  context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames#2 as range 5
  //DEBUG: e.Expr#2: 2
  //DEBUG: t.Found#2: 9
  //DEBUG: e.OptFuncNames#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames#2/5 AsIs: t.Found#2/9 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 } Tile{ AsIs: e.Expr#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S4A1("FindOptimizedCall-Term$4=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S4A1);


static refalrts::FnResult func_FindOptimizedCallm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & FindOptimizedCall-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptimizedCall-Term/4 (/7 e.new#1/5 t.new#2/11 )/8 t.new#3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_right( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  do {
    // </0 & FindOptimizedCall-Term/4 (/7 e.new#6/13 # None/11 )/8 (/9 s.new#4/17 e.new#5/15 )/10 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_None], context[11] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    if( ! refalrts::brackets_term( context[15], context[16], context[9] ) )
      continue;
    // closed e.new#6 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new#5 as range 15
    do {
      // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames#1/18 # None/11 )/8 (/9 # Brackets/17 e.Expr#1/20 )/10 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[17] ) )
        continue;
      // closed e.OptFuncNames#1 as range 18
      // closed e.Expr#1 as range 20
      //DEBUG: e.OptFuncNames#1: 18
      //DEBUG: e.Expr#1: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </22 & FindOptimizedCall-Term$1=1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.OptFuncNames#1/18 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 AsIs: e.Expr#1/20 HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_FindOptimizedCallm_Term_S1A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[17] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FindOptimizedCall-Term/4 (/7 e.new#10/18 # None/11 )/8 (/9 s.new#7/17 (/24 e.new#8/22 )/25 e.new#9/20 )/10 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      // closed e.new#10 as range 18
      // closed e.new#8 as range 22
      // closed e.new#9 as range 20
      do {
        // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames#1/26 # None/11 )/8 (/9 # ADT-Brackets/17 (/24 e.Name#1/28 )/25 e.Expr#1/30 )/10 >/1
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[20];
        context[31] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[17] ) )
          continue;
        // closed e.OptFuncNames#1 as range 26
        // closed e.Name#1 as range 28
        // closed e.Expr#1 as range 30
        //DEBUG: e.OptFuncNames#1: 26
        //DEBUG: e.Name#1: 28
        //DEBUG: e.Expr#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </32 & FindOptimizedCall-Term$2=1/33 Tile{ AsIs: (/24 AsIs: e.Name#1/28 AsIs: )/25 } Tile{ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.OptFuncNames#1/26 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 } Tile{ AsIs: e.Expr#1/30 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_name(vm, context[33], functions[efunc_gen_FindOptimizedCallm_Term_S2A1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[17] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames#1/26 # None/11 )/8 (/9 # CallBrackets/17 (/24 # Symbol/32 # Name/33 e.Name#1/28 )/25 e.Arg#1/30 )/10 >/1
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[20];
      context[31] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
        continue;
      context[32] = refalrts::ident_left( identifiers[ident_Symbol], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::ident_left( identifiers[ident_Name], context[28], context[29] );
      if( ! context[33] )
        continue;
      // closed e.OptFuncNames#1 as range 26
      // closed e.Name#1 as range 28
      // closed e.Arg#1 as range 30
      //DEBUG: e.OptFuncNames#1: 26
      //DEBUG: e.Name#1: 28
      //DEBUG: e.Arg#1: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptimizedCall-Term$3=1/4 AsIs: (/7 } Tile{ AsIs: e.Name#1/28 } Tile{ AsIs: )/8 AsIs: (/9 } Tile{ AsIs: e.OptFuncNames#1/26 } Tile{ HalfReuse: )/17 } Tile{ HalfReuse: (/25 AsIs: e.Arg#1/30 AsIs: )/10 HalfReuse: </1 } Tile{ HalfReuse: & HashName/11 } e.Name#1/28/34 Tile{ HalfReuse: 101/24 HalfReuse: >/32 HalfReuse: >/33 } Tile{ ]] }
      refalrts::copy_evar(vm, context[34], context[35], context[28], context[29]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_S3A1]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_open_call(context[1]);
      refalrts::reinit_name(context[11], functions[efunc_HashName]);
      refalrts::reinit_number(context[24], 101UL);
      refalrts::reinit_close_call(context[32]);
      refalrts::reinit_close_call(context[33]);
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::link_brackets( context[25], context[10] );
      refalrts::link_brackets( context[9], context[17] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[33] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames#1/18 # None/11 )/8 (/9 # CallBrackets/17 e.Expr#1/20 )/10 >/1
    context[18] = context[13];
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
      continue;
    // closed e.OptFuncNames#1 as range 18
    // closed e.Expr#1 as range 20
    //DEBUG: e.OptFuncNames#1: 18
    //DEBUG: e.Expr#1: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & FindOptimizedCall-Term$4=1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.OptFuncNames#1/18 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 AsIs: e.Expr#1/20 HalfReuse: >/10 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_FindOptimizedCallm_Term_S4A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::reinit_close_bracket(context[17]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames#1/5 t.Found#1/11 )/8 t.AnyTerm#1/9 >/1
  // closed e.OptFuncNames#1 as range 5
  //DEBUG: t.Found#1: 11
  //DEBUG: t.AnyTerm#1: 9
  //DEBUG: e.OptFuncNames#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindOptimizedCall-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames#1/5 AsIs: t.Found#1/11 AsIs: )/8 AsIs: t.AnyTerm#1/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptimizedCallm_Term("FindOptimizedCall-Term", COOKIE1_, COOKIE2_, func_FindOptimizedCallm_Term);


static refalrts::FnResult func_ApplySolutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & ApplySolutions/4 (/7 (/11 e.Left#1/9 )/12 (/15 e.Right#1/13 )/16 )/8 e.Contractions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Left#1 as range 9
  // closed e.Right#1 as range 13
  // closed e.Contractions#1 as range 2
  //DEBUG: e.Left#1: 9
  //DEBUG: e.Right#1: 13
  //DEBUG: e.Contractions#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/17 (/18 Tile{ AsIs: </0 Reuse: & Map@8/4 AsIs: (/7 } e.Contractions#1/2/19 Tile{ HalfReuse: )/11 AsIs: e.Left#1/9 HalfReuse: >/12 } )/21 (/22 </23 & Map@8/24 (/25 Tile{ AsIs: e.Contractions#1/2 } Tile{ HalfReuse: )/15 AsIs: e.Right#1/13 HalfReuse: >/16 AsIs: )/8 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::copy_evar(vm, context[19], context[20], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z8]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[17], context[1] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[25], context[15] );
  refalrts::link_brackets( context[18], context[21] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplySolutions("ApplySolutions", COOKIE1_, COOKIE2_, func_ApplySolutions);


static refalrts::FnResult func_ApplyAssigns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplyAssigns/4 e.Expr#1/2 (/7 e.Assigns#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr#1 as range 2
  // closed e.Assigns#1 as range 5
  //DEBUG: e.Expr#1: 2
  //DEBUG: e.Assigns#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@13/4 } Tile{ AsIs: (/7 AsIs: e.Assigns#1/5 AsIs: )/8 } Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyAssigns("ApplyAssigns", COOKIE1_, COOKIE2_, func_ApplyAssigns);


static refalrts::FnResult func_ApplyAssignsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ApplyAssigns-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ApplyAssigns-Term/4 t.new#1/9 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyAssigns-Term/4 (/9 s.new#3/15 e.new#4/13 )/10 (/7 e.new#5/11 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & ApplyAssigns-Term/4 (/9 # Brackets/15 e.Expr#1/16 )/10 (/7 e.Assigns#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[15] ) )
        continue;
      // closed e.Expr#1 as range 16
      // closed e.Assigns#1 as range 18
      //DEBUG: e.Expr#1: 16
      //DEBUG: e.Assigns#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Brackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/10 AsIs: (/7 AsIs: e.Assigns#1/18 AsIs: )/8 } Tile{ AsIs: e.Expr#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z13]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # CallBrackets/15 e.Args#1/16 )/10 (/7 e.Assigns#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[15] ) )
        continue;
      // closed e.Args#1 as range 16
      // closed e.Assigns#1 as range 18
      //DEBUG: e.Args#1: 16
      //DEBUG: e.Assigns#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/10 AsIs: (/7 AsIs: e.Assigns#1/18 AsIs: )/8 } Tile{ AsIs: e.Args#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z13]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # ColdCallBrackets/15 e.Args#1/16 )/10 (/7 e.Assigns#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[15] ) )
        continue;
      // closed e.Args#1 as range 16
      // closed e.Assigns#1 as range 18
      //DEBUG: e.Args#1: 16
      //DEBUG: e.Assigns#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ColdCallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/10 AsIs: (/7 AsIs: e.Assigns#1/18 AsIs: )/8 } Tile{ AsIs: e.Args#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z13]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # ClosureBrackets/15 e.Args#1/16 )/10 (/7 e.Assigns#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[15] ) )
        continue;
      // closed e.Args#1 as range 16
      // closed e.Assigns#1 as range 18
      //DEBUG: e.Args#1: 16
      //DEBUG: e.Assigns#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ClosureBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/10 AsIs: (/7 AsIs: e.Assigns#1/18 AsIs: )/8 } Tile{ AsIs: e.Args#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z13]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ApplyAssigns-Term/4 (/9 # ADT-Brackets/15 (/22 e.Name#1/20 )/23 e.Expr#1/16 )/10 (/7 e.Assigns#1/18 )/8 >/1
    context[16] = context[13];
    context[17] = context[14];
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[15] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.Name#1 as range 20
    // closed e.Expr#1 as range 16
    // closed e.Assigns#1 as range 18
    //DEBUG: e.Name#1: 20
    //DEBUG: e.Expr#1: 16
    //DEBUG: e.Assigns#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ADT-Brackets/15 AsIs: (/22 AsIs: e.Name#1/20 AsIs: )/23 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/10 AsIs: (/7 AsIs: e.Assigns#1/18 AsIs: )/8 } Tile{ AsIs: e.Expr#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z13]);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[8] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ApplyAssigns-Term/4 t.T#1/9 (/7 e.B#1/13 (/19 e.Asgn#1/17 ':'/23 t.T#1/21 )/20 e.E#1/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_right( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_right( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Asgn#1 as range 17
      // closed e.E#1 as range 15
      //DEBUG: t.T#1: 9
      //DEBUG: e.B#1: 13
      //DEBUG: e.Asgn#1: 17
      //DEBUG: e.E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term/4 t.T#1/9 (/7 e.B#1/13 (/19 {REMOVED TILE} ':'/23 t.T#1/21 )/20 e.E#1/15 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Asgn#1/17 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyAssigns-Term/4 t.T#1/9 (/7 e.Assigns#1/5 )/8 >/1
  // closed e.Assigns#1 as range 5
  //DEBUG: t.T#1: 9
  //DEBUG: e.Assigns#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term/4 {REMOVED TILE} (/7 e.Assigns#1/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyAssignsm_Term("ApplyAssigns-Term", COOKIE1_, COOKIE2_, func_ApplyAssignsm_Term);


static refalrts::FnResult func_ApplyContractions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplyContractions/4 e.Expr#1/2 (/7 e.Contrs#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr#1 as range 2
  // closed e.Contrs#1 as range 5
  //DEBUG: e.Expr#1: 2
  //DEBUG: e.Contrs#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 } Tile{ AsIs: (/7 AsIs: e.Contrs#1/5 AsIs: )/8 } Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyContractions("ApplyContractions", COOKIE1_, COOKIE2_, func_ApplyContractions);


static refalrts::FnResult func_gen_ApplyContractionsm_Term_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ApplyContractions-Term$3:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ApplyContractions-Term$3:1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs#1/9 )/8 e.OriginArgs#1/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.OriginArgs#1 as range 9
    if( ! refalrts::repeated_evar_left( vm, context[13], context[14], context[9], context[10], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.OriginArgs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs#1/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # ColdCallBrackets/8 AsIs: e.OriginArgs#1/13 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[8], identifiers[ident_ColdCallBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs#1/5 )/8 e.ChangedArgs#2/2 >/1
  // closed e.OriginArgs#1 as range 5
  // closed e.ChangedArgs#2 as range 2
  //DEBUG: e.OriginArgs#1: 5
  //DEBUG: e.ChangedArgs#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # CallBrackets/8 AsIs: e.ChangedArgs#2/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[8], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyContractionsm_Term_S3B1("ApplyContractions-Term$3:1", COOKIE1_, COOKIE2_, func_gen_ApplyContractionsm_Term_S3B1);


static refalrts::FnResult func_ApplyContractionsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ApplyContractions-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ApplyContractions-Term/4 t.new#1/9 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyContractions-Term/4 (/9 s.new#3/15 e.new#4/13 )/10 (/7 e.new#5/11 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & ApplyContractions-Term/4 (/9 # Brackets/15 e.Expr#1/16 )/10 (/7 e.Contrs#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[15] ) )
        continue;
      // closed e.Expr#1 as range 16
      // closed e.Contrs#1 as range 18
      //DEBUG: e.Expr#1: 16
      //DEBUG: e.Contrs#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Brackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/10 AsIs: (/7 AsIs: e.Contrs#1/18 AsIs: )/8 } Tile{ AsIs: e.Expr#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # CallBrackets/15 e.Args#1/16 )/10 (/7 e.Contrs#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[15] ) )
        continue;
      // closed e.Args#1 as range 16
      // closed e.Contrs#1 as range 18
      //DEBUG: e.Args#1: 16
      //DEBUG: e.Contrs#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/10 AsIs: (/7 AsIs: e.Contrs#1/18 AsIs: )/8 } Tile{ AsIs: e.Args#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # ColdCallBrackets/15 e.OriginArgs#1/16 )/10 (/7 e.Contrs#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[15] ) )
        continue;
      // closed e.OriginArgs#1 as range 16
      // closed e.Contrs#1 as range 18
      //DEBUG: e.OriginArgs#1: 16
      //DEBUG: e.Contrs#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ApplyContractions-Term$3:1/4 AsIs: (/9 } Tile{ AsIs: e.OriginArgs#1/16 } )/20 Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Map@8/10 AsIs: (/7 AsIs: e.Contrs#1/18 AsIs: )/8 } e.OriginArgs#1/16/21 >/23 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[9], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # ClosureBrackets/15 e.Args#1/16 )/10 (/7 e.Contrs#1/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[15] ) )
        continue;
      // closed e.Args#1 as range 16
      // closed e.Contrs#1 as range 18
      //DEBUG: e.Args#1: 16
      //DEBUG: e.Contrs#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ClosureBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/10 AsIs: (/7 AsIs: e.Contrs#1/18 AsIs: )/8 } Tile{ AsIs: e.Args#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ApplyContractions-Term/4 (/9 # ADT-Brackets/15 (/22 e.Name#1/20 )/23 e.Expr#1/16 )/10 (/7 e.Contrs#1/18 )/8 >/1
    context[16] = context[13];
    context[17] = context[14];
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[15] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.Name#1 as range 20
    // closed e.Expr#1 as range 16
    // closed e.Contrs#1 as range 18
    //DEBUG: e.Name#1: 20
    //DEBUG: e.Expr#1: 16
    //DEBUG: e.Contrs#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ADT-Brackets/15 AsIs: (/22 AsIs: e.Name#1/20 AsIs: )/23 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/10 AsIs: (/7 AsIs: e.Contrs#1/18 AsIs: )/8 } Tile{ AsIs: e.Expr#1/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z8]);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[8] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ApplyContractions-Term/4 t.Term#1/9 (/7 e.B#1/13 (/19 t.Term#1/21 ':'/23 e.Contr#1/17 )/20 e.E#1/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_left( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_left( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Contr#1 as range 17
      // closed e.E#1 as range 15
      //DEBUG: t.Term#1: 9
      //DEBUG: e.B#1: 13
      //DEBUG: e.Contr#1: 17
      //DEBUG: e.E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Term#1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 } Tile{ AsIs: (/7 AsIs: e.B#1/13 HalfReuse: )/19 AsIs: t.Term#1/21 HalfReuse: (/23 AsIs: e.Contr#1/17 AsIs: )/20 } (/24 Tile{ AsIs: e.E#1/15 } Tile{ AsIs: )/8 } e.Contr#1/17/25 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[8] );
      refalrts::link_brackets( context[23], context[20] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term/4 t.T#1/9 (/7 e.Contrs#1/5 )/8 >/1
  // closed e.Contrs#1 as range 5
  //DEBUG: t.T#1: 9
  //DEBUG: e.Contrs#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyContractions-Term/4 {REMOVED TILE} (/7 e.Contrs#1/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyContractionsm_Term("ApplyContractions-Term", COOKIE1_, COOKIE2_, func_ApplyContractionsm_Term);


static refalrts::FnResult func_RemainderFuncIncName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & RemainderFuncIncName/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & RemainderFuncIncName/4 e.Name#1/9 # SUF/13 e.Suffixes#1/11 '*'/8 s.N#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    context[8] = refalrts::char_right( '*', context[5], context[6] );
    if( ! context[8] )
      continue;
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[5];
      context[12] = context[6];
      context[13] = refalrts::ident_left( identifiers[ident_SUF], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Suffixes#1 as range 11
      //DEBUG: s.N#1: 7
      //DEBUG: e.Name#1: 9
      //DEBUG: e.Suffixes#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/9 } Tile{ AsIs: # SUF/13 AsIs: e.Suffixes#1/11 AsIs: '*'/8 } Tile{ AsIs: </0 Reuse: & Add/4 } Tile{ AsIs: s.N#1/7 } 1/14 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[14], 1UL);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[13], context[8] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & RemainderFuncIncName/4 e.Name#1/7 # SUF/11 e.Suffixes#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_left( identifiers[ident_SUF], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Suffixes#1 as range 9
      //DEBUG: e.Name#1: 7
      //DEBUG: e.Suffixes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/7 } Tile{ AsIs: # SUF/11 AsIs: e.Suffixes#1/9 HalfReuse: '*'/1 } Tile{ HalfReuse: 1/4 } Tile{ ]] }
      refalrts::reinit_char(context[1], '*');
      refalrts::reinit_number(context[4], 1UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemainderFuncIncName/4 e.Name#1/2 >/1
  // closed e.Name#1 as range 2
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: 1/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_number(context[1], 1UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemainderFuncIncName("RemainderFuncIncName", COOKIE1_, COOKIE2_, func_RemainderFuncIncName);


static refalrts::FnResult func_OptTreem_Drivem_CleanupColdCalls(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & OptTree-Drive-CleanupColdCalls/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@16/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Drivem_CleanupColdCalls("OptTree-Drive-CleanupColdCalls", 0U, 0U, func_OptTreem_Drivem_CleanupColdCalls);


static refalrts::FnResult func_CleanupColdm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CleanupCold-Body/4 e.Sentences#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Sentences#1 as range 2
  //DEBUG: e.Sentences#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 AsIs: e.Sentences#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Body("CleanupCold-Body", COOKIE1_, COOKIE2_, func_CleanupColdm_Body);


static refalrts::FnResult func_CleanupColdm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & CleanupCold-Sentence/4 (/7 (/11 e.Pattern#1/9 )/12 e.Conditions#1/5 (/15 e.Result#1/13 )/16 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern#1 as range 9
  // closed e.Conditions#1 as range 5
  // closed e.Result#1 as range 13
  //DEBUG: e.Pattern#1: 9
  //DEBUG: e.Conditions#1: 5
  //DEBUG: e.Result#1: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Pattern#1/9 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Map@18/4 } Tile{ AsIs: e.Conditions#1/5 } >/17 (/18 </19 Tile{ HalfReuse: & Map@17/15 AsIs: e.Result#1/13 HalfReuse: >/16 AsIs: )/8 HalfReuse: )/1 ]] }
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z18]);
  refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z17]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[18], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Sentence("CleanupCold-Sentence", COOKIE1_, COOKIE2_, func_CleanupColdm_Sentence);


static refalrts::FnResult func_CleanupColdm_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CleanupCold-Result/4 e.Result#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result#1 as range 2
  //DEBUG: e.Result#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@17/4 AsIs: e.Result#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Result("CleanupCold-Result", COOKIE1_, COOKIE2_, func_CleanupColdm_Result);


static refalrts::FnResult func_CleanupColdm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & CleanupCold-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CleanupCold-Term/4 t.new#1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CleanupCold-Term/4 (/5 s.new#2/9 e.new#3/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new#3 as range 7
    do {
      // </0 & CleanupCold-Term/4 (/5 # Brackets/9 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[9] ) )
        continue;
      // closed e.Expr#1 as range 10
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </5 HalfReuse: & Map@17/9 AsIs: e.Expr#1/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[5] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CleanupCold-Term/4 (/5 # ADT-Brackets/9 (/14 e.Name#1/12 )/15 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
        continue;
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      // closed e.Name#1 as range 12
      // closed e.Expr#1 as range 10
      //DEBUG: e.Name#1: 12
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # ADT-Brackets/9 AsIs: (/14 AsIs: e.Name#1/12 AsIs: )/15 } Tile{ AsIs: </0 Reuse: & Map@17/4 } Tile{ AsIs: e.Expr#1/10 } Tile{ HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[6];
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[5], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CleanupCold-Term/4 (/5 # CallBrackets/9 e.Expr#1/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[9] ) )
        continue;
      // closed e.Expr#1 as range 10
      //DEBUG: e.Expr#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </5 HalfReuse: & Map@17/9 AsIs: e.Expr#1/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[5] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CleanupCold-Term/4 (/5 # ColdCallBrackets/9 e.Expr#1/10 )/6 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[9] ) )
      continue;
    // closed e.Expr#1 as range 10
    //DEBUG: e.Expr#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </5 HalfReuse: & Map@17/9 AsIs: e.Expr#1/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
    refalrts::reinit_open_call(context[5]);
    refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z17]);
    refalrts::reinit_close_call(context[6]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupCold-Term/4 t.OtherTerm#1/5 >/1
  //DEBUG: t.OtherTerm#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupCold-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherTerm#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Term("CleanupCold-Term", COOKIE1_, COOKIE2_, func_CleanupColdm_Term);


static refalrts::FnResult func_gen_AddStarSuffix_D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & AddStarSuffix*1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddStarSuffix*1/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & AddStarSuffix*1/4 e.Name#1/8 # SUF/12 e.Suffix#1/10 s.Count#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = refalrts::ident_left( identifiers[ident_SUF], context[10], context[11] );
      if( ! context[12] )
        continue;
      // closed e.Suffix#1 as range 10
      //DEBUG: s.Count#1: 5
      //DEBUG: e.Name#1: 8
      //DEBUG: e.Suffix#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count#1/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/8 } Tile{ AsIs: # SUF/12 } Tile{ AsIs: e.Suffix#1/10 } Tile{ HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count1 #5/1 ]] }
      refalrts::reinit_char(context[4], '*');
      refalrts::reinit_svar( context[1], context[5] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddStarSuffix*1/4 e.Name#1/2 s.Count#1/5 >/1
  // closed e.Name#1 as range 2
  //DEBUG: s.Count#1: 5
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count1 #5/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddStarSuffix_D1("AddStarSuffix*1", COOKIE1_, COOKIE2_, func_gen_AddStarSuffix_D1);


static refalrts::FnResult func_gen_ApplyAssignsm_Term_D5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ApplyAssigns-Term*5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ApplyAssigns-Term*5/4 t.new#1/9 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyAssigns-Term*5/4 t.T#1/9 (/7 e.B#1/13 (/19 e.Asgn#1/17 ':'/23 t.T#1/21 )/20 e.E#1/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_right( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_right( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Asgn#1 as range 17
      // closed e.E#1 as range 15
      //DEBUG: t.T#1: 9
      //DEBUG: e.B#1: 13
      //DEBUG: e.Asgn#1: 17
      //DEBUG: e.E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term*5/4 t.T#1/9 (/7 e.B#1/13 (/19 {REMOVED TILE} ':'/23 t.T#1/21 )/20 e.E#1/15 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Asgn#1/17 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyAssigns-Term*5/4 t.T#1/9 (/7 e.Assigns#1/5 )/8 >/1
  // closed e.Assigns#1 as range 5
  //DEBUG: t.T#1: 9
  //DEBUG: e.Assigns#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term*5/4 {REMOVED TILE} (/7 e.Assigns#1/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyAssignsm_Term_D5("ApplyAssigns-Term*5", COOKIE1_, COOKIE2_, func_gen_ApplyAssignsm_Term_D5);


static refalrts::FnResult func_gen_ApplyContractionsm_Term_D5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ApplyContractions-Term*5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ApplyContractions-Term*5/4 t.new#1/9 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyContractions-Term*5/4 t.Term#1/9 (/7 e.B#1/13 (/19 t.Term#1/21 ':'/23 e.Contr#1/17 )/20 e.E#1/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_left( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_left( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Contr#1 as range 17
      // closed e.E#1 as range 15
      //DEBUG: t.Term#1: 9
      //DEBUG: e.B#1: 13
      //DEBUG: e.Contr#1: 17
      //DEBUG: e.E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Term#1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 } Tile{ AsIs: (/7 AsIs: e.B#1/13 HalfReuse: )/19 AsIs: t.Term#1/21 HalfReuse: (/23 AsIs: e.Contr#1/17 AsIs: )/20 } (/24 Tile{ AsIs: e.E#1/15 } Tile{ AsIs: )/8 } e.Contr#1/17/25 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[8] );
      refalrts::link_brackets( context[23], context[20] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term*5/4 t.T#1/9 (/7 e.Contrs#1/5 )/8 >/1
  // closed e.Contrs#1 as range 5
  //DEBUG: t.T#1: 9
  //DEBUG: e.Contrs#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyContractions-Term*5/4 {REMOVED TILE} (/7 e.Contrs#1/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyContractionsm_Term_D5("ApplyContractions-Term*5", COOKIE1_, COOKIE2_, func_gen_ApplyContractionsm_Term_D5);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@2/4 t.new#1/5 t.new#2/7 t.new#3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn#1/5 t.Acc#1/7 t.Next#1/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: s.Fn#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 t.Acc#1/7 t.Next#1/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn#0/5 t.Acc#1/7 t.Next#1/9 >/1
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: t.Next#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@1/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@1/4 (/7 # Intrinsic/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Intrinsic], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.0#0 as range 11
      // closed e.Tail#1 as range 9
      //DEBUG: e.0#0: 11
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 # Intrinsic/15 (/16 e.0#0/11/17 Tile{ HalfReuse: )/7 AsIs: # Intrinsic/13 AsIs: e.0#0/11 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::copy_evar(vm, context[17], context[18], context[11], context[12]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[8] );
      refalrts::link_brackets( context[16], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UpdateDriveInfo=21\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Map@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@2/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@2/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@2/4 (/7 s.new#6/13 e.new#7/14 '*'/19 s.new#8/18 )/8 e.new#9/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new#9 as range 16
        if( ! refalrts::svar_right( context[18], context[14], context[15] ) )
          continue;
        context[19] = refalrts::char_right( '*', context[14], context[15] );
        if( ! context[19] )
          continue;
        // closed e.new#7 as range 14
        do {
          // </0 & Map@2/4 (/7 s.Label#2/13 e.2#0/20 # SUF/24 '*'/19 s.Count#1/18 )/8 e.Tail#1/22 >/1
          context[20] = context[14];
          context[21] = context[15];
          context[22] = context[16];
          context[23] = context[17];
          context[24] = refalrts::ident_right( identifiers[ident_SUF], context[20], context[21] );
          if( ! context[24] )
            continue;
          // closed e.2#0 as range 20
          // closed e.Tail#1 as range 22
          //DEBUG: s.Label#2: 13
          //DEBUG: s.Count#1: 18
          //DEBUG: e.2#0: 20
          //DEBUG: e.Tail#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Map@2/4 {REMOVED TILE} s.Count#1/18 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label#2/13 AsIs: e.2#0/20 HalfReuse: )/24 HalfReuse: </19 } Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[7], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@2/4 (/7 s.Label#2/13 e.1#0/20 '*'/19 s.Count#1/18 )/8 e.Tail#1/22 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        // closed e.1#0 as range 20
        // closed e.Tail#1 as range 22
        //DEBUG: s.Label#2: 13
        //DEBUG: s.Count#1: 18
        //DEBUG: e.1#0: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@2/4 {REMOVED TILE} s.Count#1/18 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label#2/13 AsIs: e.1#0/20 HalfReuse: )/19 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[7], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@2/4 (/7 s.Label#2/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: s.Label#2: 13
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label#2/13 AsIs: e.0#0/14 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@2/4 } Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractBaseNames=1\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractBaseNames_A1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ExtractBaseNames=1\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractBaseNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MapAccum@1/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & MapAccum@1/4 t.Acc#1/5 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Tail#1 as range 7
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: t.Acc#1/5 } (/9 )/10 Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@1/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & MapAccum@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_MapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A20Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & UpdateDriveInfo=20@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=20@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 (/31 e.new#7/29 )/32 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 29
  // closed e.new#8 as range 2
  do {
    // </0 & UpdateDriveInfo=20@1/4 (/7 e.KnownFunctions0#1/33 )/8 (/11 e.AST0#16/35 )/12 (/15 e.KnownNames0#8/37 )/16 (/19 e.Drives#19/39 )/20 (/23 e.Inlines#18/41 )/24 (/27 e.Metatables#12/43 )/28 (/31 e.Intrinsics0#11/45 )/32 e.OptFunctions#21/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.KnownFunctions0#1 as range 33
    // closed e.AST0#16 as range 35
    // closed e.KnownNames0#8 as range 37
    // closed e.Drives#19 as range 39
    // closed e.Inlines#18 as range 41
    // closed e.Metatables#12 as range 43
    // closed e.Intrinsics0#11 as range 45
    // closed e.OptFunctions#21 as range 47
    //DEBUG: e.KnownFunctions0#1: 33
    //DEBUG: e.AST0#16: 35
    //DEBUG: e.KnownNames0#8: 37
    //DEBUG: e.Drives#19: 39
    //DEBUG: e.Inlines#18: 41
    //DEBUG: e.Metatables#12: 43
    //DEBUG: e.Intrinsics0#11: 45
    //DEBUG: e.OptFunctions#21: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions0#1/33 } )/49 (/50 Tile{ AsIs: e.OptFunctions#21/47 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST0#16/35 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames0#8/37 AsIs: )/16 AsIs: (/19 AsIs: e.Drives#19/39 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines#18/41 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables#12/43 AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics0#11/45 AsIs: )/32 } </51 & Map@1/52 e.Intrinsics0#11/45/53 >/55 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_Map_Z1]);
    refalrts::copy_evar(vm, context[53], context[54], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[50], context[8] );
    refalrts::link_brackets( context[7], context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[55] );
    res = refalrts::splice_evar( res, context[8], context[32] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=20@1/4 (/7 e.KnownFunctions0#1/5 )/8 (/11 e.AST0#16/9 )/12 (/15 e.KnownNames0#8/13 )/16 (/19 e.Drives#19/17 )/20 (/23 e.Inlines#18/21 )/24 (/27 e.Metatables#12/25 )/28 (/31 e.Intrinsics0#11/29 )/32 e.dyn#0/2 >/1
  // closed e.KnownFunctions0#1 as range 5
  // closed e.AST0#16 as range 9
  // closed e.KnownNames0#8 as range 13
  // closed e.Drives#19 as range 17
  // closed e.Inlines#18 as range 21
  // closed e.Metatables#12 as range 25
  // closed e.Intrinsics0#11 as range 29
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownFunctions0#1: 5
  //DEBUG: e.AST0#16: 9
  //DEBUG: e.KnownNames0#8: 13
  //DEBUG: e.Drives#19: 17
  //DEBUG: e.Inlines#18: 21
  //DEBUG: e.Metatables#12: 25
  //DEBUG: e.Intrinsics0#11: 29
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/20 (/23 {REMOVED TILE} )/24 (/27 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@0/4 AsIs: (/7 AsIs: e.KnownFunctions0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST0#16/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames0#8/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives#19/17 } Tile{ AsIs: e.Inlines#18/21 } Tile{ AsIs: e.Metatables#12/25 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics0#11/29 AsIs: )/32 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[19], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[28];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::splice_to_freelist_open( vm, context[19], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A20Z1("UpdateDriveInfo=20@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A20Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new#8/21 )/6 (/9 e.new#12/17 )/10 (/15 s.new#9/25 e.new#10/23 )/16 e.new#11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#12 as range 17
      // closed e.new#11 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new#10 as range 23
      do {
        // </0 & DoMapAccum@1/4 (/5 e.new#13/26 )/6 (/9 e.new#18/28 )/10 (/15 s.new#14/25 e.new#15/30 '*'/35 s.new#16/34 )/16 e.new#17/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        // closed e.new#13 as range 26
        // closed e.new#18 as range 28
        // closed e.new#17 as range 32
        if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
          continue;
        context[35] = refalrts::char_right( '*', context[30], context[31] );
        if( ! context[35] )
          continue;
        // closed e.new#15 as range 30
        do {
          // </0 & DoMapAccum@1/4 (/5 e.#0/36 )/6 (/9 e.Scanned#1/38 )/10 (/15 s.Label#2/25 e.3#0/40 # SUF/44 '*'/35 s.Count#1/34 )/16 e.Tail#1/42 >/1
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[29];
          context[40] = context[30];
          context[41] = context[31];
          context[42] = context[32];
          context[43] = context[33];
          context[44] = refalrts::ident_right( identifiers[ident_SUF], context[40], context[41] );
          if( ! context[44] )
            continue;
          // closed e.#0 as range 36
          // closed e.Scanned#1 as range 38
          // closed e.3#0 as range 40
          // closed e.Tail#1 as range 42
          //DEBUG: s.Label#2: 25
          //DEBUG: s.Count#1: 34
          //DEBUG: e.#0: 36
          //DEBUG: e.Scanned#1: 38
          //DEBUG: e.3#0: 40
          //DEBUG: e.Tail#1: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label#2/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </45 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned#1/38 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2/4 AsIs: (/5 } Tile{ AsIs: e.3#0/40 } Tile{ HalfReuse: )/44 HalfReuse: s.Label2 #25/35 AsIs: s.Count#1/34 } Tile{ AsIs: e.#0/36 } >/46 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
          refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::reinit_svar( context[35], context[25] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[5], context[44] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[44], context[34] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[0], context[5] );
          res = refalrts::splice_elem( res, context[16] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[6], context[15] );
          res = refalrts::splice_elem( res, context[45] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@1/4 (/5 e.#0/36 )/6 (/9 e.Scanned#1/38 )/10 (/15 s.Label#2/25 e.2#0/40 '*'/35 s.Count#1/34 )/16 e.Tail#1/42 >/1
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[28];
        context[39] = context[29];
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        // closed e.#0 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.2#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: s.Label#2: 25
        //DEBUG: s.Count#1: 34
        //DEBUG: e.#0: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.2#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label#2/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </44 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned#1/38 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2/4 AsIs: (/5 } Tile{ AsIs: e.2#0/40 } )/45 Tile{ HalfReuse: s.Label2 #25/35 AsIs: s.Count#1/34 } Tile{ AsIs: e.#0/36 } >/46 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2]);
        refalrts::reinit_svar( context[35], context[25] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[5], context[45] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[35], context[34] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 s.Label#2/25 e.1#0/30 )/16 e.Tail#1/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[19];
      context[33] = context[20];
      // closed e.#0 as range 26
      // closed e.Scanned#1 as range 28
      // closed e.1#0 as range 30
      // closed e.Tail#1 as range 32
      //DEBUG: s.Label#2: 25
      //DEBUG: e.#0: 26
      //DEBUG: e.Scanned#1: 28
      //DEBUG: e.1#0: 30
      //DEBUG: e.Tail#1: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </34 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned#1/28 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2@1/4 AsIs: (/5 } Tile{ AsIs: e.1#0/30 } )/35 Tile{ AsIs: s.Label#2/25 } Tile{ AsIs: e.#0/26 } >/36 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[6], context[15] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & MultiplyRemainderNames=1\1*1/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_MultiplyRemainderNames_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & MultiplyRemainderNames=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@2/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.new#8/21 )/6 (/9 e.new#11/17 )/10 t.new#9/15 e.new#10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#11 as range 17
      // closed e.new#10 as range 19
      do {
        // </0 & DoMapAccum@2/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 (/15 # Function/31 s.ScopeClass#2/32 (/35 e.4#0/33 )/36 # Sentences/37 e.5#0/29 )/16 e.Tail#1/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[31] )
          continue;
        // closed e.#0 as range 23
        // closed e.Scanned#1 as range 25
        // closed e.Tail#1 as range 27
        if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = refalrts::ident_left( identifiers[ident_Sentences], context[29], context[30] );
        if( ! context[37] )
          continue;
        // closed e.4#0 as range 33
        // closed e.5#0 as range 29
        //DEBUG: e.#0: 23
        //DEBUG: e.Scanned#1: 25
        //DEBUG: e.Tail#1: 27
        //DEBUG: s.ScopeClass#2: 32
        //DEBUG: e.4#0: 33
        //DEBUG: e.5#0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </38 & DoMapAccum$1=1@2/39 Tile{ AsIs: (/35 } Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/27 } )/40 Tile{ AsIs: </0 Reuse: & ExtractFuncLengths\1$1=1/4 AsIs: (/5 AsIs: e.#0/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.4#0/33 } Tile{ HalfReuse: )/31 AsIs: s.ScopeClass#2/32 } Tile{ HalfReuse: </36 HalfReuse: & Lenw/37 AsIs: e.5#0/29 HalfReuse: >/16 } >/41 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_DoMapAccum_S1A1Z2]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1S1A1]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[37], functions[efunc_Lenw]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[15], context[40] );
        refalrts::link_brackets( context[35], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[36], context[16] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 t.Next#1/15 e.Tail#1/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e.#0 as range 23
      // closed e.Scanned#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.Next#1: 15
      //DEBUG: e.#0: 23
      //DEBUG: e.Scanned#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e.#0/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & ExtractFuncLengths\1*2/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractFuncLengths_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractFuncLengths\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@3/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & ExtractExtractableFunctions=1\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ExtractExtractableFunctions_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractExtractableFunctions=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractExtractableFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@3/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.Label#13/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.Label#13: 13
      //DEBUG: e.0#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12\1=1/4 AsIs: (/7 } Tile{ AsIs: e.0#0/11 } )/14 '$'/15 </16 & Upper/17 </18 & Explode/19 Tile{ AsIs: s.Label#13/13 } >/20 >/21 >/22 </23 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_char(vm, context[15], '$');
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Upper]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Explode]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UpdateDriveInfo=12\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@4/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.Hash#2/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.Hash#2: 13
      //DEBUG: e.0#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@4/4 (/7 s.Hash#2/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.0#0/11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & HashSet-AsChain\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_HashSetm_AsChain_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & HashSet-AsChain\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_HashSetm_AsChain_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoMapAccum@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@4/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@4/4 (/5 e.new#8/21 )/6 (/9 e.new#11/17 )/10 t.new#9/15 e.new#10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#11 as range 17
      // closed e.new#10 as range 19
      do {
        // </0 & DoMapAccum@4/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 (/15 # Function/31 s.ScopeClass#2/32 (/35 e.4#0/33 )/36 # Metatable/37 e.5#0/29 )/16 e.Tail#1/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[31] )
          continue;
        // closed e.#0 as range 23
        // closed e.Scanned#1 as range 25
        // closed e.Tail#1 as range 27
        if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = refalrts::ident_left( identifiers[ident_Metatable], context[29], context[30] );
        if( ! context[37] )
          continue;
        // closed e.4#0 as range 33
        // closed e.5#0 as range 29
        //DEBUG: e.#0: 23
        //DEBUG: e.Scanned#1: 25
        //DEBUG: e.Tail#1: 27
        //DEBUG: s.ScopeClass#2: 32
        //DEBUG: e.4#0: 33
        //DEBUG: e.5#0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e.#0/23 HalfReuse: (/6 HalfReuse: # Metatable/9 } e.4#0/33/38 )/40 Tile{ AsIs: )/10 } (/41 Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: (/15 AsIs: # Function/31 AsIs: s.ScopeClass#2/32 AsIs: (/35 AsIs: e.4#0/33 AsIs: )/36 AsIs: # Metatable/37 AsIs: e.5#0/29 AsIs: )/16 } )/42 Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[38], context[39], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::reinit_ident(context[9], identifiers[ident_Metatable]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[41], context[42] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@4/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 t.Next#1/15 e.Tail#1/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e.#0 as range 23
      // closed e.Scanned#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.Next#1: 15
      //DEBUG: e.#0: 23
      //DEBUG: e.Scanned#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e.#0/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & ExtractMetatableNames\1*2/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractMetatableNames_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractMetatableNames\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractMetatableNames_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_DoExtractLabels_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoExtractLabels@1/4 e.AST-B#1/7 (/13 # Intrinsic/15 e.Name#1/11 )/14 e.AST-E#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Intrinsic], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name#1 as range 11
      // closed e.AST-E#1 as range 9
      //DEBUG: e.AST-B#1: 7
      //DEBUG: e.Name#1: 11
      //DEBUG: e.AST-E#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@5/4 } (/16 Tile{ AsIs: (/13 AsIs: # Intrinsic/15 AsIs: e.Name#1/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B#1/7 } )/19 Tile{ AsIs: e.AST-E#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@1/4 e.AST#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST#1 as range 5
    //DEBUG: e.AST#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST#1/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@1/4 e.dyn#2/2 >/1
  // closed e.dyn#2 as range 2
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Intrinsic/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Intrinsic]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z1("DoExtractLabels@1", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z1);


static refalrts::FnResult func_gen_DoExtractLabels_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoExtractLabels@2/4 e.AST-B#1/7 (/13 # Inline/15 e.Name#1/11 )/14 e.AST-E#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Inline], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name#1 as range 11
      // closed e.AST-E#1 as range 9
      //DEBUG: e.AST-B#1: 7
      //DEBUG: e.Name#1: 11
      //DEBUG: e.AST-E#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@6/4 } (/16 Tile{ AsIs: (/13 AsIs: # Inline/15 AsIs: e.Name#1/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B#1/7 } )/19 Tile{ AsIs: e.AST-E#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@2/4 e.AST#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST#1 as range 5
    //DEBUG: e.AST#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST#1/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@2/4 e.dyn#2/2 >/1
  // closed e.dyn#2 as range 2
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Inline/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Inline]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z2("DoExtractLabels@2", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z2);


static refalrts::FnResult func_gen_DoExtractLabels_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoExtractLabels@3/4 e.AST-B#1/7 (/13 # Drive/15 e.Name#1/11 )/14 e.AST-E#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Drive], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name#1 as range 11
      // closed e.AST-E#1 as range 9
      //DEBUG: e.AST-B#1: 7
      //DEBUG: e.Name#1: 11
      //DEBUG: e.AST-E#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@7/4 } (/16 Tile{ AsIs: (/13 AsIs: # Drive/15 AsIs: e.Name#1/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B#1/7 } )/19 Tile{ AsIs: e.AST-E#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@3/4 e.AST#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST#1 as range 5
    //DEBUG: e.AST#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST#1/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@3/4 e.dyn#2/2 >/1
  // closed e.dyn#2 as range 2
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Drive/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Drive]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z3("DoExtractLabels@3", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z3);


static refalrts::FnResult func_gen_DoExtractLabels_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoExtractLabels@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoExtractLabels@4/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & DoExtractLabels@4/4 s.Label0#1/5 e.AST-B#1/8 (/14 s.Label0#1/16 e.Name#1/12 )/15 e.AST-E#1/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      if( ! refalrts::repeated_stvar_left( vm, context[16], context[5], context[12], context[13] ) )
        continue;
      // closed e.Name#1 as range 12
      // closed e.AST-E#1 as range 10
      //DEBUG: s.Label0#1: 5
      //DEBUG: e.AST-B#1: 8
      //DEBUG: e.Name#1: 12
      //DEBUG: e.AST-E#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels/4 AsIs: s.Label0#1/5 } (/17 Tile{ AsIs: (/14 AsIs: s.Label0#1/16 AsIs: e.Name#1/12 AsIs: )/15 } )/18 (/19 Tile{ AsIs: e.AST-B#1/8 } )/20 Tile{ AsIs: e.AST-E#1/10 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_DoExtractLabels]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@4/4 s.Label0#1/5 e.AST#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.AST#1 as range 6
    //DEBUG: s.Label0#1: 5
    //DEBUG: e.AST#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Label0#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST#1/6 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@4/4 s.Label0#1/5 e.dyn#2/2 >/1
  // closed e.dyn#2 as range 2
  //DEBUG: s.Label0#1: 5
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@0/4 AsIs: s.Label0#1/5 } (/6 )/7 (/8 )/9 Tile{ AsIs: e.dyn#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z4("DoExtractLabels@4", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z4);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1L1A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & MultiplyRemainderNames=1\1=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.new#1/5 )/8 s.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.OptName#2/10 )/8 s.Label0#2/9 e.Lengths-B#4/14 (/20 e.OptName#2/22 s.SentencesCount#4/24 )/21 e.Lengths-E#4/16 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.OptName#2 as range 10
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[12];
      context[17] = context[13];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_evar_left( vm, context[22], context[23], context[10], context[11], context[18], context[19] ) )
        continue;
      // closed e.Lengths-E#4 as range 16
      if( ! refalrts::svar_left( context[24], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.Label0#2: 9
      //DEBUG: e.OptName#2: 10
      //DEBUG: e.Lengths-B#4: 14
      //DEBUG: e.Lengths-E#4: 16
      //DEBUG: s.SentencesCount#4: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label0#2/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/25 Tile{ AsIs: e.Lengths-B#4/14 } Tile{ AsIs: (/20 AsIs: e.OptName#2/22 AsIs: s.SentencesCount#4/24 AsIs: )/21 AsIs: e.Lengths-E#4/16 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames@2/4 HalfReuse: s.Label02 #9/7 AsIs: e.OptName#2/10 HalfReuse: s.SentencesCount4 #24/8 } >/26 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::update_name(context[4], functions[efunc_gen_GenRemainderFuncNames_Z2]);
      refalrts::reinit_svar( context[7], context[9] );
      refalrts::reinit_svar( context[8], context[24] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[12], context[13] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.OptName#2/5 )/8 s.Label0#2/9 e.dyn#0/2 >/1
  // closed e.OptName#2 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: s.Label0#2: 9
  //DEBUG: e.OptName#2: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2@0/4 AsIs: (/7 AsIs: e.OptName#2/5 AsIs: )/8 AsIs: s.Label0#2/9 } 0/10 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[10], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1L1A2Z1("MultiplyRemainderNames=1\\1=2@1", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1L1A2Z1);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@5/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@5/4 (/7 s.Label#2/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.Label#2: 13
      //DEBUG: e.0#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } </14 & HashName/15 e.0#0/11/16 Tile{ HalfReuse: 101/4 HalfReuse: >/7 AsIs: s.Label#2/13 AsIs: e.0#0/11 AsIs: )/8 } </18 & Map@5/19 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_HashName]);
      refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z5]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 101UL);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & HashSet\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_HashSet_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & HashSet\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_HashSet_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_DoHashSetm_DoFillBucket_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoHashSet-DoFillBucket@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.new#1/5 )/8 s.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.Names-OtherHash#1/14 (/20 s.Hash0#1/22 e.Name#1/18 )/21 e.UnscannedNames#1/16 )/8 s.Hash0#1/9 e.Name0#1/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Name0#1 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_stvar_left( vm, context[22], context[9], context[18], context[19] ) )
        continue;
      // closed e.Name#1 as range 18
      // closed e.UnscannedNames#1 as range 16
      //DEBUG: s.Hash0#1: 9
      //DEBUG: e.Name0#1: 12
      //DEBUG: e.Names-OtherHash#1: 14
      //DEBUG: e.Name#1: 18
      //DEBUG: e.UnscannedNames#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash0#1/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/14 } Tile{ AsIs: </0 Reuse: & DoHashSet-DoFillBucket@2/4 } Tile{ HalfReuse: (/21 AsIs: e.UnscannedNames#1/16 AsIs: )/8 AsIs: s.Hash0#1/9 } Tile{ AsIs: (/20 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Name0#1/12 } )/23 )/24 Tile{ AsIs: e.Name#1/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_DoHashSetm_DoFillBucket_Z2]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[24] );
      refalrts::link_brackets( context[7], context[23] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[21], context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.Names-OtherHash#1/10 )/8 s.Hash0#1/9 e.Name0#1/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Names-OtherHash#1 as range 10
    // closed e.Name0#1 as range 12
    //DEBUG: s.Hash0#1: 9
    //DEBUG: e.Names-OtherHash#1: 10
    //DEBUG: e.Name0#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash0#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/10 } Tile{ HalfReuse: (/0 HalfReuse: s.Hash01 #9/4 AsIs: (/7 } Tile{ AsIs: e.Name0#1/12 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.dyn#0/5 )/8 s.Hash0#1/9 e.Name0#1/2 >/1
  // closed e.dyn#0 as range 5
  // closed e.Name0#1 as range 2
  //DEBUG: s.Hash0#1: 9
  //DEBUG: e.dyn#0: 5
  //DEBUG: e.Name0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoHashSet-DoFillBucket@0/7 AsIs: e.dyn#0/5 HalfReuse: (/8 AsIs: s.Hash0#1/9 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.Name0#1/2 } )/10 )/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_DoHashSetm_DoFillBucket_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::link_brackets( context[0], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSetm_DoFillBucket_Z1("DoHashSet-DoFillBucket@1", COOKIE1_, COOKIE2_, func_gen_DoHashSetm_DoFillBucket_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@5/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@5/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & DriveInlineOptimizerTick=5\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DriveInlineOptimizerTick_A5L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & DriveInlineOptimizerTick=5\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_DoMapAccum_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@6/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@6/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & DriveInlineOptimizerTick=4\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DriveInlineOptimizerTick_A4L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@6/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@6/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@6/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & DriveInlineOptimizerTick=4\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z6("DoMapAccum@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z6);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & Reduce@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@1/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce@1/4 t.new#4/5 t.new#5/7 t.new#6/11 e.new#7/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.new#7 as range 9
    do {
      // </0 & Reduce@1/4 t.new#8/5 (/7 t.new#9/25 (/23 e.new#10/21 )/24 (/19 e.new#11/17 )/20 )/8 t.new#12/11 e.new#13/13 >/1
      context[13] = context[9];
      context[14] = context[10];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[7] ) )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[15], context[16] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.new#10 as range 21
      // closed e.new#11 as range 17
      // closed e.new#13 as range 13
      context[26] = refalrts::tvar_left( context[25], context[15], context[16] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & Reduce@1/4 t.Mode#2/5 (/7 (/25 (/39 e.8#0/37 )/40 e.7#0/33 )/26 (/23 e.2#0/27 )/24 (/19 e.4#0/29 )/20 )/8 (/11 (/43 e.3#0/41 )/44 (/47 e.6#0/45 )/48 )/12 e.Tail#1/31 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[17];
        context[30] = context[18];
        context[31] = context[13];
        context[32] = context[14];
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[25] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[11] ) )
          continue;
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[33], context[34] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        context[41] = 0;
        context[42] = 0;
        context[43] = refalrts::brackets_left( context[41], context[42], context[35], context[36] );
        if( ! context[43] )
          continue;
        refalrts::bracket_pointers(context[43], context[44]);
        context[45] = 0;
        context[46] = 0;
        context[47] = refalrts::brackets_left( context[45], context[46], context[35], context[36] );
        if( ! context[47] )
          continue;
        refalrts::bracket_pointers(context[47], context[48]);
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        // closed e.8#0 as range 37
        // closed e.7#0 as range 33
        // closed e.2#0 as range 27
        // closed e.4#0 as range 29
        // closed e.3#0 as range 41
        // closed e.6#0 as range 45
        // closed e.Tail#1 as range 31
        //DEBUG: t.Mode#2: 5
        //DEBUG: e.8#0: 37
        //DEBUG: e.7#0: 33
        //DEBUG: e.2#0: 27
        //DEBUG: e.4#0: 29
        //DEBUG: e.3#0: 41
        //DEBUG: e.6#0: 45
        //DEBUG: e.Tail#1: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 AsIs: t.Mode#2/5 AsIs: (/7 } Tile{ AsIs: e.Tail#1/31 } )/49 </50 Tile{ HalfReuse: & OptFunction\1=1/26 AsIs: (/23 AsIs: e.2#0/27 AsIs: )/24 AsIs: (/19 AsIs: e.4#0/29 AsIs: )/20 HalfReuse: </8 HalfReuse: & OptSentence$1:1/11 AsIs: (/43 } Tile{ AsIs: e.7#0/33 } )/51 (/52 Tile{ AsIs: e.3#0/41 } )/53 t.Mode#2/5/54 </56 Tile{ HalfReuse: & DoMapAccum@9/25 AsIs: (/39 AsIs: e.8#0/37 HalfReuse: # None/40 } )/57 Tile{ HalfReuse: (/44 HalfReuse: )/47 AsIs: e.6#0/45 HalfReuse: >/48 HalfReuse: >/12 } >/58 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_bracket(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::copy_evar(vm, context[54], context[55], context[5], context[6]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
        refalrts::reinit_name(context[26], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_gen_OptSentence_S1B1]);
        refalrts::reinit_name(context[25], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[40], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[44]);
        refalrts::reinit_close_bracket(context[47]);
        refalrts::reinit_close_call(context[48]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[56] );
        refalrts::link_brackets( context[44], context[47] );
        refalrts::link_brackets( context[39], context[57] );
        refalrts::link_brackets( context[52], context[53] );
        refalrts::link_brackets( context[43], context[51] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[7], context[49] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[58] );
        res = refalrts::splice_evar( res, context[44], context[12] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[25], context[40] );
        res = refalrts::splice_evar( res, context[53], context[56] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[26], context[43] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 t.Mode#2/5 (/7 t.#0/25 (/23 e.2#0/27 )/24 (/19 e.4#0/29 )/20 )/8 t.Next#1/11 e.Tail#1/31 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[13];
      context[32] = context[14];
      // closed e.2#0 as range 27
      // closed e.4#0 as range 29
      // closed e.Tail#1 as range 31
      //DEBUG: t.Mode#2: 5
      //DEBUG: t.#0: 25
      //DEBUG: t.Next#1: 11
      //DEBUG: e.2#0: 27
      //DEBUG: e.4#0: 29
      //DEBUG: e.Tail#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: t.Mode#2/5 AsIs: (/7 AsIs: t.#0/25 AsIs: (/23 } Tile{ AsIs: e.2#0/27 } Tile{ AsIs: t.Next#1/11 } Tile{ AsIs: )/24 AsIs: (/19 AsIs: e.4#0/29 AsIs: )/20 AsIs: )/8 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[24], context[8] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Mode#2/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/13 >/1
    context[13] = context[9];
    context[14] = context[10];
    // closed e.Tail#1 as range 13
    //DEBUG: t.Mode#2: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & Reduce$1=1@1/16 t.Mode#2/5/17 (/19 Tile{ AsIs: e.Tail#1/13 } )/20 Tile{ AsIs: </0 Reuse: & OptFunction\1*1/4 AsIs: t.Mode#2/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Mode#2/5 t.Acc#1/7 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Mode#2: 5
    //DEBUG: t.Acc#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 t.Mode#2/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.Mode#2/5 t.accum#0/7 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.Mode#2: 5
  //DEBUG: t.accum#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 } [*]/9 & OptFunction\1@0/10 Tile{ AsIs: t.Mode#2/5 } {*}/11 Tile{ AsIs: t.accum#0/7 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & DoMapAccum@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@7/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@7/4 t.new#5/5 t.new#6/7 (/11 e.new#9/13 )/12 t.new#7/17 e.new#8/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new#9 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.new#8 as range 15
    do {
      // </0 & DoMapAccum@7/4 t.Mode#2/5 t.Acc#1/7 (/11 e.Scanned#1/19 )/12 (/17 # Function/25 s.ScopeClass#4/26 (/29 e.3#0/27 )/30 # Sentences/31 e.4#0/23 )/18 e.Tail#1/21 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Function], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e.Scanned#1 as range 19
      // closed e.Tail#1 as range 21
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = refalrts::ident_left( identifiers[ident_Sentences], context[23], context[24] );
      if( ! context[31] )
        continue;
      // closed e.3#0 as range 27
      // closed e.4#0 as range 23
      //DEBUG: t.Mode#2: 5
      //DEBUG: t.Acc#1: 7
      //DEBUG: e.Scanned#1: 19
      //DEBUG: e.Tail#1: 21
      //DEBUG: s.ScopeClass#4: 26
      //DEBUG: e.3#0: 27
      //DEBUG: e.4#0: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: t.Mode#2/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/19 AsIs: )/12 AsIs: (/17 } Tile{ AsIs: e.Tail#1/21 } Tile{ AsIs: )/18 } </32 & OptFunction:1/33 (/34 e.4#0/23/35 Tile{ HalfReuse: )/25 AsIs: s.ScopeClass#4/26 AsIs: (/29 AsIs: e.3#0/27 AsIs: )/30 HalfReuse: </31 } & Reduce@1/37 t.Mode#2/5/38 (/40 Tile{ AsIs: t.Acc#1/7 } (/41 )/42 (/43 )/44 )/45 Tile{ AsIs: e.4#0/23 } >/46 >/47 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[23], context[24]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_Reduce_Z1]);
      refalrts::copy_evar(vm, context[38], context[39], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
      refalrts::reinit_close_bracket(context[25]);
      refalrts::reinit_open_call(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[40], context[45] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[34], context[25] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[41], context[45] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[37], context[40] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@7/4 t.Mode#2/5 t.Acc#1/7 (/11 e.Scanned#1/19 )/12 t.Next#1/17 e.Tail#1/21 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    context[22] = context[16];
    // closed e.Scanned#1 as range 19
    // closed e.Tail#1 as range 21
    //DEBUG: t.Mode#2: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Scanned#1: 19
    //DEBUG: e.Tail#1: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: t.Mode#2/5 AsIs: t.Acc#1/7 AsIs: (/11 } Tile{ AsIs: e.Scanned#1/19 } Tile{ AsIs: t.Next#1/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@7/4 t.Mode#2/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 >/1
    context[13] = context[9];
    context[14] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 13
    //DEBUG: t.Mode#2: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@7/4 t.Mode#2/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/13 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@7/4 t.Mode#2/5 t.acc#0/7 (/11 e.scanned#0/9 )/12 e.items#0/2 >/1
  // closed e.scanned#0 as range 9
  // closed e.items#0 as range 2
  //DEBUG: t.Mode#2: 5
  //DEBUG: t.acc#0: 7
  //DEBUG: e.scanned#0: 9
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } [*]/13 & DriveInlineOptimizerTick=3\1@0/14 Tile{ AsIs: t.Mode#2/5 } {*}/15 Tile{ AsIs: t.acc#0/7 AsIs: (/11 AsIs: e.scanned#0/9 AsIs: )/12 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z7("DoMapAccum@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & DoMapAccum@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@8/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@8/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.new#8/21 )/6 (/9 e.new#11/17 )/10 t.new#9/15 e.new#10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Metatables], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#11 as range 17
      // closed e.new#10 as range 19
      do {
        // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.1#0/24 )/6 (/9 e.Scanned#1/26 )/10 (/15 # Metatable/32 e.2#0/30 )/16 e.Tail#1/28 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_Metatable], context[30], context[31] );
        if( ! context[32] )
          continue;
        // closed e.1#0 as range 24
        // closed e.Scanned#1 as range 26
        // closed e.2#0 as range 30
        // closed e.Tail#1 as range 28
        //DEBUG: e.1#0: 24
        //DEBUG: e.Scanned#1: 26
        //DEBUG: e.2#0: 30
        //DEBUG: e.Tail#1: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@8/4 AsIs: (/5 AsIs: # Metatables/23 AsIs: e.1#0/24 HalfReuse: (/6 } e.2#0/30/33 )/35 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned#1/26 } Tile{ AsIs: (/15 AsIs: # Metatable/32 AsIs: e.2#0/30 AsIs: )/16 } )/36 Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[36] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.0#0/24 )/6 (/9 e.Scanned#1/26 )/10 t.Next#1/15 e.Tail#1/28 >/1
      context[24] = context[21];
      context[25] = context[22];
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      // closed e.0#0 as range 24
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.Next#1: 15
      //DEBUG: e.0#0: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@8/4 AsIs: (/5 AsIs: # Metatables/23 AsIs: e.0#0/24 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/26 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@8/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & WithMetatables\1*2/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_WithMetatables_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@8/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@8/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@8/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & WithMetatables\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_WithMetatables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z8("DoMapAccum@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z8);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@12/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z1("DriveInlineOptimizerTick=2@1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@13/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z2("DriveInlineOptimizerTick=2@2", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z2);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@14/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z3("DriveInlineOptimizerTick=2@3", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z3);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@15/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z4("DriveInlineOptimizerTick=2@4", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z4);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@16/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z5("DriveInlineOptimizerTick=2@5", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z5);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@17/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z6("DriveInlineOptimizerTick=2@6", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z6);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@18/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z7("DriveInlineOptimizerTick=2@7", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z7);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@19/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z8("DriveInlineOptimizerTick=2@8", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z8);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@20/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z9("DriveInlineOptimizerTick=2@9", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z9);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@21/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z10("DriveInlineOptimizerTick=2@10", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z10);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@22/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z11("DriveInlineOptimizerTick=2@11", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z11);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@23/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z12("DriveInlineOptimizerTick=2@12", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z12);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@24/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z13("DriveInlineOptimizerTick=2@13", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z13);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@25/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z14("DriveInlineOptimizerTick=2@14", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z14);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@26/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z15("DriveInlineOptimizerTick=2@15", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z15);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.AST0#1/9 )/8 t.OptInfo#3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0#1: 9
    //DEBUG: t.OptInfo#3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@27/8 AsIs: t.OptInfo#3/13 } (/15 )/16 Tile{ AsIs: e.AST0#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.AST0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.AST0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z16("DriveInlineOptimizerTick=2@16", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z16);


static refalrts::FnResult func_gen_Reduce_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Reduce@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@2/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@2/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@2/4 s.new#6/5 t.new#7/9 e.new#8/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.new#8 as range 11
      do {
        // </0 & Reduce@2/4 # True/5 t.new#9/9 e.new#10/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::ident_term( identifiers[ident_True], context[5] ) )
          continue;
        // closed e.new#10 as range 13
        do {
          // </0 & Reduce@2/4 # True/5 (/9 s.new#11/19 e.new#12/17 )/10 e.new#13/15 >/1
          context[15] = context[13];
          context[16] = context[14];
          context[17] = 0;
          context[18] = 0;
          if( ! refalrts::brackets_term( context[17], context[18], context[9] ) )
            continue;
          // closed e.new#13 as range 15
          if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
            continue;
          // closed e.new#12 as range 17
          do {
            // </0 & Reduce@2/4 # True/5 (/9 # Brackets/19 e.0#0/20 )/10 e.Tail#1/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
              continue;
            // closed e.0#0 as range 20
            // closed e.Tail#1 as range 22
            //DEBUG: e.0#0: 20
            //DEBUG: e.Tail#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@2/4 HalfReuse: (/5 } Tile{ AsIs: e.Tail#1/22 } )/24 </25 Tile{ HalfReuse: & Reduce@2/9 Reuse: # True/19 AsIs: e.0#0/20 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z2]);
            refalrts::reinit_open_bracket(context[5]);
            refalrts::reinit_name(context[9], functions[efunc_gen_Reduce_Z2]);
            refalrts::update_ident(context[19], identifiers[ident_True]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[5], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Reduce@2/4 # True/5 (/9 # ADT-Brackets/19 e.0#0/20 )/10 e.Tail#1/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
              continue;
            // closed e.0#0 as range 20
            // closed e.Tail#1 as range 22
            //DEBUG: e.0#0: 20
            //DEBUG: e.Tail#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@2/4 HalfReuse: (/5 } Tile{ AsIs: e.Tail#1/22 } )/24 </25 Tile{ HalfReuse: & Reduce@2/9 Reuse: # True/19 AsIs: e.0#0/20 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z2]);
            refalrts::reinit_open_bracket(context[5]);
            refalrts::reinit_name(context[9], functions[efunc_gen_Reduce_Z2]);
            refalrts::update_ident(context[19], identifiers[ident_True]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[5], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Reduce@2/4 # True/5 (/9 # CallBrackets/19 e.0#0/20 )/10 e.Tail#1/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
              continue;
            // closed e.0#0 as range 20
            // closed e.Tail#1 as range 22
            //DEBUG: e.0#0: 20
            //DEBUG: e.Tail#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} (/9 # CallBrackets/19 e.0#0/20 )/10 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 Reuse: # False/5 } Tile{ AsIs: e.Tail#1/22 } Tile{ AsIs: >/1 ]] }
            refalrts::update_ident(context[5], identifiers[ident_False]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::splice_to_freelist_open( vm, context[5], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Reduce@2/4 # True/5 (/9 # ColdCallBrackets/19 e.0#0/20 )/10 e.Tail#1/22 >/1
          context[20] = context[17];
          context[21] = context[18];
          context[22] = context[15];
          context[23] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[19] ) )
            continue;
          // closed e.0#0 as range 20
          // closed e.Tail#1 as range 22
          //DEBUG: e.0#0: 20
          //DEBUG: e.Tail#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/9 # ColdCallBrackets/19 e.0#0/20 )/10 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 Reuse: # False/5 } Tile{ AsIs: e.Tail#1/22 } Tile{ AsIs: >/1 ]] }
          refalrts::update_ident(context[5], identifiers[ident_False]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[22], context[23] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Reduce@2/4 # True/5 t.Next#1/9 e.Tail#1/15 >/1
        context[15] = context[13];
        context[16] = context[14];
        // closed e.Tail#1 as range 15
        //DEBUG: t.Next#1: 9
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.Next#1/9 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 AsIs: # True/5 } Tile{ AsIs: e.Tail#1/15 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@2/4 # False/5 t.Next#1/9 e.Tail#1/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_False], context[5] ) )
        continue;
      // closed e.Tail#1 as range 13
      //DEBUG: t.Next#1: 9
      //DEBUG: e.Tail#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next#1/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 AsIs: # False/5 } Tile{ AsIs: e.Tail#1/13 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@2/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1@2/14 (/15 Tile{ AsIs: e.Tail#1/11 } )/16 Tile{ AsIs: </0 Reuse: & IsPassiveCall\1*2/4 AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1Z2]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@2/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@2/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@2/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & IsPassiveCall\1@0/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z2("Reduce@2", COOKIE1_, COOKIE2_, func_gen_Reduce_Z2);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@6/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@6/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@6/4 (/7 # TkVariable/13 s.new#6/18 e.new#7/14 )/8 e.new#8/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.new#8 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new#7 as range 14
        do {
          // </0 & Map@6/4 (/7 # TkVariable/13 'e'/18 e.1#0/19 )/8 e.Tail#1/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::char_term( 'e', context[18] ) )
            continue;
          // closed e.1#0 as range 19
          // closed e.Tail#1 as range 21
          //DEBUG: e.1#0: 19
          //DEBUG: e.Tail#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/13 AsIs: 'e'/18 AsIs: e.1#0/19 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail#1/21 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_bracket(context[13]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[13], context[8] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@6/4 (/7 # TkVariable/13 't'/18 e.1#0/19 )/8 e.Tail#1/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::char_term( 't', context[18] ) )
          continue;
        // closed e.1#0 as range 19
        // closed e.Tail#1 as range 21
        //DEBUG: e.1#0: 19
        //DEBUG: e.Tail#1: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/13 AsIs: 't'/18 AsIs: e.1#0/19 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail#1/21 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[13], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 # Brackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsLexpr-Aux/4 } Tile{ AsIs: e.0#0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@6/4 (/7 # ADT-Brackets/13 (/20 e.2#0/18 )/21 e.1#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.2#0 as range 18
      // closed e.1#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.2#0: 18
      //DEBUG: e.1#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} e.2#0/18 )/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsLexpr-Aux/4 } Tile{ AsIs: e.1#0/14 } Tile{ HalfReuse: >/13 HalfReuse: </20 } Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
      refalrts::reinit_close_call(context[13]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[20] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next#1/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & IsLexpr-Aux$2\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsLexprm_Aux_S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@7/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@7/4 (/7 (/15 e.1#0/13 )/16 e.2#0/11 (/19 e.3#0/17 )/20 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.1#0 as range 13
      // closed e.2#0 as range 11
      // closed e.3#0 as range 17
      // closed e.Tail#1 as range 9
      //DEBUG: e.1#0: 13
      //DEBUG: e.2#0: 11
      //DEBUG: e.3#0: 17
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/15 AsIs: e.1#0/13 AsIs: )/16 } Tile{ AsIs: </0 Reuse: & Map@18/4 } Tile{ AsIs: e.2#0/11 } >/21 Tile{ AsIs: (/19 } </22 & Map@17/23 Tile{ AsIs: e.3#0/17 } >/24 )/25 )/26 Tile{ HalfReuse: </20 HalfReuse: & Map@7/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z18]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[26] );
      refalrts::link_brackets( context[19], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupCold-Sentence*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@7/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Sentence@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  // </0 & DoMapAccum@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@9/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@9/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@9/4 (/5 e.new#8/21 t.new#9/23 )/6 (/9 e.new#12/17 )/10 t.new#10/15 e.new#11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new#12 as range 17
      // closed e.new#11 as range 19
      context[24] = refalrts::tvar_right( context[23], context[21], context[22] );
      if( ! context[24] )
        continue;
      // closed e.new#8 as range 21
      do {
        // </0 & DoMapAccum@9/4 (/5 e.new#13/25 # None/23 )/6 (/9 e.new#17/27 )/10 (/15 s.new#14/33 e.new#15/31 )/16 e.new#16/29 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[17];
        context[28] = context[18];
        context[29] = context[19];
        context[30] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
          continue;
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[15] ) )
          continue;
        // closed e.new#13 as range 25
        // closed e.new#17 as range 27
        // closed e.new#16 as range 29
        if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
          continue;
        // closed e.new#15 as range 31
        do {
          // </0 & DoMapAccum@9/4 (/5 e.1#0/34 # None/23 )/6 (/9 e.Scanned#1/36 )/10 (/15 # Brackets/33 e.2#0/38 )/16 e.Tail#1/40 >/1
          context[34] = context[25];
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[29];
          context[41] = context[30];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[33] ) )
            continue;
          // closed e.1#0 as range 34
          // closed e.Scanned#1 as range 36
          // closed e.2#0 as range 38
          // closed e.Tail#1 as range 40
          //DEBUG: e.1#0: 34
          //DEBUG: e.Scanned#1: 36
          //DEBUG: e.2#0: 38
          //DEBUG: e.Tail#1: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </42 & DoMapAccum$1=1@9/43 (/44 Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/40 } )/45 </46 & FindOptimizedCall-Term$1=1/47 Tile{ AsIs: </0 AsIs: & DoMapAccum@9/4 AsIs: (/5 AsIs: e.1#0/34 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ HalfReuse: )/33 AsIs: e.2#0/38 HalfReuse: >/16 } >/48 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_S1A1Z9]);
          refalrts::alloc_open_bracket(vm, context[44]);
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::alloc_open_call(vm, context[46]);
          refalrts::alloc_name(vm, context[47], functions[efunc_gen_FindOptimizedCallm_Term_S1A1]);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::reinit_close_bracket(context[33]);
          refalrts::reinit_close_call(context[16]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[33] );
          refalrts::link_brackets( context[5], context[6] );
          refalrts::link_brackets( context[15], context[45] );
          refalrts::link_brackets( context[44], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[16] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[45], context[47] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[42], context[44] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@9/4 (/5 e.new#18/34 # None/23 )/6 (/9 e.new#23/36 )/10 (/15 s.new#19/33 (/44 e.new#20/42 )/45 e.new#21/38 )/16 e.new#22/40 >/1
          context[34] = context[25];
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[29];
          context[41] = context[30];
          context[42] = 0;
          context[43] = 0;
          context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
          if( ! context[44] )
            continue;
          refalrts::bracket_pointers(context[44], context[45]);
          // closed e.new#18 as range 34
          // closed e.new#23 as range 36
          // closed e.new#20 as range 42
          // closed e.new#21 as range 38
          // closed e.new#22 as range 40
          do {
            // </0 & DoMapAccum@9/4 (/5 e.1#0/46 # None/23 )/6 (/9 e.Scanned#1/48 )/10 (/15 # ADT-Brackets/33 (/44 e.4#0/50 )/45 e.3#0/52 )/16 e.Tail#1/54 >/1
            context[46] = context[34];
            context[47] = context[35];
            context[48] = context[36];
            context[49] = context[37];
            context[50] = context[42];
            context[51] = context[43];
            context[52] = context[38];
            context[53] = context[39];
            context[54] = context[40];
            context[55] = context[41];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[33] ) )
              continue;
            // closed e.1#0 as range 46
            // closed e.Scanned#1 as range 48
            // closed e.4#0 as range 50
            // closed e.3#0 as range 52
            // closed e.Tail#1 as range 54
            //DEBUG: e.1#0: 46
            //DEBUG: e.Scanned#1: 48
            //DEBUG: e.4#0: 50
            //DEBUG: e.3#0: 52
            //DEBUG: e.Tail#1: 54

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </56 & DoMapAccum$1=1@9/57 (/58 Tile{ AsIs: e.Scanned#1/48 } )/59 (/60 Tile{ AsIs: e.Tail#1/54 } Tile{ AsIs: )/10 HalfReuse: </15 HalfReuse: & FindOptimizedCall-Term$2=1/33 AsIs: (/44 AsIs: e.4#0/50 AsIs: )/45 } Tile{ AsIs: </0 AsIs: & DoMapAccum@9/4 AsIs: (/5 AsIs: e.1#0/46 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.3#0/52 } >/61 >/62 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[56]);
            refalrts::alloc_name(vm, context[57], functions[efunc_gen_DoMapAccum_S1A1Z9]);
            refalrts::alloc_open_bracket(vm, context[58]);
            refalrts::alloc_close_bracket(vm, context[59]);
            refalrts::alloc_open_bracket(vm, context[60]);
            refalrts::alloc_close_call(vm, context[61]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::reinit_open_call(context[15]);
            refalrts::reinit_name(context[33], functions[efunc_gen_FindOptimizedCallm_Term_S2A1]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[56] );
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[15] );
            refalrts::push_stack( vm, context[61] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[16] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[44], context[45] );
            refalrts::link_brackets( context[60], context[10] );
            refalrts::link_brackets( context[58], context[59] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[52], context[53] );
            res = refalrts::splice_elem( res, context[16] );
            res = refalrts::splice_evar( res, context[0], context[9] );
            res = refalrts::splice_evar( res, context[10], context[45] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_evar( res, context[59], context[60] );
            res = refalrts::splice_evar( res, context[48], context[49] );
            res = refalrts::splice_evar( res, context[56], context[58] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@9/4 (/5 e.1#0/46 # None/23 )/6 (/9 e.Scanned#1/48 )/10 (/15 # CallBrackets/33 (/44 # Symbol/56 # Name/57 e.6#0/50 )/45 e.3#0/52 )/16 e.Tail#1/54 >/1
          context[46] = context[34];
          context[47] = context[35];
          context[48] = context[36];
          context[49] = context[37];
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[38];
          context[53] = context[39];
          context[54] = context[40];
          context[55] = context[41];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[33] ) )
            continue;
          context[56] = refalrts::ident_left( identifiers[ident_Symbol], context[50], context[51] );
          if( ! context[56] )
            continue;
          context[57] = refalrts::ident_left( identifiers[ident_Name], context[50], context[51] );
          if( ! context[57] )
            continue;
          // closed e.1#0 as range 46
          // closed e.Scanned#1 as range 48
          // closed e.6#0 as range 50
          // closed e.3#0 as range 52
          // closed e.Tail#1 as range 54
          //DEBUG: e.1#0: 46
          //DEBUG: e.Scanned#1: 48
          //DEBUG: e.6#0: 50
          //DEBUG: e.3#0: 52
          //DEBUG: e.Tail#1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & DoMapAccum$1=1@9/6 AsIs: (/9 AsIs: e.Scanned#1/48 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/54 } Tile{ HalfReuse: )/33 HalfReuse: </44 HalfReuse: & FindOptimizedCall-Term$3=1/56 HalfReuse: (/57 AsIs: e.6#0/50 AsIs: )/45 } Tile{ AsIs: (/5 } Tile{ AsIs: e.1#0/46 } )/58 (/59 Tile{ AsIs: e.3#0/52 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & HashName/4 } e.6#0/50/60 101/62 >/63 >/64 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_open_bracket(vm, context[59]);
          refalrts::copy_evar(vm, context[60], context[61], context[50], context[51]);
          refalrts::alloc_number(vm, context[62], 101UL);
          refalrts::alloc_close_call(vm, context[63]);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z9]);
          refalrts::reinit_close_bracket(context[33]);
          refalrts::reinit_open_call(context[44]);
          refalrts::reinit_name(context[56], functions[efunc_gen_FindOptimizedCallm_Term_S3A1]);
          refalrts::reinit_open_bracket(context[57]);
          refalrts::update_name(context[4], functions[efunc_HashName]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[63] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[59], context[16] );
          refalrts::link_brackets( context[5], context[58] );
          refalrts::link_brackets( context[57], context[45] );
          refalrts::link_brackets( context[15], context[33] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[62], context[64] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[16] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_elem( res, context[5] );
          res = refalrts::splice_evar( res, context[33], context[45] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[23], context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@9/4 (/5 e.1#0/34 # None/23 )/6 (/9 e.Scanned#1/36 )/10 (/15 # CallBrackets/33 e.2#0/38 )/16 e.Tail#1/40 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[31];
        context[39] = context[32];
        context[40] = context[29];
        context[41] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[33] ) )
          continue;
        // closed e.1#0 as range 34
        // closed e.Scanned#1 as range 36
        // closed e.2#0 as range 38
        // closed e.Tail#1 as range 40
        //DEBUG: e.1#0: 34
        //DEBUG: e.Scanned#1: 36
        //DEBUG: e.2#0: 38
        //DEBUG: e.Tail#1: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </42 & DoMapAccum$1=1@9/43 (/44 Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/40 } )/45 </46 & FindOptimizedCall-Term$4=1/47 Tile{ AsIs: </0 AsIs: & DoMapAccum@9/4 AsIs: (/5 AsIs: e.1#0/34 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ HalfReuse: )/33 AsIs: e.2#0/38 HalfReuse: >/16 } >/48 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_S1A1Z9]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_FindOptimizedCallm_Term_S4A1]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[33] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[15], context[45] );
        refalrts::link_brackets( context[44], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_evar( res, context[33], context[16] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[45], context[47] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[42], context[44] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@9/4 (/5 e.0#0/25 t.#0/23 )/6 (/9 e.Scanned#1/27 )/10 t.Next#1/15 e.Tail#1/29 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[17];
      context[28] = context[18];
      context[29] = context[19];
      context[30] = context[20];
      // closed e.0#0 as range 25
      // closed e.Scanned#1 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 15
      //DEBUG: e.0#0: 25
      //DEBUG: e.Scanned#1: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@9/4 AsIs: (/5 AsIs: e.0#0/25 AsIs: t.#0/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/27 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@9/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & FindOptimizedCall-Term*5/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_FindOptimizedCallm_Term_D5]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@9/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@9/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@9/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FindOptimizedCall-Term@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z9("DoMapAccum@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z9);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@8/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@8/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@8/4 (/7 e.new#9/15 )/8 (/13 s.new#6/21 e.new#7/19 )/14 e.new#8/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new#9 as range 15
      // closed e.new#8 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new#7 as range 19
      do {
        // </0 & Map@8/4 (/7 e.Substitutions#4/22 )/8 (/13 # Brackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
          continue;
        // closed e.Substitutions#4 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Substitutions#4: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Brackets/21 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@8/31 (/32 e.Substitutions#4/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.Substitutions#4/22 )/8 (/13 # CallBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
          continue;
        // closed e.Substitutions#4 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Substitutions#4: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # CallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@8/31 (/32 e.Substitutions#4/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.Substitutions#4/22 )/8 (/13 # ColdCallBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[21] ) )
          continue;
        // closed e.Substitutions#4 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Substitutions#4: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </28 Tile{ HalfReuse: & ApplyContractions-Term$3:1/21 } Tile{ AsIs: (/13 } e.0#0/24/29 )/31 Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/32 >/33 </34 & Map@8/35 (/36 e.Substitutions#4/22/37 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
        refalrts::reinit_name(context[21], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::link_brackets( context[36], context[14] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[32], context[36] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.Substitutions#4/22 )/8 (/13 # ClosureBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[21] ) )
          continue;
        // closed e.Substitutions#4 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Substitutions#4: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ClosureBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@8/31 (/32 e.Substitutions#4/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@8/4 (/7 e.Substitutions#4/22 )/8 (/13 # ADT-Brackets/21 (/30 e.2#0/28 )/31 e.1#0/24 )/14 e.Tail#1/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[19];
      context[25] = context[20];
      context[26] = context[17];
      context[27] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.Substitutions#4 as range 22
      // closed e.2#0 as range 28
      // closed e.1#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: e.Substitutions#4: 22
      //DEBUG: e.2#0: 28
      //DEBUG: e.1#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/21 AsIs: (/30 AsIs: e.2#0/28 AsIs: )/31 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/22 AsIs: )/8 } Tile{ AsIs: e.1#0/24 } >/32 )/33 </34 & Map@8/35 (/36 e.Substitutions#4/22/37 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z8]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[14] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[13], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 (/7 e.Substitutions#4/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Substitutions#4 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.Substitutions#4: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & ApplyContractions-Term*5/20 Tile{ AsIs: t.Next#1/13 } (/21 e.Substitutions#4/15/22 )/24 >/25 Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Substitutions#4/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ApplyContractionsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 (/7 e.Substitutions#4/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Substitutions#4 as range 9
    //DEBUG: e.Substitutions#4: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 (/7 e.Substitutions#4/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 (/7 e.Substitutions#4/5 )/8 e.items#0/2 >/1
  // closed e.Substitutions#4 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.Substitutions#4: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplyContractions\1@0/4 AsIs: (/7 AsIs: e.Substitutions#4/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyContractions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  // </0 & DoMapAccum@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@10/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 (/17 e.new#4/15 )/18 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#4 as range 15
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum@10/4 (/7 e.new#9/19 )/8 (/11 e.new#10/21 )/12 t.new#6/13 (/17 e.new#11/23 )/18 t.new#7/27 e.new#8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.new#9 as range 19
    // closed e.new#10 as range 21
    // closed e.new#11 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.new#8 as range 25
    do {
      // </0 & DoMapAccum@10/4 (/7 e.Left#1/29 )/8 (/11 e.Right#1/31 )/12 (/13 e.#0/37 )/14 (/17 e.Scanned#1/33 )/18 (/27 e.1#0/39 (/43 e.2#0/41 )/44 )/28 e.Tail#1/35 >/1
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = 0;
      context[38] = 0;
      if( ! refalrts::brackets_term( context[37], context[38], context[13] ) )
        continue;
      context[39] = 0;
      context[40] = 0;
      if( ! refalrts::brackets_term( context[39], context[40], context[27] ) )
        continue;
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_right( context[41], context[42], context[39], context[40] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      // closed e.Left#1 as range 29
      // closed e.Right#1 as range 31
      // closed e.#0 as range 37
      // closed e.Scanned#1 as range 33
      // closed e.1#0 as range 39
      // closed e.2#0 as range 41
      // closed e.Tail#1 as range 35
      //DEBUG: e.Left#1: 29
      //DEBUG: e.Right#1: 31
      //DEBUG: e.#0: 37
      //DEBUG: e.Scanned#1: 33
      //DEBUG: e.1#0: 39
      //DEBUG: e.2#0: 41
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 AsIs: (/7 AsIs: e.Left#1/29 AsIs: )/8 AsIs: (/11 AsIs: e.Right#1/31 AsIs: )/12 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/33 } Tile{ AsIs: )/44 HalfReuse: (/28 AsIs: e.Tail#1/35 HalfReuse: )/1 } (/45 Tile{ AsIs: e.#0/37 } Tile{ AsIs: e.2#0/41 } Tile{ AsIs: )/14 AsIs: (/17 } (/46 </47 Tile{ HalfReuse: & Map@8/18 AsIs: (/27 AsIs: e.1#0/39 HalfReuse: )/43 } e.Left#1/29/48 >/50 )/51 (/52 </53 & Map@8/54 (/55 e.1#0/39/56 )/58 e.Right#1/31/59 >/61 )/62 )/63 >/64 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::copy_evar(vm, context[48], context[49], context[29], context[30]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_Map_Z8]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::copy_evar(vm, context[56], context[57], context[39], context[40]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::copy_evar(vm, context[59], context[60], context[31], context[32]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
      refalrts::reinit_open_bracket(context[28]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_bracket(context[43]);
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[63] );
      refalrts::link_brackets( context[52], context[62] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[53] );
      refalrts::link_brackets( context[55], context[58] );
      refalrts::link_brackets( context[46], context[51] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[27], context[43] );
      refalrts::link_brackets( context[45], context[14] );
      refalrts::link_brackets( context[28], context[1] );
      refalrts::link_brackets( context[13], context[44] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[50], context[64] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[18], context[43] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[44], context[1] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@10/4 (/7 e.Left#1/29 )/8 (/11 e.Right#1/31 )/12 t.Acc#1/13 (/17 e.Scanned#1/33 )/18 t.Next#1/27 e.Tail#1/35 >/1
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    // closed e.Left#1 as range 29
    // closed e.Right#1 as range 31
    // closed e.Scanned#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: t.Acc#1: 13
    //DEBUG: t.Next#1: 27
    //DEBUG: e.Left#1: 29
    //DEBUG: e.Right#1: 31
    //DEBUG: e.Scanned#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 AsIs: (/7 AsIs: e.Left#1/29 AsIs: )/8 AsIs: (/11 AsIs: e.Right#1/31 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned#1/33 AsIs: )/18 } (/37 Tile{ AsIs: e.Tail#1/35 } )/38 </39 & OptSentence-Aux\1*1/40 (/41 e.Left#1/29/42 )/44 (/45 e.Right#1/31/46 )/48 Tile{ AsIs: t.Acc#1/13 } Tile{ AsIs: t.Next#1/27 } >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_OptSentencem_Aux_L1D1]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[45], context[48] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[38], context[48] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@10/4 (/7 e.Left#1/19 )/8 (/11 e.Right#1/21 )/12 t.Acc#1/13 (/17 e.Scanned#1/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Left#1 as range 19
    // closed e.Right#1 as range 21
    // closed e.Scanned#1 as range 23
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.Left#1: 19
    //DEBUG: e.Right#1: 21
    //DEBUG: e.Scanned#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@10/4 (/7 e.Left#1/19 )/8 (/11 e.Right#1/21 )/12 {REMOVED TILE} (/17 {REMOVED TILE} )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/13 } Tile{ AsIs: e.Scanned#1/23 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@10/4 (/7 e.Left#1/5 )/8 (/11 e.Right#1/9 )/12 t.acc#0/13 (/17 e.scanned#0/15 )/18 e.items#0/2 >/1
  // closed e.Left#1 as range 5
  // closed e.Right#1 as range 9
  // closed e.scanned#0 as range 15
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 13
  //DEBUG: e.Left#1: 5
  //DEBUG: e.Right#1: 9
  //DEBUG: e.scanned#0: 15
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & DoMapAccum@0/20 Tile{ HalfReuse: [*]/0 Reuse: & OptSentence-Aux\1@0/4 AsIs: (/7 AsIs: e.Left#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Right#1/9 } )/21 Tile{ HalfReuse: {*}/12 AsIs: t.acc#0/13 AsIs: (/17 AsIs: e.scanned#0/15 AsIs: )/18 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentencem_Aux_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z10("DoMapAccum@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z10);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindOptInfo-Aux@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux@1/4 (/7 e.new#1/5 )/8 e.new#2/2 s.new#3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & FindOptInfo-Aux@1/4 (/7 e.OptFuncs-B#1/14 (/20 # Intrinsic/22 (/25 e.#0/27 )/26 e.Body#1/18 )/21 e.OptFuncs-E#1/16 )/8 e.#0/12 s.N#2/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.#0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Intrinsic], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body#1 as range 18
      // closed e.OptFuncs-E#1 as range 16
      //DEBUG: s.N#2: 9
      //DEBUG: e.#0: 12
      //DEBUG: e.OptFuncs-B#1: 14
      //DEBUG: e.Body#1: 18
      //DEBUG: e.OptFuncs-E#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B#1/14 } Tile{ AsIs: (/20 AsIs: # Intrinsic/22 AsIs: (/25 AsIs: e.#0/27 AsIs: )/26 AsIs: e.Body#1/18 AsIs: )/21 AsIs: e.OptFuncs-E#1/16 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e.#0/12 } Tile{ HalfReuse: # SUF/0 } '*'/29 Tile{ AsIs: s.N#2/9 HalfReuse: )/1 } e.Body#1/18/30 )/32 Tile{ ]] }
      refalrts::alloc_char(vm, context[29], '*');
      refalrts::copy_evar(vm, context[30], context[31], context[18], context[19]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[32] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@1/4 (/7 e.OptFuncs-B#1/14 (/20 s.Mode#1/22 (/25 e.#0/27 )/26 e.Body#1/18 )/21 e.OptFuncs-E#1/16 )/8 e.#0/12 s.N#2/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.#0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.OptFuncs-E#1 as range 16
      if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body#1 as range 18
      //DEBUG: s.N#2: 9
      //DEBUG: e.#0: 12
      //DEBUG: e.OptFuncs-B#1: 14
      //DEBUG: e.OptFuncs-E#1: 16
      //DEBUG: s.Mode#1: 22
      //DEBUG: e.Body#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@1/4 AsIs: (/7 AsIs: e.OptFuncs-B#1/14 HalfReuse: )/20 AsIs: s.Mode#1/22 AsIs: (/25 AsIs: e.#0/27 AsIs: )/26 } (/29 Tile{ AsIs: e.Body#1/18 } )/30 Tile{ HalfReuse: (/21 AsIs: e.OptFuncs-E#1/16 AsIs: )/8 } Tile{ AsIs: s.N#2/9 } e.Body#1/18/31 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[18], context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z1]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@1/4 (/7 e.dyn#0/5 )/8 e.#0/2 s.N#2/9 >/1
  // closed e.dyn#0 as range 5
  // closed e.#0 as range 2
  //DEBUG: s.N#2: 9
  //DEBUG: e.dyn#0: 5
  //DEBUG: e.#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux@0/4 } Tile{ AsIs: e.dyn#0/5 } Tile{ AsIs: (/7 } Tile{ AsIs: e.#0/2 } # SUF/10 '*'/11 s.N#2/9/12 Tile{ AsIs: )/8 } (/13 e.#0/2/14 )/16 Tile{ AsIs: s.N#2/9 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[10], identifiers[ident_SUF]);
  refalrts::alloc_char(vm, context[11], '*');
  refalrts::copy_stvar(vm, context[12], context[9]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::copy_evar(vm, context[14], context[15], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z1("FindOptInfo-Aux@1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z1);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindOptInfo-Aux@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux@2/4 (/7 e.new#1/5 )/8 e.new#2/2 s.new#3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & FindOptInfo-Aux@2/4 (/7 e.OptFuncs-B#1/14 (/20 # Intrinsic/22 (/25 e.0#0/27 )/26 e.Body#1/18 )/21 e.OptFuncs-E#1/16 )/8 e.0#0/12 s.N#2/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.0#0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Intrinsic], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body#1 as range 18
      // closed e.OptFuncs-E#1 as range 16
      //DEBUG: s.N#2: 9
      //DEBUG: e.0#0: 12
      //DEBUG: e.OptFuncs-B#1: 14
      //DEBUG: e.Body#1: 18
      //DEBUG: e.OptFuncs-E#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B#1/14 } Tile{ AsIs: (/20 AsIs: # Intrinsic/22 AsIs: (/25 AsIs: e.0#0/27 AsIs: )/26 AsIs: e.Body#1/18 AsIs: )/21 AsIs: e.OptFuncs-E#1/16 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e.0#0/12 } Tile{ HalfReuse: '*'/0 } Tile{ AsIs: s.N#2/9 HalfReuse: )/1 } e.Body#1/18/29 )/31 Tile{ ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[18], context[19]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_char(context[0], '*');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[31] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@2/4 (/7 e.OptFuncs-B#1/14 (/20 s.Mode#1/22 (/25 e.0#0/27 )/26 e.Body#1/18 )/21 e.OptFuncs-E#1/16 )/8 e.0#0/12 s.N#2/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.0#0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.OptFuncs-E#1 as range 16
      if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body#1 as range 18
      //DEBUG: s.N#2: 9
      //DEBUG: e.0#0: 12
      //DEBUG: e.OptFuncs-B#1: 14
      //DEBUG: e.OptFuncs-E#1: 16
      //DEBUG: s.Mode#1: 22
      //DEBUG: e.Body#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.0#0/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@2/4 AsIs: (/7 AsIs: e.OptFuncs-B#1/14 HalfReuse: )/20 AsIs: s.Mode#1/22 AsIs: (/25 AsIs: e.0#0/27 AsIs: )/26 } (/29 Tile{ AsIs: e.Body#1/18 } )/30 Tile{ HalfReuse: (/21 AsIs: e.OptFuncs-E#1/16 AsIs: )/8 } Tile{ AsIs: s.N#2/9 } e.Body#1/18/31 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[18], context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z2]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@2/4 (/7 e.dyn#0/5 )/8 e.0#0/2 s.N#2/9 >/1
  // closed e.dyn#0 as range 5
  // closed e.0#0 as range 2
  //DEBUG: s.N#2: 9
  //DEBUG: e.dyn#0: 5
  //DEBUG: e.0#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux@0/4 } Tile{ AsIs: e.dyn#0/5 } Tile{ AsIs: (/7 } Tile{ AsIs: e.0#0/2 } '*'/10 s.N#2/9/11 Tile{ AsIs: )/8 } (/12 e.0#0/2/13 )/15 Tile{ AsIs: s.N#2/9 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[10], '*');
  refalrts::copy_stvar(vm, context[11], context[9]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z2("FindOptInfo-Aux@2", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & FindOptInfo-Aux@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux@3/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & FindOptInfo-Aux@3/4 (/7 e.OptFuncs-B#1/13 (/19 # Intrinsic/21 (/24 e.Name0#1/26 )/25 e.Body#1/17 )/20 e.OptFuncs-E#1/15 )/8 e.Name0#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0#1 as range 11
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Intrinsic], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::repeated_evar_left( vm, context[26], context[27], context[11], context[12], context[22], context[23] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Body#1 as range 17
      // closed e.OptFuncs-E#1 as range 15
      //DEBUG: e.Name0#1: 11
      //DEBUG: e.OptFuncs-B#1: 13
      //DEBUG: e.Body#1: 17
      //DEBUG: e.OptFuncs-E#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B#1/13 } Tile{ AsIs: (/19 AsIs: # Intrinsic/21 AsIs: (/24 AsIs: e.Name0#1/26 AsIs: )/25 AsIs: e.Body#1/17 AsIs: )/20 AsIs: e.OptFuncs-E#1/15 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e.Name0#1/11 } Tile{ HalfReuse: )/0 } e.Body#1/17/28 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[28], context[29], context[17], context[18]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[7], context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[19], context[8] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@3/4 (/7 e.OptFuncs-B#1/13 (/19 s.Mode#1/21 (/24 e.Name0#1/26 )/25 e.Body#1/17 )/20 e.OptFuncs-E#1/15 )/8 e.Name0#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0#1 as range 11
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.OptFuncs-E#1 as range 15
      if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::repeated_evar_left( vm, context[26], context[27], context[11], context[12], context[22], context[23] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Body#1 as range 17
      //DEBUG: e.Name0#1: 11
      //DEBUG: e.OptFuncs-B#1: 13
      //DEBUG: e.OptFuncs-E#1: 15
      //DEBUG: s.Mode#1: 21
      //DEBUG: e.Body#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name0#1/11 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@3/4 AsIs: (/7 AsIs: e.OptFuncs-B#1/13 HalfReuse: )/19 AsIs: s.Mode#1/21 AsIs: (/24 AsIs: e.Name0#1/26 AsIs: )/25 } (/28 Tile{ AsIs: e.Body#1/17 } )/29 Tile{ HalfReuse: (/20 AsIs: e.OptFuncs-E#1/15 AsIs: )/8 } e.Body#1/17/30 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::copy_evar(vm, context[30], context[31], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z3]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[8] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@3/4 (/7 e.dyn#0/5 )/8 e.Name0#1/2 >/1
  // closed e.dyn#0 as range 5
  // closed e.Name0#1 as range 2
  //DEBUG: e.dyn#0: 5
  //DEBUG: e.Name0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & FindOptInfo-Aux@0/7 AsIs: e.dyn#0/5 HalfReuse: (/8 AsIs: e.Name0#1/2 HalfReuse: )/1 } Tile{ HalfReuse: (/0 } e.Name0#1/2/9 )/11 0/12 >/13 Tile{ ]] }
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_number(vm, context[12], 0UL);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[4] );
  refalrts::link_brackets( context[0], context[11] );
  refalrts::link_brackets( context[8], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z3("FindOptInfo-Aux@3", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z3);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Map@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@9/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@9/4 s.a#2/7 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      //DEBUG: s.a#2: 7
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 # Symbol/12 # Char/13 Tile{ AsIs: s.a#2/7 } )/14 Tile{ AsIs: </0 AsIs: & Map@9/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CharToNode\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@9/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z9]);
    refalrts::update_name(context[4], functions[efunc_gen_CharToNode_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CharToNode\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CharToNode_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 t.new#4/5 (/9 e.new#7/11 )/10 s.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/16 )/10 # Ok/15 e.Result#3/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[15] ) )
        continue;
      // closed e.2#0 as range 16
      // closed e.Result#3 as range 18
      //DEBUG: t.IntrinsicFunction0#1: 5
      //DEBUG: e.2#0: 16
      //DEBUG: e.Result#3: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0#1/5 {REMOVED TILE} e.2#0/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # TkVariable/20 'e'/21 # DRIVEN/22 0/23 Tile{ AsIs: )/10 HalfReuse: ':'/15 AsIs: e.Result#3/18 HalfReuse: )/1 } (/24 )/25 )/26 Tile{ ]] }
      refalrts::alloc_ident(vm, context[20], identifiers[ident_TkVariable]);
      refalrts::alloc_char(vm, context[21], 'e');
      refalrts::alloc_ident(vm, context[22], identifiers[ident_DRIVEN]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[15], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[26] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/16 )/10 # MakeColdCall/15 >/1
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.2#0 as range 16
    //DEBUG: t.IntrinsicFunction0#1: 5
    //DEBUG: e.2#0: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0#1/5 AsIs: (/9 } Tile{ HalfReuse: # Symbol/10 } # Identifier/18 Tile{ AsIs: e.2#0/16 } Tile{ HalfReuse: )/15 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Identifier]);
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::reinit_ident(context[10], identifiers[ident_Symbol]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/7 )/10 e.dyn#0/2 >/1
  // closed e.2#0 as range 7
  // closed e.dyn#0 as range 2
  //DEBUG: t.IntrinsicFunction0#1: 5
  //DEBUG: e.2#0: 7
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@0/4 AsIs: t.IntrinsicFunction0#1/5 AsIs: (/9 } (/11 # Symbol/12 # Identifier/13 Tile{ AsIs: e.2#0/7 } )/14 Tile{ AsIs: )/10 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Identifier]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1("DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z1);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Intrinsic-Type$4=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Intrinsic-Type$4=1@1/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 2
  do {
    // </0 & Intrinsic-Type$4=1@1/4 s.Char#2/5 (/8 e.#0/10 )/9 s.Type#2/14 s.SubType#2/15 e._#2/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.#0 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e._#2 as range 12
    //DEBUG: s.Char#2: 5
    //DEBUG: e.#0: 10
    //DEBUG: s.Type#2: 14
    //DEBUG: s.SubType#2: 15
    //DEBUG: e._#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._#2/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/16 (/17 # Symbol/18 Tile{ HalfReuse: # Char/9 AsIs: s.Type#2/14 } )/19 (/20 Tile{ HalfReuse: # Symbol/1 } # Char/21 Tile{ AsIs: s.SubType#2/15 } )/22 (/23 Tile{ HalfReuse: # Symbol/0 HalfReuse: # Char/4 AsIs: s.Char#2/5 HalfReuse: )/8 } Tile{ AsIs: e.#0/10 } Tile{ ]] }
    refalrts::alloc_ident(vm, context[16], identifiers[ident_Ok]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Char]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::reinit_ident(context[9], identifiers[ident_Char]);
    refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[0], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[4], identifiers[ident_Char]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::link_brackets( context[23], context[8] );
    refalrts::link_brackets( context[20], context[22] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type$4=1@1/4 s.Char#2/5 (/8 e.#0/6 )/9 e.dyn#0/2 >/1
  // closed e.#0 as range 6
  // closed e.dyn#0 as range 2
  //DEBUG: s.Char#2: 5
  //DEBUG: e.#0: 6
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1@0/4 } (/10 # Symbol/11 # Char/12 Tile{ AsIs: s.Char#2/5 } )/13 Tile{ AsIs: (/8 AsIs: e.#0/6 AsIs: )/9 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1Z1("Intrinsic-Type$4=1@1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 t.new#1/5 s.new#2/7 (/10 e.new#3/8 )/11 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new#3 as range 8
  // closed e.new#4 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 t.new#5/5 s.new#6/7 (/10 e.new#9/12 )/11 s.new#7/16 e.new#8/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new#9 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    // closed e.new#8 as range 14
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 t.IntrinsicFunction0#1/5 s.Char#2/7 (/10 e.#0/17 )/11 # Ok/16 e.Result#3/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[16] ) )
        continue;
      // closed e.#0 as range 17
      // closed e.Result#3 as range 19
      //DEBUG: t.IntrinsicFunction0#1: 5
      //DEBUG: s.Char#2: 7
      //DEBUG: e.#0: 17
      //DEBUG: e.Result#3: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0#1/5 s.Char#2/7 {REMOVED TILE} e.#0/17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/10 } # TkVariable/21 'e'/22 # DRIVEN/23 0/24 Tile{ AsIs: )/11 HalfReuse: ':'/16 AsIs: e.Result#3/19 HalfReuse: )/1 } (/25 )/26 )/27 Tile{ ]] }
      refalrts::alloc_ident(vm, context[21], identifiers[ident_TkVariable]);
      refalrts::alloc_char(vm, context[22], 'e');
      refalrts::alloc_ident(vm, context[23], identifiers[ident_DRIVEN]);
      refalrts::alloc_number(vm, context[24], 0UL);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[16], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[27] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_elem( res, context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 t.IntrinsicFunction0#1/5 s.Char#2/7 (/10 e.#0/17 )/11 # MakeColdCall/16 >/1
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.#0 as range 17
    //DEBUG: t.IntrinsicFunction0#1: 5
    //DEBUG: s.Char#2: 7
    //DEBUG: e.#0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0#1/5 } (/19 Tile{ Reuse: # Symbol/16 HalfReuse: # Char/1 } Tile{ AsIs: s.Char#2/7 HalfReuse: )/10 AsIs: e.#0/17 HalfReuse: >/11 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::update_ident(context[16], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[1], identifiers[ident_Char]);
    refalrts::reinit_close_bracket(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2/4 t.IntrinsicFunction0#1/5 s.Char#2/7 (/10 e.#0/8 )/11 e.dyn#0/2 >/1
  // closed e.#0 as range 8
  // closed e.dyn#0 as range 2
  //DEBUG: t.IntrinsicFunction0#1: 5
  //DEBUG: s.Char#2: 7
  //DEBUG: e.#0: 8
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@0/4 AsIs: t.IntrinsicFunction0#1/5 } (/12 (/13 # Symbol/14 # Char/15 Tile{ AsIs: s.Char#2/7 HalfReuse: )/10 AsIs: e.#0/8 AsIs: )/11 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z0]);
  refalrts::reinit_close_bracket(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[11] );
  refalrts::link_brackets( context[13], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z2("DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z2);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Intrinsic-Type$4=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Intrinsic-Type$4=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & Intrinsic-Type$4=1@2/4 (/7 e.2#0/13 )/8 (/11 e.#0/15 )/12 s.Type#2/19 s.SubType#2/20 e._#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.2#0 as range 13
    // closed e.#0 as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
      continue;
    // closed e._#2 as range 17
    //DEBUG: e.2#0: 13
    //DEBUG: e.#0: 15
    //DEBUG: s.Type#2: 19
    //DEBUG: s.SubType#2: 20
    //DEBUG: e._#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._#2/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/21 Tile{ AsIs: (/11 } # Symbol/22 Tile{ HalfReuse: # Char/12 AsIs: s.Type#2/19 } )/23 (/24 # Symbol/25 Tile{ HalfReuse: # Char/1 } Tile{ AsIs: s.SubType#2/20 } )/26 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Identifier/7 AsIs: e.2#0/13 AsIs: )/8 } Tile{ AsIs: e.#0/15 } Tile{ ]] }
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Ok]);
    refalrts::alloc_ident(vm, context[22], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::reinit_ident(context[12], identifiers[ident_Char]);
    refalrts::reinit_ident(context[1], identifiers[ident_Char]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Identifier]);
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[24], context[26] );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type$4=1@2/4 (/7 e.2#0/5 )/8 (/11 e.#0/9 )/12 e.dyn#0/2 >/1
  // closed e.2#0 as range 5
  // closed e.#0 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.2#0: 5
  //DEBUG: e.#0: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Intrinsic-Type$4=1@0/14 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Identifier/7 AsIs: e.2#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.#0/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Intrinsicm_Type_S4A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[7], identifiers[ident_Identifier]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1Z2("Intrinsic-Type$4=1@2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1Z2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 t.new#5/5 (/9 e.new#8/15 )/10 (/13 e.new#9/17 )/14 s.new#6/21 e.new#7/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new#8 as range 15
    // closed e.new#9 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    // closed e.new#7 as range 19
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/22 )/10 (/13 e.#0/24 )/14 # Ok/21 e.Result#3/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[21] ) )
        continue;
      // closed e.2#0 as range 22
      // closed e.#0 as range 24
      // closed e.Result#3 as range 26
      //DEBUG: t.IntrinsicFunction0#1: 5
      //DEBUG: e.2#0: 22
      //DEBUG: e.#0: 24
      //DEBUG: e.Result#3: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0#1/5 {REMOVED TILE} e.2#0/22 {REMOVED TILE} e.#0/24 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # TkVariable/28 'e'/29 # DRIVEN/30 0/31 Tile{ AsIs: )/14 HalfReuse: ':'/21 AsIs: e.Result#3/26 HalfReuse: )/1 } (/32 Tile{ AsIs: )/10 HalfReuse: )/13 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[28], identifiers[ident_TkVariable]);
      refalrts::alloc_char(vm, context[29], 'e');
      refalrts::alloc_ident(vm, context[30], identifiers[ident_DRIVEN]);
      refalrts::alloc_number(vm, context[31], 0UL);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[21], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::link_brackets( context[0], context[13] );
      refalrts::link_brackets( context[32], context[10] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/22 )/10 (/13 e.#0/24 )/14 # MakeColdCall/21 >/1
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    // closed e.2#0 as range 22
    // closed e.#0 as range 24
    //DEBUG: t.IntrinsicFunction0#1: 5
    //DEBUG: e.2#0: 22
    //DEBUG: e.#0: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0#1/5 AsIs: (/9 } Tile{ HalfReuse: # Symbol/13 } Tile{ Reuse: # Identifier/21 } Tile{ AsIs: e.2#0/22 } Tile{ AsIs: )/14 } Tile{ AsIs: e.#0/24 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
    refalrts::update_ident(context[21], identifiers[ident_Identifier]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3/4 t.IntrinsicFunction0#1/5 (/9 e.2#0/7 )/10 (/13 e.#0/11 )/14 e.dyn#0/2 >/1
  // closed e.2#0 as range 7
  // closed e.#0 as range 11
  // closed e.dyn#0 as range 2
  //DEBUG: t.IntrinsicFunction0#1: 5
  //DEBUG: e.2#0: 7
  //DEBUG: e.#0: 11
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@0/4 AsIs: t.IntrinsicFunction0#1/5 AsIs: (/9 } (/15 Tile{ HalfReuse: # Symbol/10 } # Identifier/16 Tile{ AsIs: e.2#0/7 } Tile{ HalfReuse: )/13 AsIs: e.#0/11 AsIs: )/14 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Identifier]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z0]);
  refalrts::reinit_ident(context[10], identifiers[ident_Symbol]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[14] );
  refalrts::link_brackets( context[15], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z3("DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@3", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z3);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 t.new#5/5 t.new#6/7 (/11 e.new#9/13 )/12 s.new#7/17 e.new#8/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new#9 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new#8 as range 15
    do {
      // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 t.IntrinsicFunction0#1/5 t.#0/7 (/11 e.#0/18 )/12 # Ok/17 e.Result#3/20 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[17] ) )
        continue;
      // closed e.#0 as range 18
      // closed e.Result#3 as range 20
      //DEBUG: t.IntrinsicFunction0#1: 5
      //DEBUG: t.#0: 7
      //DEBUG: e.#0: 18
      //DEBUG: e.Result#3: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0#1/5 t.#0/7 {REMOVED TILE} e.#0/18 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/11 } # TkVariable/22 'e'/23 # DRIVEN/24 0/25 Tile{ AsIs: )/12 HalfReuse: ':'/17 AsIs: e.Result#3/20 HalfReuse: )/1 } (/26 )/27 )/28 Tile{ ]] }
      refalrts::alloc_ident(vm, context[22], identifiers[ident_TkVariable]);
      refalrts::alloc_char(vm, context[23], 'e');
      refalrts::alloc_ident(vm, context[24], identifiers[ident_DRIVEN]);
      refalrts::alloc_number(vm, context[25], 0UL);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[17], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[28] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[28] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 t.IntrinsicFunction0#1/5 t.#0/7 (/11 e.#0/18 )/12 # MakeColdCall/17 >/1
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.#0 as range 18
    //DEBUG: t.IntrinsicFunction0#1: 5
    //DEBUG: t.#0: 7
    //DEBUG: e.#0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 # MakeColdCall/17 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0#1/5 AsIs: t.#0/7 } Tile{ AsIs: e.#0/18 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4/4 t.IntrinsicFunction0#1/5 t.#0/7 (/11 e.#0/9 )/12 e.dyn#0/2 >/1
  // closed e.#0 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: t.IntrinsicFunction0#1: 5
  //DEBUG: t.#0: 7
  //DEBUG: e.#0: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@0/4 AsIs: t.IntrinsicFunction0#1/5 } Tile{ AsIs: (/11 } Tile{ AsIs: t.#0/7 } Tile{ AsIs: e.#0/9 } Tile{ AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z4("DoOptSentence-MakeSubstitutions-Intrinsic$2=2:1@4", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutionsm_Intrinsic_S2A2B1Z4);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@10/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@10/4 (/7 # Symbol/13 s.new#3/14 s.new#4/15 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Symbol], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      do {
        // </0 & Map@10/4 (/7 # Symbol/13 # Char/14 s.new#6/15 )/8 e.new#7/16 >/1
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Char], context[14] ) )
          continue;
        // closed e.new#7 as range 16
        do {
          // </0 & Map@10/4 (/7 # Symbol/13 # Char/14 '-'/15 )/8 e.Tail#1/18 >/1
          context[18] = context[16];
          context[19] = context[17];
          if( ! refalrts::char_term( '-', context[15] ) )
            continue;
          // closed e.Tail#1 as range 18
          //DEBUG: e.Tail#1: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Map@10/4 (/7 # Symbol/13 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/14 HalfReuse: </15 HalfReuse: & Map@10/8 AsIs: e.Tail#1/18 AsIs: >/1 ]] }
          refalrts::reinit_char(context[14], '-');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@10/4 (/7 # Symbol/13 # Char/14 '+'/15 )/8 e.Tail#1/18 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::char_term( '+', context[15] ) )
          continue;
        // closed e.Tail#1 as range 18
        //DEBUG: e.Tail#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Map@10/4 (/7 # Symbol/13 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/14 HalfReuse: </15 HalfReuse: & Map@10/8 AsIs: e.Tail#1/18 AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], '+');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@10/4 (/7 # Symbol/13 # Number/14 s.n#2/15 )/8 e.Tail#1/16 >/1
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Number], context[14] ) )
        continue;
      // closed e.Tail#1 as range 16
      //DEBUG: s.n#2: 15
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # Symbol/13 # Number/14 s.n#2/15 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.n2 #15/0 HalfReuse: </4 } Tile{ HalfReuse: & Map@10/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
      refalrts::reinit_svar( context[0], context[15] );
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SymbolsToNumber\1*3/4 AsIs: t.Next#1/7 } >/11 </12 & Map@10/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z10]);
    refalrts::update_name(context[4], functions[efunc_gen_SymbolsToNumber_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & SymbolsToNumber\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SymbolsToNumber_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Map@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@11/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@11/4 s.new#3/7 e.new#4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.new#4 as range 9
      do {
        // </0 & Map@11/4 '-'/7 e.Tail#1/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '-', context[7] ) )
          continue;
        // closed e.Tail#1 as range 11
        //DEBUG: e.Tail#1: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/13 # Symbol/14 # Char/15 '-'/16 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@11/7 AsIs: e.Tail#1/11 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[13]);
        refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[16], '-');
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z11]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[13], context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@11/4 '+'/7 e.Tail#1/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '+', context[7] ) )
          continue;
        // closed e.Tail#1 as range 11
        //DEBUG: e.Tail#1: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/13 # Symbol/14 # Char/15 '+'/16 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@11/7 AsIs: e.Tail#1/11 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[13]);
        refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[16], '+');
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z11]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[13], context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@11/4 s.n#2/7 e.Tail#1/11 >/1
      context[11] = context[9];
      context[12] = context[10];
      // closed e.Tail#1 as range 11
      //DEBUG: s.n#2: 7
      //DEBUG: e.Tail#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/13 # Symbol/14 # Number/15 Tile{ AsIs: s.n#2/7 } )/16 Tile{ AsIs: </0 AsIs: & Map@11/4 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[13]);
      refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Number]);
      refalrts::alloc_close_bracket(vm, context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[13], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NumberToSymbols\1*3/4 AsIs: t.Next#1/7 } >/11 </12 & Map@11/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z11]);
    refalrts::update_name(context[4], functions[efunc_gen_NumberToSymbols_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & NumberToSymbols\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NumberToSymbols_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Symbol/13 # Number/18 e.2#0/14 )/8 e.#0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Number], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.2#0 as range 14
        // closed e.#0 as range 16
        //DEBUG: e.2#0: 14
        //DEBUG: e.#0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Symbol/13 # Number/18 e.2#0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e.#0/16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # TkVariable/13 e.1#0/14 )/8 e.#0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.1#0 as range 14
        // closed e.#0 as range 16
        //DEBUG: e.1#0: 14
        //DEBUG: e.#0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # TkVariable/13 e.1#0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e.#0/16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # ColdCallBrackets/13 e.1#0/14 )/8 e.#0/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.1#0 as range 14
      // closed e.#0 as range 16
      //DEBUG: e.1#0: 14
      //DEBUG: e.#0: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # ColdCallBrackets/13 e.1#0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e.#0/16 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t.#0/7 e.#0/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.#0 as range 9
    //DEBUG: t.#0: 7
    //DEBUG: e.#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t.#0/7 e.#0/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/0 HalfReuse: # Number/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::reinit_name(context[0], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
    refalrts::reinit_ident(context[4], identifiers[ident_Number]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 # Number/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Number]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1("CheckArgs-Intrinsic-StaticSubstitution@1", COOKIE1_, COOKIE2_, func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1);


static refalrts::FnResult func_gen_StaticSubstitution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & StaticSubstitution@1/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@19/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@1/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 (/7"Chr"/8 )/10 & Chr@0/11 # Number/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Chr", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Chr_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Number]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z1("StaticSubstitution@1", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z1);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Map@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@12/4 s.new#1/5 s.new#2/6 s.new#3/7 (/10 e.new#4/8 )/11 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new#4 as range 8
  // closed e.new#5 as range 2
  do {
    // </0 & Map@12/4 s.new#6/5 s.new#7/6 s.new#8/7 (/10 e.new#11/12 )/11 t.new#9/16 e.new#10/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new#11 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.new#10 as range 14
    do {
      // </0 & Map@12/4 s.new#12/5 s.new#13/6 s.new#14/7 (/10 e.new#18/18 )/11 (/16 s.new#15/24 e.new#16/22 )/17 e.new#17/20 >/1
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[16] ) )
        continue;
      // closed e.new#18 as range 18
      // closed e.new#17 as range 20
      if( ! refalrts::svar_left( context[24], context[22], context[23] ) )
        continue;
      // closed e.new#16 as range 22
      do {
        // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/25 )/11 (/16 # Symbol/24 s.SymbolFrom#1/31 s.n#2/32 )/17 e.Tail#1/29 >/1
        context[25] = context[18];
        context[26] = context[19];
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[20];
        context[30] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[24] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[31], context[5], context[27], context[28] ) )
          continue;
        // closed e.FuncName#1 as range 25
        // closed e.Tail#1 as range 29
        if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        //DEBUG: s.SymbolFrom#1: 5
        //DEBUG: s.SymbolTo#1: 6
        //DEBUG: s.Func#1: 7
        //DEBUG: e.FuncName#1: 25
        //DEBUG: e.Tail#1: 29
        //DEBUG: s.n#2: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SymbolFrom#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/16 AsIs: # Symbol/24 } s.SymbolTo#1/6/33 </34 s.Func#1/7/35 Tile{ AsIs: s.n#2/32 HalfReuse: >/17 } )/36 Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: s.SymbolFrom#1/5 AsIs: s.SymbolTo#1/6 AsIs: s.Func#1/7 AsIs: (/10 AsIs: e.FuncName#1/25 AsIs: )/11 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[33], context[6]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::copy_stvar(vm, context[35], context[7]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[34] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[32], context[17] );
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[16], context[24] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/25 )/11 (/16 # TkVariable/24 e.0#0/27 )/17 e.Tail#1/29 >/1
        context[25] = context[18];
        context[26] = context[19];
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[20];
        context[30] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[24] ) )
          continue;
        // closed e.FuncName#1 as range 25
        // closed e.0#0 as range 27
        // closed e.Tail#1 as range 29
        //DEBUG: s.SymbolFrom#1: 5
        //DEBUG: s.SymbolTo#1: 6
        //DEBUG: s.Func#1: 7
        //DEBUG: e.FuncName#1: 25
        //DEBUG: e.0#0: 27
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 # ColdCallBrackets/32 (/33 # Symbol/34 # Name/35 e.FuncName#1/25/36 )/38 Tile{ AsIs: (/16 AsIs: # TkVariable/24 AsIs: e.0#0/27 AsIs: )/17 } )/39 Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: s.SymbolFrom#1/5 AsIs: s.SymbolTo#1/6 AsIs: s.Func#1/7 AsIs: (/10 AsIs: e.FuncName#1/25 AsIs: )/11 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_ident(vm, context[32], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[35], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::link_brackets( context[31], context[39] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[33], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[31], context[38] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/25 )/11 (/16 # ColdCallBrackets/24 e.0#0/27 )/17 e.Tail#1/29 >/1
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[22];
      context[28] = context[23];
      context[29] = context[20];
      context[30] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[24] ) )
        continue;
      // closed e.FuncName#1 as range 25
      // closed e.0#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: s.SymbolFrom#1: 5
      //DEBUG: s.SymbolTo#1: 6
      //DEBUG: s.Func#1: 7
      //DEBUG: e.FuncName#1: 25
      //DEBUG: e.0#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/31 # ColdCallBrackets/32 (/33 # Symbol/34 # Name/35 e.FuncName#1/25/36 )/38 Tile{ AsIs: (/16 AsIs: # ColdCallBrackets/24 AsIs: e.0#0/27 AsIs: )/17 } )/39 Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: s.SymbolFrom#1/5 AsIs: s.SymbolTo#1/6 AsIs: s.Func#1/7 AsIs: (/10 AsIs: e.FuncName#1/25 AsIs: )/11 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[35], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[31], context[39] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[33], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[31], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/18 )/11 t.Next#1/16 e.Tail#1/20 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    // closed e.FuncName#1 as range 18
    // closed e.Tail#1 as range 20
    //DEBUG: t.Next#1: 16
    //DEBUG: s.SymbolFrom#1: 5
    //DEBUG: s.SymbolTo#1: 6
    //DEBUG: s.Func#1: 7
    //DEBUG: e.FuncName#1: 18
    //DEBUG: e.Tail#1: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1*3/4 AsIs: s.SymbolFrom#1/5 AsIs: s.SymbolTo#1/6 AsIs: s.Func#1/7 AsIs: (/10 AsIs: e.FuncName#1/18 AsIs: )/11 AsIs: t.Next#1/16 } >/22 </23 & Map@12/24 s.SymbolFrom#1/5/25 s.SymbolTo#1/6/26 s.Func#1/7/27 (/28 e.FuncName#1/18/29 )/31 Tile{ AsIs: e.Tail#1/20 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z12]);
    refalrts::copy_stvar(vm, context[25], context[5]);
    refalrts::copy_stvar(vm, context[26], context[6]);
    refalrts::copy_stvar(vm, context[27], context[7]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[18], context[19]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[28], context[31] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[22], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName#1 as range 12
    //DEBUG: s.SymbolFrom#1: 5
    //DEBUG: s.SymbolTo#1: 6
    //DEBUG: s.Func#1: 7
    //DEBUG: e.FuncName#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/12 )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 s.SymbolFrom#1/5 s.SymbolTo#1/6 s.Func#1/7 (/10 e.FuncName#1/8 )/11 e.items#0/2 >/1
  // closed e.FuncName#1 as range 8
  // closed e.items#0 as range 2
  //DEBUG: s.SymbolFrom#1: 5
  //DEBUG: s.SymbolTo#1: 6
  //DEBUG: s.Func#1: 7
  //DEBUG: e.FuncName#1: 8
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Map@0/13 Tile{ HalfReuse: [*]/0 Reuse: & StaticSubstitution\1@0/4 AsIs: s.SymbolFrom#1/5 AsIs: s.SymbolTo#1/6 AsIs: s.Func#1/7 AsIs: (/10 AsIs: e.FuncName#1/8 AsIs: )/11 } {*}/14 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Symbol/13 # Char/18 e.2#0/14 )/8 e.#0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.2#0 as range 14
        // closed e.#0 as range 16
        //DEBUG: e.2#0: 14
        //DEBUG: e.#0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Symbol/13 # Char/18 e.2#0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e.#0/16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # TkVariable/13 e.1#0/14 )/8 e.#0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.1#0 as range 14
        // closed e.#0 as range 16
        //DEBUG: e.1#0: 14
        //DEBUG: e.#0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # TkVariable/13 e.1#0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e.#0/16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # ColdCallBrackets/13 e.1#0/14 )/8 e.#0/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.1#0 as range 14
      // closed e.#0 as range 16
      //DEBUG: e.1#0: 14
      //DEBUG: e.#0: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # ColdCallBrackets/13 e.1#0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e.#0/16 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t.#0/7 e.#0/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.#0 as range 9
    //DEBUG: t.#0: 7
    //DEBUG: e.#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t.#0/7 e.#0/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/0 HalfReuse: # Char/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::reinit_name(context[0], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
    refalrts::reinit_ident(context[4], identifiers[ident_Char]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 # Char/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2("CheckArgs-Intrinsic-StaticSubstitution@2", COOKIE1_, COOKIE2_, func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2);


static refalrts::FnResult func_gen_StaticSubstitution_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & StaticSubstitution@2/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@20/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@2/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 (/7"Ord"/8 )/10 & Ord@0/11 # Char/12 # Number/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Ord", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Ord_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Number]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z2("StaticSubstitution@2", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z2);


static refalrts::FnResult func_gen_StaticSubstitution_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & StaticSubstitution@3/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@21/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@3/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 (/7"Upper"/8 )/10 & Upper@0/11 # Char/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Upper", 5);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Upper_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z3("StaticSubstitution@3", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z3);


static refalrts::FnResult func_gen_StaticSubstitution_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & StaticSubstitution@4/4 e.Args0#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0#1 as range 5
    //DEBUG: e.Args0#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@22/4 AsIs: e.Args0#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@4/4 e.Args0#1/2 >/1
  // closed e.Args0#1 as range 2
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0#1/2 } )/6 (/7"Lower"/8 )/10 & Lower@0/11 # Char/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Lower", 5);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Lower_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z4("StaticSubstitution@4", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z4);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 76 elems
  refalrts::Iter context[76];
  refalrts::zeros( context, 76 );
  // </0 & DoOptSentence-MakeSubstitutions@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions@1/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 t.new#4/10 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_right( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions@1/4 s.new#5/5 (/8 e.new#11/12 )/9 e.new#10/14 (/10 # Function/18 (/21 e.new#6/19 )/22 # Sentences/23 (/26 (/30 e.new#7/28 )/31 (/34 e.new#8/32 )/35 )/27 e.new#9/16 )/11 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = 0;
    context[17] = 0;
    if( ! refalrts::brackets_term( context[16], context[17], context[10] ) )
      continue;
    context[18] = refalrts::ident_left( identifiers[ident_Function], context[16], context[17] );
    if( ! context[18] )
      continue;
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = refalrts::ident_left( identifiers[ident_Sentences], context[16], context[17] );
    if( ! context[23] )
      continue;
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[16], context[17] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[24], context[25] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    // closed e.new#11 as range 12
    // closed e.new#10 as range 14
    // closed e.new#6 as range 19
    // closed e.new#7 as range 28
    // closed e.new#8 as range 32
    // closed e.new#9 as range 16
    do {
      // </0 & DoOptSentence-MakeSubstitutions@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/36 )/9 e.Args0#1/38 (/10 # Function/18 (/21 e.Name#1/40 )/22 # Sentences/23 (/26 (/30 e.LS#1/42 )/31 (/34 (/50 # CallBrackets/52 (/55 # Symbol/57 # Name/58 '_'/59 '_'/60 'S'/61 't'/62 'e'/63 'p'/64 '-'/65 'D'/66 'r'/67 'o'/68 'p'/69 )/56 )/51 e.#0/44 )/35 )/27 e.Rest#1/46 )/11 >/1
      context[36] = context[12];
      context[37] = context[13];
      context[38] = context[14];
      context[39] = context[15];
      context[40] = context[19];
      context[41] = context[20];
      context[42] = context[28];
      context[43] = context[29];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[16];
      context[47] = context[17];
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[44], context[45] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = refalrts::ident_left( identifiers[ident_CallBrackets], context[48], context[49] );
      if( ! context[52] )
        continue;
      context[53] = 0;
      context[54] = 0;
      context[55] = refalrts::brackets_left( context[53], context[54], context[48], context[49] );
      if( ! context[55] )
        continue;
      refalrts::bracket_pointers(context[55], context[56]);
      context[57] = refalrts::ident_left( identifiers[ident_Symbol], context[53], context[54] );
      if( ! context[57] )
        continue;
      context[58] = refalrts::ident_left( identifiers[ident_Name], context[53], context[54] );
      if( ! context[58] )
        continue;
      context[59] = refalrts::char_left( '_', context[53], context[54] );
      if( ! context[59] )
        continue;
      context[60] = refalrts::char_left( '_', context[53], context[54] );
      if( ! context[60] )
        continue;
      context[61] = refalrts::char_left( 'S', context[53], context[54] );
      if( ! context[61] )
        continue;
      context[62] = refalrts::char_left( 't', context[53], context[54] );
      if( ! context[62] )
        continue;
      context[63] = refalrts::char_left( 'e', context[53], context[54] );
      if( ! context[63] )
        continue;
      context[64] = refalrts::char_left( 'p', context[53], context[54] );
      if( ! context[64] )
        continue;
      context[65] = refalrts::char_left( '-', context[53], context[54] );
      if( ! context[65] )
        continue;
      context[66] = refalrts::char_left( 'D', context[53], context[54] );
      if( ! context[66] )
        continue;
      context[67] = refalrts::char_left( 'r', context[53], context[54] );
      if( ! context[67] )
        continue;
      context[68] = refalrts::char_left( 'o', context[53], context[54] );
      if( ! context[68] )
        continue;
      context[69] = refalrts::char_left( 'p', context[53], context[54] );
      if( ! context[69] )
        continue;
      if( ! refalrts::empty_seq( context[53], context[54] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.SentenceVars#4 as range 36
      // closed e.Args0#1 as range 38
      // closed e.Name#1 as range 40
      // closed e.LS#1 as range 42
      // closed e.#0 as range 44
      // closed e.Rest#1 as range 46
      //DEBUG: s.DriveMode#5: 5
      //DEBUG: e.SentenceVars#4: 36
      //DEBUG: e.Args0#1: 38
      //DEBUG: e.Name#1: 40
      //DEBUG: e.LS#1: 42
      //DEBUG: e.#0: 44
      //DEBUG: e.Rest#1: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/57 # Name/58 '_'/59 {REMOVED TILE} 't'/62 'e'/63 'p'/64 '-'/65 'D'/66 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1@1/60 HalfReuse: (/61 } Tile{ AsIs: e.#0/44 } Tile{ HalfReuse: )/4 AsIs: s.DriveMode#5/5 AsIs: (/8 AsIs: e.SentenceVars#4/36 AsIs: )/9 } Tile{ AsIs: (/55 } Tile{ AsIs: e.Args0#1/38 } Tile{ AsIs: )/22 } Tile{ HalfReuse: (/69 } Tile{ AsIs: e.Name#1/40 } Tile{ AsIs: )/35 HalfReuse: (/27 AsIs: e.Rest#1/46 AsIs: )/11 HalfReuse: (/1 } e.LS#1/42/70 Tile{ HalfReuse: )/68 } Tile{ HalfReuse: </10 HalfReuse: & Solve/18 AsIs: (/21 } e.SentenceVars#4/36/72 Tile{ AsIs: )/56 HalfReuse: (/51 } Tile{ HalfReuse: (/67 } e.Args0#1/38/74 Tile{ HalfReuse: )/23 HalfReuse: ':'/26 AsIs: (/30 AsIs: e.LS#1/42 AsIs: )/31 HalfReuse: )/34 HalfReuse: >/50 HalfReuse: >/52 } Tile{ ]] }
      refalrts::copy_evar(vm, context[70], context[71], context[42], context[43]);
      refalrts::copy_evar(vm, context[72], context[73], context[36], context[37]);
      refalrts::copy_evar(vm, context[74], context[75], context[38], context[39]);
      refalrts::reinit_name(context[60], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1]);
      refalrts::reinit_open_bracket(context[61]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[69]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[68]);
      refalrts::reinit_open_call(context[10]);
      refalrts::reinit_name(context[18], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[51]);
      refalrts::reinit_open_bracket(context[67]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_char(context[26], ':');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_close_call(context[50]);
      refalrts::reinit_close_call(context[52]);
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[51], context[34] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[67], context[23] );
      refalrts::link_brackets( context[21], context[56] );
      refalrts::link_brackets( context[1], context[68] );
      refalrts::link_brackets( context[27], context[11] );
      refalrts::link_brackets( context[69], context[35] );
      refalrts::link_brackets( context[55], context[22] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[61], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[52] );
      res = refalrts::splice_evar( res, context[74], context[75] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[56], context[51] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_evar( res, context[10], context[21] );
      res = refalrts::splice_elem( res, context[68] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_evar( res, context[35], context[1] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[69] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[4], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/36 )/9 e.Args0#1/38 (/10 # Function/18 (/21 e.Name#1/40 )/22 # Sentences/23 (/26 (/30 e.LS#1/42 )/31 (/34 e.RS#1/44 )/35 )/27 e.Rest#1/46 )/11 >/1
    context[36] = context[12];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[15];
    context[40] = context[19];
    context[41] = context[20];
    context[42] = context[28];
    context[43] = context[29];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[16];
    context[47] = context[17];
    // closed e.SentenceVars#4 as range 36
    // closed e.Args0#1 as range 38
    // closed e.Name#1 as range 40
    // closed e.LS#1 as range 42
    // closed e.RS#1 as range 44
    // closed e.Rest#1 as range 46
    //DEBUG: s.DriveMode#5: 5
    //DEBUG: e.SentenceVars#4: 36
    //DEBUG: e.Args0#1: 38
    //DEBUG: e.Name#1: 40
    //DEBUG: e.LS#1: 42
    //DEBUG: e.RS#1: 44
    //DEBUG: e.Rest#1: 46

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptSentence-MakeSubstitutions$1:1@1/48 (/49 Tile{ AsIs: e.RS#1/44 } Tile{ HalfReuse: )/4 AsIs: s.DriveMode#5/5 AsIs: (/8 AsIs: e.SentenceVars#4/36 AsIs: )/9 } (/50 Tile{ AsIs: e.Args0#1/38 } Tile{ AsIs: )/22 } (/51 Tile{ AsIs: e.Name#1/40 } Tile{ AsIs: )/35 HalfReuse: (/27 AsIs: e.Rest#1/46 AsIs: )/11 HalfReuse: (/1 } e.LS#1/42/52 )/54 Tile{ HalfReuse: </10 HalfReuse: & Solve/18 AsIs: (/21 } e.SentenceVars#4/36/55 )/57 (/58 (/59 e.Args0#1/38/60 Tile{ HalfReuse: )/23 HalfReuse: ':'/26 AsIs: (/30 AsIs: e.LS#1/42 AsIs: )/31 HalfReuse: )/34 } >/62 >/63 Tile{ ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::copy_evar(vm, context[52], context[53], context[42], context[43]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_open_bracket(vm, context[59]);
    refalrts::copy_evar(vm, context[60], context[61], context[38], context[39]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_name(context[18], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[23]);
    refalrts::reinit_char(context[26], ':');
    refalrts::reinit_close_bracket(context[34]);
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[58], context[34] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[59], context[23] );
    refalrts::link_brackets( context[21], context[57] );
    refalrts::link_brackets( context[1], context[54] );
    refalrts::link_brackets( context[27], context[11] );
    refalrts::link_brackets( context[51], context[35] );
    refalrts::link_brackets( context[50], context[22] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[49], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[23], context[34] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[57], context[59] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[10], context[21] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[35], context[1] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[4], context[9] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/12 )/9 e.Args0#1/14 t.RestFunction#1/10 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.SentenceVars#4 as range 12
    // closed e.Args0#1 as range 14
    //DEBUG: t.RestFunction#1: 10
    //DEBUG: s.DriveMode#5: 5
    //DEBUG: e.SentenceVars#4: 12
    //DEBUG: e.Args0#1: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.DriveMode#5/5 (/8 e.SentenceVars#4/12 )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction#1/10 } Tile{ AsIs: e.Args0#1/14 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/6 )/9 e.Args0#1/2 t.dyn#0/10 >/1
  // closed e.SentenceVars#4 as range 6
  // closed e.Args0#1 as range 2
  //DEBUG: t.dyn#0: 10
  //DEBUG: s.DriveMode#5: 5
  //DEBUG: e.SentenceVars#4: 6
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@0/4 AsIs: s.DriveMode#5/5 AsIs: (/8 AsIs: e.SentenceVars#4/6 AsIs: )/9 } (/12 Tile{ AsIs: e.Args0#1/2 } )/13 (/14 )/15 Tile{ AsIs: t.dyn#0/10 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_Z1("DoOptSentence-MakeSubstitutions@1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & DoOptSentence-MakeSubstitutions@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.new#1/5 )/8 e.new#2/2 t.new#3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.new#9/11 )/8 e.new#8/13 (/9 # Function/17 (/20 e.new#4/18 )/21 # Sentences/22 (/25 (/29 e.new#5/27 )/30 (/33 e.new#6/31 )/34 )/26 e.new#7/15 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    if( ! refalrts::brackets_term( context[15], context[16], context[9] ) )
      continue;
    context[17] = refalrts::ident_left( identifiers[ident_Function], context[15], context[16] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[15], context[16] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = refalrts::ident_left( identifiers[ident_Sentences], context[15], context[16] );
    if( ! context[22] )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[15], context[16] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[23], context[24] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new#9 as range 11
    // closed e.new#8 as range 13
    // closed e.new#4 as range 18
    // closed e.new#5 as range 27
    // closed e.new#6 as range 31
    // closed e.new#7 as range 15
    do {
      // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.SentenceVars#4/35 )/8 e.Args0#1/37 (/9 # Function/17 (/20 e.Name#1/39 )/21 # Sentences/22 (/25 (/29 e.LS#1/41 )/30 (/33 (/49 # CallBrackets/51 (/54 # Symbol/56 # Name/57 '_'/58 '_'/59 'S'/60 't'/61 'e'/62 'p'/63 '-'/64 'D'/65 'r'/66 'o'/67 'p'/68 )/55 )/50 e.#0/43 )/34 )/26 e.Rest#1/45 )/10 >/1
      context[35] = context[11];
      context[36] = context[12];
      context[37] = context[13];
      context[38] = context[14];
      context[39] = context[18];
      context[40] = context[19];
      context[41] = context[27];
      context[42] = context[28];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[15];
      context[46] = context[16];
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[43], context[44] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_left( identifiers[ident_CallBrackets], context[47], context[48] );
      if( ! context[51] )
        continue;
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[47], context[48] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      context[56] = refalrts::ident_left( identifiers[ident_Symbol], context[52], context[53] );
      if( ! context[56] )
        continue;
      context[57] = refalrts::ident_left( identifiers[ident_Name], context[52], context[53] );
      if( ! context[57] )
        continue;
      context[58] = refalrts::char_left( '_', context[52], context[53] );
      if( ! context[58] )
        continue;
      context[59] = refalrts::char_left( '_', context[52], context[53] );
      if( ! context[59] )
        continue;
      context[60] = refalrts::char_left( 'S', context[52], context[53] );
      if( ! context[60] )
        continue;
      context[61] = refalrts::char_left( 't', context[52], context[53] );
      if( ! context[61] )
        continue;
      context[62] = refalrts::char_left( 'e', context[52], context[53] );
      if( ! context[62] )
        continue;
      context[63] = refalrts::char_left( 'p', context[52], context[53] );
      if( ! context[63] )
        continue;
      context[64] = refalrts::char_left( '-', context[52], context[53] );
      if( ! context[64] )
        continue;
      context[65] = refalrts::char_left( 'D', context[52], context[53] );
      if( ! context[65] )
        continue;
      context[66] = refalrts::char_left( 'r', context[52], context[53] );
      if( ! context[66] )
        continue;
      context[67] = refalrts::char_left( 'o', context[52], context[53] );
      if( ! context[67] )
        continue;
      context[68] = refalrts::char_left( 'p', context[52], context[53] );
      if( ! context[68] )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      // closed e.SentenceVars#4 as range 35
      // closed e.Args0#1 as range 37
      // closed e.Name#1 as range 39
      // closed e.LS#1 as range 41
      // closed e.#0 as range 43
      // closed e.Rest#1 as range 45
      //DEBUG: e.SentenceVars#4: 35
      //DEBUG: e.Args0#1: 37
      //DEBUG: e.Name#1: 39
      //DEBUG: e.LS#1: 41
      //DEBUG: e.#0: 43
      //DEBUG: e.Rest#1: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Name/57 '_'/58 '_'/59 'S'/60 't'/61 {REMOVED TILE} '-'/64 'D'/65 {REMOVED TILE} 'o'/67 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & DoOptSentence-MakeSubstitutions$1:1@2/17 AsIs: (/20 } Tile{ AsIs: e.#0/43 } Tile{ AsIs: )/21 } Tile{ HalfReuse: (/66 } e.SentenceVars#4/35/69 Tile{ AsIs: )/55 HalfReuse: (/50 } Tile{ AsIs: e.Args0#1/37 } Tile{ HalfReuse: )/62 HalfReuse: (/63 } Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/34 HalfReuse: (/26 AsIs: e.Rest#1/45 AsIs: )/10 HalfReuse: (/1 } e.LS#1/41/71 Tile{ HalfReuse: )/68 } Tile{ AsIs: </0 Reuse: & Solve/4 AsIs: (/7 AsIs: e.SentenceVars#4/35 AsIs: )/8 } Tile{ AsIs: (/54 HalfReuse: (/56 } e.Args0#1/37/73 Tile{ HalfReuse: )/22 HalfReuse: ':'/25 AsIs: (/29 AsIs: e.LS#1/41 AsIs: )/30 HalfReuse: )/33 HalfReuse: >/49 HalfReuse: >/51 } Tile{ ]] }
      refalrts::copy_evar(vm, context[69], context[70], context[35], context[36]);
      refalrts::copy_evar(vm, context[71], context[72], context[41], context[42]);
      refalrts::copy_evar(vm, context[73], context[74], context[37], context[38]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[17], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2]);
      refalrts::reinit_open_bracket(context[66]);
      refalrts::reinit_open_bracket(context[50]);
      refalrts::reinit_close_bracket(context[62]);
      refalrts::reinit_open_bracket(context[63]);
      refalrts::reinit_open_bracket(context[26]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[68]);
      refalrts::update_name(context[4], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[56]);
      refalrts::reinit_close_bracket(context[22]);
      refalrts::reinit_char(context[25], ':');
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_close_call(context[49]);
      refalrts::reinit_close_call(context[51]);
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[54], context[33] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[56], context[22] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[1], context[68] );
      refalrts::link_brackets( context[26], context[10] );
      refalrts::link_brackets( context[63], context[34] );
      refalrts::link_brackets( context[50], context[62] );
      refalrts::link_brackets( context[66], context[55] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[51] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[68] );
      res = refalrts::splice_evar( res, context[71], context[72] );
      res = refalrts::splice_evar( res, context[34], context[1] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[55], context[50] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[9], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.SentenceVars#4/35 )/8 e.Args0#1/37 (/9 # Function/17 (/20 e.Name#1/39 )/21 # Sentences/22 (/25 (/29 e.LS#1/41 )/30 (/33 e.RS#1/43 )/34 )/26 e.Rest#1/45 )/10 >/1
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[18];
    context[40] = context[19];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[15];
    context[46] = context[16];
    // closed e.SentenceVars#4 as range 35
    // closed e.Args0#1 as range 37
    // closed e.Name#1 as range 39
    // closed e.LS#1 as range 41
    // closed e.RS#1 as range 43
    // closed e.Rest#1 as range 45
    //DEBUG: e.SentenceVars#4: 35
    //DEBUG: e.Args0#1: 37
    //DEBUG: e.Name#1: 39
    //DEBUG: e.LS#1: 41
    //DEBUG: e.RS#1: 43
    //DEBUG: e.Rest#1: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & DoOptSentence-MakeSubstitutions$1:1@2/17 AsIs: (/20 } Tile{ AsIs: e.RS#1/43 } Tile{ AsIs: )/21 } (/47 e.SentenceVars#4/35/48 )/50 (/51 Tile{ AsIs: e.Args0#1/37 } )/52 (/53 Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/34 HalfReuse: (/26 AsIs: e.Rest#1/45 AsIs: )/10 HalfReuse: (/1 } e.LS#1/41/54 )/56 Tile{ AsIs: </0 Reuse: & Solve/4 AsIs: (/7 AsIs: e.SentenceVars#4/35 AsIs: )/8 } (/57 (/58 e.Args0#1/37/59 Tile{ HalfReuse: )/22 HalfReuse: ':'/25 AsIs: (/29 AsIs: e.LS#1/41 AsIs: )/30 HalfReuse: )/33 } >/61 >/62 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_evar(vm, context[48], context[49], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::copy_evar(vm, context[59], context[60], context[37], context[38]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[17], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::update_name(context[4], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[22]);
    refalrts::reinit_char(context[25], ':');
    refalrts::reinit_close_bracket(context[33]);
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[57], context[33] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[58], context[22] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[1], context[56] );
    refalrts::link_brackets( context[26], context[10] );
    refalrts::link_brackets( context[53], context[34] );
    refalrts::link_brackets( context[51], context[52] );
    refalrts::link_brackets( context[47], context[50] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[22], context[33] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[34], context[1] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[47], context[51] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.SentenceVars#4/11 )/8 e.Args0#1/13 t.RestFunction#1/9 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.SentenceVars#4 as range 11
    // closed e.Args0#1 as range 13
    //DEBUG: t.RestFunction#1: 9
    //DEBUG: e.SentenceVars#4: 11
    //DEBUG: e.Args0#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 e.SentenceVars#4/11 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction#1/9 } Tile{ AsIs: e.Args0#1/13 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions@2/4 (/7 e.SentenceVars#4/5 )/8 e.Args0#1/2 t.dyn#0/9 >/1
  // closed e.SentenceVars#4 as range 5
  // closed e.Args0#1 as range 2
  //DEBUG: t.dyn#0: 9
  //DEBUG: e.SentenceVars#4: 5
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.SentenceVars#4/5 AsIs: )/8 } (/12 Tile{ AsIs: e.Args0#1/2 } )/13 (/14 )/15 Tile{ AsIs: t.dyn#0/9 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_Z2("DoOptSentence-MakeSubstitutions@2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_Z2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 92 elems
  refalrts::Iter context[92];
  refalrts::zeros( context, 92 );
  // </0 & DoOptSentence-MakeSubstitutions@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions@3/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 t.new#6/18 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  context[19] = refalrts::tvar_right( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions@3/4 s.new#7/5 (/8 e.new#13/20 )/9 (/12 e.new#14/22 )/13 (/16 e.new#15/24 )/17 e.new#12/26 (/18 # Function/30 (/33 e.new#8/31 )/34 # Sentences/35 (/38 (/42 e.new#9/40 )/43 (/46 e.new#10/44 )/47 )/39 e.new#11/28 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    if( ! refalrts::brackets_term( context[28], context[29], context[18] ) )
      continue;
    context[30] = refalrts::ident_left( identifiers[ident_Function], context[28], context[29] );
    if( ! context[30] )
      continue;
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[28], context[29] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    context[35] = refalrts::ident_left( identifiers[ident_Sentences], context[28], context[29] );
    if( ! context[35] )
      continue;
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[28], context[29] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[36], context[37] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[36], context[37] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    // closed e.new#13 as range 20
    // closed e.new#14 as range 22
    // closed e.new#15 as range 24
    // closed e.new#12 as range 26
    // closed e.new#8 as range 31
    // closed e.new#9 as range 40
    // closed e.new#10 as range 44
    // closed e.new#11 as range 28
    do {
      // </0 & DoOptSentence-MakeSubstitutions@3/4 s.Mode0#1/5 (/8 e.SentenceVars0#1/48 )/9 (/12 e.Args0#1/50 )/13 (/16 e.Substitutions0#1/52 )/17 e.NewSubsts#5/54 (/18 # Function/30 (/33 e.Name#1/56 )/34 # Sentences/35 (/38 (/42 e.LS#1/58 )/43 (/46 (/66 # CallBrackets/68 (/71 # Symbol/73 # Name/74 '_'/75 '_'/76 'S'/77 't'/78 'e'/79 'p'/80 '-'/81 'D'/82 'r'/83 'o'/84 'p'/85 )/72 )/67 e.#0/60 )/47 )/39 e.Rest#1/62 )/19 >/1
      context[48] = context[20];
      context[49] = context[21];
      context[50] = context[22];
      context[51] = context[23];
      context[52] = context[24];
      context[53] = context[25];
      context[54] = context[26];
      context[55] = context[27];
      context[56] = context[31];
      context[57] = context[32];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[28];
      context[63] = context[29];
      context[64] = 0;
      context[65] = 0;
      context[66] = refalrts::brackets_left( context[64], context[65], context[60], context[61] );
      if( ! context[66] )
        continue;
      refalrts::bracket_pointers(context[66], context[67]);
      context[68] = refalrts::ident_left( identifiers[ident_CallBrackets], context[64], context[65] );
      if( ! context[68] )
        continue;
      context[69] = 0;
      context[70] = 0;
      context[71] = refalrts::brackets_left( context[69], context[70], context[64], context[65] );
      if( ! context[71] )
        continue;
      refalrts::bracket_pointers(context[71], context[72]);
      context[73] = refalrts::ident_left( identifiers[ident_Symbol], context[69], context[70] );
      if( ! context[73] )
        continue;
      context[74] = refalrts::ident_left( identifiers[ident_Name], context[69], context[70] );
      if( ! context[74] )
        continue;
      context[75] = refalrts::char_left( '_', context[69], context[70] );
      if( ! context[75] )
        continue;
      context[76] = refalrts::char_left( '_', context[69], context[70] );
      if( ! context[76] )
        continue;
      context[77] = refalrts::char_left( 'S', context[69], context[70] );
      if( ! context[77] )
        continue;
      context[78] = refalrts::char_left( 't', context[69], context[70] );
      if( ! context[78] )
        continue;
      context[79] = refalrts::char_left( 'e', context[69], context[70] );
      if( ! context[79] )
        continue;
      context[80] = refalrts::char_left( 'p', context[69], context[70] );
      if( ! context[80] )
        continue;
      context[81] = refalrts::char_left( '-', context[69], context[70] );
      if( ! context[81] )
        continue;
      context[82] = refalrts::char_left( 'D', context[69], context[70] );
      if( ! context[82] )
        continue;
      context[83] = refalrts::char_left( 'r', context[69], context[70] );
      if( ! context[83] )
        continue;
      context[84] = refalrts::char_left( 'o', context[69], context[70] );
      if( ! context[84] )
        continue;
      context[85] = refalrts::char_left( 'p', context[69], context[70] );
      if( ! context[85] )
        continue;
      if( ! refalrts::empty_seq( context[69], context[70] ) )
        continue;
      if( ! refalrts::empty_seq( context[64], context[65] ) )
        continue;
      // closed e.SentenceVars0#1 as range 48
      // closed e.Args0#1 as range 50
      // closed e.Substitutions0#1 as range 52
      // closed e.NewSubsts#5 as range 54
      // closed e.Name#1 as range 56
      // closed e.LS#1 as range 58
      // closed e.#0 as range 60
      // closed e.Rest#1 as range 62
      //DEBUG: s.Mode0#1: 5
      //DEBUG: e.SentenceVars0#1: 48
      //DEBUG: e.Args0#1: 50
      //DEBUG: e.Substitutions0#1: 52
      //DEBUG: e.NewSubsts#5: 54
      //DEBUG: e.Name#1: 56
      //DEBUG: e.LS#1: 58
      //DEBUG: e.#0: 60
      //DEBUG: e.Rest#1: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Name/74 '_'/75 '_'/76 'S'/77 {REMOVED TILE} 'e'/79 'p'/80 '-'/81 'D'/82 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1@3/78 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Substitutions0#1/52 } Tile{ AsIs: )/34 } Tile{ HalfReuse: (/17 AsIs: e.NewSubsts#5/54 HalfReuse: )/18 HalfReuse: (/30 } Tile{ AsIs: e.#0/60 } Tile{ HalfReuse: )/4 AsIs: s.Mode0#1/5 AsIs: (/8 AsIs: e.SentenceVars0#1/48 AsIs: )/9 AsIs: (/12 AsIs: e.Args0#1/50 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name#1/56 } Tile{ AsIs: )/47 HalfReuse: (/39 AsIs: e.Rest#1/62 AsIs: )/19 HalfReuse: (/1 } e.LS#1/58/86 Tile{ HalfReuse: )/84 HalfReuse: </85 HalfReuse: & Solve/72 HalfReuse: (/67 } e.SentenceVars0#1/48/88 Tile{ HalfReuse: )/83 } Tile{ AsIs: (/71 HalfReuse: (/73 } e.Args0#1/50/90 Tile{ HalfReuse: )/35 HalfReuse: ':'/38 AsIs: (/42 AsIs: e.LS#1/58 AsIs: )/43 HalfReuse: )/46 HalfReuse: >/66 HalfReuse: >/68 } Tile{ ]] }
      refalrts::copy_evar(vm, context[86], context[87], context[58], context[59]);
      refalrts::copy_evar(vm, context[88], context[89], context[48], context[49]);
      refalrts::copy_evar(vm, context[90], context[91], context[50], context[51]);
      refalrts::reinit_name(context[78], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_bracket(context[30]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[84]);
      refalrts::reinit_open_call(context[85]);
      refalrts::reinit_name(context[72], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[67]);
      refalrts::reinit_close_bracket(context[83]);
      refalrts::reinit_open_bracket(context[73]);
      refalrts::reinit_close_bracket(context[35]);
      refalrts::reinit_char(context[38], ':');
      refalrts::reinit_close_bracket(context[46]);
      refalrts::reinit_close_call(context[66]);
      refalrts::reinit_close_call(context[68]);
      refalrts::push_stack( vm, context[68] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[85] );
      refalrts::link_brackets( context[71], context[46] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[73], context[35] );
      refalrts::link_brackets( context[67], context[83] );
      refalrts::link_brackets( context[1], context[84] );
      refalrts::link_brackets( context[39], context[19] );
      refalrts::link_brackets( context[16], context[47] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[68] );
      res = refalrts::splice_evar( res, context[90], context[91] );
      res = refalrts::splice_evar( res, context[71], context[73] );
      res = refalrts::splice_elem( res, context[83] );
      res = refalrts::splice_evar( res, context[88], context[89] );
      res = refalrts::splice_evar( res, context[84], context[67] );
      res = refalrts::splice_evar( res, context[86], context[87] );
      res = refalrts::splice_evar( res, context[47], context[1] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[4], context[16] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[17], context[30] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[78] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions@3/4 s.Mode0#1/5 (/8 e.SentenceVars0#1/48 )/9 (/12 e.Args0#1/50 )/13 (/16 e.Substitutions0#1/52 )/17 e.NewSubsts#5/54 (/18 # Function/30 (/33 e.Name#1/56 )/34 # Sentences/35 (/38 (/42 e.LS#1/58 )/43 (/46 e.RS#1/60 )/47 )/39 e.Rest#1/62 )/19 >/1
    context[48] = context[20];
    context[49] = context[21];
    context[50] = context[22];
    context[51] = context[23];
    context[52] = context[24];
    context[53] = context[25];
    context[54] = context[26];
    context[55] = context[27];
    context[56] = context[31];
    context[57] = context[32];
    context[58] = context[40];
    context[59] = context[41];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[28];
    context[63] = context[29];
    // closed e.SentenceVars0#1 as range 48
    // closed e.Args0#1 as range 50
    // closed e.Substitutions0#1 as range 52
    // closed e.NewSubsts#5 as range 54
    // closed e.Name#1 as range 56
    // closed e.LS#1 as range 58
    // closed e.RS#1 as range 60
    // closed e.Rest#1 as range 62
    //DEBUG: s.Mode0#1: 5
    //DEBUG: e.SentenceVars0#1: 48
    //DEBUG: e.Args0#1: 50
    //DEBUG: e.Substitutions0#1: 52
    //DEBUG: e.NewSubsts#5: 54
    //DEBUG: e.Name#1: 56
    //DEBUG: e.LS#1: 58
    //DEBUG: e.RS#1: 60
    //DEBUG: e.Rest#1: 62

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptSentence-MakeSubstitutions$1:1@3/64 Tile{ AsIs: (/33 } Tile{ AsIs: e.Substitutions0#1/52 } Tile{ AsIs: )/34 } Tile{ HalfReuse: (/17 AsIs: e.NewSubsts#5/54 HalfReuse: )/18 HalfReuse: (/30 } Tile{ AsIs: e.RS#1/60 } Tile{ HalfReuse: )/4 AsIs: s.Mode0#1/5 AsIs: (/8 AsIs: e.SentenceVars0#1/48 AsIs: )/9 AsIs: (/12 AsIs: e.Args0#1/50 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name#1/56 } Tile{ AsIs: )/47 HalfReuse: (/39 AsIs: e.Rest#1/62 AsIs: )/19 HalfReuse: (/1 } e.LS#1/58/65 )/67 </68 & Solve/69 (/70 e.SentenceVars0#1/48/71 )/73 (/74 (/75 e.Args0#1/50/76 Tile{ HalfReuse: )/35 HalfReuse: ':'/38 AsIs: (/42 AsIs: e.LS#1/58 AsIs: )/43 HalfReuse: )/46 } >/78 >/79 Tile{ ]] }
    refalrts::alloc_name(vm, context[64], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3]);
    refalrts::copy_evar(vm, context[65], context[66], context[58], context[59]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_open_call(vm, context[68]);
    refalrts::alloc_name(vm, context[69], functions[efunc_Solve]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::copy_evar(vm, context[71], context[72], context[48], context[49]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_open_bracket(vm, context[74]);
    refalrts::alloc_open_bracket(vm, context[75]);
    refalrts::copy_evar(vm, context[76], context[77], context[50], context[51]);
    refalrts::alloc_close_call(vm, context[78]);
    refalrts::alloc_close_call(vm, context[79]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_close_bracket(context[18]);
    refalrts::reinit_open_bracket(context[30]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[39]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_close_bracket(context[35]);
    refalrts::reinit_char(context[38], ':');
    refalrts::reinit_close_bracket(context[46]);
    refalrts::push_stack( vm, context[79] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[78] );
    refalrts::push_stack( vm, context[68] );
    refalrts::link_brackets( context[74], context[46] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[75], context[35] );
    refalrts::link_brackets( context[70], context[73] );
    refalrts::link_brackets( context[1], context[67] );
    refalrts::link_brackets( context[39], context[19] );
    refalrts::link_brackets( context[16], context[47] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[78], context[79] );
    res = refalrts::splice_evar( res, context[35], context[46] );
    res = refalrts::splice_evar( res, context[76], context[77] );
    res = refalrts::splice_evar( res, context[67], context[75] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[47], context[1] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[4], context[16] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[17], context[30] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[64] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions@3/4 s.Mode0#1/5 (/8 e.SentenceVars0#1/20 )/9 (/12 e.Args0#1/22 )/13 (/16 e.Substitutions0#1/24 )/17 e.NewSubsts#5/26 t.RestFunction#1/18 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.SentenceVars0#1 as range 20
    // closed e.Args0#1 as range 22
    // closed e.Substitutions0#1 as range 24
    // closed e.NewSubsts#5 as range 26
    //DEBUG: t.RestFunction#1: 18
    //DEBUG: s.Mode0#1: 5
    //DEBUG: e.SentenceVars0#1: 20
    //DEBUG: e.Args0#1: 22
    //DEBUG: e.Substitutions0#1: 24
    //DEBUG: e.NewSubsts#5: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode0#1/5 (/8 e.SentenceVars0#1/20 )/9 (/12 {REMOVED TILE} )/13 (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0#1/24 } Tile{ AsIs: e.NewSubsts#5/26 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction#1/18 } Tile{ AsIs: e.Args0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions@3/4 s.Mode0#1/5 (/8 e.SentenceVars0#1/6 )/9 (/12 e.Args0#1/10 )/13 (/16 e.Substitutions0#1/14 )/17 e.NewSubsts#5/2 t.dyn#0/18 >/1
  // closed e.SentenceVars0#1 as range 6
  // closed e.Args0#1 as range 10
  // closed e.Substitutions0#1 as range 14
  // closed e.NewSubsts#5 as range 2
  //DEBUG: t.dyn#0: 18
  //DEBUG: s.Mode0#1: 5
  //DEBUG: e.SentenceVars0#1: 6
  //DEBUG: e.Args0#1: 10
  //DEBUG: e.Substitutions0#1: 14
  //DEBUG: e.NewSubsts#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@0/4 AsIs: s.Mode0#1/5 AsIs: (/8 AsIs: e.SentenceVars0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args0#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Substitutions0#1/14 } Tile{ AsIs: e.NewSubsts#5/2 } Tile{ AsIs: )/17 } Tile{ AsIs: t.dyn#0/18 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_Z3("DoOptSentence-MakeSubstitutions@3", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_Z3);


static refalrts::FnResult func_gen_Map_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@13/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@13/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@13/4 (/7 e.new#9/15 )/8 (/13 s.new#6/21 e.new#7/19 )/14 e.new#8/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new#9 as range 15
      // closed e.new#8 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new#7 as range 19
      do {
        // </0 & Map@13/4 (/7 e.Assigns#5/22 )/8 (/13 # Brackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
          continue;
        // closed e.Assigns#5 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Assigns#5: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Brackets/21 } Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@13/31 (/32 e.Assigns#5/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z13]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@13/4 (/7 e.Assigns#5/22 )/8 (/13 # CallBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
          continue;
        // closed e.Assigns#5 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Assigns#5: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # CallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@13/31 (/32 e.Assigns#5/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z13]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@13/4 (/7 e.Assigns#5/22 )/8 (/13 # ColdCallBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[21] ) )
          continue;
        // closed e.Assigns#5 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Assigns#5: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ColdCallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@13/31 (/32 e.Assigns#5/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z13]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@13/4 (/7 e.Assigns#5/22 )/8 (/13 # ClosureBrackets/21 e.0#0/24 )/14 e.Tail#1/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[21] ) )
          continue;
        // closed e.Assigns#5 as range 22
        // closed e.0#0 as range 24
        // closed e.Tail#1 as range 26
        //DEBUG: e.Assigns#5: 22
        //DEBUG: e.0#0: 24
        //DEBUG: e.Tail#1: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ClosureBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/22 AsIs: )/8 } Tile{ AsIs: e.0#0/24 } >/28 )/29 </30 & Map@13/31 (/32 e.Assigns#5/22/33 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z13]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@13/4 (/7 e.Assigns#5/22 )/8 (/13 # ADT-Brackets/21 (/30 e.2#0/28 )/31 e.1#0/24 )/14 e.Tail#1/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[19];
      context[25] = context[20];
      context[26] = context[17];
      context[27] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.Assigns#5 as range 22
      // closed e.2#0 as range 28
      // closed e.1#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: e.Assigns#5: 22
      //DEBUG: e.2#0: 28
      //DEBUG: e.1#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/21 AsIs: (/30 AsIs: e.2#0/28 AsIs: )/31 } Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/22 AsIs: )/8 } Tile{ AsIs: e.1#0/24 } >/32 )/33 </34 & Map@13/35 (/36 e.Assigns#5/22/37 Tile{ AsIs: )/14 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[14] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[13], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@13/4 (/7 e.Assigns#5/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Assigns#5 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.Assigns#5: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & ApplyAssigns-Term*5/20 Tile{ AsIs: t.Next#1/13 } (/21 e.Assigns#5/15/22 )/24 >/25 Tile{ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.Assigns#5/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ApplyAssignsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@13/4 (/7 e.Assigns#5/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Assigns#5 as range 9
    //DEBUG: e.Assigns#5: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@13/4 (/7 e.Assigns#5/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@13/4 (/7 e.Assigns#5/5 )/8 e.items#0/2 >/1
  // closed e.Assigns#5 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.Assigns#5: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplyAssigns\1@0/4 AsIs: (/7 AsIs: e.Assigns#5/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyAssigns_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z13("Map@13", COOKIE1_, COOKIE2_, func_gen_Map_Z13);


static refalrts::FnResult func_gen_Map_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Map@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@14/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@14/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@14/4 (/7 e.RS#2/15 )/8 (/13 (/23 e.1#0/21 )/24 (/27 e.3#0/25 )/28 )/14 e.Tail#1/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.RS#2 as range 15
      // closed e.1#0 as range 21
      // closed e.3#0 as range 25
      // closed e.Tail#1 as range 17
      //DEBUG: e.RS#2: 15
      //DEBUG: e.1#0: 21
      //DEBUG: e.3#0: 25
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2\1=1/13 AsIs: (/23 AsIs: e.1#0/21 AsIs: )/24 HalfReuse: </27 } & Map@13/29 (/30 Tile{ AsIs: e.3#0/25 } Tile{ AsIs: )/14 } e.RS#2/15/31 >/33 >/34 Tile{ AsIs: </0 AsIs: & Map@14/4 AsIs: (/7 AsIs: e.RS#2/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_call(context[28]);
      refalrts::reinit_name(context[13], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1A1]);
      refalrts::reinit_open_call(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[30], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[13], context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@14/4 (/7 e.RS#2/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.RS#2 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.RS#2: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$2=2\1*1/4 AsIs: (/7 AsIs: e.RS#2/15 AsIs: )/8 AsIs: t.Next#1/13 } >/19 </20 & Map@14/21 (/22 e.RS#2/15/23 )/25 Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z14]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@14/4 (/7 e.RS#2/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.RS#2 as range 9
    //DEBUG: e.RS#2: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@14/4 (/7 e.RS#2/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@14/4 (/7 e.RS#2/5 )/8 e.items#0/2 >/1
  // closed e.RS#2 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.RS#2: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$2=2\1@0/4 AsIs: (/7 AsIs: e.RS#2/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z14("Map@14", COOKIE1_, COOKIE2_, func_gen_Map_Z14);


static refalrts::FnResult func_gen_MakeColdSolution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & MakeColdSolution@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeColdSolution@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & MakeColdSolution@1/4 (/7 e.Name0#1/21 )/8 (/11 e.LS#1/23 )/12 (/15 e.RS#2/25 )/16 (/19 e.Rest#1/27 )/20 e.Args0#1/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Name0#1 as range 21
    // closed e.LS#1 as range 23
    // closed e.RS#2 as range 25
    // closed e.Rest#1 as range 27
    // closed e.Args0#1 as range 29
    //DEBUG: e.Name0#1: 21
    //DEBUG: e.LS#1: 23
    //DEBUG: e.RS#2: 25
    //DEBUG: e.Rest#1: 27
    //DEBUG: e.Args0#1: 29
    //21: e.Name0#1
    //23: e.LS#1
    //25: e.RS#2
    //27: e.Rest#1
    //29: e.Args0#1
    //34: e.Name0#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_MakeColdSolution_Z1S1C1]);
    refalrts::copy_evar(vm, context[34], context[35], context[21], context[22]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[31] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </31 & MakeColdSolution@1$1?1/35 e.Prefix#2/33 '*'/37 s.Num#2/36 >/32
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::call_left( context[33], context[34], context[31], context[32] );
      if( ! refalrts::svar_right( context[36], context[33], context[34] ) )
        continue;
      context[37] = refalrts::char_right( '*', context[33], context[34] );
      if( ! context[37] )
        continue;
      // closed e.Prefix#2 as range 33
      //DEBUG: e.Name0#1: 21
      //DEBUG: e.LS#1: 23
      //DEBUG: e.RS#2: 25
      //DEBUG: e.Rest#1: 27
      //DEBUG: e.Args0#1: 29
      //DEBUG: s.Num#2: 36
      //DEBUG: e.Prefix#2: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Prefix#2/33 {REMOVED TILE} s.Num#2/36 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: </7 } & eDRIVEN/38 Tile{ HalfReuse: >/31 HalfReuse: ':'/35 } Tile{ HalfReuse: (/37 } # ColdCallBrackets/39 (/40 # Symbol/41 # Name/42 Tile{ AsIs: e.Name0#1/21 } )/43 Tile{ AsIs: e.Args0#1/29 } )/44 )/45 (/46 (/47 # NewFunction/48 # GN-Local/49 (/50 e.Name0#1/21/51 )/53 # Sentences/54 Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.LS#1/23 AsIs: )/12 AsIs: (/15 AsIs: e.RS#2/25 AsIs: )/16 HalfReuse: )/19 AsIs: e.Rest#1/27 AsIs: )/20 } Tile{ HalfReuse: )/32 HalfReuse: )/1 ]] }
      refalrts::alloc_name(vm, context[38], functions[efunc_eDRIVEN]);
      refalrts::alloc_ident(vm, context[39], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[42], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_NewFunction]);
      refalrts::alloc_ident(vm, context[49], identifiers[ident_GNm_Local]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_ident(vm, context[54], identifiers[ident_Sentences]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_call(context[31]);
      refalrts::reinit_char(context[35], ':');
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[46], context[32] );
      refalrts::link_brackets( context[47], context[20] );
      refalrts::link_brackets( context[8], context[19] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[50], context[53] );
      refalrts::link_brackets( context[4], context[45] );
      refalrts::link_brackets( context[37], context[44] );
      refalrts::link_brackets( context[40], context[43] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[32];
      res = refalrts::splice_evar( res, context[8], context[20] );
      res = refalrts::splice_evar( res, context[44], context[54] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[31], context[35] );
      res = refalrts::splice_elem( res, context[38] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[31], context[32]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & MakeColdSolution@1/4 (/7 e.Name0#1/21 )/8 (/11 e.LS#1/23 )/12 (/15 e.RS#2/25 )/16 (/19 e.Rest#1/27 )/20 e.Args0#1/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Name0#1 as range 21
    // closed e.LS#1 as range 23
    // closed e.RS#2 as range 25
    // closed e.Rest#1 as range 27
    // closed e.Args0#1 as range 29
    //DEBUG: e.Name0#1: 21
    //DEBUG: e.LS#1: 23
    //DEBUG: e.RS#2: 25
    //DEBUG: e.Rest#1: 27
    //DEBUG: e.Args0#1: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS#1/23 {REMOVED TILE} e.RS#2/25 {REMOVED TILE} e.Rest#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: (/15 } Tile{ AsIs: (/11 } # TkVariable/31 'e'/32 # DRIVEN/33 0/34 )/35 ':'/36 (/37 # ColdCallBrackets/38 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/7 AsIs: e.Name0#1/21 AsIs: )/8 } Tile{ AsIs: e.Args0#1/29 } Tile{ AsIs: )/20 } Tile{ AsIs: )/16 AsIs: (/19 } )/39 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[31], identifiers[ident_TkVariable]);
    refalrts::alloc_char(vm, context[32], 'e');
    refalrts::alloc_ident(vm, context[33], identifiers[ident_DRIVEN]);
    refalrts::alloc_number(vm, context[34], 0UL);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::alloc_char(vm, context[36], ':');
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_ColdCallBrackets]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::link_brackets( context[19], context[39] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[37], context[20] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[11], context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[31], context[38] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeColdSolution@1/4 (/7 e.Name0#1/5 )/8 (/11 e.LS#1/9 )/12 (/15 e.RS#2/13 )/16 (/19 e.Rest#1/17 )/20 e.Args0#1/2 >/1
  // closed e.Name0#1 as range 5
  // closed e.LS#1 as range 9
  // closed e.RS#2 as range 13
  // closed e.Rest#1 as range 17
  // closed e.Args0#1 as range 2
  //DEBUG: e.Name0#1: 5
  //DEBUG: e.LS#1: 9
  //DEBUG: e.RS#2: 13
  //DEBUG: e.Rest#1: 17
  //DEBUG: e.Args0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution@0/4 AsIs: (/7 } # Function/21 (/22 Tile{ AsIs: e.Name0#1/5 } )/23 # Sentences/24 Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.LS#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.RS#2/13 AsIs: )/16 HalfReuse: )/19 AsIs: e.Rest#1/17 AsIs: )/20 AsIs: e.Args0#1/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[21], identifiers[ident_Function]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Sentences]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeColdSolution_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::link_brackets( context[8], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeColdSolution_Z1("MakeColdSolution@1", COOKIE1_, COOKIE2_, func_gen_MakeColdSolution_Z1);


static refalrts::FnResult func_gen_Map_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Map@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@15/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 (/17 e.new#4/15 )/18 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 15
  // closed e.new#5 as range 2
  do {
    // </0 & Map@15/4 (/7 e.new#9/19 )/8 t.new#6/9 (/13 e.new#10/21 )/14 (/17 e.new#11/23 )/18 t.new#7/27 e.new#8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.new#9 as range 19
    // closed e.new#10 as range 21
    // closed e.new#11 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.new#8 as range 25
    do {
      // </0 & Map@15/4 (/7 e.new#16/29 )/8 t.new#12/9 (/13 e.new#17/31 )/14 (/17 e.new#18/33 )/18 (/27 s.new#13/39 e.new#14/37 )/28 e.new#15/35 >/1
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = 0;
      context[38] = 0;
      if( ! refalrts::brackets_term( context[37], context[38], context[27] ) )
        continue;
      // closed e.new#16 as range 29
      // closed e.new#17 as range 31
      // closed e.new#18 as range 33
      // closed e.new#15 as range 35
      if( ! refalrts::svar_left( context[39], context[37], context[38] ) )
        continue;
      // closed e.new#14 as range 37
      do {
        // </0 & Map@15/4 (/7 e.B#1/40 )/8 t.Term#1/9 (/13 e.Contr#1/42 )/14 (/17 e.E#1/44 )/18 (/27 # Brackets/39 e.0#0/46 )/28 e.Tail#1/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[39] ) )
          continue;
        // closed e.B#1 as range 40
        // closed e.Contr#1 as range 42
        // closed e.E#1 as range 44
        // closed e.0#0 as range 46
        // closed e.Tail#1 as range 48
        //DEBUG: t.Term#1: 9
        //DEBUG: e.B#1: 40
        //DEBUG: e.Contr#1: 42
        //DEBUG: e.E#1: 44
        //DEBUG: e.0#0: 46
        //DEBUG: e.Tail#1: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # Brackets/39 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/40 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/42 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/44 AsIs: )/18 } Tile{ AsIs: e.0#0/46 } >/50 )/51 </52 & Map@15/53 (/54 e.B#1/40/55 )/57 t.Term#1/9/58 (/60 e.Contr#1/42/61 )/63 (/64 e.E#1/44/65 Tile{ AsIs: )/28 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z15]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@15/4 (/7 e.B#1/40 )/8 t.Term#1/9 (/13 e.Contr#1/42 )/14 (/17 e.E#1/44 )/18 (/27 # CallBrackets/39 e.0#0/46 )/28 e.Tail#1/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[39] ) )
          continue;
        // closed e.B#1 as range 40
        // closed e.Contr#1 as range 42
        // closed e.E#1 as range 44
        // closed e.0#0 as range 46
        // closed e.Tail#1 as range 48
        //DEBUG: t.Term#1: 9
        //DEBUG: e.B#1: 40
        //DEBUG: e.Contr#1: 42
        //DEBUG: e.E#1: 44
        //DEBUG: e.0#0: 46
        //DEBUG: e.Tail#1: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # CallBrackets/39 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/40 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/42 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/44 AsIs: )/18 } Tile{ AsIs: e.0#0/46 } >/50 )/51 </52 & Map@15/53 (/54 e.B#1/40/55 )/57 t.Term#1/9/58 (/60 e.Contr#1/42/61 )/63 (/64 e.E#1/44/65 Tile{ AsIs: )/28 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z15]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@15/4 (/7 e.B#1/40 )/8 t.Term#1/9 (/13 e.Contr#1/42 )/14 (/17 e.E#1/44 )/18 (/27 # ColdCallBrackets/39 e.0#0/46 )/28 e.Tail#1/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[39] ) )
          continue;
        // closed e.B#1 as range 40
        // closed e.Contr#1 as range 42
        // closed e.E#1 as range 44
        // closed e.0#0 as range 46
        // closed e.Tail#1 as range 48
        //DEBUG: t.Term#1: 9
        //DEBUG: e.B#1: 40
        //DEBUG: e.Contr#1: 42
        //DEBUG: e.E#1: 44
        //DEBUG: e.0#0: 46
        //DEBUG: e.Tail#1: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </50 Tile{ HalfReuse: & ApplyContractions-Term$3:1/39 } Tile{ AsIs: (/27 } e.0#0/46/51 )/53 Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/40 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/42 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/44 AsIs: )/18 } Tile{ AsIs: e.0#0/46 } >/54 >/55 </56 & Map@15/57 (/58 e.B#1/40/59 )/61 t.Term#1/9/62 (/64 e.Contr#1/42/65 )/67 (/68 e.E#1/44/69 Tile{ AsIs: )/28 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::copy_evar(vm, context[51], context[52], context[46], context[47]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z15]);
        refalrts::alloc_open_bracket(vm, context[58]);
        refalrts::copy_evar(vm, context[59], context[60], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[61]);
        refalrts::copy_evar(vm, context[62], context[63], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::copy_evar(vm, context[69], context[70], context[44], context[45]);
        refalrts::reinit_name(context[39], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[56] );
        refalrts::link_brackets( context[68], context[28] );
        refalrts::link_brackets( context[64], context[67] );
        refalrts::link_brackets( context[58], context[61] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[27], context[53] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[54], context[68] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[50] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@15/4 (/7 e.B#1/40 )/8 t.Term#1/9 (/13 e.Contr#1/42 )/14 (/17 e.E#1/44 )/18 (/27 # ClosureBrackets/39 e.0#0/46 )/28 e.Tail#1/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[39] ) )
          continue;
        // closed e.B#1 as range 40
        // closed e.Contr#1 as range 42
        // closed e.E#1 as range 44
        // closed e.0#0 as range 46
        // closed e.Tail#1 as range 48
        //DEBUG: t.Term#1: 9
        //DEBUG: e.B#1: 40
        //DEBUG: e.Contr#1: 42
        //DEBUG: e.E#1: 44
        //DEBUG: e.0#0: 46
        //DEBUG: e.Tail#1: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # ClosureBrackets/39 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/40 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/42 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/44 AsIs: )/18 } Tile{ AsIs: e.0#0/46 } >/50 )/51 </52 & Map@15/53 (/54 e.B#1/40/55 )/57 t.Term#1/9/58 (/60 e.Contr#1/42/61 )/63 (/64 e.E#1/44/65 Tile{ AsIs: )/28 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z15]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@15/4 (/7 e.B#1/40 )/8 t.Term#1/9 (/13 e.Contr#1/42 )/14 (/17 e.E#1/44 )/18 (/27 # ADT-Brackets/39 (/52 e.2#0/50 )/53 e.1#0/46 )/28 e.Tail#1/48 >/1
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[37];
      context[47] = context[38];
      context[48] = context[35];
      context[49] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[39] ) )
        continue;
      context[50] = 0;
      context[51] = 0;
      context[52] = refalrts::brackets_left( context[50], context[51], context[46], context[47] );
      if( ! context[52] )
        continue;
      refalrts::bracket_pointers(context[52], context[53]);
      // closed e.B#1 as range 40
      // closed e.Contr#1 as range 42
      // closed e.E#1 as range 44
      // closed e.2#0 as range 50
      // closed e.1#0 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.Term#1: 9
      //DEBUG: e.B#1: 40
      //DEBUG: e.Contr#1: 42
      //DEBUG: e.E#1: 44
      //DEBUG: e.2#0: 50
      //DEBUG: e.1#0: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # ADT-Brackets/39 AsIs: (/52 AsIs: e.2#0/50 AsIs: )/53 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/40 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/42 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/44 AsIs: )/18 } Tile{ AsIs: e.1#0/46 } >/54 )/55 </56 & Map@15/57 (/58 e.B#1/40/59 )/61 t.Term#1/9/62 (/64 e.Contr#1/42/65 )/67 (/68 e.E#1/44/69 Tile{ AsIs: )/28 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z15]);
      refalrts::alloc_open_bracket(vm, context[58]);
      refalrts::copy_evar(vm, context[59], context[60], context[40], context[41]);
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[9], context[10]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::copy_evar(vm, context[65], context[66], context[42], context[43]);
      refalrts::alloc_close_bracket(vm, context[67]);
      refalrts::alloc_open_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[44], context[45]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[68], context[28] );
      refalrts::link_brackets( context[64], context[67] );
      refalrts::link_brackets( context[58], context[61] );
      refalrts::link_brackets( context[27], context[55] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[52], context[53] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[54], context[68] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[18] );
      res = refalrts::splice_evar( res, context[27], context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@15/4 (/7 e.B#1/29 )/8 t.Term#1/9 (/13 e.Contr#1/31 )/14 (/17 e.E#1/33 )/18 t.Next#1/27 e.Tail#1/35 >/1
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    // closed e.B#1 as range 29
    // closed e.Contr#1 as range 31
    // closed e.E#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: t.Term#1: 9
    //DEBUG: t.Next#1: 27
    //DEBUG: e.B#1: 29
    //DEBUG: e.Contr#1: 31
    //DEBUG: e.E#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & ApplyContractions-Term*5/38 Tile{ AsIs: t.Next#1/27 } (/39 e.B#1/29/40 (/42 t.Term#1/9/43 ':'/45 e.Contr#1/31/46 )/48 e.E#1/33/49 )/51 >/52 Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.B#1/29 AsIs: )/8 AsIs: t.Term#1/9 AsIs: (/13 AsIs: e.Contr#1/31 AsIs: )/14 AsIs: (/17 AsIs: e.E#1/33 AsIs: )/18 } Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_ApplyContractionsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[29], context[30]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_evar(vm, context[43], context[44], context[9], context[10]);
    refalrts::alloc_char(vm, context[45], ':');
    refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[39], context[51] );
    refalrts::link_brackets( context[42], context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[0], context[18] );
    res = refalrts::splice_evar( res, context[39], context[52] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@15/4 (/7 e.B#1/19 )/8 t.Term#1/9 (/13 e.Contr#1/21 )/14 (/17 e.E#1/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.B#1 as range 19
    // closed e.Contr#1 as range 21
    // closed e.E#1 as range 23
    //DEBUG: t.Term#1: 9
    //DEBUG: e.B#1: 19
    //DEBUG: e.Contr#1: 21
    //DEBUG: e.E#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@15/4 (/7 e.B#1/19 )/8 t.Term#1/9 (/13 e.Contr#1/21 )/14 (/17 e.E#1/23 )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@15/4 (/7 e.B#1/5 )/8 t.Term#1/9 (/13 e.Contr#1/11 )/14 (/17 e.E#1/15 )/18 e.items#0/2 >/1
  // closed e.B#1 as range 5
  // closed e.Contr#1 as range 11
  // closed e.E#1 as range 15
  // closed e.items#0 as range 2
  //DEBUG: t.Term#1: 9
  //DEBUG: e.B#1: 5
  //DEBUG: e.Contr#1: 11
  //DEBUG: e.E#1: 15
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } & Map@0/19 Tile{ HalfReuse: [*]/0 Reuse: & ApplyContractions\1@0/4 AsIs: (/7 AsIs: e.B#1/5 HalfReuse: (/8 AsIs: t.Term#1/9 HalfReuse: ':'/13 AsIs: e.Contr#1/11 AsIs: )/14 } Tile{ AsIs: e.E#1/15 } )/20 Tile{ HalfReuse: {*}/18 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyContractions_L1Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_char(context[13], ':');
  refalrts::reinit_unwrapped_closure(context[18], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::link_brackets( context[8], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[18] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z15("Map@15", COOKIE1_, COOKIE2_, func_gen_Map_Z15);


static refalrts::FnResult func_gen_Map_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@16/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@16/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/15 )/18 # Sentences/19 e.4#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = refalrts::ident_left( identifiers[ident_Sentences], context[11], context[12] );
      if( ! context[19] )
        continue;
      // closed e.3#0 as range 15
      // closed e.4#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.3#0: 15
      //DEBUG: e.4#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/15 AsIs: )/18 AsIs: # Sentences/19 } Tile{ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.4#0/11 } >/20 )/21 </22 Tile{ HalfReuse: & Map@16/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[7], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[20], context[22] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@16/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@16/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@16/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@16/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & OptTree-Drive-CleanupColdCalls\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_CleanupColdCalls_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z16("Map@16", COOKIE1_, COOKIE2_, func_gen_Map_Z16);


static refalrts::FnResult func_gen_Map_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Map@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@17/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@17/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@17/4 (/7 # Brackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & Map@17/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@17/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z17]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z17]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@17/4 (/7 # ADT-Brackets/13 (/20 e.2#0/18 )/21 e.1#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
        if( ! context[20] )
          continue;
        refalrts::bracket_pointers(context[20], context[21]);
        // closed e.2#0 as range 18
        // closed e.1#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.2#0: 18
        //DEBUG: e.1#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.2#0/18 AsIs: )/21 } Tile{ AsIs: </0 AsIs: & Map@17/4 } Tile{ AsIs: e.1#0/14 } >/22 )/23 </24 Tile{ HalfReuse: & Map@17/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@17/4 (/7 # CallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@17/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@17/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z17]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z17]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@17/4 (/7 # ColdCallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@17/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@17/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[0], context[18] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@17/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@17/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@17/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@17/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@17/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Term@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z17("Map@17", COOKIE1_, COOKIE2_, func_gen_Map_Z17);


static refalrts::FnResult func_gen_Map_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Map@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@18/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@18/4 (/7 # Condition/13 (/16 e.2#0/14 )/17 (/20 e.4#0/18 )/21 (/24 e.6#0/22 )/25 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Condition], context[11], context[12] );
      if( ! context[13] )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[11], context[12] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.2#0 as range 14
      // closed e.4#0 as range 18
      // closed e.6#0 as range 22
      // closed e.Tail#1 as range 9
      //DEBUG: e.2#0: 14
      //DEBUG: e.4#0: 18
      //DEBUG: e.6#0: 22
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Condition/13 AsIs: (/16 AsIs: e.2#0/14 AsIs: )/17 AsIs: (/20 } </26 & Map@17/27 Tile{ AsIs: e.4#0/18 } >/28 Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.6#0/22 AsIs: )/25 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@18/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@18/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupCold-Sentence\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@18/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z18]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@18/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@18/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@18/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Sentence\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z18("Map@18", COOKIE1_, COOKIE2_, func_gen_Map_Z18);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@3/4 t.new#1/5 e.new#2/2 t.new#3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn#1/5 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    //DEBUG: t.X#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/9 AsIs: t.X#0/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.X#0: 7
    //DEBUG: e.X#0: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: e.X#0/9 } Tile{ AsIs: t.X#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn#0/5 e.X#0/2 t.X#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@4/4 t.new#1/5 e.new#2/2 t.new#3/9 t.new#4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn#1/5 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/11 AsIs: t.X#0/9 AsIs: t.X0#0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure#1/15 e.Bounded#1/13 )/6 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded#1 as range 13
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: e.X#0: 11
    //DEBUG: t.Closure#1: 15
    //DEBUG: e.Bounded#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure#1/15 } Tile{ AsIs: e.Bounded#1/13 } Tile{ AsIs: e.X#0/11 } Tile{ AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn#0/5 e.X#0/2 t.X#0/9 t.X0#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 9
  //DEBUG: t.X0#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & UpdateDriveInfo=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & UpdateDriveInfo=1@1/4 (/9 e.Drives#2/7 )/10 e.AST#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.Drives#2 as range 7
    // closed e.AST#2 as range 5
    //DEBUG: e.Drives#2: 7
    //DEBUG: e.AST#2: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=2@1/4 AsIs: (/9 AsIs: e.Drives#2/7 AsIs: )/10 } </11 & DoExtractLabels@2/12 Tile{ AsIs: e.AST#2/5 } >/13 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoExtractLabels_Z2]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A2Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=1@1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & UpdateDriveInfo=1@0/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_UpdateDriveInfo_A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A1Z1("UpdateDriveInfo=1@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@11/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@11/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & FormatOptFunctions=1\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_FormatOptFunctions_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@11/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@11/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@11/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z11("DoMapAccum@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z11);


static refalrts::FnResult func_gen_UpdateDriveInfo_A21Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & UpdateDriveInfo=21@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=21@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 (/31 e.new#7/29 )/32 (/35 e.new#8/33 )/36 e.new#9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 29
  // closed e.new#8 as range 33
  // closed e.new#9 as range 2
  do {
    // </0 & UpdateDriveInfo=21@1/4 (/7 e.KnownFunctions0#1/37 )/8 (/11 e.OptFunctions0#21/39 )/12 (/15 e.AST0#16/41 )/16 (/19 e.KnownNames0#8/43 )/20 (/23 e.Drives#19/45 )/24 (/27 e.Inlines#18/47 )/28 (/31 e.Metatables#12/49 )/32 (/35 e.Intrinsics0#11/51 )/36 e.OptIntrinsicFuncs#22/53 >/1
    context[37] = context[5];
    context[38] = context[6];
    context[39] = context[9];
    context[40] = context[10];
    context[41] = context[13];
    context[42] = context[14];
    context[43] = context[17];
    context[44] = context[18];
    context[45] = context[21];
    context[46] = context[22];
    context[47] = context[25];
    context[48] = context[26];
    context[49] = context[29];
    context[50] = context[30];
    context[51] = context[33];
    context[52] = context[34];
    context[53] = context[2];
    context[54] = context[3];
    // closed e.KnownFunctions0#1 as range 37
    // closed e.OptFunctions0#21 as range 39
    // closed e.AST0#16 as range 41
    // closed e.KnownNames0#8 as range 43
    // closed e.Drives#19 as range 45
    // closed e.Inlines#18 as range 47
    // closed e.Metatables#12 as range 49
    // closed e.Intrinsics0#11 as range 51
    // closed e.OptIntrinsicFuncs#22 as range 53
    //DEBUG: e.KnownFunctions0#1: 37
    //DEBUG: e.OptFunctions0#21: 39
    //DEBUG: e.AST0#16: 41
    //DEBUG: e.KnownNames0#8: 43
    //DEBUG: e.Drives#19: 45
    //DEBUG: e.Inlines#18: 47
    //DEBUG: e.Metatables#12: 49
    //DEBUG: e.Intrinsics0#11: 51
    //DEBUG: e.OptIntrinsicFuncs#22: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/36 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=22/4 AsIs: (/7 AsIs: e.KnownFunctions0#1/37 AsIs: )/8 AsIs: (/11 AsIs: e.OptFunctions0#21/39 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.OptIntrinsicFuncs#22/53 } Tile{ AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.AST0#16/41 } Tile{ AsIs: )/24 HalfReuse: </27 } Tile{ HalfReuse: & DoHashSet/19 } Tile{ HalfReuse: </28 HalfReuse: & Map@5/31 } Tile{ AsIs: e.KnownNames0#8/43 } Tile{ AsIs: e.Drives#19/45 } Tile{ AsIs: e.Inlines#18/47 } Tile{ AsIs: e.Metatables#12/49 } Tile{ AsIs: e.Intrinsics0#11/51 } Tile{ HalfReuse: >/20 HalfReuse: >/23 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A22]);
    refalrts::reinit_open_call(context[27]);
    refalrts::reinit_name(context[19], functions[efunc_DoHashSet]);
    refalrts::reinit_open_call(context[28]);
    refalrts::reinit_name(context[31], functions[efunc_gen_Map_Z5]);
    refalrts::reinit_close_call(context[20]);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[35], context[24] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    refalrts::splice_to_freelist_open( vm, context[15], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=21@1/4 (/7 e.KnownFunctions0#1/5 )/8 (/11 e.OptFunctions0#21/9 )/12 (/15 e.AST0#16/13 )/16 (/19 e.KnownNames0#8/17 )/20 (/23 e.Drives#19/21 )/24 (/27 e.Inlines#18/25 )/28 (/31 e.Metatables#12/29 )/32 (/35 e.Intrinsics0#11/33 )/36 e.dyn#0/2 >/1
  // closed e.KnownFunctions0#1 as range 5
  // closed e.OptFunctions0#21 as range 9
  // closed e.AST0#16 as range 13
  // closed e.KnownNames0#8 as range 17
  // closed e.Drives#19 as range 21
  // closed e.Inlines#18 as range 25
  // closed e.Metatables#12 as range 29
  // closed e.Intrinsics0#11 as range 33
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownFunctions0#1: 5
  //DEBUG: e.OptFunctions0#21: 9
  //DEBUG: e.AST0#16: 13
  //DEBUG: e.KnownNames0#8: 17
  //DEBUG: e.Drives#19: 21
  //DEBUG: e.Inlines#18: 25
  //DEBUG: e.Metatables#12: 29
  //DEBUG: e.Intrinsics0#11: 33
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 (/31 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21@0/4 AsIs: (/7 AsIs: e.KnownFunctions0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptFunctions0#21/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST0#16/13 AsIs: )/16 AsIs: (/19 AsIs: e.KnownNames0#8/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Drives#19/21 } Tile{ AsIs: e.Inlines#18/25 } Tile{ AsIs: e.Metatables#12/29 } Tile{ AsIs: )/32 AsIs: (/35 AsIs: e.Intrinsics0#11/33 AsIs: )/36 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[23], context[32] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[32];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::splice_to_freelist_open( vm, context[23], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A21Z1("UpdateDriveInfo=21@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A21Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & MultiplyRemainderNames=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractFuncLengths\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractExtractableFunctions=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractExtractableFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractMetatableNames\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractMetatableNames_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_DoExtractLabels_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoExtractLabels@5/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoExtractLabels@5/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST-B#1/19 (/25 # Intrinsic/27 e.Name#1/23 )/26 e.AST-E#1/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Intrinsic], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name#1 as range 23
      // closed e.AST-E#1 as range 21
      //DEBUG: e.X#0: 13
      //DEBUG: e.X0#0: 15
      //DEBUG: e.AST-B#1: 19
      //DEBUG: e.Name#1: 23
      //DEBUG: e.AST-E#1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@5/4 AsIs: (/7 AsIs: e.X#0/13 HalfReuse: (/8 HalfReuse: # Intrinsic/11 } Tile{ AsIs: e.Name#1/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST-B#1/19 } Tile{ AsIs: )/26 AsIs: e.AST-E#1/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@5/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST#1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    // closed e.AST#1 as range 17
    //DEBUG: e.X#0: 13
    //DEBUG: e.X0#0: 15
    //DEBUG: e.AST#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@5/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X#0/13 AsIs: )/8 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST#1/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@5/4 (/7 e.X#0/5 )/8 (/11 e.X0#0/9 )/12 e.dyn#2/2 >/1
  // closed e.X#0 as range 5
  // closed e.X0#0 as range 9
  // closed e.dyn#2 as range 2
  //DEBUG: e.X#0: 5
  //DEBUG: e.X0#0: 9
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Intrinsic/4 AsIs: (/7 AsIs: e.X#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/9 AsIs: )/12 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z5("DoExtractLabels@5", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z5);


static refalrts::FnResult func_gen_DoExtractLabels_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoExtractLabels@6/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoExtractLabels@6/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST-B#1/19 (/25 # Inline/27 e.Name#1/23 )/26 e.AST-E#1/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Inline], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name#1 as range 23
      // closed e.AST-E#1 as range 21
      //DEBUG: e.X#0: 13
      //DEBUG: e.X0#0: 15
      //DEBUG: e.AST-B#1: 19
      //DEBUG: e.Name#1: 23
      //DEBUG: e.AST-E#1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@6/4 AsIs: (/7 AsIs: e.X#0/13 HalfReuse: (/8 HalfReuse: # Inline/11 } Tile{ AsIs: e.Name#1/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST-B#1/19 } Tile{ AsIs: )/26 AsIs: e.AST-E#1/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@6/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST#1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    // closed e.AST#1 as range 17
    //DEBUG: e.X#0: 13
    //DEBUG: e.X0#0: 15
    //DEBUG: e.AST#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@6/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X#0/13 AsIs: )/8 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST#1/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@6/4 (/7 e.X#0/5 )/8 (/11 e.X0#0/9 )/12 e.dyn#2/2 >/1
  // closed e.X#0 as range 5
  // closed e.X0#0 as range 9
  // closed e.dyn#2 as range 2
  //DEBUG: e.X#0: 5
  //DEBUG: e.X0#0: 9
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.X#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/9 AsIs: )/12 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z6("DoExtractLabels@6", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z6);


static refalrts::FnResult func_gen_DoExtractLabels_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoExtractLabels@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoExtractLabels@7/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST-B#1/19 (/25 # Drive/27 e.Name#1/23 )/26 e.AST-E#1/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Drive], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name#1 as range 23
      // closed e.AST-E#1 as range 21
      //DEBUG: e.X#0: 13
      //DEBUG: e.X0#0: 15
      //DEBUG: e.AST-B#1: 19
      //DEBUG: e.Name#1: 23
      //DEBUG: e.AST-E#1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@7/4 AsIs: (/7 AsIs: e.X#0/13 HalfReuse: (/8 HalfReuse: # Drive/11 } Tile{ AsIs: e.Name#1/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST-B#1/19 } Tile{ AsIs: )/26 AsIs: e.AST-E#1/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@7/4 (/7 e.X#0/13 )/8 (/11 e.X0#0/15 )/12 e.AST#1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X#0 as range 13
    // closed e.X0#0 as range 15
    // closed e.AST#1 as range 17
    //DEBUG: e.X#0: 13
    //DEBUG: e.X0#0: 15
    //DEBUG: e.AST#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@7/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X#0/13 AsIs: )/8 } Tile{ AsIs: e.X0#0/15 } Tile{ AsIs: e.AST#1/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@7/4 (/7 e.X#0/5 )/8 (/11 e.X0#0/9 )/12 e.dyn#2/2 >/1
  // closed e.X#0 as range 5
  // closed e.X0#0 as range 9
  // closed e.dyn#2 as range 2
  //DEBUG: e.X#0: 5
  //DEBUG: e.X0#0: 9
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Drive/4 AsIs: (/7 AsIs: e.X#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/9 AsIs: )/12 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z7("DoExtractLabels@7", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z7);


static refalrts::FnResult func_gen_GenRemainderFuncNames_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & GenRemainderFuncNames@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenRemainderFuncNames@2/4 s.new#1/5 e.new#2/2 s.new#3/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0#2/5 e.OptName#2/7 0/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::number_term( 0UL, context[6] ) )
      continue;
    // closed e.OptName#2 as range 7
    //DEBUG: s.Label0#2: 5
    //DEBUG: e.OptName#2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenRemainderFuncNames@2/4 s.Label0#2/5 e.OptName#2/7 0/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0#2/5 e.OptName#2/7 1/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::number_term( 1UL, context[6] ) )
      continue;
    // closed e.OptName#2 as range 7
    //DEBUG: s.Label0#2: 5
    //DEBUG: e.OptName#2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.Label0#2/5 AsIs: e.OptName#2/7 HalfReuse: )/6 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[6]);
    refalrts::link_brackets( context[4], context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0#2/5 e.OptName#2/7 s.End#1/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.OptName#2 as range 7
    //DEBUG: s.Label0#2: 5
    //DEBUG: s.End#1: 6
    //DEBUG: e.OptName#2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/9 s.Label0#2/5/10 Tile{ AsIs: e.OptName#2/7 } )/11 (/12 s.Label0#2/5/13 </14 & AddStarSuffix*1/15 e.OptName#2/7/16 1/18 >/19 )/20 Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames/4 AsIs: s.Label0#2/5 } e.OptName#2/7/21 2/23 Tile{ AsIs: s.End#1/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::copy_stvar(vm, context[10], context[5]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::copy_stvar(vm, context[13], context[5]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_AddStarSuffix_D1]);
    refalrts::copy_evar(vm, context[16], context[17], context[7], context[8]);
    refalrts::alloc_number(vm, context[18], 1UL);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[7], context[8]);
    refalrts::alloc_number(vm, context[23], 2UL);
    refalrts::update_name(context[4], functions[efunc_GenRemainderFuncNames]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[6];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[11], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenRemainderFuncNames@2/4 s.Label0#2/5 e.OptName#2/2 s.dyn#2/6 >/1
  // closed e.OptName#2 as range 2
  //DEBUG: s.Label0#2: 5
  //DEBUG: s.dyn#2: 6
  //DEBUG: e.OptName#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenRemainderFuncNames@0/4 AsIs: s.Label0#2/5 } Tile{ AsIs: e.OptName#2/2 } 0/7 Tile{ AsIs: s.dyn#2/6 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[7], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_GenRemainderFuncNames_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenRemainderFuncNames_Z2("GenRemainderFuncNames@2", COOKIE1_, COOKIE2_, func_gen_GenRemainderFuncNames_Z2);


static refalrts::FnResult func_gen_DoHashSetm_DoFillBucket_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & DoHashSet-DoFillBucket@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.Names-OtherHash#1/20 (/26 s.X#0/28 e.Name#1/24 )/27 e.UnscannedNames#1/22 )/8 s.X#0/9 (/12 e.X#0/16 )/13 e.X0#0/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.X#0 as range 16
    // closed e.X0#0 as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[14];
      context[23] = context[15];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[9], context[24], context[25] ) )
        continue;
      // closed e.Name#1 as range 24
      // closed e.UnscannedNames#1 as range 22
      //DEBUG: s.X#0: 9
      //DEBUG: e.X#0: 16
      //DEBUG: e.X0#0: 18
      //DEBUG: e.Names-OtherHash#1: 20
      //DEBUG: e.Name#1: 24
      //DEBUG: e.UnscannedNames#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/20 } Tile{ AsIs: </0 AsIs: & DoHashSet-DoFillBucket@2/4 } Tile{ HalfReuse: (/27 AsIs: e.UnscannedNames#1/22 AsIs: )/8 AsIs: s.X#0/9 AsIs: (/12 AsIs: e.X#0/16 HalfReuse: (/13 AsIs: e.X0#0/18 HalfReuse: )/1 } Tile{ HalfReuse: )/26 } Tile{ AsIs: e.Name#1/24 } Tile{ HalfReuse: >/7 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[26] );
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[27], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.Names-OtherHash#1/14 )/8 s.X#0/9 (/12 e.X#0/16 )/13 e.X0#0/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Names-OtherHash#1 as range 14
    // closed e.X#0 as range 16
    // closed e.X0#0 as range 18
    //DEBUG: s.X#0: 9
    //DEBUG: e.Names-OtherHash#1: 14
    //DEBUG: e.X#0: 16
    //DEBUG: e.X0#0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoHashSet-DoFillBucket@2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash#1/14 } Tile{ AsIs: (/7 } Tile{ HalfReuse: s.X0 #9/12 AsIs: e.X#0/16 HalfReuse: (/13 AsIs: e.X0#0/18 HalfReuse: )/1 } Tile{ AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_svar( context[12], context[9] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[13], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.dyn#0/5 )/8 s.X#0/9 (/12 e.X#0/10 )/13 e.X0#0/2 >/1
  // closed e.dyn#0 as range 5
  // closed e.X#0 as range 10
  // closed e.X0#0 as range 2
  //DEBUG: s.X#0: 9
  //DEBUG: e.dyn#0: 5
  //DEBUG: e.X#0: 10
  //DEBUG: e.X0#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoHashSet-DoFillBucket@0/4 } Tile{ AsIs: e.dyn#0/5 } Tile{ AsIs: (/7 } Tile{ HalfReuse: s.X0 #9/12 AsIs: e.X#0/10 HalfReuse: (/13 AsIs: e.X0#0/2 HalfReuse: )/1 } Tile{ AsIs: )/8 } >/14 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoHashSetm_DoFillBucket_Z0]);
  refalrts::reinit_svar( context[12], context[9] );
  refalrts::reinit_open_bracket(context[13]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSetm_DoFillBucket_Z2("DoHashSet-DoFillBucket@2", COOKIE1_, COOKIE2_, func_gen_DoHashSetm_DoFillBucket_Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@5/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & DriveInlineOptimizerTick=5\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@6/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@6/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@6/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & DriveInlineOptimizerTick=4\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z6("DoMapAccum$1=1@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z6);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Reduce$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce$1=1@1/4 t.Mode#2/5 (/9 e.Tail0#1/11 )/10 t.Acc#2/15 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Tail0#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: t.Mode#2: 5
    //DEBUG: e.Tail0#1: 11
    //DEBUG: t.Acc#2: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 AsIs: t.Mode#2/5 } Tile{ AsIs: t.Acc#2/15 } Tile{ AsIs: e.Tail0#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 t.Mode#2/5 (/9 e.Tail0#1/7 )/10 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 7
  // closed e.dyn#0 as range 2
  //DEBUG: t.Mode#2: 5
  //DEBUG: e.Tail0#1: 7
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 } [*]/11 & OptFunction\1@0/12 Tile{ AsIs: t.Mode#2/5 } {*}/13 Tile{ AsIs: (/9 AsIs: e.Tail0#1/7 AsIs: )/10 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoMapAccum$1=1@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@7/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@7/4 t.Mode#2/5 (/9 e.Scanned0#1/15 )/10 (/13 e.Tail0#1/17 )/14 t.Acc#2/21 e.StepScanned#2/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Scanned0#1 as range 15
    // closed e.Tail0#1 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.StepScanned#2 as range 19
    //DEBUG: t.Mode#2: 5
    //DEBUG: e.Scanned0#1: 15
    //DEBUG: e.Tail0#1: 17
    //DEBUG: t.Acc#2: 21
    //DEBUG: e.StepScanned#2: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: t.Mode#2/5 } Tile{ AsIs: t.Acc#2/21 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned0#1/15 } Tile{ AsIs: e.StepScanned#2/19 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail0#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@7/4 t.Mode#2/5 (/9 e.Scanned0#1/7 )/10 (/13 e.Tail0#1/11 )/14 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 7
  // closed e.Tail0#1 as range 11
  // closed e.dyn#0 as range 2
  //DEBUG: t.Mode#2: 5
  //DEBUG: e.Scanned0#1: 7
  //DEBUG: e.Tail0#1: 11
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } [*]/15 & DriveInlineOptimizerTick=3\1@0/16 Tile{ AsIs: t.Mode#2/5 } {*}/17 Tile{ AsIs: (/9 AsIs: e.Scanned0#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.Tail0#1/11 AsIs: )/14 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[17], context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[17] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z7("DoMapAccum$1=1@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@8/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@8/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & WithMetatables\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_WithMetatables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z8("DoMapAccum$1=1@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@12/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@12/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@12/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@3/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z3]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@12/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@12/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@12/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@12/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z12("DoMapAccum@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z12);


static refalrts::FnResult func_gen_DoMapAccum_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@13/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@13/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@13/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@4/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z4]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@13/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@13/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@13/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@13/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@13/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z13("DoMapAccum@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z13);


static refalrts::FnResult func_gen_DoMapAccum_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@14/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@14/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@14/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@5/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z5]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@14/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@14/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@14/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@14/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@14/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z14("DoMapAccum@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@15/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@15/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@15/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@6/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z6]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@15/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@15/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@15/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@15/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@15/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z15("DoMapAccum@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z15);


static refalrts::FnResult func_gen_DoMapAccum_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@16/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@16/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@16/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@7/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z7]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@16/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@16/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@16/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@16/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z16("DoMapAccum@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z16);


static refalrts::FnResult func_gen_DoMapAccum_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@17/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@17/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@17/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@8/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z8]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@17/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@17/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@17/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@17/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@17/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z17("DoMapAccum@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z17);


static refalrts::FnResult func_gen_DoMapAccum_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@18/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@18/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@18/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@18/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@9/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z9]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z18]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@18/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@18/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@18/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@18/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@18/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z18("DoMapAccum@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z18);


static refalrts::FnResult func_gen_DoMapAccum_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@19/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@19/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@19/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@19/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@10/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z10]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z19]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@19/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@19/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@19/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@19/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@19/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z19("DoMapAccum@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z19);


static refalrts::FnResult func_gen_DoMapAccum_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@20/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@20/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@20/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@20/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@11/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z11]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z20]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@20/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@20/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@20/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@20/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@20/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z20("DoMapAccum@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z20);


static refalrts::FnResult func_gen_DoMapAccum_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@21/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@21/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@21/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@12/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z12]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@21/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@21/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@21/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@21/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z21("DoMapAccum@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z21);


static refalrts::FnResult func_gen_DoMapAccum_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@22/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@22/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@22/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@13/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z13]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@22/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@22/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@22/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@22/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z22("DoMapAccum@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z22);


static refalrts::FnResult func_gen_DoMapAccum_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@23/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@23/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@23/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@23/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@23/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@14/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z14]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z23]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@23/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@23/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@23/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@23/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@23/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z23("DoMapAccum@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z23);


static refalrts::FnResult func_gen_DoMapAccum_Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@24/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@24/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@24/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@24/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@24/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@15/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z15]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z24]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@24/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@24/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@24/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@24/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@24/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z24("DoMapAccum@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z24);


static refalrts::FnResult func_gen_DoMapAccum_Z25(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@25/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@25/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@25/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@25/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@25/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@16/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z16]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z25]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@25/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@25/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@25/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@25/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@25/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z25("DoMapAccum@25", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z25);


static refalrts::FnResult func_gen_DoMapAccum_Z26(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@26/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@26/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@26/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@26/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@26/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@17/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z17]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z26]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@26/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@26/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@26/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@26/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@26/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z26("DoMapAccum@26", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z26);


static refalrts::FnResult func_gen_DoMapAccum_Z27(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@27/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@27/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@27/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@27/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 (/15 # Function/23 s.ScopeClass#4/24 (/27 e.3#0/25 )/28 # Sentences/29 e.4#0/21 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3#0 as range 25
      // closed e.4#0 as range 21
      //DEBUG: t.Acc#1: 5
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.ScopeClass#4: 24
      //DEBUG: e.3#0: 25
      //DEBUG: e.4#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@27/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4#0/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass#4/24 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 HalfReuse: </29 } & Reduce@18/35 (/36 Tile{ AsIs: t.Acc#1/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4#0/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z18]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z27]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@27/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@27/4 AsIs: t.Acc#1/5 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@27/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@27/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@27/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z27("DoMapAccum@27", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z27);


static refalrts::FnResult func_gen_Reduce_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@2/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@2/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@2/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & IsPassiveCall\1@0/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z2("Reduce$1=1@2", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@9/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FindOptimizedCall-Term@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z9("DoMapAccum$1=1@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z9);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum$1=1@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@10/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum$1=1@10/4 (/7 e.Left#1/21 )/8 (/11 e.Right#1/23 )/12 (/15 e.Scanned0#1/25 )/16 (/19 e.Tail0#1/27 )/20 t.Acc#2/31 e.StepScanned#2/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Left#1 as range 21
    // closed e.Right#1 as range 23
    // closed e.Scanned0#1 as range 25
    // closed e.Tail0#1 as range 27
    context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
    if( ! context[32] )
      continue;
    // closed e.StepScanned#2 as range 29
    //DEBUG: e.Left#1: 21
    //DEBUG: e.Right#1: 23
    //DEBUG: e.Scanned0#1: 25
    //DEBUG: e.Tail0#1: 27
    //DEBUG: t.Acc#2: 31
    //DEBUG: e.StepScanned#2: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@10/4 AsIs: (/7 AsIs: e.Left#1/21 AsIs: )/8 AsIs: (/11 AsIs: e.Right#1/23 AsIs: )/12 } Tile{ AsIs: t.Acc#2/31 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Scanned0#1/25 } Tile{ AsIs: e.StepScanned#2/29 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Tail0#1/27 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@10/4 (/7 e.Left#1/5 )/8 (/11 e.Right#1/9 )/12 (/15 e.Scanned0#1/13 )/16 (/19 e.Tail0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.Left#1 as range 5
  // closed e.Right#1 as range 9
  // closed e.Scanned0#1 as range 13
  // closed e.Tail0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.Left#1: 5
  //DEBUG: e.Right#1: 9
  //DEBUG: e.Scanned0#1: 13
  //DEBUG: e.Tail0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & DoMapAccum$1=1@0/22 Tile{ HalfReuse: [*]/0 Reuse: & OptSentence-Aux\1@0/4 AsIs: (/7 AsIs: e.Left#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Right#1/9 } )/23 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.Scanned0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Tail0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentencem_Aux_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z10("DoMapAccum$1=1@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z10);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & FindOptInfo-Aux$2=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.OptFuncs-B0#1/23 )/8 s.Mode0#1/9 (/12 e.#0/25 )/13 (/16 e.Body0#1/27 )/17 (/20 e.OptFuncs-E0#1/29 )/21 s.N#2/22 # Sentences/33 e.Sentences#2/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[10];
    context[26] = context[11];
    context[27] = context[14];
    context[28] = context[15];
    context[29] = context[18];
    context[30] = context[19];
    context[31] = context[2];
    context[32] = context[3];
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[31], context[32] );
    if( ! context[33] )
      continue;
    // closed e.OptFuncs-B0#1 as range 23
    // closed e.#0 as range 25
    // closed e.Body0#1 as range 27
    // closed e.OptFuncs-E0#1 as range 29
    // closed e.Sentences#2 as range 31
    //DEBUG: s.Mode0#1: 9
    //DEBUG: s.N#2: 22
    //DEBUG: e.OptFuncs-B0#1: 23
    //DEBUG: e.#0: 25
    //DEBUG: e.Body0#1: 27
    //DEBUG: e.OptFuncs-E0#1: 29
    //DEBUG: e.Sentences#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0#1/23 } Tile{ HalfReuse: (/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.#0/25 AsIs: )/13 } Tile{ AsIs: e.Body0#1/27 } Tile{ HalfReuse: )/20 AsIs: e.OptFuncs-E0#1/29 HalfReuse: (/21 } Tile{ HalfReuse: s.Mode01 #9/4 AsIs: (/7 } e.#0/25/34 # SUF/36 '*'/37 Tile{ AsIs: s.N#2/22 } Tile{ AsIs: )/17 } Tile{ HalfReuse: # Sentences/16 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/33 AsIs: e.Sentences#2/31 HalfReuse: s.N2 #22/1 } >/38 )/39 Tile{ ]] }
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_ident(vm, context[36], identifiers[ident_SUF]);
    refalrts::alloc_char(vm, context[37], '*');
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
    refalrts::reinit_name(context[33], functions[efunc_DropLeft]);
    refalrts::reinit_svar( context[1], context[22] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[8], context[20] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[33], context[1] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.OptFuncs-B0#1/5 )/8 s.Mode0#1/9 (/12 e.#0/10 )/13 (/16 e.Body0#1/14 )/17 (/20 e.OptFuncs-E0#1/18 )/21 s.N#2/22 e.dyn#0/2 >/1
  // closed e.OptFuncs-B0#1 as range 5
  // closed e.#0 as range 10
  // closed e.Body0#1 as range 14
  // closed e.OptFuncs-E0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Mode0#1: 9
  //DEBUG: s.N#2: 22
  //DEBUG: e.OptFuncs-B0#1: 5
  //DEBUG: e.#0: 10
  //DEBUG: e.Body0#1: 14
  //DEBUG: e.OptFuncs-E0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0#1/5 AsIs: )/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.#0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0#1/18 AsIs: )/21 } (/23 e.#0/10/24 # SUF/26 '*'/27 s.N#2/22/28 )/29 Tile{ AsIs: s.N#2/22 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[10], context[11]);
  refalrts::alloc_ident(vm, context[26], identifiers[ident_SUF]);
  refalrts::alloc_char(vm, context[27], '*');
  refalrts::copy_stvar(vm, context[28], context[22]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[29] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[23], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z1("FindOptInfo-Aux$2=1@1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z1);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & FindOptInfo-Aux$2=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.OptFuncs-B0#1/23 )/8 s.Mode0#1/9 (/12 e.0#0/25 )/13 (/16 e.Body0#1/27 )/17 (/20 e.OptFuncs-E0#1/29 )/21 s.N#2/22 # Sentences/33 e.Sentences#2/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[10];
    context[26] = context[11];
    context[27] = context[14];
    context[28] = context[15];
    context[29] = context[18];
    context[30] = context[19];
    context[31] = context[2];
    context[32] = context[3];
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[31], context[32] );
    if( ! context[33] )
      continue;
    // closed e.OptFuncs-B0#1 as range 23
    // closed e.0#0 as range 25
    // closed e.Body0#1 as range 27
    // closed e.OptFuncs-E0#1 as range 29
    // closed e.Sentences#2 as range 31
    //DEBUG: s.Mode0#1: 9
    //DEBUG: s.N#2: 22
    //DEBUG: e.OptFuncs-B0#1: 23
    //DEBUG: e.0#0: 25
    //DEBUG: e.Body0#1: 27
    //DEBUG: e.OptFuncs-E0#1: 29
    //DEBUG: e.Sentences#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0#1/23 } Tile{ HalfReuse: (/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.0#0/25 AsIs: )/13 } Tile{ AsIs: e.Body0#1/27 } Tile{ HalfReuse: )/20 AsIs: e.OptFuncs-E0#1/29 HalfReuse: (/21 } Tile{ HalfReuse: s.Mode01 #9/4 AsIs: (/7 } e.0#0/25/34 Tile{ HalfReuse: '*'/16 } Tile{ AsIs: s.N#2/22 } Tile{ AsIs: )/17 } # Sentences/36 Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/33 AsIs: e.Sentences#2/31 HalfReuse: s.N2 #22/1 } >/37 )/38 Tile{ ]] }
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_ident(vm, context[36], identifiers[ident_Sentences]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_char(context[16], '*');
    refalrts::reinit_name(context[33], functions[efunc_DropLeft]);
    refalrts::reinit_svar( context[1], context[22] );
    refalrts::link_brackets( context[21], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[8], context[20] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[33], context[1] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.OptFuncs-B0#1/5 )/8 s.Mode0#1/9 (/12 e.0#0/10 )/13 (/16 e.Body0#1/14 )/17 (/20 e.OptFuncs-E0#1/18 )/21 s.N#2/22 e.dyn#0/2 >/1
  // closed e.OptFuncs-B0#1 as range 5
  // closed e.0#0 as range 10
  // closed e.Body0#1 as range 14
  // closed e.OptFuncs-E0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Mode0#1: 9
  //DEBUG: s.N#2: 22
  //DEBUG: e.OptFuncs-B0#1: 5
  //DEBUG: e.0#0: 10
  //DEBUG: e.Body0#1: 14
  //DEBUG: e.OptFuncs-E0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0#1/5 AsIs: )/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.0#0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0#1/18 AsIs: )/21 } (/23 e.0#0/10/24 '*'/26 s.N#2/22/27 )/28 Tile{ AsIs: s.N#2/22 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[10], context[11]);
  refalrts::alloc_char(vm, context[26], '*');
  refalrts::copy_stvar(vm, context[27], context[22]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[28] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[23], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z2("FindOptInfo-Aux$2=1@2", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FindOptInfo-Aux$2=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.OptFuncs-B0#1/22 )/8 s.Mode0#1/9 (/12 e.Name0#1/24 )/13 (/16 e.Body0#1/26 )/17 (/20 e.OptFuncs-E0#1/28 )/21 # Sentences/32 e.Sentences#2/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = refalrts::ident_left( identifiers[ident_Sentences], context[30], context[31] );
    if( ! context[32] )
      continue;
    // closed e.OptFuncs-B0#1 as range 22
    // closed e.Name0#1 as range 24
    // closed e.Body0#1 as range 26
    // closed e.OptFuncs-E0#1 as range 28
    // closed e.Sentences#2 as range 30
    //DEBUG: s.Mode0#1: 9
    //DEBUG: e.OptFuncs-B0#1: 22
    //DEBUG: e.Name0#1: 24
    //DEBUG: e.Body0#1: 26
    //DEBUG: e.OptFuncs-E0#1: 28
    //DEBUG: e.Sentences#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0#1/22 } Tile{ HalfReuse: (/0 HalfReuse: s.Mode01 #9/4 AsIs: (/7 } e.Name0#1/24/33 Tile{ HalfReuse: )/20 } Tile{ AsIs: e.Body0#1/26 } Tile{ AsIs: )/17 } Tile{ AsIs: e.OptFuncs-E0#1/28 } Tile{ HalfReuse: (/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.Name0#1/24 AsIs: )/13 HalfReuse: # Sentences/16 } Tile{ HalfReuse: </21 HalfReuse: & DropLeft/32 AsIs: e.Sentences#2/30 HalfReuse: 0/1 } >/35 )/36 Tile{ ]] }
    refalrts::copy_evar(vm, context[33], context[34], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[21]);
    refalrts::reinit_name(context[32], functions[efunc_DropLeft]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::link_brackets( context[8], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.OptFuncs-B0#1/5 )/8 s.Mode0#1/9 (/12 e.Name0#1/10 )/13 (/16 e.Body0#1/14 )/17 (/20 e.OptFuncs-E0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.OptFuncs-B0#1 as range 5
  // closed e.Name0#1 as range 10
  // closed e.Body0#1 as range 14
  // closed e.OptFuncs-E0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Mode0#1: 9
  //DEBUG: e.OptFuncs-B0#1: 5
  //DEBUG: e.Name0#1: 10
  //DEBUG: e.Body0#1: 14
  //DEBUG: e.OptFuncs-E0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0#1/5 AsIs: )/8 AsIs: s.Mode0#1/9 AsIs: (/12 AsIs: e.Name0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0#1/18 AsIs: )/21 } (/22 e.Name0#1/10/23 )/25 0/26 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::copy_evar(vm, context[23], context[24], context[10], context[11]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_number(vm, context[26], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z3("FindOptInfo-Aux$2=1@3", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z3);


static refalrts::FnResult func_gen_Map_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@19/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@19/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@19/4 (/7 # Symbol/13 # Number/18 s.n#2/19 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Number], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail#1 as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail#1: 16
        //DEBUG: s.n#2: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Chr/18 AsIs: s.n#2/19 HalfReuse: >/8 } )/20 </21 & Map@19/22 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z19]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Chr]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@19/4 (/7 # TkVariable/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Ch"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # TkVariable/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@19/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Ch", 2);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z19]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@19/4 (/7 # ColdCallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Ch"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@19/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Ch", 2);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z19]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@19/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Number/11 # Char/12 & Chr@0/13 (/14"Chr"/15 )/17 Tile{ AsIs: t.Next#1/7 } >/18 </19 & Map@19/20 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Number]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Chr_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Chr", 3);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z19]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@19/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@19/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@19/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Number/9 # Char/10 & Chr@0/11 (/12"Chr"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Number]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Chr_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Chr", 3);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z19("Map@19", COOKIE1_, COOKIE2_, func_gen_Map_Z19);


static refalrts::FnResult func_gen_Map_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@20/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@20/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@20/4 (/7 # Symbol/13 # Char/18 s.n#2/19 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail#1 as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail#1: 16
        //DEBUG: s.n#2: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Number/7 HalfReuse: </13 HalfReuse: & Ord/18 AsIs: s.n#2/19 HalfReuse: >/8 } )/20 </21 & Map@20/22 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z20]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Number]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Ord]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@20/4 (/7 # TkVariable/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Or"/23 Tile{ HalfReuse: 'd'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # TkVariable/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@20/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Or", 2);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z20]);
        refalrts::reinit_char(context[0], 'd');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@20/4 (/7 # ColdCallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Or"/23 Tile{ HalfReuse: 'd'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@20/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Or", 2);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z20]);
      refalrts::reinit_char(context[0], 'd');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@20/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Number/12 & Ord@0/13 (/14"Ord"/15 )/17 Tile{ AsIs: t.Next#1/7 } >/18 </19 & Map@20/20 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Number]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Ord_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Ord", 3);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z20]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@20/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@20/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@20/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Number/10 & Ord@0/11 (/12"Ord"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Number]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Ord_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Ord", 3);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z20("Map@20", COOKIE1_, COOKIE2_, func_gen_Map_Z20);


static refalrts::FnResult func_gen_Map_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@21/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@21/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@21/4 (/7 # Symbol/13 # Char/18 s.n#2/19 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail#1 as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail#1: 16
        //DEBUG: s.n#2: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Upper/18 AsIs: s.n#2/19 HalfReuse: >/8 } )/20 </21 & Map@21/22 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z21]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Upper]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@21/4 (/7 # TkVariable/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Uppe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # TkVariable/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@21/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Uppe", 4);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z21]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@21/4 (/7 # ColdCallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Uppe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@21/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Uppe", 4);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z21]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@21/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Char/12 & Upper@0/13 (/14"Upper"/15 )/17 Tile{ AsIs: t.Next#1/7 } >/18 </19 & Map@21/20 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Upper_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Upper", 5);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z21]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@21/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@21/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@21/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Char/10 & Upper@0/11 (/12"Upper"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Upper_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Upper", 5);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z21("Map@21", COOKIE1_, COOKIE2_, func_gen_Map_Z21);


static refalrts::FnResult func_gen_Map_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@22/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@22/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@22/4 (/7 # Symbol/13 # Char/18 s.n#2/19 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail#1 as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail#1: 16
        //DEBUG: s.n#2: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Lower/18 AsIs: s.n#2/19 HalfReuse: >/8 } )/20 </21 & Map@22/22 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z22]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Lower]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@22/4 (/7 # TkVariable/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Lowe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # TkVariable/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@22/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Lowe", 4);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z22]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@22/4 (/7 # ColdCallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Lowe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0#0/14 AsIs: )/8 } )/25 </26 & Map@22/27 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Lowe", 4);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z22]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@22/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Char/12 & Lower@0/13 (/14"Lower"/15 )/17 Tile{ AsIs: t.Next#1/7 } >/18 </19 & Map@22/20 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Lower_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Lower", 5);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z22]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@22/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@22/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@22/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Char/10 & Lower@0/11 (/12"Lower"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Lower_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Lower", 5);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z22("Map@22", COOKIE1_, COOKIE2_, func_gen_Map_Z22);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 85 elems
  refalrts::Iter context[85];
  refalrts::zeros( context, 85 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.new#12/30 )/8 s.new#9/9 (/12 e.new#13/32 )/13 (/16 e.new#14/34 )/17 (/20 e.new#15/36 )/21 (/24 e.new#16/38 )/25 (/28 e.new#17/40 )/29 s.new#10/44 e.new#11/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[10];
    context[33] = context[11];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    // closed e.new#12 as range 30
    // closed e.new#13 as range 32
    // closed e.new#14 as range 34
    // closed e.new#15 as range 36
    // closed e.new#16 as range 38
    // closed e.new#17 as range 40
    if( ! refalrts::svar_left( context[44], context[42], context[43] ) )
      continue;
    // closed e.new#11 as range 42
    do {
      // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.new#20/45 )/8 s.new#18/9 (/12 e.new#21/47 )/13 (/16 e.new#22/49 )/17 (/20 e.new#23/51 )/21 (/24 e.new#24/53 )/25 (/28 e.new#25/55 )/29 # Success/44 e.new#19/57 >/1
      context[45] = context[30];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      context[51] = context[36];
      context[52] = context[37];
      context[53] = context[38];
      context[54] = context[39];
      context[55] = context[40];
      context[56] = context[41];
      context[57] = context[42];
      context[58] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[44] ) )
        continue;
      // closed e.new#20 as range 45
      // closed e.new#21 as range 47
      // closed e.new#22 as range 49
      // closed e.new#23 as range 51
      // closed e.new#24 as range 53
      // closed e.new#25 as range 55
      // closed e.new#19 as range 57
      do {
        // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/59 )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/61 )/13 (/16 e.Args0#1/63 )/17 (/20 e.Name0#1/65 )/21 (/24 e.Rest0#1/67 )/25 (/28 e.LS0#1/69 )/29 # Success/44 (/75 (/79 )/80 (/83 e.Assigns#3/81 )/84 )/76 >/1
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = context[58];
        context[73] = 0;
        context[74] = 0;
        context[75] = refalrts::brackets_left( context[73], context[74], context[71], context[72] );
        if( ! context[75] )
          continue;
        refalrts::bracket_pointers(context[75], context[76]);
        context[77] = 0;
        context[78] = 0;
        context[79] = refalrts::brackets_left( context[77], context[78], context[73], context[74] );
        if( ! context[79] )
          continue;
        refalrts::bracket_pointers(context[79], context[80]);
        context[81] = 0;
        context[82] = 0;
        context[83] = refalrts::brackets_left( context[81], context[82], context[73], context[74] );
        if( ! context[83] )
          continue;
        refalrts::bracket_pointers(context[83], context[84]);
        if( ! refalrts::empty_seq( context[77], context[78] ) )
          continue;
        if( ! refalrts::empty_seq( context[73], context[74] ) )
          continue;
        if( ! refalrts::empty_seq( context[71], context[72] ) )
          continue;
        // closed e.#0 as range 59
        // closed e.SentenceVars#4 as range 61
        // closed e.Args0#1 as range 63
        // closed e.Name0#1 as range 65
        // closed e.Rest0#1 as range 67
        // closed e.LS0#1 as range 69
        // closed e.Assigns#3 as range 81
        //DEBUG: s.DriveMode#5: 9
        //DEBUG: e.#0: 59
        //DEBUG: e.SentenceVars#4: 61
        //DEBUG: e.Args0#1: 63
        //DEBUG: e.Name0#1: 65
        //DEBUG: e.Rest0#1: 67
        //DEBUG: e.LS0#1: 69
        //DEBUG: e.Assigns#3: 81

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 {REMOVED TILE} )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/61 )/13 (/16 e.Args0#1/63 )/17 (/20 e.Name0#1/65 )/21 (/24 e.Rest0#1/67 )/25 (/28 e.LS0#1/69 )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </44 HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$1=1@1/75 HalfReuse: </79 HalfReuse: & Map@13/80 AsIs: (/83 AsIs: e.Assigns#3/81 AsIs: )/84 } Tile{ AsIs: e.#0/59 } Tile{ HalfReuse: >/76 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[44]);
        refalrts::reinit_name(context[75], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1]);
        refalrts::reinit_open_call(context[79]);
        refalrts::reinit_name(context[80], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[76]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[79] );
        refalrts::link_brackets( context[83], context[84] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[76];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[44], context[84] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/59 )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/61 )/13 (/16 e.Args0#1/63 )/17 (/20 e.Name0#1/65 )/21 (/24 e.Rest0#1/67 )/25 (/28 e.LS0#1/69 )/29 # Success/44 e.M#3/71 >/1
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      context[72] = context[58];
      // closed e.#0 as range 59
      // closed e.SentenceVars#4 as range 61
      // closed e.Args0#1 as range 63
      // closed e.Name0#1 as range 65
      // closed e.Rest0#1 as range 67
      // closed e.LS0#1 as range 69
      // closed e.M#3 as range 71
      //DEBUG: s.DriveMode#5: 9
      //DEBUG: e.#0: 59
      //DEBUG: e.SentenceVars#4: 61
      //DEBUG: e.Args0#1: 63
      //DEBUG: e.Name0#1: 65
      //DEBUG: e.Rest0#1: 67
      //DEBUG: e.LS0#1: 69
      //DEBUG: e.M#3: 71
      //9: s.DriveMode#5
      //59: e.#0
      //61: e.SentenceVars#4
      //63: e.Args0#1
      //65: e.Name0#1
      //67: e.Rest0#1
      //69: e.LS0#1
      //71: e.M#3
      //76: s.DriveMode#5

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[73]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1S2C1]);
      refalrts::copy_stvar(vm, context[76], context[9]);
      refalrts::alloc_close_call(vm, context[74]);
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[73] );
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_stvar( res, context[76] );
      res = refalrts::splice_elem( res, context[75] );
      res = refalrts::splice_elem( res, context[73] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </73 & DoOptSentence-MakeSubstitutions$1:1@1$2?1/77 # Drive/78 >/74
        context[75] = 0;
        context[76] = 0;
        context[77] = refalrts::call_left( context[75], context[76], context[73], context[74] );
        context[78] = refalrts::ident_left( identifiers[ident_Drive], context[75], context[76] );
        if( ! context[78] )
          continue;
        if( ! refalrts::empty_seq( context[75], context[76] ) )
          continue;
        //DEBUG: s.DriveMode#5: 9
        //DEBUG: e.#0: 59
        //DEBUG: e.SentenceVars#4: 61
        //DEBUG: e.Args0#1: 63
        //DEBUG: e.Name0#1: 65
        //DEBUG: e.Rest0#1: 67
        //DEBUG: e.LS0#1: 69
        //DEBUG: e.M#3: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/69 {REMOVED TILE} # Success/44 {REMOVED TILE} </73 & DoOptSentence-MakeSubstitutions$1:1@1$2?1/77 # Drive/78 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@1/8 AsIs: s.DriveMode#5/9 AsIs: (/12 AsIs: e.SentenceVars#4/61 AsIs: )/13 AsIs: (/16 AsIs: e.Args0#1/63 AsIs: )/17 AsIs: (/20 AsIs: e.Name0#1/65 AsIs: )/21 AsIs: (/24 AsIs: e.Rest0#1/67 AsIs: )/25 HalfReuse: </28 } Tile{ Reuse: & Map@14/4 AsIs: (/7 } Tile{ AsIs: e.#0/59 } Tile{ AsIs: )/29 } Tile{ AsIs: e.M#3/71 } Tile{ AsIs: >/74 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z1]);
        refalrts::reinit_open_call(context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[7], context[29] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[74];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[8], context[28] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[73], context[74]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/45 )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/47 )/13 (/16 e.Args0#1/49 )/17 (/20 e.Name0#1/51 )/21 (/24 e.Rest0#1/53 )/25 (/28 e.LS0#1/55 )/29 # Failure/44 >/1
    context[45] = context[30];
    context[46] = context[31];
    context[47] = context[32];
    context[48] = context[33];
    context[49] = context[34];
    context[50] = context[35];
    context[51] = context[36];
    context[52] = context[37];
    context[53] = context[38];
    context[54] = context[39];
    context[55] = context[40];
    context[56] = context[41];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[44] ) )
      continue;
    if( ! refalrts::empty_seq( context[42], context[43] ) )
      continue;
    // closed e.#0 as range 45
    // closed e.SentenceVars#4 as range 47
    // closed e.Args0#1 as range 49
    // closed e.Name0#1 as range 51
    // closed e.Rest0#1 as range 53
    // closed e.LS0#1 as range 55
    //DEBUG: s.DriveMode#5: 9
    //DEBUG: e.#0: 45
    //DEBUG: e.SentenceVars#4: 47
    //DEBUG: e.Args0#1: 49
    //DEBUG: e.Name0#1: 51
    //DEBUG: e.Rest0#1: 53
    //DEBUG: e.LS0#1: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions@1/8 AsIs: s.DriveMode#5/9 AsIs: (/12 AsIs: e.SentenceVars#4/47 AsIs: )/13 } Tile{ AsIs: e.Args0#1/49 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Function/17 AsIs: (/20 } Tile{ HalfReuse: </29 HalfReuse: & RemainderFuncIncName/44 } Tile{ AsIs: e.Name0#1/51 } Tile{ AsIs: >/1 } Tile{ AsIs: )/21 HalfReuse: # Sentences/24 AsIs: e.Rest0#1/53 AsIs: )/25 HalfReuse: >/28 } Tile{ ]] }
    refalrts::reinit_name(context[8], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z1]);
    refalrts::reinit_ident(context[17], identifiers[ident_Function]);
    refalrts::reinit_open_call(context[29]);
    refalrts::reinit_name(context[44], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_ident(context[24], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[28] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[29], context[44] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/30 )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/32 )/13 (/16 e.Args0#1/34 )/17 (/20 e.Name0#1/36 )/21 (/24 e.Rest0#1/38 )/25 (/28 e.LS0#1/40 )/29 e.Other#3/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[10];
    context[33] = context[11];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    // closed e.#0 as range 30
    // closed e.SentenceVars#4 as range 32
    // closed e.Args0#1 as range 34
    // closed e.Name0#1 as range 36
    // closed e.Rest0#1 as range 38
    // closed e.LS0#1 as range 40
    // closed e.Other#3 as range 42
    //DEBUG: s.DriveMode#5: 9
    //DEBUG: e.#0: 30
    //DEBUG: e.SentenceVars#4: 32
    //DEBUG: e.Args0#1: 34
    //DEBUG: e.Name0#1: 36
    //DEBUG: e.Rest0#1: 38
    //DEBUG: e.LS0#1: 40
    //DEBUG: e.Other#3: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.DriveMode#5/9 (/12 e.SentenceVars#4/32 )/13 (/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other#3/42 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/17 AsIs: (/20 AsIs: e.Name0#1/36 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.LS0#1/40 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.#0/30 AsIs: )/8 } Tile{ AsIs: (/28 } Tile{ AsIs: e.Rest0#1/38 } Tile{ AsIs: )/29 } Tile{ AsIs: e.Args0#1/34 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[17], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[17], context[24] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1@1/4 (/7 e.#0/5 )/8 s.DriveMode#5/9 (/12 e.SentenceVars#4/10 )/13 (/16 e.Args0#1/14 )/17 (/20 e.Name0#1/18 )/21 (/24 e.Rest0#1/22 )/25 (/28 e.LS0#1/26 )/29 e.dyn#0/2 >/1
  // closed e.#0 as range 5
  // closed e.SentenceVars#4 as range 10
  // closed e.Args0#1 as range 14
  // closed e.Name0#1 as range 18
  // closed e.Rest0#1 as range 22
  // closed e.LS0#1 as range 26
  // closed e.dyn#0 as range 2
  //DEBUG: s.DriveMode#5: 9
  //DEBUG: e.#0: 5
  //DEBUG: e.SentenceVars#4: 10
  //DEBUG: e.Args0#1: 14
  //DEBUG: e.Name0#1: 18
  //DEBUG: e.Rest0#1: 22
  //DEBUG: e.LS0#1: 26
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </30 & DoOptSentence-MakeSubstitutions$1:1@0/31 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.#0/5 AsIs: )/8 AsIs: s.DriveMode#5/9 AsIs: (/12 AsIs: e.SentenceVars#4/10 AsIs: )/13 AsIs: (/16 AsIs: e.Args0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Name0#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Rest0#1/22 AsIs: )/25 AsIs: (/28 AsIs: e.LS0#1/26 AsIs: )/29 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[30], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1("DoOptSentence-MakeSubstitutions$1:1@1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 84 elems
  refalrts::Iter context[84];
  refalrts::zeros( context, 84 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.new#10/29 )/8 (/11 e.new#11/31 )/12 (/15 e.new#12/33 )/16 (/19 e.new#13/35 )/20 (/23 e.new#14/37 )/24 (/27 e.new#15/39 )/28 s.new#8/43 e.new#9/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.new#10 as range 29
    // closed e.new#11 as range 31
    // closed e.new#12 as range 33
    // closed e.new#13 as range 35
    // closed e.new#14 as range 37
    // closed e.new#15 as range 39
    if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
      continue;
    // closed e.new#9 as range 41
    do {
      // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.new#17/44 )/8 (/11 e.new#18/46 )/12 (/15 e.new#19/48 )/16 (/19 e.new#20/50 )/20 (/23 e.new#21/52 )/24 (/27 e.new#22/54 )/28 # Success/43 e.new#16/56 >/1
      context[44] = context[29];
      context[45] = context[30];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      context[51] = context[36];
      context[52] = context[37];
      context[53] = context[38];
      context[54] = context[39];
      context[55] = context[40];
      context[56] = context[41];
      context[57] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[43] ) )
        continue;
      // closed e.new#17 as range 44
      // closed e.new#18 as range 46
      // closed e.new#19 as range 48
      // closed e.new#20 as range 50
      // closed e.new#21 as range 52
      // closed e.new#22 as range 54
      // closed e.new#16 as range 56
      do {
        // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.#0/58 )/8 (/11 e.SentenceVars#4/60 )/12 (/15 e.Args0#1/62 )/16 (/19 e.Name0#1/64 )/20 (/23 e.Rest0#1/66 )/24 (/27 e.LS0#1/68 )/28 # Success/43 (/74 (/78 )/79 (/82 e.Assigns#3/80 )/83 )/75 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = 0;
        context[73] = 0;
        context[74] = refalrts::brackets_left( context[72], context[73], context[70], context[71] );
        if( ! context[74] )
          continue;
        refalrts::bracket_pointers(context[74], context[75]);
        context[76] = 0;
        context[77] = 0;
        context[78] = refalrts::brackets_left( context[76], context[77], context[72], context[73] );
        if( ! context[78] )
          continue;
        refalrts::bracket_pointers(context[78], context[79]);
        context[80] = 0;
        context[81] = 0;
        context[82] = refalrts::brackets_left( context[80], context[81], context[72], context[73] );
        if( ! context[82] )
          continue;
        refalrts::bracket_pointers(context[82], context[83]);
        if( ! refalrts::empty_seq( context[76], context[77] ) )
          continue;
        if( ! refalrts::empty_seq( context[72], context[73] ) )
          continue;
        if( ! refalrts::empty_seq( context[70], context[71] ) )
          continue;
        // closed e.#0 as range 58
        // closed e.SentenceVars#4 as range 60
        // closed e.Args0#1 as range 62
        // closed e.Name0#1 as range 64
        // closed e.Rest0#1 as range 66
        // closed e.LS0#1 as range 68
        // closed e.Assigns#3 as range 80
        //DEBUG: e.#0: 58
        //DEBUG: e.SentenceVars#4: 60
        //DEBUG: e.Args0#1: 62
        //DEBUG: e.Name0#1: 64
        //DEBUG: e.Rest0#1: 66
        //DEBUG: e.LS0#1: 68
        //DEBUG: e.Assigns#3: 80

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 {REMOVED TILE} )/8 (/11 e.SentenceVars#4/60 )/12 (/15 e.Args0#1/62 )/16 (/19 e.Name0#1/64 )/20 (/23 e.Rest0#1/66 )/24 (/27 e.LS0#1/68 )/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </43 HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$1=1@1/74 HalfReuse: </78 HalfReuse: & Map@13/79 AsIs: (/82 AsIs: e.Assigns#3/80 AsIs: )/83 } Tile{ AsIs: e.#0/58 } Tile{ HalfReuse: >/75 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[43]);
        refalrts::reinit_name(context[74], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1]);
        refalrts::reinit_open_call(context[78]);
        refalrts::reinit_name(context[79], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[75]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[75] );
        refalrts::push_stack( vm, context[78] );
        refalrts::link_brackets( context[82], context[83] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[75];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[43], context[83] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.#0/58 )/8 (/11 e.SentenceVars#4/60 )/12 (/15 e.Args0#1/62 )/16 (/19 e.Name0#1/64 )/20 (/23 e.Rest0#1/66 )/24 (/27 e.LS0#1/68 )/28 # Success/43 e.M#3/70 >/1
      context[58] = context[44];
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      // closed e.#0 as range 58
      // closed e.SentenceVars#4 as range 60
      // closed e.Args0#1 as range 62
      // closed e.Name0#1 as range 64
      // closed e.Rest0#1 as range 66
      // closed e.LS0#1 as range 68
      // closed e.M#3 as range 70
      //DEBUG: e.#0: 58
      //DEBUG: e.SentenceVars#4: 60
      //DEBUG: e.Args0#1: 62
      //DEBUG: e.Name0#1: 64
      //DEBUG: e.Rest0#1: 66
      //DEBUG: e.LS0#1: 68
      //DEBUG: e.M#3: 70
      //58: e.#0
      //60: e.SentenceVars#4
      //62: e.Args0#1
      //64: e.Name0#1
      //66: e.Rest0#1
      //68: e.LS0#1
      //70: e.M#3

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[72]);
      refalrts::alloc_name(vm, context[74], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2S2C1]);
      refalrts::alloc_ident(vm, context[75], identifiers[ident_Inline]);
      refalrts::alloc_close_call(vm, context[73]);
      refalrts::push_stack( vm, context[73] );
      refalrts::push_stack( vm, context[72] );
      res = refalrts::splice_elem( res, context[73] );
      res = refalrts::splice_elem( res, context[75] );
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_elem( res, context[72] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </72 & DoOptSentence-MakeSubstitutions$1:1@2$2?1/76 # Drive/77 >/73
        context[74] = 0;
        context[75] = 0;
        context[76] = refalrts::call_left( context[74], context[75], context[72], context[73] );
        context[77] = refalrts::ident_left( identifiers[ident_Drive], context[74], context[75] );
        if( ! context[77] )
          continue;
        if( ! refalrts::empty_seq( context[74], context[75] ) )
          continue;
        //DEBUG: e.#0: 58
        //DEBUG: e.SentenceVars#4: 60
        //DEBUG: e.Args0#1: 62
        //DEBUG: e.Name0#1: 64
        //DEBUG: e.Rest0#1: 66
        //DEBUG: e.LS0#1: 68
        //DEBUG: e.M#3: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/68 {REMOVED TILE} # Success/43 {REMOVED TILE} </72 & DoOptSentence-MakeSubstitutions$1:1@2$2?1/76 # Drive/77 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@2/8 AsIs: (/11 AsIs: e.SentenceVars#4/60 AsIs: )/12 AsIs: (/15 AsIs: e.Args0#1/62 AsIs: )/16 AsIs: (/19 AsIs: e.Name0#1/64 AsIs: )/20 AsIs: (/23 AsIs: e.Rest0#1/66 AsIs: )/24 HalfReuse: </27 } Tile{ Reuse: & Map@14/4 AsIs: (/7 } Tile{ AsIs: e.#0/58 } Tile{ AsIs: )/28 } Tile{ AsIs: e.M#3/70 } Tile{ AsIs: >/73 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z2]);
        refalrts::reinit_open_call(context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[27] );
        refalrts::link_brackets( context[7], context[28] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[73];
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[72], context[73]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.#0/44 )/8 (/11 e.SentenceVars#4/46 )/12 (/15 e.Args0#1/48 )/16 (/19 e.Name0#1/50 )/20 (/23 e.Rest0#1/52 )/24 (/27 e.LS0#1/54 )/28 # Failure/43 >/1
    context[44] = context[29];
    context[45] = context[30];
    context[46] = context[31];
    context[47] = context[32];
    context[48] = context[33];
    context[49] = context[34];
    context[50] = context[35];
    context[51] = context[36];
    context[52] = context[37];
    context[53] = context[38];
    context[54] = context[39];
    context[55] = context[40];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[43] ) )
      continue;
    if( ! refalrts::empty_seq( context[41], context[42] ) )
      continue;
    // closed e.#0 as range 44
    // closed e.SentenceVars#4 as range 46
    // closed e.Args0#1 as range 48
    // closed e.Name0#1 as range 50
    // closed e.Rest0#1 as range 52
    // closed e.LS0#1 as range 54
    //DEBUG: e.#0: 44
    //DEBUG: e.SentenceVars#4: 46
    //DEBUG: e.Args0#1: 48
    //DEBUG: e.Name0#1: 50
    //DEBUG: e.Rest0#1: 52
    //DEBUG: e.LS0#1: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.#0/44 )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/54 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@2/4 AsIs: (/7 } Tile{ AsIs: e.SentenceVars#4/46 } Tile{ HalfReuse: )/15 AsIs: e.Args0#1/48 HalfReuse: (/16 HalfReuse: # Function/19 } Tile{ HalfReuse: (/28 HalfReuse: </43 HalfReuse: & RemainderFuncIncName/1 } Tile{ AsIs: e.Name0#1/50 } Tile{ HalfReuse: >/12 } Tile{ AsIs: )/20 HalfReuse: # Sentences/23 AsIs: e.Rest0#1/52 AsIs: )/24 HalfReuse: >/27 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z2]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[19], identifiers[ident_Function]);
    refalrts::reinit_open_bracket(context[28]);
    refalrts::reinit_open_call(context[43]);
    refalrts::reinit_name(context[1], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_ident(context[23], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[27]);
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[24] );
    refalrts::link_brackets( context[28], context[20] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[43] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[27] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[28], context[1] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.#0/29 )/8 (/11 e.SentenceVars#4/31 )/12 (/15 e.Args0#1/33 )/16 (/19 e.Name0#1/35 )/20 (/23 e.Rest0#1/37 )/24 (/27 e.LS0#1/39 )/28 e.Other#3/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.#0 as range 29
    // closed e.SentenceVars#4 as range 31
    // closed e.Args0#1 as range 33
    // closed e.Name0#1 as range 35
    // closed e.Rest0#1 as range 37
    // closed e.LS0#1 as range 39
    // closed e.Other#3 as range 41
    //DEBUG: e.#0: 29
    //DEBUG: e.SentenceVars#4: 31
    //DEBUG: e.Args0#1: 33
    //DEBUG: e.Name0#1: 35
    //DEBUG: e.Rest0#1: 37
    //DEBUG: e.LS0#1: 39
    //DEBUG: e.Other#3: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.SentenceVars#4/31 )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/27 {REMOVED TILE} )/28 e.Other#3/41 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/16 AsIs: (/19 AsIs: e.Name0#1/35 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.LS0#1/39 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.#0/29 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Rest0#1/37 } Tile{ AsIs: )/24 } Tile{ AsIs: e.Args0#1/33 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[16], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[24] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[16], context[23] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1@2/4 (/7 e.#0/5 )/8 (/11 e.SentenceVars#4/9 )/12 (/15 e.Args0#1/13 )/16 (/19 e.Name0#1/17 )/20 (/23 e.Rest0#1/21 )/24 (/27 e.LS0#1/25 )/28 e.dyn#0/2 >/1
  // closed e.#0 as range 5
  // closed e.SentenceVars#4 as range 9
  // closed e.Args0#1 as range 13
  // closed e.Name0#1 as range 17
  // closed e.Rest0#1 as range 21
  // closed e.LS0#1 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.#0: 5
  //DEBUG: e.SentenceVars#4: 9
  //DEBUG: e.Args0#1: 13
  //DEBUG: e.Name0#1: 17
  //DEBUG: e.Rest0#1: 21
  //DEBUG: e.LS0#1: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1@0/4 AsIs: (/7 } )/29 (/30 Tile{ AsIs: e.#0/5 } )/31 Tile{ HalfReuse: # Inline/8 AsIs: (/11 AsIs: e.SentenceVars#4/9 AsIs: )/12 AsIs: (/15 AsIs: e.Args0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Name0#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.Rest0#1/21 AsIs: )/24 AsIs: (/27 AsIs: e.LS0#1/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2("DoOptSentence-MakeSubstitutions$1:1@2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 105 elems
  refalrts::Iter context[105];
  refalrts::zeros( context, 105 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 (/36 e.new#9/34 )/37 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 34
  // closed e.new#10 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.new#14/38 )/8 (/11 e.new#15/40 )/12 (/15 e.new#16/42 )/16 s.new#11/17 (/20 e.new#17/44 )/21 (/24 e.new#18/46 )/25 (/28 e.new#19/48 )/29 (/32 e.new#20/50 )/33 (/36 e.new#21/52 )/37 s.new#12/56 e.new#13/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[18];
    context[45] = context[19];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    // closed e.new#14 as range 38
    // closed e.new#15 as range 40
    // closed e.new#16 as range 42
    // closed e.new#17 as range 44
    // closed e.new#18 as range 46
    // closed e.new#19 as range 48
    // closed e.new#20 as range 50
    // closed e.new#21 as range 52
    if( ! refalrts::svar_left( context[56], context[54], context[55] ) )
      continue;
    // closed e.new#13 as range 54
    do {
      // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.new#24/57 )/8 (/11 e.new#25/59 )/12 (/15 e.new#26/61 )/16 s.new#22/17 (/20 e.new#27/63 )/21 (/24 e.new#28/65 )/25 (/28 e.new#29/67 )/29 (/32 e.new#30/69 )/33 (/36 e.new#31/71 )/37 # Success/56 e.new#23/73 >/1
      context[57] = context[38];
      context[58] = context[39];
      context[59] = context[40];
      context[60] = context[41];
      context[61] = context[42];
      context[62] = context[43];
      context[63] = context[44];
      context[64] = context[45];
      context[65] = context[46];
      context[66] = context[47];
      context[67] = context[48];
      context[68] = context[49];
      context[69] = context[50];
      context[70] = context[51];
      context[71] = context[52];
      context[72] = context[53];
      context[73] = context[54];
      context[74] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[56] ) )
        continue;
      // closed e.new#24 as range 57
      // closed e.new#25 as range 59
      // closed e.new#26 as range 61
      // closed e.new#27 as range 63
      // closed e.new#28 as range 65
      // closed e.new#29 as range 67
      // closed e.new#30 as range 69
      // closed e.new#31 as range 71
      // closed e.new#23 as range 73
      do {
        // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.Substitutions0#1/75 )/8 (/11 e.NewSubsts#5/77 )/12 (/15 e.#0/79 )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/81 )/21 (/24 e.Args0#1/83 )/25 (/28 e.Name0#1/85 )/29 (/32 e.Rest0#1/87 )/33 (/36 e.LS0#1/89 )/37 # Success/56 (/95 (/99 )/100 (/103 e.Assigns#3/101 )/104 )/96 >/1
        context[75] = context[57];
        context[76] = context[58];
        context[77] = context[59];
        context[78] = context[60];
        context[79] = context[61];
        context[80] = context[62];
        context[81] = context[63];
        context[82] = context[64];
        context[83] = context[65];
        context[84] = context[66];
        context[85] = context[67];
        context[86] = context[68];
        context[87] = context[69];
        context[88] = context[70];
        context[89] = context[71];
        context[90] = context[72];
        context[91] = context[73];
        context[92] = context[74];
        context[93] = 0;
        context[94] = 0;
        context[95] = refalrts::brackets_left( context[93], context[94], context[91], context[92] );
        if( ! context[95] )
          continue;
        refalrts::bracket_pointers(context[95], context[96]);
        context[97] = 0;
        context[98] = 0;
        context[99] = refalrts::brackets_left( context[97], context[98], context[93], context[94] );
        if( ! context[99] )
          continue;
        refalrts::bracket_pointers(context[99], context[100]);
        context[101] = 0;
        context[102] = 0;
        context[103] = refalrts::brackets_left( context[101], context[102], context[93], context[94] );
        if( ! context[103] )
          continue;
        refalrts::bracket_pointers(context[103], context[104]);
        if( ! refalrts::empty_seq( context[97], context[98] ) )
          continue;
        if( ! refalrts::empty_seq( context[93], context[94] ) )
          continue;
        if( ! refalrts::empty_seq( context[91], context[92] ) )
          continue;
        // closed e.Substitutions0#1 as range 75
        // closed e.NewSubsts#5 as range 77
        // closed e.#0 as range 79
        // closed e.SentenceVars0#1 as range 81
        // closed e.Args0#1 as range 83
        // closed e.Name0#1 as range 85
        // closed e.Rest0#1 as range 87
        // closed e.LS0#1 as range 89
        // closed e.Assigns#3 as range 101
        //DEBUG: s.Mode0#1: 17
        //DEBUG: e.Substitutions0#1: 75
        //DEBUG: e.NewSubsts#5: 77
        //DEBUG: e.#0: 79
        //DEBUG: e.SentenceVars0#1: 81
        //DEBUG: e.Args0#1: 83
        //DEBUG: e.Name0#1: 85
        //DEBUG: e.Rest0#1: 87
        //DEBUG: e.LS0#1: 89
        //DEBUG: e.Assigns#3: 101

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/81 )/21 (/24 e.Args0#1/83 )/25 (/28 e.Name0#1/85 )/29 (/32 e.Rest0#1/87 )/33 (/36 e.LS0#1/89 )/37 # Success/56 (/95 (/99 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$1=1@2/4 AsIs: (/7 AsIs: e.Substitutions0#1/75 AsIs: )/8 AsIs: (/11 AsIs: e.NewSubsts#5/77 AsIs: )/12 HalfReuse: </15 } Tile{ HalfReuse: & Map@13/100 AsIs: (/103 AsIs: e.Assigns#3/101 AsIs: )/104 } Tile{ AsIs: e.#0/79 } Tile{ HalfReuse: >/96 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z2]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[100], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[96]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[103], context[104] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[96];
        res = refalrts::splice_evar( res, context[79], context[80] );
        res = refalrts::splice_evar( res, context[100], context[104] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.Substitutions0#1/75 )/8 (/11 e.NewSubsts#5/77 )/12 (/15 e.#0/79 )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/81 )/21 (/24 e.Args0#1/83 )/25 (/28 e.Name0#1/85 )/29 (/32 e.Rest0#1/87 )/33 (/36 e.LS0#1/89 )/37 # Success/56 e.M#3/91 >/1
      context[75] = context[57];
      context[76] = context[58];
      context[77] = context[59];
      context[78] = context[60];
      context[79] = context[61];
      context[80] = context[62];
      context[81] = context[63];
      context[82] = context[64];
      context[83] = context[65];
      context[84] = context[66];
      context[85] = context[67];
      context[86] = context[68];
      context[87] = context[69];
      context[88] = context[70];
      context[89] = context[71];
      context[90] = context[72];
      context[91] = context[73];
      context[92] = context[74];
      // closed e.Substitutions0#1 as range 75
      // closed e.NewSubsts#5 as range 77
      // closed e.#0 as range 79
      // closed e.SentenceVars0#1 as range 81
      // closed e.Args0#1 as range 83
      // closed e.Name0#1 as range 85
      // closed e.Rest0#1 as range 87
      // closed e.LS0#1 as range 89
      // closed e.M#3 as range 91
      //DEBUG: s.Mode0#1: 17
      //DEBUG: e.Substitutions0#1: 75
      //DEBUG: e.NewSubsts#5: 77
      //DEBUG: e.#0: 79
      //DEBUG: e.SentenceVars0#1: 81
      //DEBUG: e.Args0#1: 83
      //DEBUG: e.Name0#1: 85
      //DEBUG: e.Rest0#1: 87
      //DEBUG: e.LS0#1: 89
      //DEBUG: e.M#3: 91
      //17: s.Mode0#1
      //75: e.Substitutions0#1
      //77: e.NewSubsts#5
      //79: e.#0
      //81: e.SentenceVars0#1
      //83: e.Args0#1
      //85: e.Name0#1
      //87: e.Rest0#1
      //89: e.LS0#1
      //91: e.M#3
      //96: s.Mode0#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[93]);
      refalrts::alloc_name(vm, context[95], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3S2C1]);
      refalrts::copy_stvar(vm, context[96], context[17]);
      refalrts::alloc_close_call(vm, context[94]);
      refalrts::push_stack( vm, context[94] );
      refalrts::push_stack( vm, context[93] );
      res = refalrts::splice_elem( res, context[94] );
      res = refalrts::splice_stvar( res, context[96] );
      res = refalrts::splice_elem( res, context[95] );
      res = refalrts::splice_elem( res, context[93] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </93 & DoOptSentence-MakeSubstitutions$1:1@3$2?1/97 # Drive/98 >/94
        context[95] = 0;
        context[96] = 0;
        context[97] = refalrts::call_left( context[95], context[96], context[93], context[94] );
        context[98] = refalrts::ident_left( identifiers[ident_Drive], context[95], context[96] );
        if( ! context[98] )
          continue;
        if( ! refalrts::empty_seq( context[95], context[96] ) )
          continue;
        //DEBUG: s.Mode0#1: 17
        //DEBUG: e.Substitutions0#1: 75
        //DEBUG: e.NewSubsts#5: 77
        //DEBUG: e.#0: 79
        //DEBUG: e.SentenceVars0#1: 81
        //DEBUG: e.Args0#1: 83
        //DEBUG: e.Name0#1: 85
        //DEBUG: e.Rest0#1: 87
        //DEBUG: e.LS0#1: 89
        //DEBUG: e.M#3: 91

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/89 {REMOVED TILE} # Success/56 {REMOVED TILE} </93 & DoOptSentence-MakeSubstitutions$1:1@3$2?1/97 # Drive/98 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2/16 AsIs: s.Mode0#1/17 AsIs: (/20 AsIs: e.SentenceVars0#1/81 AsIs: )/21 AsIs: (/24 AsIs: e.Args0#1/83 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.Substitutions0#1/75 } Tile{ AsIs: e.NewSubsts#5/77 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Name0#1/85 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.Rest0#1/87 AsIs: )/33 HalfReuse: </36 } Tile{ Reuse: & Map@14/4 AsIs: (/7 } Tile{ AsIs: e.#0/79 } Tile{ AsIs: )/37 } Tile{ AsIs: e.M#3/91 } Tile{ AsIs: >/94 AsIs: >/1 ]] }
        refalrts::reinit_name(context[16], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2]);
        refalrts::reinit_open_call(context[36]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[94] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[7], context[37] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::link_brackets( context[15], context[29] );
        refalrts::link_brackets( context[28], context[12] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[94];
        res = refalrts::splice_evar( res, context[91], context[92] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[79], context[80] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[29], context[36] );
        res = refalrts::splice_evar( res, context[85], context[86] );
        res = refalrts::splice_evar( res, context[12], context[15] );
        res = refalrts::splice_evar( res, context[77], context[78] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[93], context[94]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.Substitutions0#1/57 )/8 (/11 e.NewSubsts#5/59 )/12 (/15 e.#0/61 )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/63 )/21 (/24 e.Args0#1/65 )/25 (/28 e.Name0#1/67 )/29 (/32 e.Rest0#1/69 )/33 (/36 e.LS0#1/71 )/37 # Failure/56 >/1
    context[57] = context[38];
    context[58] = context[39];
    context[59] = context[40];
    context[60] = context[41];
    context[61] = context[42];
    context[62] = context[43];
    context[63] = context[44];
    context[64] = context[45];
    context[65] = context[46];
    context[66] = context[47];
    context[67] = context[48];
    context[68] = context[49];
    context[69] = context[50];
    context[70] = context[51];
    context[71] = context[52];
    context[72] = context[53];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[56] ) )
      continue;
    if( ! refalrts::empty_seq( context[54], context[55] ) )
      continue;
    // closed e.Substitutions0#1 as range 57
    // closed e.NewSubsts#5 as range 59
    // closed e.#0 as range 61
    // closed e.SentenceVars0#1 as range 63
    // closed e.Args0#1 as range 65
    // closed e.Name0#1 as range 67
    // closed e.Rest0#1 as range 69
    // closed e.LS0#1 as range 71
    //DEBUG: s.Mode0#1: 17
    //DEBUG: e.Substitutions0#1: 57
    //DEBUG: e.NewSubsts#5: 59
    //DEBUG: e.#0: 61
    //DEBUG: e.SentenceVars0#1: 63
    //DEBUG: e.Args0#1: 65
    //DEBUG: e.Name0#1: 67
    //DEBUG: e.Rest0#1: 69
    //DEBUG: e.LS0#1: 71

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/61 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0#1/71 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions@3/16 AsIs: s.Mode0#1/17 AsIs: (/20 AsIs: e.SentenceVars0#1/63 AsIs: )/21 AsIs: (/24 AsIs: e.Args0#1/65 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.Substitutions0#1/57 } Tile{ HalfReuse: )/11 AsIs: e.NewSubsts#5/59 HalfReuse: (/12 HalfReuse: # Function/15 } Tile{ HalfReuse: (/37 HalfReuse: </56 HalfReuse: & RemainderFuncIncName/1 } Tile{ AsIs: e.Name0#1/67 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/29 HalfReuse: # Sentences/32 AsIs: e.Rest0#1/69 AsIs: )/33 HalfReuse: >/36 } Tile{ ]] }
    refalrts::reinit_name(context[16], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z3]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_ident(context[15], identifiers[ident_Function]);
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_open_call(context[56]);
    refalrts::reinit_name(context[1], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_ident(context[32], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[36]);
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[33] );
    refalrts::link_brackets( context[37], context[29] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[28], context[11] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[36] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[37], context[1] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.Substitutions0#1/38 )/8 (/11 e.NewSubsts#5/40 )/12 (/15 e.#0/42 )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/44 )/21 (/24 e.Args0#1/46 )/25 (/28 e.Name0#1/48 )/29 (/32 e.Rest0#1/50 )/33 (/36 e.LS0#1/52 )/37 e.Other#3/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[18];
    context[45] = context[19];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    // closed e.Substitutions0#1 as range 38
    // closed e.NewSubsts#5 as range 40
    // closed e.#0 as range 42
    // closed e.SentenceVars0#1 as range 44
    // closed e.Args0#1 as range 46
    // closed e.Name0#1 as range 48
    // closed e.Rest0#1 as range 50
    // closed e.LS0#1 as range 52
    // closed e.Other#3 as range 54
    //DEBUG: s.Mode0#1: 17
    //DEBUG: e.Substitutions0#1: 38
    //DEBUG: e.NewSubsts#5: 40
    //DEBUG: e.#0: 42
    //DEBUG: e.SentenceVars0#1: 44
    //DEBUG: e.Args0#1: 46
    //DEBUG: e.Name0#1: 48
    //DEBUG: e.Rest0#1: 50
    //DEBUG: e.LS0#1: 52
    //DEBUG: e.Other#3: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} s.Mode0#1/17 (/20 e.SentenceVars0#1/44 )/21 (/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other#3/54 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0#1/38 } Tile{ AsIs: e.NewSubsts#5/40 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/25 AsIs: (/28 AsIs: e.Name0#1/48 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.LS0#1/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.#0/42 AsIs: )/16 } Tile{ AsIs: (/36 } Tile{ AsIs: e.Rest0#1/50 } Tile{ AsIs: )/37 } Tile{ AsIs: e.Args0#1/46 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[25], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[12] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[25], context[32] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1@3/4 (/7 e.Substitutions0#1/5 )/8 (/11 e.NewSubsts#5/9 )/12 (/15 e.#0/13 )/16 s.Mode0#1/17 (/20 e.SentenceVars0#1/18 )/21 (/24 e.Args0#1/22 )/25 (/28 e.Name0#1/26 )/29 (/32 e.Rest0#1/30 )/33 (/36 e.LS0#1/34 )/37 e.dyn#0/2 >/1
  // closed e.Substitutions0#1 as range 5
  // closed e.NewSubsts#5 as range 9
  // closed e.#0 as range 13
  // closed e.SentenceVars0#1 as range 18
  // closed e.Args0#1 as range 22
  // closed e.Name0#1 as range 26
  // closed e.Rest0#1 as range 30
  // closed e.LS0#1 as range 34
  // closed e.dyn#0 as range 2
  //DEBUG: s.Mode0#1: 17
  //DEBUG: e.Substitutions0#1: 5
  //DEBUG: e.NewSubsts#5: 9
  //DEBUG: e.#0: 13
  //DEBUG: e.SentenceVars0#1: 18
  //DEBUG: e.Args0#1: 22
  //DEBUG: e.Name0#1: 26
  //DEBUG: e.Rest0#1: 30
  //DEBUG: e.LS0#1: 34
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1@0/4 AsIs: (/7 } Tile{ AsIs: e.Substitutions0#1/5 } Tile{ AsIs: e.NewSubsts#5/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.#0/13 AsIs: )/16 AsIs: s.Mode0#1/17 AsIs: (/20 AsIs: e.SentenceVars0#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Args0#1/22 AsIs: )/25 AsIs: (/28 AsIs: e.Name0#1/26 AsIs: )/29 AsIs: (/32 AsIs: e.Rest0#1/30 AsIs: )/33 AsIs: (/36 AsIs: e.LS0#1/34 AsIs: )/37 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3("DoOptSentence-MakeSubstitutions$1:1@3", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z3);


static refalrts::FnResult func_gen_UpdateDriveInfo_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & UpdateDriveInfo=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=2@1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & UpdateDriveInfo=2@1/4 (/7 e.Drives0#2/9 )/8 (/15 e.Inlines#3/13 )/16 e.AST#3/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Drives0#2 as range 9
    // closed e.Inlines#3 as range 13
    // closed e.AST#3 as range 11
    //DEBUG: e.Drives0#2: 9
    //DEBUG: e.Inlines#3: 13
    //DEBUG: e.AST#3: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=3@1/4 AsIs: (/7 } Tile{ AsIs: e.Inlines#3/13 } Tile{ AsIs: )/8 AsIs: (/15 } Tile{ AsIs: e.Drives0#2/9 } )/17 </18 Tile{ HalfReuse: & DoExtractLabels@1/16 AsIs: e.AST#3/11 AsIs: >/1 } >/19 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A3Z1]);
    refalrts::reinit_name(context[16], functions[efunc_gen_DoExtractLabels_Z1]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=2@1/4 (/7 e.Drives0#2/5 )/8 e.dyn#0/2 >/1
  // closed e.Drives0#2 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Drives0#2: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & UpdateDriveInfo=2@0/10 (/11 )/12 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Drives0#2/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_UpdateDriveInfo_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A2Z1("UpdateDriveInfo=2@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@11/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z11("DoMapAccum$1=1@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z11);


static refalrts::FnResult func_gen_Reduce_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@3/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@3/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@3/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@3/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@3/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@1/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z3]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z1]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@3/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@3/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@3/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@3/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Drive/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@3/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@3/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@3/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z3("Reduce@3", COOKIE1_, COOKIE2_, func_gen_Reduce_Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@12/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@12/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z12("DoMapAccum$1=1@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z12);


static refalrts::FnResult func_gen_Reduce_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@4/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@4/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@4/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@4/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@4/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@2/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z4]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z2]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@4/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@4/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@4/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@4/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Inline/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@4/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@4/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@4/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z4("Reduce@4", COOKIE1_, COOKIE2_, func_gen_Reduce_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@13/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@13/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z13("DoMapAccum$1=1@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z13);


static refalrts::FnResult func_gen_Reduce_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@5/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@5/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@5/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@5/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@5/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@3/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z5]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z3]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@5/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@5/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@5/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@5/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@5/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@5/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@5/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z5("Reduce@5", COOKIE1_, COOKIE2_, func_gen_Reduce_Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@14/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@14/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z14("DoMapAccum$1=1@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z14);


static refalrts::FnResult func_gen_Reduce_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@6/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@6/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@6/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@6/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@6/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@4/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z6]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z4]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@6/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@6/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@6/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@6/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # None/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@6/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@6/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@6/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z6("Reduce@6", COOKIE1_, COOKIE2_, func_gen_Reduce_Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@15/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@15/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z15("DoMapAccum$1=1@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z15);


static refalrts::FnResult func_gen_Reduce_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@7/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@7/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@7/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@7/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@7/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@5/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z7]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z5]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@7/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@7/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@7/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@7/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Drive/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@7/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@7/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@7/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z7("Reduce@7", COOKIE1_, COOKIE2_, func_gen_Reduce_Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@16/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z16("DoMapAccum$1=1@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z16);


static refalrts::FnResult func_gen_Reduce_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@8/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@8/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@8/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@8/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@8/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@6/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z8]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z6]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@8/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@8/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@8/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@8/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Inline/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@8/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@8/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@8/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z8("Reduce@8", COOKIE1_, COOKIE2_, func_gen_Reduce_Z8);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@17/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z17("DoMapAccum$1=1@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z17);


static refalrts::FnResult func_gen_Reduce_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@9/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@9/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@9/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@9/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@9/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@7/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z9]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z7]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@9/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@9/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@9/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@9/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@9/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@9/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@9/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z9("Reduce@9", COOKIE1_, COOKIE2_, func_gen_Reduce_Z9);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@18/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@18/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@18/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@18/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z18("DoMapAccum$1=1@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z18);


static refalrts::FnResult func_gen_Reduce_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@10/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@10/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@10/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@10/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@10/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@8/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z10]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z8]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@10/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@10/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@10/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@10/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # None/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@10/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@10/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@10/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z10("Reduce@10", COOKIE1_, COOKIE2_, func_gen_Reduce_Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@19/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@19/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z19("DoMapAccum$1=1@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z19);


static refalrts::FnResult func_gen_Reduce_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@11/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@11/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@11/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@11/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@11/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@9/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z11]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z9]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@11/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@11/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@11/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@11/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Drive/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@11/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@11/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@11/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z11("Reduce@11", COOKIE1_, COOKIE2_, func_gen_Reduce_Z11);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@20/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@20/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@20/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@20/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z20("DoMapAccum$1=1@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z20);


static refalrts::FnResult func_gen_Reduce_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@12/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@12/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@12/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@12/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@12/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@10/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z12]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z10]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@12/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@12/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@12/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@12/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Inline/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@12/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@12/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@12/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z12("Reduce@12", COOKIE1_, COOKIE2_, func_gen_Reduce_Z12);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@21/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@21/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@21/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@21/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z21("DoMapAccum$1=1@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z21);


static refalrts::FnResult func_gen_Reduce_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@13/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@13/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@13/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@13/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@13/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@11/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z13]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z11]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@13/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@13/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@13/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@13/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@13/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@13/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@13/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z13("Reduce@13", COOKIE1_, COOKIE2_, func_gen_Reduce_Z13);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@22/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@22/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@22/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@22/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z22("DoMapAccum$1=1@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z22);


static refalrts::FnResult func_gen_Reduce_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@14/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@14/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@14/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@14/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@14/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@12/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z14]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z12]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@14/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@14/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@14/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@14/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # None/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@14/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@14/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@14/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z14("Reduce@14", COOKIE1_, COOKIE2_, func_gen_Reduce_Z14);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@23/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@23/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@23/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@23/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@23/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z23("DoMapAccum$1=1@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z23);


static refalrts::FnResult func_gen_Reduce_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@15/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@15/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@15/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@15/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@15/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@13/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z15]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z13]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@15/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@15/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@15/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@15/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Drive/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@15/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@15/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@15/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z15("Reduce@15", COOKIE1_, COOKIE2_, func_gen_Reduce_Z15);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@24/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@24/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@24/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z24("DoMapAccum$1=1@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z24);


static refalrts::FnResult func_gen_Reduce_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@16/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@16/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@16/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@16/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@16/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@14/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z16]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z14]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@16/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@16/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@16/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@16/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Inline/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@16/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@16/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@16/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z16("Reduce@16", COOKIE1_, COOKIE2_, func_gen_Reduce_Z16);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z25(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@25/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@25/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@25/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@25/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@25/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z25("DoMapAccum$1=1@25", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z25);


static refalrts::FnResult func_gen_Reduce_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@17/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@17/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@17/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@17/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@17/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@15/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z17]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z15]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@17/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@17/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@17/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@17/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@17/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@17/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@17/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z17("Reduce@17", COOKIE1_, COOKIE2_, func_gen_Reduce_Z17);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z26(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@26/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@26/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@26/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@26/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@26/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z26("DoMapAccum$1=1@26", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z26);


static refalrts::FnResult func_gen_Reduce_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Reduce@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@18/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@18/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@18/4 (/5 t.new#6/23 (/21 e.new#7/19 )/22 (/17 e.new#8/15 )/18 )/6 t.new#9/9 e.new#10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new#7 as range 19
      // closed e.new#8 as range 15
      // closed e.new#10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@18/4 (/5 (/23 (/37 e.8#0/35 )/38 e.7#0/31 )/24 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 (/9 (/41 e.3#0/39 )/42 (/45 e.6#0/43 )/46 )/10 e.Tail#1/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[9] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_left( context[43], context[44], context[33], context[34] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.8#0 as range 35
        // closed e.7#0 as range 31
        // closed e.2#0 as range 25
        // closed e.4#0 as range 27
        // closed e.3#0 as range 39
        // closed e.6#0 as range 43
        // closed e.Tail#1 as range 29
        //DEBUG: e.8#0: 35
        //DEBUG: e.7#0: 31
        //DEBUG: e.2#0: 25
        //DEBUG: e.4#0: 27
        //DEBUG: e.3#0: 39
        //DEBUG: e.6#0: 43
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@18/4 AsIs: (/5 } Tile{ AsIs: e.Tail#1/29 } )/47 </48 Tile{ HalfReuse: & OptFunction\1=1/24 AsIs: (/21 AsIs: e.2#0/25 AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1:1@16/9 AsIs: (/41 } Tile{ AsIs: e.7#0/31 } )/49 (/50 Tile{ AsIs: e.3#0/39 } )/51 </52 Tile{ HalfReuse: & DoMapAccum@9/23 AsIs: (/37 AsIs: e.8#0/35 HalfReuse: # None/38 } )/53 Tile{ HalfReuse: (/42 HalfReuse: )/45 AsIs: e.6#0/43 HalfReuse: >/46 HalfReuse: >/10 } >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z18]);
        refalrts::reinit_name(context[24], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1B1Z16]);
        refalrts::reinit_name(context[23], functions[efunc_gen_DoMapAccum_Z9]);
        refalrts::reinit_ident(context[38], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[45]);
        refalrts::reinit_close_call(context[46]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[37], context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[41], context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_evar( res, context[42], context[10] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[24], context[41] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@18/4 (/5 t.#0/23 (/21 e.2#0/25 )/22 (/17 e.4#0/27 )/18 )/6 t.Next#1/9 e.Tail#1/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2#0 as range 25
      // closed e.4#0 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.#0: 23
      //DEBUG: t.Next#1: 9
      //DEBUG: e.2#0: 25
      //DEBUG: e.4#0: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@18/4 AsIs: (/5 AsIs: t.#0/23 AsIs: (/21 } Tile{ AsIs: e.2#0/25 } Tile{ AsIs: t.Next#1/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4#0/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@18/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@18/4 } (/13 Tile{ AsIs: e.Tail#1/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # None/19 )/20 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@18/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@18/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@18/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z18("Reduce@18", COOKIE1_, COOKIE2_, func_gen_Reduce_Z18);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z27(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@27/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@27/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@27/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@27/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@27/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z27("DoMapAccum$1=1@27", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z27);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@1/4 e.CallReplacer#4/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.CallReplacer#4 as range 5
    //DEBUG: e.CallReplacer#4: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/7 (/8 (/9 # TkVariable/10 'e'/11 # DRIVEN/12 0/13 Tile{ HalfReuse: )/0 HalfReuse: ':'/4 AsIs: e.CallReplacer#4/5 HalfReuse: )/1 } (/14 )/15 )/16 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[7]);
    refalrts::alloc_open_bracket(vm, context[8]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_ident(vm, context[10], identifiers[ident_TkVariable]);
    refalrts::alloc_char(vm, context[11], 'e');
    refalrts::alloc_ident(vm, context[12], identifiers[ident_DRIVEN]);
    refalrts::alloc_number(vm, context[13], 0UL);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_char(context[4], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[16] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[1] );
    refalrts::link_brackets( context[9], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[16] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoOptSentence-MakeSubstitutions$1:1$1=1@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1("DoOptSentence-MakeSubstitutions$1:1$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@1/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/22 )/9 (/12 e.Args0#1/24 )/13 (/16 e.Name0#1/26 )/17 (/20 e.Rest0#1/28 )/21 e.NewSubsts#5/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.SentenceVars#4 as range 22
    // closed e.Args0#1 as range 24
    // closed e.Name0#1 as range 26
    // closed e.Rest0#1 as range 28
    // closed e.NewSubsts#5 as range 30
    //DEBUG: s.DriveMode#5: 5
    //DEBUG: e.SentenceVars#4: 22
    //DEBUG: e.Args0#1: 24
    //DEBUG: e.Name0#1: 26
    //DEBUG: e.Rest0#1: 28
    //DEBUG: e.NewSubsts#5: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions/4 AsIs: s.DriveMode#5/5 AsIs: (/8 AsIs: e.SentenceVars#4/22 AsIs: )/9 AsIs: (/12 AsIs: e.Args0#1/24 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.NewSubsts#5/30 } )/32 (/33 # Function/34 (/35 </36 & RemainderFuncIncName/37 Tile{ AsIs: e.Name0#1/26 } >/38 Tile{ AsIs: )/17 HalfReuse: # Sentences/20 AsIs: e.Rest0#1/28 AsIs: )/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_Function]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_RemainderFuncIncName]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_DoOptSentencem_MakeSubstitutions]);
    refalrts::reinit_ident(context[20], identifiers[ident_Sentences]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[21] );
    refalrts::link_brackets( context[35], context[17] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[16], context[32] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[32], context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@1/4 s.DriveMode#5/5 (/8 e.SentenceVars#4/6 )/9 (/12 e.Args0#1/10 )/13 (/16 e.Name0#1/14 )/17 (/20 e.Rest0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.SentenceVars#4 as range 6
  // closed e.Args0#1 as range 10
  // closed e.Name0#1 as range 14
  // closed e.Rest0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.DriveMode#5: 5
  //DEBUG: e.SentenceVars#4: 6
  //DEBUG: e.Args0#1: 10
  //DEBUG: e.Name0#1: 14
  //DEBUG: e.Rest0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@0/4 AsIs: s.DriveMode#5/5 AsIs: (/8 AsIs: e.SentenceVars#4/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args0#1/10 AsIs: )/13 AsIs: (/16 } )/22 (/23 Tile{ AsIs: e.Name0#1/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Rest0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[23], context[17] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z1("DoOptSentence-MakeSubstitutions$1:1$2=2@1", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@2/4 (/7 e.SentenceVars#4/21 )/8 (/11 e.Args0#1/23 )/12 (/15 e.Name0#1/25 )/16 (/19 e.Rest0#1/27 )/20 e.NewSubsts#5/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.SentenceVars#4 as range 21
    // closed e.Args0#1 as range 23
    // closed e.Name0#1 as range 25
    // closed e.Rest0#1 as range 27
    // closed e.NewSubsts#5 as range 29
    //DEBUG: e.SentenceVars#4: 21
    //DEBUG: e.Args0#1: 23
    //DEBUG: e.Name0#1: 25
    //DEBUG: e.Rest0#1: 27
    //DEBUG: e.NewSubsts#5: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@4/4 AsIs: (/7 AsIs: e.SentenceVars#4/21 AsIs: )/8 AsIs: (/11 AsIs: e.Args0#1/23 AsIs: )/12 } Tile{ AsIs: e.NewSubsts#5/29 } Tile{ AsIs: (/15 } # Function/31 (/32 </33 & RemainderFuncIncName/34 Tile{ AsIs: e.Name0#1/25 } >/35 Tile{ AsIs: )/16 HalfReuse: # Sentences/19 AsIs: e.Rest0#1/27 AsIs: )/20 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[31], identifiers[ident_Function]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_RemainderFuncIncName]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z4]);
    refalrts::reinit_ident(context[19], identifiers[ident_Sentences]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[20] );
    refalrts::link_brackets( context[32], context[16] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@2/4 (/7 e.SentenceVars#4/5 )/8 (/11 e.Args0#1/9 )/12 (/15 e.Name0#1/13 )/16 (/19 e.Rest0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.SentenceVars#4 as range 5
  // closed e.Args0#1 as range 9
  // closed e.Name0#1 as range 13
  // closed e.Rest0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.SentenceVars#4: 5
  //DEBUG: e.Args0#1: 9
  //DEBUG: e.Name0#1: 13
  //DEBUG: e.Rest0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.SentenceVars#4/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Args0#1/9 } )/22 (/23 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Name0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Rest0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[23], context[12] );
  refalrts::link_brackets( context[11], context[22] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z2("DoOptSentence-MakeSubstitutions$1:1$2=2@2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z2);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@2/4 (/7 e.Substitutions0#1/13 )/8 (/11 e.NewSubsts#5/15 )/12 e.CallReplacer#4/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Substitutions0#1 as range 13
    // closed e.NewSubsts#5 as range 15
    // closed e.CallReplacer#4 as range 17
    //DEBUG: e.Substitutions0#1: 13
    //DEBUG: e.NewSubsts#5: 15
    //DEBUG: e.CallReplacer#4: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0#1/13 } Tile{ AsIs: e.NewSubsts#5/15 } Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # TkVariable/19 'e'/20 # DRIVEN/21 0/22 Tile{ AsIs: )/12 } ':'/23 Tile{ AsIs: e.CallReplacer#4/17 } Tile{ AsIs: )/8 AsIs: (/11 } )/24 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_TkVariable]);
    refalrts::alloc_char(vm, context[20], 'e');
    refalrts::alloc_ident(vm, context[21], identifiers[ident_DRIVEN]);
    refalrts::alloc_number(vm, context[22], 0UL);
    refalrts::alloc_char(vm, context[23], ':');
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[11], context[24] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1$1=1@2/4 (/7 e.Substitutions0#1/5 )/8 (/11 e.NewSubsts#5/9 )/12 e.dyn#0/2 >/1
  // closed e.Substitutions0#1 as range 5
  // closed e.NewSubsts#5 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Substitutions0#1: 5
  //DEBUG: e.NewSubsts#5: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$1=1@0/4 AsIs: (/7 } Tile{ AsIs: e.Substitutions0#1/5 } Tile{ AsIs: e.NewSubsts#5/9 } Tile{ AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z2("DoOptSentence-MakeSubstitutions$1:1$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1Z2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & UpdateDriveInfo=3@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=3@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & UpdateDriveInfo=3@1/4 (/7 e.Inlines0#3/13 )/8 (/11 e.Drives0#2/15 )/12 (/21 e.Intrinsics#4/19 )/22 e.AST#4/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Inlines0#3 as range 13
    // closed e.Drives0#2 as range 15
    // closed e.Intrinsics#4 as range 19
    // closed e.AST#4 as range 17
    //DEBUG: e.Inlines0#3: 13
    //DEBUG: e.Drives0#2: 15
    //DEBUG: e.Intrinsics#4: 19
    //DEBUG: e.AST#4: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=4@1/23 (/24 Tile{ AsIs: e.Intrinsics#4/19 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Inlines0#3/13 AsIs: )/8 AsIs: (/11 AsIs: e.Drives0#2/15 AsIs: )/12 HalfReuse: </21 } & DoMapAccum@4/25 (/26 )/27 (/28 Tile{ AsIs: )/22 AsIs: e.AST#4/17 AsIs: >/1 } >/29 Tile{ ]] }
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_UpdateDriveInfo_A4Z1]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[21]);
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[28], context[22] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[4], context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=3@1/4 (/7 e.Inlines0#3/5 )/8 (/11 e.Drives0#2/9 )/12 e.dyn#0/2 >/1
  // closed e.Inlines0#3 as range 5
  // closed e.Drives0#2 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Inlines0#3: 5
  //DEBUG: e.Drives0#2: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & UpdateDriveInfo=3@0/14 (/15 )/16 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Inlines0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Drives0#2/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_UpdateDriveInfo_A3Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A3Z1("UpdateDriveInfo=3@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A3Z1);


static refalrts::FnResult func_gen_Reduce_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@3/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@3/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@3/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@3/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z3("Reduce$1=1@3", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z3);


static refalrts::FnResult func_gen_Reduce_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@4/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@4/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@4/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@4/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z4("Reduce$1=1@4", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z4);


static refalrts::FnResult func_gen_Reduce_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@5/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@5/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@5/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@5/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z5("Reduce$1=1@5", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z5);


static refalrts::FnResult func_gen_Reduce_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@6/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@6/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@6/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@6/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z6("Reduce$1=1@6", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z6);


static refalrts::FnResult func_gen_Reduce_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@7/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@7/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@7/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@7/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z7("Reduce$1=1@7", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z7);


static refalrts::FnResult func_gen_Reduce_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@8/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@8/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@8/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@8/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z8("Reduce$1=1@8", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z8);


static refalrts::FnResult func_gen_Reduce_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@9/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@9/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@9/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@9/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z9("Reduce$1=1@9", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z9);


static refalrts::FnResult func_gen_Reduce_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@10/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@10/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@10/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@10/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z10("Reduce$1=1@10", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z10);


static refalrts::FnResult func_gen_Reduce_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@11/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@11/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@11/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@11/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z11("Reduce$1=1@11", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z11);


static refalrts::FnResult func_gen_Reduce_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@12/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@12/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@12/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@12/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z12("Reduce$1=1@12", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z12);


static refalrts::FnResult func_gen_Reduce_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@13/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@13/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@13/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@13/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z13("Reduce$1=1@13", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z13);


static refalrts::FnResult func_gen_Reduce_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@14/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@14/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@14/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@14/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z14("Reduce$1=1@14", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z14);


static refalrts::FnResult func_gen_Reduce_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@15/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@15/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@15/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@15/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z15("Reduce$1=1@15", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z15);


static refalrts::FnResult func_gen_Reduce_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@16/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@16/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@16/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@16/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z16("Reduce$1=1@16", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z16);


static refalrts::FnResult func_gen_Reduce_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@17/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@17/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@17/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@17/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z17("Reduce$1=1@17", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z17);


static refalrts::FnResult func_gen_Reduce_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@18/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@18/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@18/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@18/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z18("Reduce$1=1@18", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z18);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 83 elems
  refalrts::Iter context[83];
  refalrts::zeros( context, 83 );
  // </0 & DoOptSentence-MakeSubstitutions@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 t.new#4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_right( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.new#10/15 )/8 (/11 e.new#11/17 )/12 e.new#9/19 (/13 # Function/23 (/26 e.new#5/24 )/27 # Sentences/28 (/31 (/35 e.new#6/33 )/36 (/39 e.new#7/37 )/40 )/32 e.new#8/21 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    if( ! refalrts::brackets_term( context[21], context[22], context[13] ) )
      continue;
    context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
    if( ! context[23] )
      continue;
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[21], context[22] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
    if( ! context[28] )
      continue;
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_left( context[29], context[30], context[21], context[22] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    context[33] = 0;
    context[34] = 0;
    context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
    if( ! context[35] )
      continue;
    refalrts::bracket_pointers(context[35], context[36]);
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[29], context[30] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    // closed e.new#10 as range 15
    // closed e.new#11 as range 17
    // closed e.new#9 as range 19
    // closed e.new#5 as range 24
    // closed e.new#6 as range 33
    // closed e.new#7 as range 37
    // closed e.new#8 as range 21
    do {
      // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.X#0/41 )/8 (/11 e.X0#0/43 )/12 e.X1#0/45 (/13 # Function/23 (/26 e.Name#1/47 )/27 # Sentences/28 (/31 (/35 e.LS#1/49 )/36 (/39 (/57 # CallBrackets/59 (/62 # Symbol/64 # Name/65 '_'/66 '_'/67 'S'/68 't'/69 'e'/70 'p'/71 '-'/72 'D'/73 'r'/74 'o'/75 'p'/76 )/63 )/58 e.#0/51 )/40 )/32 e.Rest#1/53 )/14 >/1
      context[41] = context[15];
      context[42] = context[16];
      context[43] = context[17];
      context[44] = context[18];
      context[45] = context[19];
      context[46] = context[20];
      context[47] = context[24];
      context[48] = context[25];
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[37];
      context[52] = context[38];
      context[53] = context[21];
      context[54] = context[22];
      context[55] = 0;
      context[56] = 0;
      context[57] = refalrts::brackets_left( context[55], context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      refalrts::bracket_pointers(context[57], context[58]);
      context[59] = refalrts::ident_left( identifiers[ident_CallBrackets], context[55], context[56] );
      if( ! context[59] )
        continue;
      context[60] = 0;
      context[61] = 0;
      context[62] = refalrts::brackets_left( context[60], context[61], context[55], context[56] );
      if( ! context[62] )
        continue;
      refalrts::bracket_pointers(context[62], context[63]);
      context[64] = refalrts::ident_left( identifiers[ident_Symbol], context[60], context[61] );
      if( ! context[64] )
        continue;
      context[65] = refalrts::ident_left( identifiers[ident_Name], context[60], context[61] );
      if( ! context[65] )
        continue;
      context[66] = refalrts::char_left( '_', context[60], context[61] );
      if( ! context[66] )
        continue;
      context[67] = refalrts::char_left( '_', context[60], context[61] );
      if( ! context[67] )
        continue;
      context[68] = refalrts::char_left( 'S', context[60], context[61] );
      if( ! context[68] )
        continue;
      context[69] = refalrts::char_left( 't', context[60], context[61] );
      if( ! context[69] )
        continue;
      context[70] = refalrts::char_left( 'e', context[60], context[61] );
      if( ! context[70] )
        continue;
      context[71] = refalrts::char_left( 'p', context[60], context[61] );
      if( ! context[71] )
        continue;
      context[72] = refalrts::char_left( '-', context[60], context[61] );
      if( ! context[72] )
        continue;
      context[73] = refalrts::char_left( 'D', context[60], context[61] );
      if( ! context[73] )
        continue;
      context[74] = refalrts::char_left( 'r', context[60], context[61] );
      if( ! context[74] )
        continue;
      context[75] = refalrts::char_left( 'o', context[60], context[61] );
      if( ! context[75] )
        continue;
      context[76] = refalrts::char_left( 'p', context[60], context[61] );
      if( ! context[76] )
        continue;
      if( ! refalrts::empty_seq( context[60], context[61] ) )
        continue;
      if( ! refalrts::empty_seq( context[55], context[56] ) )
        continue;
      // closed e.X#0 as range 41
      // closed e.X0#0 as range 43
      // closed e.X1#0 as range 45
      // closed e.Name#1 as range 47
      // closed e.LS#1 as range 49
      // closed e.#0 as range 51
      // closed e.Rest#1 as range 53
      //DEBUG: e.X#0: 41
      //DEBUG: e.X0#0: 43
      //DEBUG: e.X1#0: 45
      //DEBUG: e.Name#1: 47
      //DEBUG: e.LS#1: 49
      //DEBUG: e.#0: 51
      //DEBUG: e.Rest#1: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/64 # Name/65 '_'/66 '_'/67 {REMOVED TILE} 'e'/70 'p'/71 '-'/72 'D'/73 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1@4/68 HalfReuse: (/69 } Tile{ AsIs: e.X1#0/45 } Tile{ AsIs: )/27 } Tile{ AsIs: (/62 } Tile{ AsIs: e.#0/51 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X#0/41 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/43 AsIs: )/12 } Tile{ HalfReuse: (/76 } Tile{ AsIs: e.Name#1/47 } Tile{ AsIs: )/40 HalfReuse: (/32 AsIs: e.Rest#1/53 AsIs: )/14 HalfReuse: (/1 } e.LS#1/49/77 Tile{ HalfReuse: )/74 } Tile{ HalfReuse: </13 HalfReuse: & Solve/23 AsIs: (/26 } e.X#0/41/79 Tile{ AsIs: )/63 HalfReuse: (/58 } Tile{ HalfReuse: (/75 } e.X0#0/43/81 Tile{ HalfReuse: )/28 HalfReuse: ':'/31 AsIs: (/35 AsIs: e.LS#1/49 AsIs: )/36 HalfReuse: )/39 HalfReuse: >/57 HalfReuse: >/59 } Tile{ ]] }
      refalrts::copy_evar(vm, context[77], context[78], context[49], context[50]);
      refalrts::copy_evar(vm, context[79], context[80], context[41], context[42]);
      refalrts::copy_evar(vm, context[81], context[82], context[43], context[44]);
      refalrts::reinit_name(context[68], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4]);
      refalrts::reinit_open_bracket(context[69]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[76]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[74]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[23], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[58]);
      refalrts::reinit_open_bracket(context[75]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::reinit_char(context[31], ':');
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_close_call(context[57]);
      refalrts::reinit_close_call(context[59]);
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[58], context[39] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[75], context[28] );
      refalrts::link_brackets( context[26], context[63] );
      refalrts::link_brackets( context[1], context[74] );
      refalrts::link_brackets( context[32], context[14] );
      refalrts::link_brackets( context[76], context[40] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[62], context[4] );
      refalrts::link_brackets( context[69], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[28], context[59] );
      res = refalrts::splice_evar( res, context[81], context[82] );
      res = refalrts::splice_elem( res, context[75] );
      res = refalrts::splice_evar( res, context[63], context[58] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[13], context[26] );
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_evar( res, context[77], context[78] );
      res = refalrts::splice_evar( res, context[40], context[1] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[76] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[62] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.X#0/41 )/8 (/11 e.X0#0/43 )/12 e.X1#0/45 (/13 # Function/23 (/26 e.Name#1/47 )/27 # Sentences/28 (/31 (/35 e.LS#1/49 )/36 (/39 e.RS#1/51 )/40 )/32 e.Rest#1/53 )/14 >/1
    context[41] = context[15];
    context[42] = context[16];
    context[43] = context[17];
    context[44] = context[18];
    context[45] = context[19];
    context[46] = context[20];
    context[47] = context[24];
    context[48] = context[25];
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[37];
    context[52] = context[38];
    context[53] = context[21];
    context[54] = context[22];
    // closed e.X#0 as range 41
    // closed e.X0#0 as range 43
    // closed e.X1#0 as range 45
    // closed e.Name#1 as range 47
    // closed e.LS#1 as range 49
    // closed e.RS#1 as range 51
    // closed e.Rest#1 as range 53
    //DEBUG: e.X#0: 41
    //DEBUG: e.X0#0: 43
    //DEBUG: e.X1#0: 45
    //DEBUG: e.Name#1: 47
    //DEBUG: e.LS#1: 49
    //DEBUG: e.RS#1: 51
    //DEBUG: e.Rest#1: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptSentence-MakeSubstitutions$1:1@4/55 (/56 Tile{ AsIs: e.X1#0/45 } Tile{ AsIs: )/27 } (/57 Tile{ AsIs: e.RS#1/51 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X#0/41 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/43 AsIs: )/12 } (/58 Tile{ AsIs: e.Name#1/47 } Tile{ AsIs: )/40 HalfReuse: (/32 AsIs: e.Rest#1/53 AsIs: )/14 HalfReuse: (/1 } e.LS#1/49/59 )/61 Tile{ HalfReuse: </13 HalfReuse: & Solve/23 AsIs: (/26 } e.X#0/41/62 )/64 (/65 (/66 e.X0#0/43/67 Tile{ HalfReuse: )/28 HalfReuse: ':'/31 AsIs: (/35 AsIs: e.LS#1/49 AsIs: )/36 HalfReuse: )/39 } >/69 >/70 Tile{ ]] }
    refalrts::alloc_name(vm, context[55], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4]);
    refalrts::alloc_open_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::copy_evar(vm, context[59], context[60], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::alloc_open_bracket(vm, context[66]);
    refalrts::copy_evar(vm, context[67], context[68], context[43], context[44]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::alloc_close_call(vm, context[70]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[32]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[23], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[28]);
    refalrts::reinit_char(context[31], ':');
    refalrts::reinit_close_bracket(context[39]);
    refalrts::push_stack( vm, context[70] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[65], context[39] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[66], context[28] );
    refalrts::link_brackets( context[26], context[64] );
    refalrts::link_brackets( context[1], context[61] );
    refalrts::link_brackets( context[32], context[14] );
    refalrts::link_brackets( context[58], context[40] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[57], context[4] );
    refalrts::link_brackets( context[56], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[69], context[70] );
    res = refalrts::splice_evar( res, context[28], context[39] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[64], context[66] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[13], context[26] );
    res = refalrts::splice_elem( res, context[61] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[4], context[12] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.X#0/15 )/8 (/11 e.X0#0/17 )/12 e.X1#0/19 t.RestFunction#1/13 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.X#0 as range 15
    // closed e.X0#0 as range 17
    // closed e.X1#0 as range 19
    //DEBUG: t.RestFunction#1: 13
    //DEBUG: e.X#0: 15
    //DEBUG: e.X0#0: 17
    //DEBUG: e.X1#0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 e.X#0/15 )/8 (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.X1#0/19 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction#1/13 } Tile{ AsIs: e.X0#0/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions@4/4 (/7 e.X#0/5 )/8 (/11 e.X0#0/9 )/12 e.X1#0/2 t.dyn#0/13 >/1
  // closed e.X#0 as range 5
  // closed e.X0#0 as range 9
  // closed e.X1#0 as range 2
  //DEBUG: t.dyn#0: 13
  //DEBUG: e.X#0: 5
  //DEBUG: e.X0#0: 9
  //DEBUG: e.X1#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.X#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/9 AsIs: )/12 } (/16 Tile{ AsIs: e.X1#0/2 } )/17 Tile{ AsIs: t.dyn#0/13 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_Z4("DoOptSentence-MakeSubstitutions@4", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_Z4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=4@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=4@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & UpdateDriveInfo=4@1/4 (/7 e.Intrinsics0#4/17 )/8 (/11 e.Inlines0#3/19 )/12 (/15 e.Drives0#2/21 )/16 (/27 e.Metatables#5/25 )/28 e.AST#5/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Intrinsics0#4 as range 17
    // closed e.Inlines0#3 as range 19
    // closed e.Drives0#2 as range 21
    // closed e.Metatables#5 as range 25
    // closed e.AST#5 as range 23
    //DEBUG: e.Intrinsics0#4: 17
    //DEBUG: e.Inlines0#3: 19
    //DEBUG: e.Drives0#2: 21
    //DEBUG: e.Metatables#5: 25
    //DEBUG: e.AST#5: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=5@1/29 (/30 Tile{ AsIs: e.AST#5/23 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Metatables#5/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Intrinsics0#4/17 AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0#3/19 AsIs: )/12 HalfReuse: </15 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Drives0#2/21 } )/33 (/34 e.Intrinsics0#4/17/35 Tile{ AsIs: )/28 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_UpdateDriveInfo_A5Z1]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[17], context[18]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[34], context[28] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::link_brackets( context[30], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[16], context[27] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=4@1/4 (/7 e.Intrinsics0#4/5 )/8 (/11 e.Inlines0#3/9 )/12 (/15 e.Drives0#2/13 )/16 e.dyn#0/2 >/1
  // closed e.Intrinsics0#4 as range 5
  // closed e.Inlines0#3 as range 9
  // closed e.Drives0#2 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Intrinsics0#4: 5
  //DEBUG: e.Inlines0#3: 9
  //DEBUG: e.Drives0#2: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=4@0/4 AsIs: (/7 } )/17 (/18 Tile{ AsIs: e.Intrinsics0#4/5 } )/19 (/20 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives0#2/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A4Z1("UpdateDriveInfo=4@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A4Z1);


static refalrts::FnResult func_gen_OptSentence_S1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@1/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@1/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@1/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@1/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@1/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Drive/73 Tile{ Reuse: # Drive/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Drive]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Drive]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@1/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Drive]);
        refalrts::update_ident(context[41], identifiers[ident_Drive]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@1/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Drive]);
      refalrts::update_ident(context[41], identifiers[ident_Drive]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@1/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Drive/37 # Drive/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@1/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Drive/14 # Drive/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z1("OptSentence$1:1@1", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z1);


static refalrts::FnResult func_gen_OptSentence_S1B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@2/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@2/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@2/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@2/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@2/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Drive/73 Tile{ Reuse: # Inline/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Drive]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Inline]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@2/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Drive]);
        refalrts::update_ident(context[41], identifiers[ident_Inline]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@2/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Drive]);
      refalrts::update_ident(context[41], identifiers[ident_Inline]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@2/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Drive/37 # Inline/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@2/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Drive/14 # Inline/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z2("OptSentence$1:1@2", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z2);


static refalrts::FnResult func_gen_OptSentence_S1B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@3/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@3/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@3/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@3/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@3/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Drive/73 Tile{ Reuse: # Intrinsic/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Drive]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@3/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Drive]);
        refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@3/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Drive]);
      refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@3/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Drive/37 # Intrinsic/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@3/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Drive/14 # Intrinsic/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z3("OptSentence$1:1@3", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z3);


static refalrts::FnResult func_gen_OptSentence_S1B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@4/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@4/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@4/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@4/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@4/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Drive/73 Tile{ Reuse: # None/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Drive]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_None]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@4/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Drive]);
        refalrts::update_ident(context[41], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@4/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Drive/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Drive]);
      refalrts::update_ident(context[41], identifiers[ident_None]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@4/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Drive/37 # None/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@4/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Drive/14 # None/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z4("OptSentence$1:1@4", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z4);


static refalrts::FnResult func_gen_OptSentence_S1B1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@5/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@5/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@5/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@5/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@5/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@5/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Inline/73 Tile{ Reuse: # Drive/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Inline]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Drive]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@5/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Inline]);
        refalrts::update_ident(context[41], identifiers[ident_Drive]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@5/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Inline]);
      refalrts::update_ident(context[41], identifiers[ident_Drive]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@5/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Inline/37 # Drive/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@5/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Inline/14 # Drive/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z5("OptSentence$1:1@5", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z5);


static refalrts::FnResult func_gen_OptSentence_S1B1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@6/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@6/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@6/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@6/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@6/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@6/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Inline/73 Tile{ Reuse: # Inline/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Inline]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Inline]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@6/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Inline]);
        refalrts::update_ident(context[41], identifiers[ident_Inline]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@6/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Inline]);
      refalrts::update_ident(context[41], identifiers[ident_Inline]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@6/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Inline/37 # Inline/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@6/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Inline/14 # Inline/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z6("OptSentence$1:1@6", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z6);


static refalrts::FnResult func_gen_OptSentence_S1B1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@7/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@7/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@7/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@7/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@7/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Inline/73 Tile{ Reuse: # Intrinsic/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Inline]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@7/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Inline]);
        refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@7/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Inline]);
      refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@7/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Inline/37 # Intrinsic/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@7/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Inline/14 # Intrinsic/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z7("OptSentence$1:1@7", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z7);


static refalrts::FnResult func_gen_OptSentence_S1B1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@8/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@8/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@8/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@8/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@8/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@8/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Inline/73 Tile{ Reuse: # None/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Inline]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_None]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@8/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Inline]);
        refalrts::update_ident(context[41], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@8/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Inline/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Inline]);
      refalrts::update_ident(context[41], identifiers[ident_None]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@8/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Inline/37 # None/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@8/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Inline/14 # None/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z8("OptSentence$1:1@8", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z8);


static refalrts::FnResult func_gen_OptSentence_S1B1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@9/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@9/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@9/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@9/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@9/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@9/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Intrinsic/73 Tile{ Reuse: # Drive/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Intrinsic]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Drive]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@9/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
        refalrts::update_ident(context[41], identifiers[ident_Drive]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@9/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[41], identifiers[ident_Drive]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@9/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Intrinsic/37 # Drive/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@9/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Intrinsic/14 # Drive/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z9("OptSentence$1:1@9", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z9);


static refalrts::FnResult func_gen_OptSentence_S1B1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@10/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@10/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@10/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@10/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@10/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@10/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Intrinsic/73 Tile{ Reuse: # Inline/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Intrinsic]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Inline]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@10/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
        refalrts::update_ident(context[41], identifiers[ident_Inline]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@10/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[41], identifiers[ident_Inline]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@10/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Intrinsic/37 # Inline/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@10/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Intrinsic/14 # Inline/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z10("OptSentence$1:1@10", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z10);


static refalrts::FnResult func_gen_OptSentence_S1B1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@11/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@11/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@11/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@11/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@11/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@11/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Intrinsic/73 Tile{ Reuse: # Intrinsic/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Intrinsic]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@11/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
        refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@11/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@11/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Intrinsic/37 # Intrinsic/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@11/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Intrinsic/14 # Intrinsic/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z11("OptSentence$1:1@11", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z11);


static refalrts::FnResult func_gen_OptSentence_S1B1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@12/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@12/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@12/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@12/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@12/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@12/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # Intrinsic/73 Tile{ Reuse: # None/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Intrinsic]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_None]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@12/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
        refalrts::update_ident(context[41], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@12/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # Intrinsic/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[41], identifiers[ident_None]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@12/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # Intrinsic/37 # None/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@12/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # Intrinsic/14 # None/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z12("OptSentence$1:1@12", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z12);


static refalrts::FnResult func_gen_OptSentence_S1B1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@13/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@13/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@13/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@13/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@13/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@13/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # None/73 Tile{ Reuse: # Drive/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_None]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Drive]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@13/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_None]);
        refalrts::update_ident(context[41], identifiers[ident_Drive]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@13/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Drive/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_None]);
      refalrts::update_ident(context[41], identifiers[ident_Drive]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@13/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # None/37 # Drive/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@13/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # None/14 # Drive/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z13("OptSentence$1:1@13", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z13);


static refalrts::FnResult func_gen_OptSentence_S1B1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@14/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@14/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@14/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@14/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@14/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@14/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # None/73 Tile{ Reuse: # Inline/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_None]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Inline]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@14/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_None]);
        refalrts::update_ident(context[41], identifiers[ident_Inline]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@14/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Inline/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_None]);
      refalrts::update_ident(context[41], identifiers[ident_Inline]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@14/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # None/37 # Inline/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@14/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # None/14 # Inline/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z14("OptSentence$1:1@14", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z14);


static refalrts::FnResult func_gen_OptSentence_S1B1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@15/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@15/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@15/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@15/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@15/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@15/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # None/73 Tile{ Reuse: # Intrinsic/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_None]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_Intrinsic]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@15/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_None]);
        refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@15/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # Intrinsic/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_None]);
      refalrts::update_ident(context[41], identifiers[ident_Intrinsic]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@15/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # None/37 # Intrinsic/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@15/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # None/14 # Intrinsic/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z15("OptSentence$1:1@15", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z15);


static refalrts::FnResult func_gen_OptSentence_S1B1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & OptSentence$1:1@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & OptSentence$1:1@16/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & OptSentence$1:1@16/4 (/7 e.new#7/13 )/8 (/11 e.new#8/15 )/12 (/21 e.new#4/19 t.new#5/23 )/22 e.new#6/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new#7 as range 13
    // closed e.new#8 as range 15
    // closed e.new#6 as range 17
    context[24] = refalrts::tvar_right( context[23], context[19], context[20] );
    if( ! context[24] )
      continue;
    // closed e.new#4 as range 19
    do {
      // </0 & OptSentence$1:1@16/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 # None/23 )/22 e.Right#2/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
        continue;
      // closed e.OptFuncs0#1 as range 25
      // closed e.Left0#1 as range 27
      // closed e.OptFuncNames#2 as range 29
      // closed e.Right#2 as range 31
      //DEBUG: e.OptFuncs0#1: 25
      //DEBUG: e.Left0#1: 27
      //DEBUG: e.OptFuncNames#2: 29
      //DEBUG: e.Right#2: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames#2/29 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.OptFuncs0#1/25 } )/33 Tile{ HalfReuse: (/23 AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/34 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[23], context[22] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_evar( res, context[23], context[22] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & OptSentence$1:1@16/4 (/7 t.new#13/42 e.new#14/25 )/8 (/11 e.new#15/27 )/12 (/21 e.new#12/29 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#10/36 )/39 e.new#11/33 )/24 )/22 e.new#9/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = 0;
      context[34] = 0;
      if( ! refalrts::brackets_term( context[33], context[34], context[23] ) )
        continue;
      context[35] = refalrts::ident_left( identifiers[ident_CallBrackets], context[33], context[34] );
      if( ! context[35] )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[33], context[34] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Symbol], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::ident_left( identifiers[ident_Name], context[36], context[37] );
      if( ! context[41] )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#12 as range 29
      // closed e.new#10 as range 36
      // closed e.new#11 as range 33
      // closed e.new#9 as range 31
      context[43] = refalrts::tvar_left( context[42], context[25], context[26] );
      if( ! context[43] )
        continue;
      // closed e.new#14 as range 25
      do {
        // </0 & OptSentence$1:1@16/4 (/7 t.new#21/42 e.new#22/44 )/8 (/11 e.new#23/46 )/12 (/21 e.new#20/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.new#18/50 '*'/57 s.new#19/56 )/39 e.new#17/52 )/24 )/22 e.new#16/54 >/1
        context[44] = context[25];
        context[45] = context[26];
        context[46] = context[27];
        context[47] = context[28];
        context[48] = context[29];
        context[49] = context[30];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[33];
        context[53] = context[34];
        context[54] = context[31];
        context[55] = context[32];
        // closed e.new#22 as range 44
        // closed e.new#23 as range 46
        // closed e.new#20 as range 48
        // closed e.new#17 as range 52
        // closed e.new#16 as range 54
        if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
          continue;
        context[57] = refalrts::char_right( '*', context[50], context[51] );
        if( ! context[57] )
          continue;
        // closed e.new#18 as range 50
        do {
          // </0 & OptSentence$1:1@16/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.8#0/64 # SUF/70 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          context[61] = context[47];
          context[62] = context[48];
          context[63] = context[49];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[52];
          context[67] = context[53];
          context[68] = context[54];
          context[69] = context[55];
          context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
          if( ! context[70] )
            continue;
          // closed e.0#0 as range 58
          // closed e.Left0#1 as range 60
          // closed e.OptFuncNames#2 as range 62
          // closed e.8#0 as range 64
          // closed e.2#0 as range 66
          // closed e.Right#2 as range 68
          //DEBUG: t.#0: 42
          //DEBUG: s.N#2: 56
          //DEBUG: e.0#0: 58
          //DEBUG: e.Left0#1: 60
          //DEBUG: e.OptFuncNames#2: 62
          //DEBUG: e.8#0: 64
          //DEBUG: e.2#0: 66
          //DEBUG: e.Right#2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N#2/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </71 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } )/72 # None/73 Tile{ Reuse: # None/40 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </23 HalfReuse: & FindOptInfo-Aux@1/35 AsIs: (/38 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/41 AsIs: e.8#0/64 HalfReuse: s.N2 #56/70 HalfReuse: >/57 } >/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_None]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
          refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
          refalrts::update_ident(context[40], identifiers[ident_None]);
          refalrts::reinit_open_bracket(context[39]);
          refalrts::reinit_open_call(context[23]);
          refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z1]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_svar( context[70], context[56] );
          refalrts::reinit_close_call(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::link_brackets( context[39], context[24] );
          refalrts::link_brackets( context[21], context[72] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[41], context[57] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[39], context[24] );
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & OptSentence$1:1@16/4 (/7 t.#0/42 e.0#0/58 )/8 (/11 e.Left0#1/60 )/12 (/21 e.OptFuncNames#2/62 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.7#0/64 '*'/57 s.N#2/56 )/39 e.2#0/66 )/24 )/22 e.Right#2/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        // closed e.0#0 as range 58
        // closed e.Left0#1 as range 60
        // closed e.OptFuncNames#2 as range 62
        // closed e.7#0 as range 64
        // closed e.2#0 as range 66
        // closed e.Right#2 as range 68
        //DEBUG: t.#0: 42
        //DEBUG: s.N#2: 56
        //DEBUG: e.0#0: 58
        //DEBUG: e.Left0#1: 60
        //DEBUG: e.OptFuncNames#2: 62
        //DEBUG: e.7#0: 64
        //DEBUG: e.2#0: 66
        //DEBUG: e.Right#2: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/62 } Tile{ AsIs: )/22 } </70 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/60 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/68 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/66 AsIs: )/24 } Tile{ AsIs: t.#0/42 } Tile{ HalfReuse: </35 } & FindOptInfo-Aux@2/71 Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/58 } Tile{ HalfReuse: )/57 } Tile{ AsIs: e.7#0/64 } Tile{ AsIs: s.N#2/56 } >/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_FindOptInfom_Aux_Z2]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
        refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::update_ident(context[40], identifiers[ident_None]);
        refalrts::update_ident(context[41], identifiers[ident_None]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_open_call(context[35]);
        refalrts::reinit_close_bracket(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[23], context[57] );
        refalrts::link_brackets( context[39], context[24] );
        refalrts::link_brackets( context[21], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[39], context[24] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[70] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptSentence$1:1@16/4 (/7 t.#0/42 e.0#0/44 )/8 (/11 e.Left0#1/46 )/12 (/21 e.OptFuncNames#2/48 (/23 # CallBrackets/35 (/38 # Symbol/40 # Name/41 e.5#0/50 )/39 e.2#0/52 )/24 )/22 e.Right#2/54 >/1
      context[44] = context[25];
      context[45] = context[26];
      context[46] = context[27];
      context[47] = context[28];
      context[48] = context[29];
      context[49] = context[30];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[33];
      context[53] = context[34];
      context[54] = context[31];
      context[55] = context[32];
      // closed e.0#0 as range 44
      // closed e.Left0#1 as range 46
      // closed e.OptFuncNames#2 as range 48
      // closed e.5#0 as range 50
      // closed e.2#0 as range 52
      // closed e.Right#2 as range 54
      //DEBUG: t.#0: 42
      //DEBUG: e.0#0: 44
      //DEBUG: e.Left0#1: 46
      //DEBUG: e.OptFuncNames#2: 48
      //DEBUG: e.5#0: 50
      //DEBUG: e.2#0: 52
      //DEBUG: e.Right#2: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/48 } Tile{ AsIs: )/22 } </56 Tile{ HalfReuse: & OptSentence-Aux=1/8 AsIs: (/11 AsIs: e.Left0#1/46 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/54 } Tile{ HalfReuse: )/38 Reuse: # None/40 Reuse: # None/41 } Tile{ HalfReuse: (/39 AsIs: e.2#0/52 AsIs: )/24 } Tile{ AsIs: t.#0/42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/35 } Tile{ AsIs: (/23 } Tile{ AsIs: e.0#0/44 } )/58 Tile{ AsIs: e.5#0/50 } >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_OptSentencem_Aux_A1]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::update_ident(context[40], identifiers[ident_None]);
      refalrts::update_ident(context[41], identifiers[ident_None]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_name(context[35], functions[efunc_gen_FindOptInfom_Aux_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[23], context[58] );
      refalrts::link_brackets( context[39], context[24] );
      refalrts::link_brackets( context[21], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[39], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1:1@16/4 (/7 e.OptFuncs0#1/25 )/8 (/11 e.Left0#1/27 )/12 (/21 e.OptFuncNames#2/29 t.Call#2/23 )/22 e.Right#2/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    // closed e.OptFuncs0#1 as range 25
    // closed e.Left0#1 as range 27
    // closed e.OptFuncNames#2 as range 29
    // closed e.Right#2 as range 31
    //DEBUG: t.Call#2: 23
    //DEBUG: e.OptFuncs0#1: 25
    //DEBUG: e.Left0#1: 27
    //DEBUG: e.OptFuncNames#2: 29
    //DEBUG: e.Right#2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames#2/29 } )/33 </34 & OptSentence-Aux*3/35 (/36 # None/37 # None/38 Tile{ AsIs: )/22 } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.Left0#1/27 AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Right#2/31 } )/39 )/40 Tile{ AsIs: t.Call#2/23 } Tile{ AsIs: e.OptFuncs0#1/25 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentencem_Aux_D3]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[38], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1S2A1]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[8], context[40] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[22] );
    refalrts::link_brackets( context[7], context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1:1@16/4 (/7 e.OptFuncs0#1/5 )/8 (/11 e.Left0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.OptFuncs0#1 as range 5
  // closed e.Left0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFuncs0#1: 5
  //DEBUG: e.Left0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1:1@0/4 AsIs: (/7 AsIs: e.OptFuncs0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Left0#1/9 AsIs: )/12 } (/13 # None/14 # None/15 )/16 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1B1Z16("OptSentence$1:1@16", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1B1Z16);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 94 elems
  refalrts::Iter context[94];
  refalrts::zeros( context, 94 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 (/31 e.new#7/29 )/32 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 29
  // closed e.new#8 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.new#11/33 )/8 (/11 e.new#12/35 )/12 (/15 e.new#13/37 )/16 (/19 e.new#14/39 )/20 (/23 e.new#15/41 )/24 (/27 e.new#16/43 )/28 (/31 e.new#17/45 )/32 s.new#9/49 e.new#10/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.new#11 as range 33
    // closed e.new#12 as range 35
    // closed e.new#13 as range 37
    // closed e.new#14 as range 39
    // closed e.new#15 as range 41
    // closed e.new#16 as range 43
    // closed e.new#17 as range 45
    if( ! refalrts::svar_left( context[49], context[47], context[48] ) )
      continue;
    // closed e.new#10 as range 47
    do {
      // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.new#19/50 )/8 (/11 e.new#20/52 )/12 (/15 e.new#21/54 )/16 (/19 e.new#22/56 )/20 (/23 e.new#23/58 )/24 (/27 e.new#24/60 )/28 (/31 e.new#25/62 )/32 # Success/49 e.new#18/64 >/1
      context[50] = context[33];
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[40];
      context[58] = context[41];
      context[59] = context[42];
      context[60] = context[43];
      context[61] = context[44];
      context[62] = context[45];
      context[63] = context[46];
      context[64] = context[47];
      context[65] = context[48];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[49] ) )
        continue;
      // closed e.new#19 as range 50
      // closed e.new#20 as range 52
      // closed e.new#21 as range 54
      // closed e.new#22 as range 56
      // closed e.new#23 as range 58
      // closed e.new#24 as range 60
      // closed e.new#25 as range 62
      // closed e.new#18 as range 64
      do {
        // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.X2#0/66 )/8 (/11 e.X3#0/68 )/12 (/15 e.X4#0/70 )/16 (/19 e.X5#0/72 )/20 (/23 e.X6#0/74 )/24 (/27 e.X7#0/76 )/28 (/31 e.X8#0/78 )/32 # Success/49 (/84 (/88 )/89 (/92 e.Assigns#3/90 )/93 )/85 >/1
        context[66] = context[50];
        context[67] = context[51];
        context[68] = context[52];
        context[69] = context[53];
        context[70] = context[54];
        context[71] = context[55];
        context[72] = context[56];
        context[73] = context[57];
        context[74] = context[58];
        context[75] = context[59];
        context[76] = context[60];
        context[77] = context[61];
        context[78] = context[62];
        context[79] = context[63];
        context[80] = context[64];
        context[81] = context[65];
        context[82] = 0;
        context[83] = 0;
        context[84] = refalrts::brackets_left( context[82], context[83], context[80], context[81] );
        if( ! context[84] )
          continue;
        refalrts::bracket_pointers(context[84], context[85]);
        context[86] = 0;
        context[87] = 0;
        context[88] = refalrts::brackets_left( context[86], context[87], context[82], context[83] );
        if( ! context[88] )
          continue;
        refalrts::bracket_pointers(context[88], context[89]);
        context[90] = 0;
        context[91] = 0;
        context[92] = refalrts::brackets_left( context[90], context[91], context[82], context[83] );
        if( ! context[92] )
          continue;
        refalrts::bracket_pointers(context[92], context[93]);
        if( ! refalrts::empty_seq( context[86], context[87] ) )
          continue;
        if( ! refalrts::empty_seq( context[82], context[83] ) )
          continue;
        if( ! refalrts::empty_seq( context[80], context[81] ) )
          continue;
        // closed e.X2#0 as range 66
        // closed e.X3#0 as range 68
        // closed e.X4#0 as range 70
        // closed e.X5#0 as range 72
        // closed e.X6#0 as range 74
        // closed e.X7#0 as range 76
        // closed e.X8#0 as range 78
        // closed e.Assigns#3 as range 90
        //DEBUG: e.X2#0: 66
        //DEBUG: e.X3#0: 68
        //DEBUG: e.X4#0: 70
        //DEBUG: e.X5#0: 72
        //DEBUG: e.X6#0: 74
        //DEBUG: e.X7#0: 76
        //DEBUG: e.X8#0: 78
        //DEBUG: e.Assigns#3: 90

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 e.X4#0/70 )/16 (/19 e.X5#0/72 )/20 (/23 e.X6#0/74 )/24 (/27 e.X7#0/76 )/28 (/31 e.X8#0/78 )/32 # Success/49 (/84 (/88 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1$1=1/4 AsIs: (/7 AsIs: e.X2#0/66 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Map@13/89 AsIs: (/92 AsIs: e.Assigns#3/90 AsIs: )/93 } Tile{ AsIs: e.X3#0/68 } Tile{ HalfReuse: >/85 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S1A1]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[89], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[85]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[85] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[92], context[93] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[85];
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[89], context[93] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.X2#0/66 )/8 (/11 e.X3#0/68 )/12 (/15 e.X4#0/70 )/16 (/19 e.X5#0/72 )/20 (/23 e.X6#0/74 )/24 (/27 e.X7#0/76 )/28 (/31 e.X8#0/78 )/32 # Success/49 e.M#3/80 >/1
      context[66] = context[50];
      context[67] = context[51];
      context[68] = context[52];
      context[69] = context[53];
      context[70] = context[54];
      context[71] = context[55];
      context[72] = context[56];
      context[73] = context[57];
      context[74] = context[58];
      context[75] = context[59];
      context[76] = context[60];
      context[77] = context[61];
      context[78] = context[62];
      context[79] = context[63];
      context[80] = context[64];
      context[81] = context[65];
      // closed e.X2#0 as range 66
      // closed e.X3#0 as range 68
      // closed e.X4#0 as range 70
      // closed e.X5#0 as range 72
      // closed e.X6#0 as range 74
      // closed e.X7#0 as range 76
      // closed e.X8#0 as range 78
      // closed e.M#3 as range 80
      //DEBUG: e.X2#0: 66
      //DEBUG: e.X3#0: 68
      //DEBUG: e.X4#0: 70
      //DEBUG: e.X5#0: 72
      //DEBUG: e.X6#0: 74
      //DEBUG: e.X7#0: 76
      //DEBUG: e.X8#0: 78
      //DEBUG: e.M#3: 80
      //66: e.X2#0
      //68: e.X3#0
      //70: e.X4#0
      //72: e.X5#0
      //74: e.X6#0
      //76: e.X7#0
      //78: e.X8#0
      //80: e.M#3

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[82]);
      refalrts::alloc_name(vm, context[84], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4S2C1]);
      refalrts::alloc_ident(vm, context[85], identifiers[ident_Inline]);
      refalrts::alloc_close_call(vm, context[83]);
      refalrts::push_stack( vm, context[83] );
      refalrts::push_stack( vm, context[82] );
      res = refalrts::splice_elem( res, context[83] );
      res = refalrts::splice_elem( res, context[85] );
      res = refalrts::splice_elem( res, context[84] );
      res = refalrts::splice_elem( res, context[82] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </82 & DoOptSentence-MakeSubstitutions$1:1@4$2?1/86 # Drive/87 >/83
        context[84] = 0;
        context[85] = 0;
        context[86] = refalrts::call_left( context[84], context[85], context[82], context[83] );
        context[87] = refalrts::ident_left( identifiers[ident_Drive], context[84], context[85] );
        if( ! context[87] )
          continue;
        if( ! refalrts::empty_seq( context[84], context[85] ) )
          continue;
        //DEBUG: e.X2#0: 66
        //DEBUG: e.X3#0: 68
        //DEBUG: e.X4#0: 70
        //DEBUG: e.X5#0: 72
        //DEBUG: e.X6#0: 74
        //DEBUG: e.X7#0: 76
        //DEBUG: e.X8#0: 78
        //DEBUG: e.M#3: 80

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X8#0/78 {REMOVED TILE} # Success/49 {REMOVED TILE} </82 & DoOptSentence-MakeSubstitutions$1:1@4$2?1/86 # Drive/87 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@3/12 AsIs: (/15 AsIs: e.X4#0/70 AsIs: )/16 AsIs: (/19 AsIs: e.X5#0/72 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.X2#0/66 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.X6#0/74 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.X7#0/76 AsIs: )/28 HalfReuse: </31 } Tile{ Reuse: & Map@14/4 AsIs: (/7 } Tile{ AsIs: e.X3#0/68 } Tile{ AsIs: )/32 } Tile{ AsIs: e.M#3/80 } Tile{ AsIs: >/83 AsIs: >/1 ]] }
        refalrts::reinit_name(context[12], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z3]);
        refalrts::reinit_open_call(context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[83] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[7], context[32] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[11], context[24] );
        refalrts::link_brackets( context[23], context[8] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[83];
        res = refalrts::splice_evar( res, context[80], context[81] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[24], context[31] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[12], context[23] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[82], context[83]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.X2#0/50 )/8 (/11 e.X3#0/52 )/12 (/15 e.X4#0/54 )/16 (/19 e.X5#0/56 )/20 (/23 e.X6#0/58 )/24 (/27 e.X7#0/60 )/28 (/31 e.X8#0/62 )/32 # Failure/49 >/1
    context[50] = context[33];
    context[51] = context[34];
    context[52] = context[35];
    context[53] = context[36];
    context[54] = context[37];
    context[55] = context[38];
    context[56] = context[39];
    context[57] = context[40];
    context[58] = context[41];
    context[59] = context[42];
    context[60] = context[43];
    context[61] = context[44];
    context[62] = context[45];
    context[63] = context[46];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[49] ) )
      continue;
    if( ! refalrts::empty_seq( context[47], context[48] ) )
      continue;
    // closed e.X2#0 as range 50
    // closed e.X3#0 as range 52
    // closed e.X4#0 as range 54
    // closed e.X5#0 as range 56
    // closed e.X6#0 as range 58
    // closed e.X7#0 as range 60
    // closed e.X8#0 as range 62
    //DEBUG: e.X2#0: 50
    //DEBUG: e.X3#0: 52
    //DEBUG: e.X4#0: 54
    //DEBUG: e.X5#0: 56
    //DEBUG: e.X6#0: 58
    //DEBUG: e.X7#0: 60
    //DEBUG: e.X8#0: 62

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X3#0/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X8#0/62 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions@4/12 AsIs: (/15 AsIs: e.X4#0/54 AsIs: )/16 AsIs: (/19 AsIs: e.X5#0/56 AsIs: )/20 } Tile{ AsIs: e.X2#0/50 } Tile{ HalfReuse: (/32 Reuse: # Function/49 HalfReuse: (/1 } Tile{ HalfReuse: </8 HalfReuse: & RemainderFuncIncName/11 } Tile{ AsIs: e.X6#0/58 } Tile{ HalfReuse: >/23 } Tile{ AsIs: )/24 HalfReuse: # Sentences/27 AsIs: e.X7#0/60 AsIs: )/28 HalfReuse: >/31 } Tile{ ]] }
    refalrts::reinit_name(context[12], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z4]);
    refalrts::reinit_open_bracket(context[32]);
    refalrts::update_ident(context[49], identifiers[ident_Function]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[11], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_close_call(context[23]);
    refalrts::reinit_ident(context[27], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[31]);
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[32], context[28] );
    refalrts::link_brackets( context[1], context[24] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[31] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[32], context[1] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[12], context[20] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.X2#0/33 )/8 (/11 e.X3#0/35 )/12 (/15 e.X4#0/37 )/16 (/19 e.X5#0/39 )/20 (/23 e.X6#0/41 )/24 (/27 e.X7#0/43 )/28 (/31 e.X8#0/45 )/32 e.Other#3/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.X2#0 as range 33
    // closed e.X3#0 as range 35
    // closed e.X4#0 as range 37
    // closed e.X5#0 as range 39
    // closed e.X6#0 as range 41
    // closed e.X7#0 as range 43
    // closed e.X8#0 as range 45
    // closed e.Other#3 as range 47
    //DEBUG: e.X2#0: 33
    //DEBUG: e.X3#0: 35
    //DEBUG: e.X4#0: 37
    //DEBUG: e.X5#0: 39
    //DEBUG: e.X6#0: 41
    //DEBUG: e.X7#0: 43
    //DEBUG: e.X8#0: 45
    //DEBUG: e.Other#3: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X4#0/37 )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/28 (/31 {REMOVED TILE} {REMOVED TILE} e.Other#3/47 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.X2#0/33 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/20 AsIs: (/23 AsIs: e.X6#0/41 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.X8#0/45 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.X3#0/35 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X7#0/43 } Tile{ AsIs: )/32 } Tile{ AsIs: e.X5#0/39 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[20], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[27], context[8] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[20], context[27] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1@4/4 (/7 e.X2#0/5 )/8 (/11 e.X3#0/9 )/12 (/15 e.X4#0/13 )/16 (/19 e.X5#0/17 )/20 (/23 e.X6#0/21 )/24 (/27 e.X7#0/25 )/28 (/31 e.X8#0/29 )/32 e.dyn#0/2 >/1
  // closed e.X2#0 as range 5
  // closed e.X3#0 as range 9
  // closed e.X4#0 as range 13
  // closed e.X5#0 as range 17
  // closed e.X6#0 as range 21
  // closed e.X7#0 as range 25
  // closed e.X8#0 as range 29
  // closed e.dyn#0 as range 2
  //DEBUG: e.X2#0: 5
  //DEBUG: e.X3#0: 9
  //DEBUG: e.X4#0: 13
  //DEBUG: e.X5#0: 17
  //DEBUG: e.X6#0: 21
  //DEBUG: e.X7#0: 25
  //DEBUG: e.X8#0: 29
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions$1:1@0/4 AsIs: (/7 AsIs: e.X2#0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.X3#0/9 } )/33 Tile{ HalfReuse: # Inline/12 AsIs: (/15 AsIs: e.X4#0/13 AsIs: )/16 AsIs: (/19 AsIs: e.X5#0/17 AsIs: )/20 AsIs: (/23 AsIs: e.X6#0/21 AsIs: )/24 AsIs: (/27 AsIs: e.X7#0/25 AsIs: )/28 AsIs: (/31 AsIs: e.X8#0/29 AsIs: )/32 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1Z0]);
  refalrts::reinit_ident(context[12], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[33] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4("DoOptSentence-MakeSubstitutions$1:1@4", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1Z4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A5Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & UpdateDriveInfo=5@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=5@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & UpdateDriveInfo=5@1/4 (/7 e.AST0#5/21 )/8 (/11 e.Metatables0#5/23 )/12 (/15 e.Intrinsics0#4/25 )/16 (/19 e.Inlines0#3/27 )/20 e.Drives#6/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.AST0#5 as range 21
    // closed e.Metatables0#5 as range 23
    // closed e.Intrinsics0#4 as range 25
    // closed e.Inlines0#3 as range 27
    // closed e.Drives#6 as range 29
    //DEBUG: e.AST0#5: 21
    //DEBUG: e.Metatables0#5: 23
    //DEBUG: e.Intrinsics0#4: 25
    //DEBUG: e.Inlines0#3: 27
    //DEBUG: e.Drives#6: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=6@1/4 AsIs: (/7 AsIs: e.AST0#5/21 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/23 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives#6/29 } Tile{ AsIs: )/20 } </31 & SetNames-Reject/32 (/33 Tile{ AsIs: e.Inlines0#3/27 } )/34 (/35 e.Intrinsics0#4/25/36 )/38 >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A6Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[35], context[38] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[39] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=5@1/4 (/7 e.AST0#5/5 )/8 (/11 e.Metatables0#5/9 )/12 (/15 e.Intrinsics0#4/13 )/16 (/19 e.Inlines0#3/17 )/20 e.dyn#0/2 >/1
  // closed e.AST0#5 as range 5
  // closed e.Metatables0#5 as range 9
  // closed e.Intrinsics0#4 as range 13
  // closed e.Inlines0#3 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#5: 5
  //DEBUG: e.Metatables0#5: 9
  //DEBUG: e.Intrinsics0#4: 13
  //DEBUG: e.Inlines0#3: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & UpdateDriveInfo=5@0/22 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#5/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/13 AsIs: )/16 AsIs: (/19 } )/23 (/24 Tile{ AsIs: e.Inlines0#3/17 } Tile{ AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_UpdateDriveInfo_A5Z0]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[24], context[20] );
  refalrts::link_brackets( context[19], context[23] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[0], context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A5Z1("UpdateDriveInfo=5@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A5Z1);


static refalrts::FnResult func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@3/4 (/7 e.X#0/25 )/8 (/11 e.X0#0/27 )/12 (/15 e.X1#0/29 )/16 (/19 e.X8#0/31 )/20 (/23 e.X9#0/33 )/24 e.NewSubsts#5/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.X#0 as range 25
    // closed e.X0#0 as range 27
    // closed e.X1#0 as range 29
    // closed e.X8#0 as range 31
    // closed e.X9#0 as range 33
    // closed e.NewSubsts#5 as range 35
    //DEBUG: e.X#0: 25
    //DEBUG: e.X0#0: 27
    //DEBUG: e.X1#0: 29
    //DEBUG: e.X8#0: 31
    //DEBUG: e.X9#0: 33
    //DEBUG: e.NewSubsts#5: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptSentence-MakeSubstitutions@4/4 AsIs: (/7 AsIs: e.X#0/25 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/27 AsIs: )/12 } Tile{ AsIs: e.X1#0/29 } Tile{ AsIs: e.NewSubsts#5/35 } Tile{ AsIs: (/15 } Tile{ HalfReuse: # Function/16 AsIs: (/19 } </37 & RemainderFuncIncName/38 Tile{ AsIs: e.X8#0/31 } >/39 Tile{ AsIs: )/20 HalfReuse: # Sentences/23 AsIs: e.X9#0/33 AsIs: )/24 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_RemainderFuncIncName]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_Z4]);
    refalrts::reinit_ident(context[16], identifiers[ident_Function]);
    refalrts::reinit_ident(context[23], identifiers[ident_Sentences]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptSentence-MakeSubstitutions$1:1$2=2@3/4 (/7 e.X#0/5 )/8 (/11 e.X0#0/9 )/12 (/15 e.X1#0/13 )/16 (/19 e.X8#0/17 )/20 (/23 e.X9#0/21 )/24 e.dyn#0/2 >/1
  // closed e.X#0 as range 5
  // closed e.X0#0 as range 9
  // closed e.X1#0 as range 13
  // closed e.X8#0 as range 17
  // closed e.X9#0 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.X#0: 5
  //DEBUG: e.X0#0: 9
  //DEBUG: e.X1#0: 13
  //DEBUG: e.X8#0: 17
  //DEBUG: e.X9#0: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & DoOptSentence-MakeSubstitutions$1:1$2=2@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.X#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0#0/9 AsIs: )/12 AsIs: (/15 AsIs: e.X1#0/13 AsIs: )/16 AsIs: (/19 AsIs: e.X8#0/17 AsIs: )/20 AsIs: (/23 AsIs: e.X9#0/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z3("DoOptSentence-MakeSubstitutions$1:1$2=2@3", COOKIE1_, COOKIE2_, func_gen_DoOptSentencem_MakeSubstitutions_S1B1S2A2Z3);


static refalrts::FnResult func_gen_UpdateDriveInfo_A6Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & UpdateDriveInfo=6@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=6@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & UpdateDriveInfo=6@1/4 (/7 e.AST0#5/21 )/8 (/11 e.Metatables0#5/23 )/12 (/15 e.Intrinsics0#4/25 )/16 (/19 e.Drives0#6/27 )/20 e.Inlines#7/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.AST0#5 as range 21
    // closed e.Metatables0#5 as range 23
    // closed e.Intrinsics0#4 as range 25
    // closed e.Drives0#6 as range 27
    // closed e.Inlines#7 as range 29
    //DEBUG: e.AST0#5: 21
    //DEBUG: e.Metatables0#5: 23
    //DEBUG: e.Intrinsics0#4: 25
    //DEBUG: e.Drives0#6: 27
    //DEBUG: e.Inlines#7: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=7@1/4 AsIs: (/7 AsIs: e.AST0#5/21 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/23 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Inlines#7/29 } Tile{ AsIs: )/20 } (/31 Tile{ AsIs: e.Drives0#6/27 } )/32 </33 & Map@4/34 >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A7Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=6@1/4 (/7 e.AST0#5/5 )/8 (/11 e.Metatables0#5/9 )/12 (/15 e.Intrinsics0#4/13 )/16 (/19 e.Drives0#6/17 )/20 e.dyn#0/2 >/1
  // closed e.AST0#5 as range 5
  // closed e.Metatables0#5 as range 9
  // closed e.Intrinsics0#4 as range 13
  // closed e.Drives0#6 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#5: 5
  //DEBUG: e.Metatables0#5: 9
  //DEBUG: e.Intrinsics0#4: 13
  //DEBUG: e.Drives0#6: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & UpdateDriveInfo=6@0/22 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#5/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives0#6/17 AsIs: )/20 } (/23 )/24 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_UpdateDriveInfo_A6Z0]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[0], context[20] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A6Z1("UpdateDriveInfo=6@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A6Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A7Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=7@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=7@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=7@1/4 (/7 e.AST0#5/25 )/8 (/11 e.Metatables0#5/27 )/12 (/15 e.Intrinsics0#4/29 )/16 (/19 e.Inlines0#7/31 )/20 (/23 e.Drives0#6/33 )/24 e.KnownNames#8/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.AST0#5 as range 25
    // closed e.Metatables0#5 as range 27
    // closed e.Intrinsics0#4 as range 29
    // closed e.Inlines0#7 as range 31
    // closed e.Drives0#6 as range 33
    // closed e.KnownNames#8 as range 35
    //DEBUG: e.AST0#5: 25
    //DEBUG: e.Metatables0#5: 27
    //DEBUG: e.Intrinsics0#4: 29
    //DEBUG: e.Inlines0#7: 31
    //DEBUG: e.Drives0#6: 33
    //DEBUG: e.KnownNames#8: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=8@1/37 (/38 Tile{ AsIs: e.KnownNames#8/35 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#5/25 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/27 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/29 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#7/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/39 (/40 Tile{ AsIs: e.Drives0#6/33 } Tile{ AsIs: )/24 } (/41 e.KnownNames#8/35/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_UpdateDriveInfo_A8Z1]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[40], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[38], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[45] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[4], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=7@1/4 (/7 e.AST0#5/5 )/8 (/11 e.Metatables0#5/9 )/12 (/15 e.Intrinsics0#4/13 )/16 (/19 e.Inlines0#7/17 )/20 (/23 e.Drives0#6/21 )/24 e.dyn#0/2 >/1
  // closed e.AST0#5 as range 5
  // closed e.Metatables0#5 as range 9
  // closed e.Intrinsics0#4 as range 13
  // closed e.Inlines0#7 as range 17
  // closed e.Drives0#6 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#5: 5
  //DEBUG: e.Metatables0#5: 9
  //DEBUG: e.Intrinsics0#4: 13
  //DEBUG: e.Inlines0#7: 17
  //DEBUG: e.Drives0#6: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=7@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#5/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#4/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#7/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#6/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A7Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A7Z1("UpdateDriveInfo=7@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A7Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A8Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=8@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=8@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=8@1/4 (/7 e.KnownNames0#8/25 )/8 (/11 e.AST0#5/27 )/12 (/15 e.Metatables0#5/29 )/16 (/19 e.Intrinsics0#4/31 )/20 (/23 e.Inlines0#7/33 )/24 e.Drives#9/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames0#8 as range 25
    // closed e.AST0#5 as range 27
    // closed e.Metatables0#5 as range 29
    // closed e.Intrinsics0#4 as range 31
    // closed e.Inlines0#7 as range 33
    // closed e.Drives#9 as range 35
    //DEBUG: e.KnownNames0#8: 25
    //DEBUG: e.AST0#5: 27
    //DEBUG: e.Metatables0#5: 29
    //DEBUG: e.Intrinsics0#4: 31
    //DEBUG: e.Inlines0#7: 33
    //DEBUG: e.Drives#9: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=9@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames0#8/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Drives#9/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST0#5/27 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#5/29 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics0#4/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Inlines0#7/33 } )/40 (/41 e.KnownNames0#8/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A9Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=8@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.AST0#5/9 )/12 (/15 e.Metatables0#5/13 )/16 (/19 e.Intrinsics0#4/17 )/20 (/23 e.Inlines0#7/21 )/24 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.AST0#5 as range 9
  // closed e.Metatables0#5 as range 13
  // closed e.Intrinsics0#4 as range 17
  // closed e.Inlines0#7 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.AST0#5: 9
  //DEBUG: e.Metatables0#5: 13
  //DEBUG: e.Intrinsics0#4: 17
  //DEBUG: e.Inlines0#7: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=8@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST0#5/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics0#4/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines0#7/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A8Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A8Z1("UpdateDriveInfo=8@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A8Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A9Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=9@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=9@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=9@1/4 (/7 e.KnownNames0#8/25 )/8 (/11 e.Drives0#9/27 )/12 (/15 e.AST0#5/29 )/16 (/19 e.Metatables0#5/31 )/20 (/23 e.Intrinsics0#4/33 )/24 e.Inlines#10/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames0#8 as range 25
    // closed e.Drives0#9 as range 27
    // closed e.AST0#5 as range 29
    // closed e.Metatables0#5 as range 31
    // closed e.Intrinsics0#4 as range 33
    // closed e.Inlines#10 as range 35
    //DEBUG: e.KnownNames0#8: 25
    //DEBUG: e.Drives0#9: 27
    //DEBUG: e.AST0#5: 29
    //DEBUG: e.Metatables0#5: 31
    //DEBUG: e.Intrinsics0#4: 33
    //DEBUG: e.Inlines#10: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=10@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames0#8/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Inlines#10/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Drives0#9/27 AsIs: )/12 AsIs: (/15 AsIs: e.AST0#5/29 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0#5/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Intrinsics0#4/33 } )/40 (/41 e.KnownNames0#8/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A10Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=9@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Drives0#9/9 )/12 (/15 e.AST0#5/13 )/16 (/19 e.Metatables0#5/17 )/20 (/23 e.Intrinsics0#4/21 )/24 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Drives0#9 as range 9
  // closed e.AST0#5 as range 13
  // closed e.Metatables0#5 as range 17
  // closed e.Intrinsics0#4 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Drives0#9: 9
  //DEBUG: e.AST0#5: 13
  //DEBUG: e.Metatables0#5: 17
  //DEBUG: e.Intrinsics0#4: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=9@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Drives0#9/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST0#5/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0#5/17 AsIs: )/20 AsIs: (/23 AsIs: e.Intrinsics0#4/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A9Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A9Z1("UpdateDriveInfo=9@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A9Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A10Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=10@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=10@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=10@1/4 (/7 e.KnownNames0#8/25 )/8 (/11 e.Inlines0#10/27 )/12 (/15 e.Drives0#9/29 )/16 (/19 e.AST0#5/31 )/20 (/23 e.Metatables0#5/33 )/24 e.Intrinsics#11/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames0#8 as range 25
    // closed e.Inlines0#10 as range 27
    // closed e.Drives0#9 as range 29
    // closed e.AST0#5 as range 31
    // closed e.Metatables0#5 as range 33
    // closed e.Intrinsics#11 as range 35
    //DEBUG: e.KnownNames0#8: 25
    //DEBUG: e.Inlines0#10: 27
    //DEBUG: e.Drives0#9: 29
    //DEBUG: e.AST0#5: 31
    //DEBUG: e.Metatables0#5: 33
    //DEBUG: e.Intrinsics#11: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=11@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames0#8/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Intrinsics#11/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0#10/27 AsIs: )/12 AsIs: (/15 AsIs: e.Drives0#9/29 AsIs: )/16 AsIs: (/19 AsIs: e.AST0#5/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Metatables0#5/33 } )/40 (/41 e.KnownNames0#8/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A11Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=10@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Inlines0#10/9 )/12 (/15 e.Drives0#9/13 )/16 (/19 e.AST0#5/17 )/20 (/23 e.Metatables0#5/21 )/24 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Inlines0#10 as range 9
  // closed e.Drives0#9 as range 13
  // closed e.AST0#5 as range 17
  // closed e.Metatables0#5 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Inlines0#10: 9
  //DEBUG: e.Drives0#9: 13
  //DEBUG: e.AST0#5: 17
  //DEBUG: e.Metatables0#5: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=10@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0#10/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives0#9/13 AsIs: )/16 AsIs: (/19 AsIs: e.AST0#5/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0#5/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A10Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A10Z1("UpdateDriveInfo=10@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A10Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A11Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & UpdateDriveInfo=11@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=11@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=11@1/4 (/7 e.KnownNames0#8/25 )/8 (/11 e.Intrinsics0#11/27 )/12 (/15 e.Inlines0#10/29 )/16 (/19 e.Drives0#9/31 )/20 (/23 e.AST0#5/33 )/24 e.Metatables#12/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames0#8 as range 25
    // closed e.Intrinsics0#11 as range 27
    // closed e.Inlines0#10 as range 29
    // closed e.Drives0#9 as range 31
    // closed e.AST0#5 as range 33
    // closed e.Metatables#12 as range 35
    //DEBUG: e.KnownNames0#8: 25
    //DEBUG: e.Intrinsics0#11: 27
    //DEBUG: e.Inlines0#10: 29
    //DEBUG: e.Drives0#9: 31
    //DEBUG: e.AST0#5: 33
    //DEBUG: e.Metatables#12: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12@1/4 AsIs: (/7 AsIs: e.KnownNames0#8/25 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Intrinsics0#11/27 } )/37 (/38 e.Metatables#12/35/39 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inlines0#10/29 AsIs: )/16 AsIs: (/19 AsIs: e.Drives0#9/31 AsIs: )/20 AsIs: (/23 AsIs: e.AST0#5/33 AsIs: )/24 } </41 & Map@3/42 e.Drives0#9/31/43 e.Inlines0#10/29/45 e.Intrinsics0#11/27/47 Tile{ AsIs: e.Metatables#12/35 } >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::copy_evar(vm, context[39], context[40], context[35], context[36]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_gen_Map_Z3]);
    refalrts::copy_evar(vm, context[43], context[44], context[31], context[32]);
    refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
    refalrts::copy_evar(vm, context[47], context[48], context[27], context[28]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[38], context[12] );
    refalrts::link_brackets( context[11], context[37] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=11@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Intrinsics0#11/9 )/12 (/15 e.Inlines0#10/13 )/16 (/19 e.Drives0#9/17 )/20 (/23 e.AST0#5/21 )/24 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Intrinsics0#11 as range 9
  // closed e.Inlines0#10 as range 13
  // closed e.Drives0#9 as range 17
  // closed e.AST0#5 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Intrinsics0#11: 9
  //DEBUG: e.Inlines0#10: 13
  //DEBUG: e.Drives0#9: 17
  //DEBUG: e.AST0#5: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=11@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/9 AsIs: )/12 AsIs: (/15 AsIs: e.Inlines0#10/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives0#9/17 AsIs: )/20 AsIs: (/23 AsIs: e.AST0#5/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A11Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A11Z1("UpdateDriveInfo=11@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A11Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=12@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=12@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=12@1/4 (/7 e.KnownNames0#8/29 )/8 (/11 e.Intrinsics0#11/31 )/12 (/15 e.Metatables0#12/33 )/16 (/19 e.Inlines0#10/35 )/20 (/23 e.Drives0#9/37 )/24 (/27 e.AST0#5/39 )/28 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.KnownNames0#8 as range 29
    // closed e.Intrinsics0#11 as range 31
    // closed e.Metatables0#12 as range 33
    // closed e.Inlines0#10 as range 35
    // closed e.Drives0#9 as range 37
    // closed e.AST0#5 as range 39
    //DEBUG: e.KnownNames0#8: 29
    //DEBUG: e.Intrinsics0#11: 31
    //DEBUG: e.Metatables0#12: 33
    //DEBUG: e.Inlines0#10: 35
    //DEBUG: e.Drives0#9: 37
    //DEBUG: e.AST0#5: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=13@1/4 AsIs: (/7 AsIs: e.KnownNames0#8/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/31 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/35 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/37 AsIs: )/24 AsIs: (/27 AsIs: e.AST0#5/39 AsIs: )/28 HalfReuse: </1 } & ExtractBaseNames=1/41 </42 & Map@2/43 e.Drives0#9/37/44 e.Inlines0#10/35/46 e.Metatables0#12/33/48 >/50 >/51 >/52 Tile{ ]] }
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_ExtractBaseNames_A1]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z2]);
    refalrts::copy_evar(vm, context[44], context[45], context[37], context[38]);
    refalrts::copy_evar(vm, context[46], context[47], context[35], context[36]);
    refalrts::copy_evar(vm, context[48], context[49], context[33], context[34]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A13Z1]);
    refalrts::reinit_open_call(context[1]);
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[41], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=12@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Intrinsics0#11/9 )/12 (/15 e.Metatables0#12/13 )/16 (/19 e.Inlines0#10/17 )/20 (/23 e.Drives0#9/21 )/24 (/27 e.AST0#5/25 )/28 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Intrinsics0#11 as range 9
  // closed e.Metatables0#12 as range 13
  // closed e.Inlines0#10 as range 17
  // closed e.Drives0#9 as range 21
  // closed e.AST0#5 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Intrinsics0#11: 9
  //DEBUG: e.Metatables0#12: 13
  //DEBUG: e.Inlines0#10: 17
  //DEBUG: e.Drives0#9: 21
  //DEBUG: e.AST0#5: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=12@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST0#5/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A12Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12Z1("UpdateDriveInfo=12@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A13Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=13@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=13@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=13@1/4 (/7 e.KnownNames0#8/29 )/8 (/11 e.Intrinsics0#11/31 )/12 (/15 e.Metatables0#12/33 )/16 (/19 e.Inlines0#10/35 )/20 (/23 e.Drives0#9/37 )/24 (/27 e.AST0#5/39 )/28 e.ExtractedNames#14/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.KnownNames0#8 as range 29
    // closed e.Intrinsics0#11 as range 31
    // closed e.Metatables0#12 as range 33
    // closed e.Inlines0#10 as range 35
    // closed e.Drives0#9 as range 37
    // closed e.AST0#5 as range 39
    // closed e.ExtractedNames#14 as range 41
    //DEBUG: e.KnownNames0#8: 29
    //DEBUG: e.Intrinsics0#11: 31
    //DEBUG: e.Metatables0#12: 33
    //DEBUG: e.Inlines0#10: 35
    //DEBUG: e.Drives0#9: 37
    //DEBUG: e.AST0#5: 39
    //DEBUG: e.ExtractedNames#14: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=14@1/4 AsIs: (/7 AsIs: e.KnownNames0#8/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/31 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/35 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/37 AsIs: )/24 HalfReuse: </27 } & ExtractExtractableFunctions=1/43 </44 & DoMapAccum@3/45 (/46 (/47 Tile{ AsIs: e.ExtractedNames#14/41 } Tile{ AsIs: )/28 } )/48 (/49 )/50 Tile{ AsIs: e.AST0#5/39 } >/51 >/52 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_ExtractExtractableFunctions_A1]);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A14Z1]);
    refalrts::reinit_open_call(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[49], context[50] );
    refalrts::link_brackets( context[46], context[48] );
    refalrts::link_brackets( context[47], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=13@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Intrinsics0#11/9 )/12 (/15 e.Metatables0#12/13 )/16 (/19 e.Inlines0#10/17 )/20 (/23 e.Drives0#9/21 )/24 (/27 e.AST0#5/25 )/28 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Intrinsics0#11 as range 9
  // closed e.Metatables0#12 as range 13
  // closed e.Inlines0#10 as range 17
  // closed e.Drives0#9 as range 21
  // closed e.AST0#5 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Intrinsics0#11: 9
  //DEBUG: e.Metatables0#12: 13
  //DEBUG: e.Inlines0#10: 17
  //DEBUG: e.Drives0#9: 21
  //DEBUG: e.AST0#5: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=13@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST0#5/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A13Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A13Z1("UpdateDriveInfo=13@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A13Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A14Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & UpdateDriveInfo=14@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=14@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & UpdateDriveInfo=14@1/4 (/7 e.KnownNames0#8/25 )/8 (/11 e.Intrinsics0#11/27 )/12 (/15 e.Metatables0#12/29 )/16 (/19 e.Inlines0#10/31 )/20 (/23 e.Drives0#9/33 )/24 (/39 e.Extracted#15/37 )/40 e.AST#15/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.KnownNames0#8 as range 25
    // closed e.Intrinsics0#11 as range 27
    // closed e.Metatables0#12 as range 29
    // closed e.Inlines0#10 as range 31
    // closed e.Drives0#9 as range 33
    // closed e.Extracted#15 as range 37
    // closed e.AST#15 as range 35
    //DEBUG: e.KnownNames0#8: 25
    //DEBUG: e.Intrinsics0#11: 27
    //DEBUG: e.Metatables0#12: 29
    //DEBUG: e.Inlines0#10: 31
    //DEBUG: e.Drives0#9: 33
    //DEBUG: e.Extracted#15: 37
    //DEBUG: e.AST#15: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=15@1/4 AsIs: (/7 AsIs: e.KnownNames0#8/25 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Intrinsics0#11/27 } )/41 (/42 Tile{ AsIs: e.Extracted#15/37 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/29 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/31 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/33 AsIs: )/24 HalfReuse: </39 } & DoMapAccum@2/43 (/44 )/45 (/46 Tile{ AsIs: )/40 AsIs: e.AST#15/35 AsIs: >/1 } >/47 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A15Z1]);
    refalrts::reinit_open_call(context[39]);
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[46], context[40] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::link_brackets( context[11], context[41] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[43], context[46] );
    res = refalrts::splice_evar( res, context[12], context[39] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=14@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Intrinsics0#11/9 )/12 (/15 e.Metatables0#12/13 )/16 (/19 e.Inlines0#10/17 )/20 (/23 e.Drives0#9/21 )/24 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Intrinsics0#11 as range 9
  // closed e.Metatables0#12 as range 13
  // closed e.Inlines0#10 as range 17
  // closed e.Drives0#9 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Intrinsics0#11: 9
  //DEBUG: e.Metatables0#12: 13
  //DEBUG: e.Inlines0#10: 17
  //DEBUG: e.Drives0#9: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=14@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0#12/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#10/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives0#9/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A14Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A14Z1("UpdateDriveInfo=14@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A14Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A15Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & UpdateDriveInfo=15@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=15@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=15@1/4 (/7 e.KnownNames0#8/29 )/8 (/11 e.Intrinsics0#11/31 )/12 (/15 e.Extracted0#15/33 )/16 (/19 e.Metatables0#12/35 )/20 (/23 e.Inlines0#10/37 )/24 (/27 e.Drives0#9/39 )/28 (/45 e.Lengths#16/43 )/46 e.AST#16/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    context[43] = 0;
    context[44] = 0;
    context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
    if( ! context[45] )
      continue;
    refalrts::bracket_pointers(context[45], context[46]);
    // closed e.KnownNames0#8 as range 29
    // closed e.Intrinsics0#11 as range 31
    // closed e.Extracted0#15 as range 33
    // closed e.Metatables0#12 as range 35
    // closed e.Inlines0#10 as range 37
    // closed e.Drives0#9 as range 39
    // closed e.Lengths#16 as range 43
    // closed e.AST#16 as range 41
    //DEBUG: e.KnownNames0#8: 29
    //DEBUG: e.Intrinsics0#11: 31
    //DEBUG: e.Extracted0#15: 33
    //DEBUG: e.Metatables0#12: 35
    //DEBUG: e.Inlines0#10: 37
    //DEBUG: e.Drives0#9: 39
    //DEBUG: e.Lengths#16: 43
    //DEBUG: e.AST#16: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=16@1/47 (/48 Tile{ AsIs: e.AST#16/41 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/31 AsIs: )/12 AsIs: (/15 AsIs: e.Extracted0#15/33 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0#12/35 AsIs: )/20 AsIs: (/23 } e.Lengths#16/43/49 Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Inlines0#10/37 } )/51 </52 & MultiplyRemainderNames=1/53 </54 Tile{ HalfReuse: & DoMapAccum@1/28 AsIs: (/45 AsIs: e.Lengths#16/43 AsIs: )/46 } (/55 )/56 Tile{ AsIs: e.Drives0#9/39 } >/57 >/58 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_UpdateDriveInfo_A16Z1]);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_MultiplyRemainderNames_A1]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[28], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[54] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[45], context[46] );
    refalrts::link_brackets( context[27], context[51] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[48], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[28], context[46] );
    res = refalrts::splice_evar( res, context[51], context[54] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[4], context[23] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=15@1/4 (/7 e.KnownNames0#8/5 )/8 (/11 e.Intrinsics0#11/9 )/12 (/15 e.Extracted0#15/13 )/16 (/19 e.Metatables0#12/17 )/20 (/23 e.Inlines0#10/21 )/24 (/27 e.Drives0#9/25 )/28 e.dyn#0/2 >/1
  // closed e.KnownNames0#8 as range 5
  // closed e.Intrinsics0#11 as range 9
  // closed e.Extracted0#15 as range 13
  // closed e.Metatables0#12 as range 17
  // closed e.Inlines0#10 as range 21
  // closed e.Drives0#9 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.KnownNames0#8: 5
  //DEBUG: e.Intrinsics0#11: 9
  //DEBUG: e.Extracted0#15: 13
  //DEBUG: e.Metatables0#12: 17
  //DEBUG: e.Inlines0#10: 21
  //DEBUG: e.Drives0#9: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=15@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames0#8/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics0#11/9 AsIs: )/12 AsIs: (/15 AsIs: e.Extracted0#15/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0#12/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines0#10/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives0#9/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A15Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A15Z1("UpdateDriveInfo=15@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A15Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A16Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 57 elems
  refalrts::Iter context[57];
  refalrts::zeros( context, 57 );
  // </0 & UpdateDriveInfo=16@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=16@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 (/31 e.new#7/29 )/32 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 29
  // closed e.new#8 as range 2
  do {
    // </0 & UpdateDriveInfo=16@1/4 (/7 e.AST0#16/33 )/8 (/11 e.KnownNames0#8/35 )/12 (/15 e.Intrinsics0#11/37 )/16 (/19 e.Extracted0#15/39 )/20 (/23 e.Metatables0#12/41 )/24 (/27 e.Lengths0#16/43 )/28 (/31 e.Inlines0#10/45 )/32 e.Drives#17/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.AST0#16 as range 33
    // closed e.KnownNames0#8 as range 35
    // closed e.Intrinsics0#11 as range 37
    // closed e.Extracted0#15 as range 39
    // closed e.Metatables0#12 as range 41
    // closed e.Lengths0#16 as range 43
    // closed e.Inlines0#10 as range 45
    // closed e.Drives#17 as range 47
    //DEBUG: e.AST0#16: 33
    //DEBUG: e.KnownNames0#8: 35
    //DEBUG: e.Intrinsics0#11: 37
    //DEBUG: e.Extracted0#15: 39
    //DEBUG: e.Metatables0#12: 41
    //DEBUG: e.Lengths0#16: 43
    //DEBUG: e.Inlines0#10: 45
    //DEBUG: e.Drives#17: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=17@1/4 AsIs: (/7 AsIs: e.AST0#16/33 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/35 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#11/37 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0#15/39 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0#12/41 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Drives#17/47 } )/49 </50 & MultiplyRemainderNames=1/51 </52 & DoMapAccum@1/53 (/54 Tile{ AsIs: e.Lengths0#16/43 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: )/32 } Tile{ AsIs: e.Inlines0#10/45 } >/55 >/56 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_MultiplyRemainderNames_A1]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::alloc_close_call(vm, context[56]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A17Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[52] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[54], context[28] );
    refalrts::link_brackets( context[27], context[49] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[49], context[54] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=16@1/4 (/7 e.AST0#16/5 )/8 (/11 e.KnownNames0#8/9 )/12 (/15 e.Intrinsics0#11/13 )/16 (/19 e.Extracted0#15/17 )/20 (/23 e.Metatables0#12/21 )/24 (/27 e.Lengths0#16/25 )/28 (/31 e.Inlines0#10/29 )/32 e.dyn#0/2 >/1
  // closed e.AST0#16 as range 5
  // closed e.KnownNames0#8 as range 9
  // closed e.Intrinsics0#11 as range 13
  // closed e.Extracted0#15 as range 17
  // closed e.Metatables0#12 as range 21
  // closed e.Lengths0#16 as range 25
  // closed e.Inlines0#10 as range 29
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#16: 5
  //DEBUG: e.KnownNames0#8: 9
  //DEBUG: e.Intrinsics0#11: 13
  //DEBUG: e.Extracted0#15: 17
  //DEBUG: e.Metatables0#12: 21
  //DEBUG: e.Lengths0#16: 25
  //DEBUG: e.Inlines0#10: 29
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </33 & UpdateDriveInfo=16@0/34 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#16/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0#15/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0#12/21 AsIs: )/24 AsIs: (/27 AsIs: e.Lengths0#16/25 AsIs: )/28 AsIs: (/31 AsIs: e.Inlines0#10/29 AsIs: )/32 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_UpdateDriveInfo_A16Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A16Z1("UpdateDriveInfo=16@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A16Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A17Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & UpdateDriveInfo=17@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=17@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=17@1/4 (/7 e.AST0#16/29 )/8 (/11 e.KnownNames0#8/31 )/12 (/15 e.Intrinsics0#11/33 )/16 (/19 e.Extracted0#15/35 )/20 (/23 e.Metatables0#12/37 )/24 (/27 e.Drives0#17/39 )/28 e.Inlines#18/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST0#16 as range 29
    // closed e.KnownNames0#8 as range 31
    // closed e.Intrinsics0#11 as range 33
    // closed e.Extracted0#15 as range 35
    // closed e.Metatables0#12 as range 37
    // closed e.Drives0#17 as range 39
    // closed e.Inlines#18 as range 41
    //DEBUG: e.AST0#16: 29
    //DEBUG: e.KnownNames0#8: 31
    //DEBUG: e.Intrinsics0#11: 33
    //DEBUG: e.Extracted0#15: 35
    //DEBUG: e.Metatables0#12: 37
    //DEBUG: e.Drives0#17: 39
    //DEBUG: e.Inlines#18: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=18@1/4 AsIs: (/7 AsIs: e.AST0#16/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/31 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#11/33 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0#15/35 AsIs: )/20 AsIs: (/23 } e.Inlines#18/41/43 )/45 (/46 Tile{ AsIs: e.Metatables0#12/37 } )/47 </48 Tile{ HalfReuse: & SetNames-Reject/24 AsIs: (/27 AsIs: e.Drives0#17/39 AsIs: )/28 } (/49 Tile{ AsIs: e.Inlines#18/41 } )/50 >/51 Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[43], context[44], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A18Z1]);
    refalrts::reinit_name(context[24], functions[efunc_SetNamesm_Reject]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[49], context[50] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[23], context[45] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=17@1/4 (/7 e.AST0#16/5 )/8 (/11 e.KnownNames0#8/9 )/12 (/15 e.Intrinsics0#11/13 )/16 (/19 e.Extracted0#15/17 )/20 (/23 e.Metatables0#12/21 )/24 (/27 e.Drives0#17/25 )/28 e.dyn#0/2 >/1
  // closed e.AST0#16 as range 5
  // closed e.KnownNames0#8 as range 9
  // closed e.Intrinsics0#11 as range 13
  // closed e.Extracted0#15 as range 17
  // closed e.Metatables0#12 as range 21
  // closed e.Drives0#17 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#16: 5
  //DEBUG: e.KnownNames0#8: 9
  //DEBUG: e.Intrinsics0#11: 13
  //DEBUG: e.Extracted0#15: 17
  //DEBUG: e.Metatables0#12: 21
  //DEBUG: e.Drives0#17: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=17@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#16/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0#15/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0#12/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives0#17/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A17Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A17Z1("UpdateDriveInfo=17@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A17Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A18Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & UpdateDriveInfo=18@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=18@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=18@1/4 (/7 e.AST0#16/29 )/8 (/11 e.KnownNames0#8/31 )/12 (/15 e.Intrinsics0#11/33 )/16 (/19 e.Extracted0#15/35 )/20 (/23 e.Inlines0#18/37 )/24 (/27 e.Metatables0#12/39 )/28 e.Drives#19/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST0#16 as range 29
    // closed e.KnownNames0#8 as range 31
    // closed e.Intrinsics0#11 as range 33
    // closed e.Extracted0#15 as range 35
    // closed e.Inlines0#18 as range 37
    // closed e.Metatables0#12 as range 39
    // closed e.Drives#19 as range 41
    //DEBUG: e.AST0#16: 29
    //DEBUG: e.KnownNames0#8: 31
    //DEBUG: e.Intrinsics0#11: 33
    //DEBUG: e.Extracted0#15: 35
    //DEBUG: e.Inlines0#18: 37
    //DEBUG: e.Metatables0#12: 39
    //DEBUG: e.Drives#19: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@2/4 AsIs: (/7 AsIs: e.AST0#16/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/31 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Drives#19/41 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Inlines0#18/37 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables0#12/39 AsIs: )/28 } (/43 Tile{ AsIs: e.Intrinsics0#11/33 } )/44 </45 & FormatOptFunctions=1/46 </47 Tile{ HalfReuse: & MapAccum@1/16 AsIs: (/19 } </48 & ExtractBaseNames=1/49 </50 & Map@2/51 e.Drives#19/41/52 e.Inlines0#18/37/54 e.Metatables0#12/39/56 >/58 >/59 )/60 Tile{ AsIs: e.Extracted0#15/35 } >/61 >/62 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_FormatOptFunctions_A1]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_ExtractBaseNames_A1]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_Map_Z2]);
    refalrts::copy_evar(vm, context[52], context[53], context[41], context[42]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::copy_evar(vm, context[56], context[57], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z2]);
    refalrts::reinit_name(context[16], functions[efunc_gen_MapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[19], context[60] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[15], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[48], context[60] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[44], context[47] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[20], context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=18@1/4 (/7 e.AST0#16/5 )/8 (/11 e.KnownNames0#8/9 )/12 (/15 e.Intrinsics0#11/13 )/16 (/19 e.Extracted0#15/17 )/20 (/23 e.Inlines0#18/21 )/24 (/27 e.Metatables0#12/25 )/28 e.dyn#0/2 >/1
  // closed e.AST0#16 as range 5
  // closed e.KnownNames0#8 as range 9
  // closed e.Intrinsics0#11 as range 13
  // closed e.Extracted0#15 as range 17
  // closed e.Inlines0#18 as range 21
  // closed e.Metatables0#12 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#16: 5
  //DEBUG: e.KnownNames0#8: 9
  //DEBUG: e.Intrinsics0#11: 13
  //DEBUG: e.Extracted0#15: 17
  //DEBUG: e.Inlines0#18: 21
  //DEBUG: e.Metatables0#12: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=18@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#16/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0#11/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0#15/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines0#18/21 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables0#12/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A18Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A18Z1("UpdateDriveInfo=18@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A18Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A20Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & UpdateDriveInfo=20@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=20@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & UpdateDriveInfo=20@2/4 (/7 e.AST0#16/29 )/8 (/11 e.KnownNames0#8/31 )/12 (/15 e.Drives#19/33 )/16 (/19 e.Inlines0#18/35 )/20 (/23 e.Metatables0#12/37 )/24 (/27 e.Intrinsics0#11/39 )/28 e.OptFunctions#21/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST0#16 as range 29
    // closed e.KnownNames0#8 as range 31
    // closed e.Drives#19 as range 33
    // closed e.Inlines0#18 as range 35
    // closed e.Metatables0#12 as range 37
    // closed e.Intrinsics0#11 as range 39
    // closed e.OptFunctions#21 as range 41
    //DEBUG: e.AST0#16: 29
    //DEBUG: e.KnownNames0#8: 31
    //DEBUG: e.Drives#19: 33
    //DEBUG: e.Inlines0#18: 35
    //DEBUG: e.Metatables0#12: 37
    //DEBUG: e.Intrinsics0#11: 39
    //DEBUG: e.OptFunctions#21: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=21@2/43 (/44 Tile{ AsIs: e.OptFunctions#21/41 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#16/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/31 AsIs: )/12 AsIs: (/15 AsIs: e.Drives#19/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines0#18/35 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0#12/37 AsIs: )/24 AsIs: (/27 AsIs: e.Intrinsics0#11/39 AsIs: )/28 } </45 & Map@1/46 e.Intrinsics0#11/39/47 >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_UpdateDriveInfo_A21Z2]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z1]);
    refalrts::copy_evar(vm, context[47], context[48], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[44], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[45], context[49] );
    res = refalrts::splice_evar( res, context[4], context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=20@2/4 (/7 e.AST0#16/5 )/8 (/11 e.KnownNames0#8/9 )/12 (/15 e.Drives#19/13 )/16 (/19 e.Inlines0#18/17 )/20 (/23 e.Metatables0#12/21 )/24 (/27 e.Intrinsics0#11/25 )/28 e.dyn#0/2 >/1
  // closed e.AST0#16 as range 5
  // closed e.KnownNames0#8 as range 9
  // closed e.Drives#19 as range 13
  // closed e.Inlines0#18 as range 17
  // closed e.Metatables0#12 as range 21
  // closed e.Intrinsics0#11 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.AST0#16: 5
  //DEBUG: e.KnownNames0#8: 9
  //DEBUG: e.Drives#19: 13
  //DEBUG: e.Inlines0#18: 17
  //DEBUG: e.Metatables0#12: 21
  //DEBUG: e.Intrinsics0#11: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & UpdateDriveInfo=20@0/23 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0#16/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames0#8/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Drives#19/13 } Tile{ AsIs: e.Inlines0#18/17 } Tile{ AsIs: e.Metatables0#12/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Intrinsics0#11/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[20]);
  refalrts::reinit_name(context[23], functions[efunc_gen_UpdateDriveInfo_A20Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[15], context[24] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A20Z2("UpdateDriveInfo=20@2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A20Z2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A21Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & UpdateDriveInfo=21@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=21@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 (/31 e.new#7/29 )/32 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 29
  // closed e.new#8 as range 2
  do {
    // </0 & UpdateDriveInfo=21@2/4 (/7 e.OptFunctions0#21/33 )/8 (/11 e.AST0#16/35 )/12 (/15 e.KnownNames0#8/37 )/16 (/19 e.Drives#19/39 )/20 (/23 e.Inlines0#18/41 )/24 (/27 e.Metatables0#12/43 )/28 (/31 e.Intrinsics0#11/45 )/32 e.OptIntrinsicFuncs#22/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.OptFunctions0#21 as range 33
    // closed e.AST0#16 as range 35
    // closed e.KnownNames0#8 as range 37
    // closed e.Drives#19 as range 39
    // closed e.Inlines0#18 as range 41
    // closed e.Metatables0#12 as range 43
    // closed e.Intrinsics0#11 as range 45
    // closed e.OptIntrinsicFuncs#22 as range 47
    //DEBUG: e.OptFunctions0#21: 33
    //DEBUG: e.AST0#16: 35
    //DEBUG: e.KnownNames0#8: 37
    //DEBUG: e.Drives#19: 39
    //DEBUG: e.Inlines0#18: 41
    //DEBUG: e.Metatables0#12: 43
    //DEBUG: e.Intrinsics0#11: 45
    //DEBUG: e.OptIntrinsicFuncs#22: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/32 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=22@1/4 AsIs: (/7 AsIs: e.OptFunctions0#21/33 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.OptIntrinsicFuncs#22/47 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.AST0#16/35 } Tile{ AsIs: )/20 HalfReuse: </23 } Tile{ HalfReuse: & DoHashSet/15 } Tile{ HalfReuse: </24 HalfReuse: & Map@5/27 } Tile{ AsIs: e.KnownNames0#8/37 } Tile{ AsIs: e.Drives#19/39 } Tile{ AsIs: e.Inlines0#18/41 } Tile{ AsIs: e.Metatables0#12/43 } Tile{ AsIs: e.Intrinsics0#11/45 } Tile{ HalfReuse: >/16 HalfReuse: >/19 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A22Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_name(context[15], functions[efunc_DoHashSet]);
    refalrts::reinit_open_call(context[24]);
    refalrts::reinit_name(context[27], functions[efunc_gen_Map_Z5]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[31], context[20] );
    refalrts::link_brackets( context[11], context[28] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=21@2/4 (/7 e.OptFunctions0#21/5 )/8 (/11 e.AST0#16/9 )/12 (/15 e.KnownNames0#8/13 )/16 (/19 e.Drives#19/17 )/20 (/23 e.Inlines0#18/21 )/24 (/27 e.Metatables0#12/25 )/28 (/31 e.Intrinsics0#11/29 )/32 e.dyn#0/2 >/1
  // closed e.OptFunctions0#21 as range 5
  // closed e.AST0#16 as range 9
  // closed e.KnownNames0#8 as range 13
  // closed e.Drives#19 as range 17
  // closed e.Inlines0#18 as range 21
  // closed e.Metatables0#12 as range 25
  // closed e.Intrinsics0#11 as range 29
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFunctions0#21: 5
  //DEBUG: e.AST0#16: 9
  //DEBUG: e.KnownNames0#8: 13
  //DEBUG: e.Drives#19: 17
  //DEBUG: e.Inlines0#18: 21
  //DEBUG: e.Metatables0#12: 25
  //DEBUG: e.Intrinsics0#11: 29
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & UpdateDriveInfo=21@0/27 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.OptFunctions0#21/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST0#16/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames0#8/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives#19/17 } Tile{ AsIs: e.Inlines0#18/21 } Tile{ AsIs: e.Metatables0#12/25 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics0#11/29 AsIs: )/32 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[24]);
  refalrts::reinit_name(context[27], functions[efunc_gen_UpdateDriveInfo_A21Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[19], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[28];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[0], context[19] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A21Z2("UpdateDriveInfo=21@2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A21Z2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A22Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & UpdateDriveInfo=22@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateDriveInfo=22@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & UpdateDriveInfo=22@1/4 (/7 e.OptFunctions0#21/17 )/8 (/11 e.OptIntrinsicFuncs0#22/19 )/12 (/15 e.AST0#16/21 )/16 e.HashSetNames#23/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.OptFunctions0#21 as range 17
    // closed e.OptIntrinsicFuncs0#22 as range 19
    // closed e.AST0#16 as range 21
    // closed e.HashSetNames#23 as range 23
    //DEBUG: e.OptFunctions0#21: 17
    //DEBUG: e.OptIntrinsicFuncs0#22: 19
    //DEBUG: e.AST0#16: 21
    //DEBUG: e.HashSetNames#23: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 } Tile{ AsIs: e.HashSetNames#23/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.OptFunctions0#21/17 } Tile{ AsIs: e.OptIntrinsicFuncs0#22/19 } Tile{ AsIs: )/12 } Tile{ AsIs: e.AST0#16/21 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
    refalrts::link_brackets( context[0], context[12] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=22@1/4 (/7 e.OptFunctions0#21/5 )/8 (/11 e.OptIntrinsicFuncs0#22/9 )/12 (/15 e.AST0#16/13 )/16 e.dyn#0/2 >/1
  // closed e.OptFunctions0#21 as range 5
  // closed e.OptIntrinsicFuncs0#22 as range 9
  // closed e.AST0#16 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.OptFunctions0#21: 5
  //DEBUG: e.OptIntrinsicFuncs0#22: 9
  //DEBUG: e.AST0#16: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & UpdateDriveInfo=22@0/18 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.OptFunctions0#21/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptIntrinsicFuncs0#22/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST0#16/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_UpdateDriveInfo_A22Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A22Z1("UpdateDriveInfo=22@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A22Z1);


//End of file
