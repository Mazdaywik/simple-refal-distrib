// This file automatically generated from 'Desugaring.ref'
// Don't edit! Edit 'Desugaring.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_475516126_863428253
#define COOKIE1_ 475516126U
#define COOKIE2_ 863428253U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Fetch_Z5 = 18,
  efunc_gen_Map_Z4 = 19,
  efunc_gen_Fetch_Z6 = 20,
  efunc_Passm_RemovePos = 21,
  efunc_Passm_AttachEntries = 22,
  efunc_Passm_RemoveRedundantDriveInlineIntrinsic = 23,
  efunc_Passm_EnumerateVariables = 24,
  efunc_Passm_NameNestedFuncs = 25,
  efunc_Passm_RemoveBlocksAndAssigns = 26,
  efunc_Passm_FlatNestedFuncs = 27,
  efunc_Passm_CleanupRedudandExterns = 28,
  efunc_Passm_UnfoldEnums = 29,
  efunc_gen_Desugar_L1D2 = 30,
  efunc_gen_Map_Z3 = 31,
  efunc_gen_Map_Z5 = 32,
  efunc_gen_Map_Z1 = 33,
  efunc_gen_Map_Z2 = 34,
  efunc_gen_Passm_AttachEntries_L1S1C1 = 35,
  efunc_gen_Passm_AttachEntries_L1S2C1 = 36,
  efunc_gen_Passm_AttachEntries_L1S3C1 = 37,
  efunc_gen_Passm_AttachEntries_L1S4C1 = 38,
  efunc_gen_Map_Z7 = 39,
  efunc_gen_DoMapAccum_Z1 = 40,
  efunc_gen_Passm_AttachEntries_A1 = 41,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2 = 42,
  efunc_gen_DoMapAccum_Z2 = 43,
  efunc_gen_DoMapAccum_Z3 = 44,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1 = 45,
  efunc_gen_Map_Z9 = 46,
  efunc_EnumerateVarsm_Blocks = 47,
  efunc_gen_EnumerateVarsm_Body_S1L1A4 = 48,
  efunc_gen_DoMapAccum_Z5 = 49,
  efunc_gen_EnumerateVarsm_Body_S1L1A3 = 50,
  efunc_gen_EnumerateVarsm_Expr_L1 = 51,
  efunc_gen_EnumerateVarsm_Body_S1L1A2 = 52,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z3 = 53,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z4 = 54,
  efunc_gen_AssignOrCondition_D2 = 55,
  efunc_gen_EnumerateVarsm_Assignments_S2A1Z1 = 56,
  efunc_gen_EnumerateVarsm_Assignments_Z0 = 57,
  efunc_gen_Map_Z10 = 58,
  efunc_gen_Map_Z11 = 59,
  efunc_gen_EnumerateVarsm_Assignments_Z2 = 60,
  efunc_gen_EnumerateVarsm_Assignments_S2A5 = 61,
  efunc_gen_EnumerateVarsm_Assignments_S2A4 = 62,
  efunc_gen_EnumerateVarsm_Assignments_S2A3 = 63,
  efunc_gen_EnumerateVarsm_Assignments_S2A2 = 64,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z1 = 65,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z2 = 66,
  efunc_gen_EnumerateVarsm_Assignments_S2A1 = 67,
  efunc_gen_EnumerateVarsm_Expr_L1S1A1 = 68,
  efunc_NewVarName = 69,
  efunc_gen_Fetch_Z1 = 70,
  efunc_gen_Fetch_Z2 = 71,
  efunc_gen_Fetch_Z3 = 72,
  efunc_EnumerateVarsm_Body = 73,
  efunc_gen_Fetch_Z4 = 74,
  efunc_gen_Map_Z12 = 75,
  efunc_DelAccumulator = 76,
  efunc_NameNestedResultRecm_Term = 77,
  efunc_gen_NameNestedBlocks_A1 = 78,
  efunc_gen_NameNestedBlocks_A1L1 = 79,
  efunc_gen_NameNestedAssigns_L1 = 80,
  efunc_gen_DoMapAccum_Z7 = 81,
  efunc_gen_DoMapAccum_Z8 = 82,
  efunc_gen_DoMapAccum_Z6 = 83,
  efunc_gen_DoMapAccum_Z9 = 84,
  efunc_gen_NameNestedBody_S2L1 = 85,
  efunc_gen_NameNestedBody_D4 = 86,
  efunc_gen_ChainTypeMarker_D2 = 87,
  efunc_gen_NameNestedAssigns_L1A1 = 88,
  efunc_gen_NameNestedResultRecm_Term_S1A1 = 89,
  efunc_gen_NameNestedResultRecm_Term_S2A1 = 90,
  efunc_gen_NameNestedResultRecm_Term_S3A1 = 91,
  efunc_gen_Map_Z14 = 92,
  efunc_gen_Map_Z13 = 93,
  efunc_gen_Map_Z15 = 94,
  efunc_gen_RemoveAssignsm_Sentence_S2A3 = 95,
  efunc_gen_Reduce_Z1 = 96,
  efunc_gen_RemoveAssignsm_Sentence_S2A2 = 97,
  efunc_gen_RemoveAssignsm_Sentence_S2A1 = 98,
  efunc_gen_Map_Z16 = 99,
  efunc_gen_Map_Z17 = 100,
  efunc_gen_ExtractNested_A1 = 101,
  efunc_gen_ExtractNestedRec_S1A1 = 102,
  efunc_gen_DoMapAccum_Z10 = 103,
  efunc_gen_ExtractNestedRec_D3 = 104,
  efunc_gen_DoMapAccum_Z11 = 105,
  efunc_gen_ExtractNestedm_Result_A1 = 106,
  efunc_gen_ExtractNestedm_Sentence_A3 = 107,
  efunc_gen_DoMapAccum_Z12 = 108,
  efunc_ExtractNestedm_Conditions = 109,
  efunc_gen_ExtractNestedm_Sentence_A2 = 110,
  efunc_gen_MapAccum_Z1 = 111,
  efunc_ExtractAllVars = 112,
  efunc_gen_ExtractNestedm_Sentence_A1 = 113,
  efunc_Uniq = 114,
  efunc_gen_ExtractNestedm_Conditions_S1A4 = 115,
  efunc_gen_ExtractNestedm_Conditions_S1A3 = 116,
  efunc_gen_ExtractNestedm_Conditions_S1A2 = 117,
  efunc_gen_ExtractNestedm_Conditions_S1A1 = 118,
  efunc_gen_Map_Z18 = 119,
  efunc_CreateSpecPatternForContext = 120,
  efunc_gen_Reduce_Z2 = 121,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1 = 122,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2 = 123,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2 = 124,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1 = 125,
  efunc_CreateContext = 126,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1D2 = 127,
  efunc_CheckBorrowed = 128,
  efunc_gen_ExtractNestedm_Resultm_Term_S2A1 = 129,
  efunc_gen_ExtractNestedm_Resultm_Term_S3A1 = 130,
  efunc_gen_ExtractNestedm_Resultm_Term_S4A1 = 131,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A1 = 132,
  efunc_gen_DoMapAccum_Z13 = 133,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z1 = 134,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1 = 135,
  efunc_gen_DoMapAccum_Z14 = 136,
  efunc_gen_Passm_CleanupRedudandExterns_A3 = 137,
  efunc_gen_Passm_CleanupRedudandExterns_A2 = 138,
  efunc_gen_DoMapAccum_Z15 = 139,
  efunc_gen_DoMapAccum_Z16 = 140,
  efunc_gen_Passm_CleanupRedudandExterns_A1 = 141,
  efunc_gen_Map_Z19 = 142,
  efunc_Mu = 143,
  efunc_Up = 144,
  efunc_Evm_met = 145,
  efunc_Residue = 146,
  efunc_u_u_Metau_Residue = 147,
  efunc_MapAccum = 148,
  efunc_UnBracket = 149,
  efunc_Inc = 150,
  efunc_Dec = 151,
  efunc_Desugar = 152,
  efunc_RemovePosm_Body = 153,
  efunc_AssignOrCondition = 154,
  efunc_RemovePosm_Blocks = 155,
  efunc_RemovePosm_Expr = 156,
  efunc_EnumerateVarsm_Assignments = 157,
  efunc_EnumerateVarsm_Expr = 158,
  efunc_genu_eu_u_ = 159,
  efunc_NameNestedBody = 160,
  efunc_NameNestedBlocks = 161,
  efunc_NameNestedAssigns = 162,
  efunc_ChainTypeMarker = 163,
  efunc_NameNestedResult = 164,
  efunc_NameNestedResultRec = 165,
  efunc_RemoveAssignsm_Sentences = 166,
  efunc_RemoveAssignsm_Sentence = 167,
  efunc_RemoveAssignsm_Conditions = 168,
  efunc_RemoveAssignsm_WindBlocks = 169,
  efunc_RemoveAssignsm_Result = 170,
  efunc_ExtractNested = 171,
  efunc_ExtractNestedRec = 172,
  efunc_ExtractNestedm_Sentence = 173,
  efunc_ExtractNestedm_Pattern = 174,
  efunc_UpdateBorrowedVars = 175,
  efunc_ExtractNestedm_Result = 176,
  efunc_ExtractNestedm_Resultm_Term = 177,
  efunc_FilterDeclarations = 178,
  efunc_gen_Apply_Z4 = 179,
  efunc_gen_Map_Z6 = 180,
  efunc_gen_RemovePosm_Body_S1L1D1 = 181,
  efunc_gen_Map_Z0 = 182,
  efunc_gen_RemovePosm_Body_S1L1Z0 = 183,
  efunc_gen_RemovePosm_Body_S3L1D1 = 184,
  efunc_gen_RemovePosm_Body_S3L1Z0 = 185,
  efunc_gen_RemovePosm_Body_D3 = 186,
  efunc_gen_RemovePosm_Expr_L1Z0 = 187,
  efunc_gen_Passm_RemovePos_L1D5 = 188,
  efunc_gen_Passm_RemovePos_L1Z0 = 189,
  efunc_gen_RemovePosm_Blocks_L1D1 = 190,
  efunc_gen_RemovePosm_Blocks_L1Z0 = 191,
  efunc_gen_RemovePosm_Body_S1L1L1A1 = 192,
  efunc_gen_RemovePosm_Body_S1L1L1D1 = 193,
  efunc_gen_RemovePosm_Body_S1L1L1Z0 = 194,
  efunc_gen_Passm_AttachEntries_L1 = 195,
  efunc_gen_Passm_AttachEntries_L1Z0 = 196,
  efunc_gen_Passm_AttachEntries_A1L1D2 = 197,
  efunc_gen_DoMapAccum_S1A1Z1 = 198,
  efunc_gen_DoMapAccum_Z0 = 199,
  efunc_gen_Passm_AttachEntries_A1L1Z0 = 200,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1 = 201,
  efunc_gen_DoMapAccum_S1A1Z2 = 202,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1Z0 = 203,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1 = 204,
  efunc_gen_DoMapAccum_S1A1Z3 = 205,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1Z0 = 206,
  efunc_gen_DoMapAccum_S1A1Z4 = 207,
  efunc_gen_EnumerateVarsm_Expr_L1Z1D1 = 208,
  efunc_gen_EnumerateVarsm_Expr_L1Z0 = 209,
  efunc_gen_DoMapAccum_Z17 = 210,
  efunc_gen_EnumerateVarsm_Body_S1L1A1Z1 = 211,
  efunc_gen_Map_Z8 = 212,
  efunc_gen_EnumerateVarsm_Body_S1L1D1 = 213,
  efunc_gen_EnumerateVarsm_Body_S1L1Z0 = 214,
  efunc_gen_Passm_EnumerateVariables_L1S1A1 = 215,
  efunc_gen_DoMapAccum_Z4 = 216,
  efunc_gen_EnumerateVarsm_Body_D3 = 217,
  efunc_gen_Passm_EnumerateVariables_L1Z0 = 218,
  efunc_gen_DoMapAccum_S1A1Z5 = 219,
  efunc_gen_EnumerateVarsm_Expr_L1D1 = 220,
  efunc_gen_EnumerateVarsm_Body_S1L1A1 = 221,
  efunc_gen_EnumerateVarsm_Blocks_L1D1 = 222,
  efunc_gen_EnumerateVarsm_Blocks_L1Z0 = 223,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z5 = 224,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z6 = 225,
  efunc_gen_EnumerateVarsm_Assignments_S2A1Z2 = 226,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z1 = 227,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z0 = 228,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z2 = 229,
  efunc_gen_EnumerateVarsm_Expr_L1S5L1D1 = 230,
  efunc_gen_Fetch_Z0 = 231,
  efunc_gen_EnumerateVarsm_Expr_L1S5L1Z0 = 232,
  efunc_gen_EnumerateVarsm_Expr_L1S6L1D1 = 233,
  efunc_gen_EnumerateVarsm_Expr_L1S6L1Z0 = 234,
  efunc_gen_EnumerateVarsm_Expr_L1S7L1D1 = 235,
  efunc_gen_EnumerateVarsm_Expr_L1S7L1Z0 = 236,
  efunc_gen_EnumerateVarsm_Expr_L1S8L1Z0 = 237,
  efunc_AddSuffix = 238,
  efunc_gen_Passm_NameNestedFuncs_L1Z0 = 239,
  efunc_gen_DoMapAccum_S1A1Z6 = 240,
  efunc_gen_NameNestedAssigns_L1D1 = 241,
  efunc_gen_NameNestedAssigns_L1Z0 = 242,
  efunc_gen_DoMapAccum_S1A1Z7 = 243,
  efunc_gen_NameNestedResultRecm_Term_D5 = 244,
  efunc_gen_NameNestedResultRecm_Term_Z0 = 245,
  efunc_gen_DoMapAccum_S1A1Z8 = 246,
  efunc_gen_NameNestedBlocks_A1L1D1 = 247,
  efunc_gen_NameNestedBlocks_A1L1Z0 = 248,
  efunc_gen_DoMapAccum_S1A1Z9 = 249,
  efunc_gen_NameNestedBody_S2L1D1 = 250,
  efunc_gen_NameNestedBody_S2L1Z0 = 251,
  efunc_gen_RemoveAssignsm_Sentence_Z0 = 252,
  efunc_gen_RemoveAssignsm_Sentences_D3 = 253,
  efunc_gen_Passm_RemoveBlocksAndAssigns_L1Z0 = 254,
  efunc_gen_RemoveAssignsm_Result_L1Z0 = 255,
  efunc_gen_Reduce_S1A1Z1 = 256,
  efunc_gen_RemoveAssignsm_WindBlocks_L1D1 = 257,
  efunc_gen_Reduce_Z0 = 258,
  efunc_gen_RemoveAssignsm_WindBlocks_L1Z0 = 259,
  efunc_gen_RemoveAssignsm_Conditions_L1A1 = 260,
  efunc_gen_RemoveAssignsm_Conditions_L1D1 = 261,
  efunc_gen_RemoveAssignsm_Conditions_L1Z0 = 262,
  efunc_gen_MapAccum_Z2 = 263,
  efunc_gen_DoMapAccum_S1A1Z10 = 264,
  efunc_gen_ExtractNestedm_Sentence_A1Z1 = 265,
  efunc_gen_ExtractNestedm_Sentence_D1 = 266,
  efunc_gen_ExtractNestedm_Sentence_Z0 = 267,
  efunc_gen_Passm_FlatNestedFuncs_L1S1A1 = 268,
  efunc_gen_Passm_FlatNestedFuncs_L1Z0 = 269,
  efunc_gen_DoMapAccum_S1A1Z11 = 270,
  efunc_gen_DoMapAccum_S1A1Z12 = 271,
  efunc_gen_ExtractNestedm_Resultm_Term_D6 = 272,
  efunc_gen_ExtractNestedm_Resultm_Term_Z0 = 273,
  efunc_gen_DoMapAccum_Z18 = 274,
  efunc_gen_MapAccum_Z0 = 275,
  efunc_gen_UpdateBorrowedVars_Z0 = 276,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2L1D1 = 277,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2L1Z0 = 278,
  efunc_gen_Reduce_S1A1Z2 = 279,
  efunc_gen_CheckBorrowed_Z0 = 280,
  efunc_gen_ExtractNestedm_Sentence_A1Z2 = 281,
  efunc_gen_MapAccum_Z3 = 282,
  efunc_gen_DoMapAccum_S1A1Z13 = 283,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z0 = 284,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z0 = 285,
  efunc_gen_Passm_CleanupRedudandExterns_A3L1 = 286,
  efunc_gen_DoMapAccum_S1A1Z14 = 287,
  efunc_gen_Passm_CleanupRedudandExterns_A3L1Z0 = 288,
  efunc_gen_DoMapAccum_S1A1Z15 = 289,
  efunc_gen_FilterDeclarations_Z0 = 290,
  efunc_gen_Passm_CleanupRedudandExterns_A1L1D10 = 291,
  efunc_gen_DoMapAccum_S1A1Z16 = 292,
  efunc_gen_Passm_CleanupRedudandExterns_A1L1Z0 = 293,
  efunc_gen_Passm_UnfoldEnums_L1Z0 = 294,
  efunc_gen_Fetch_Z7 = 295,
  efunc_gen_Pipe_S2L1Z0 = 296,
  efunc_gen_Passm_AttachEntries_Z0 = 297,
  efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_Z0 = 298,
  efunc_gen_Passm_EnumerateVariables_Z0 = 299,
  efunc_gen_Passm_NameNestedFuncs_Z0 = 300,
  efunc_gen_Passm_RemoveBlocksAndAssigns_Z0 = 301,
  efunc_gen_Passm_FlatNestedFuncs_Z0 = 302,
  efunc_gen_Passm_CleanupRedudandExterns_Z0 = 303,
  efunc_gen_Passm_UnfoldEnums_Z0 = 304,
  efunc_gen_Fetch_Z8 = 305,
  efunc_gen_Passm_UnCondition_Z0 = 306,
  efunc_gen_DoMapAccum_S1A1Z0 = 307,
  efunc_gen_DoMapAccum_S1A1Z17 = 308,
  efunc_gen_EnumerateVarsm_Expr_L1Z2D1 = 309,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z9 = 310,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z10 = 311,
  efunc_gen_EnumerateVarsm_Assignments_S2A1Z3 = 312,
  efunc_gen_EnumerateVarsm_Body_S1L1A1Z0 = 313,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z3 = 314,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z4 = 315,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z7 = 316,
  efunc_gen_EnumerateVarsm_Assignments_S2A1Z0 = 317,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z5 = 318,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z6 = 319,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z8 = 320,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z1 = 321,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z0 = 322,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z2 = 323,
  efunc_gen_Reduce_S1A1Z0 = 324,
  efunc_gen_DoMapAccum_Z19 = 325,
  efunc_gen_ExtractNestedm_Conditions_Z1 = 326,
  efunc_gen_ExtractNestedm_Sentence_A2Z1 = 327,
  efunc_gen_ExtractNestedm_Sentence_A1Z0 = 328,
  efunc_gen_DoMapAccum_S1A1Z18 = 329,
  efunc_gen_DoMapAccum_Z20 = 330,
  efunc_gen_ExtractNestedm_Conditions_Z2 = 331,
  efunc_gen_ExtractNestedm_Sentence_A2Z2 = 332,
  efunc_gen_Map_Z20 = 333,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z3 = 334,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z4 = 335,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z7 = 336,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z5 = 337,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z6 = 338,
  efunc_gen_EnumerateVarsm_Assignments_S2A3Z8 = 339,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z1 = 340,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z0 = 341,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z2 = 342,
  efunc_gen_DoMapAccum_S1A1Z19 = 343,
  efunc_gen_DoMapAccum_Z21 = 344,
  efunc_gen_ExtractNestedm_Conditions_S1A1Z1 = 345,
  efunc_gen_ExtractNestedm_Conditions_Z0 = 346,
  efunc_gen_ExtractNestedm_Sentence_A2Z0 = 347,
  efunc_gen_DoMapAccum_S1A1Z20 = 348,
  efunc_gen_DoMapAccum_Z22 = 349,
  efunc_gen_ExtractNestedm_Conditions_S1A1Z2 = 350,
  efunc_gen_Fetch_Z9 = 351,
  efunc_gen_Fetch_Z10 = 352,
  efunc_gen_EnumerateVarsm_Body_S1L1A1Z2 = 353,
  efunc_gen_DoMapAccum_Z23 = 354,
  efunc_gen_Map_Z21 = 355,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z7 = 356,
  efunc_gen_Map_Z22 = 357,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z8 = 358,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z11 = 359,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z3 = 360,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z4 = 361,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z9 = 362,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z5 = 363,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z6 = 364,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z10 = 365,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z0 = 366,
  efunc_gen_DoMapAccum_S1A1Z21 = 367,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z1 = 368,
  efunc_gen_ExtractNestedm_Conditions_S1A2Z1 = 369,
  efunc_gen_ExtractNestedm_Conditions_S1A1Z0 = 370,
  efunc_gen_DoMapAccum_S1A1Z22 = 371,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z2 = 372,
  efunc_gen_ExtractNestedm_Conditions_S1A2Z2 = 373,
  efunc_gen_DoMapAccum_S1A1Z23 = 374,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z12 = 375,
  efunc_gen_DoMapAccum_Z24 = 376,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z13 = 377,
  efunc_gen_EnumerateVarsm_Assignments_S2A1Z4 = 378,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z7 = 379,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z8 = 380,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z11 = 381,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z9 = 382,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z1 = 383,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z0 = 384,
  efunc_gen_ExtractNestedm_Conditions_S1A3Z1 = 385,
  efunc_gen_ExtractNestedm_Conditions_S1A2Z0 = 386,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z2 = 387,
  efunc_gen_ExtractNestedm_Conditions_S1A3Z2 = 388,
  efunc_gen_Fetch_Z11 = 389,
  efunc_gen_Fetch_Z12 = 390,
  efunc_gen_DoMapAccum_S1A1Z24 = 391,
  efunc_gen_EnumerateVarsm_Expr_L1Z3D1 = 392,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z10 = 393,
  efunc_gen_Reduce_Z3 = 394,
  efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z0 = 395,
  efunc_gen_ExtractNestedm_Conditions_S1A3Z0 = 396,
  efunc_gen_Reduce_Z4 = 397,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z12 = 398,
  efunc_gen_Map_Z23 = 399,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z13 = 400,
  efunc_gen_EnumerateVarsm_Assignments_S2A2Z14 = 401,
  efunc_gen_Reduce_S1A1Z3 = 402,
  efunc_gen_Reduce_S1A1Z4 = 403,
  efunc_gen_Fetch_Z13 = 404,
  efunc_gen_Fetch_Z14 = 405,
  efunc_gen_Map_Z24 = 406,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z11 = 407,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z12 = 408,
  efunc_gen_EnumerateVarsm_Assignments_S2A4Z14 = 409,
  efunc_gen_EnumerateVarsm_Assignments_S2A5Z13 = 410,
  efunc_gen_Fetch_Z15 = 411,
  efunc_gen_Fetch_Z16 = 412,
  efunc_gen_Fetch_Z17 = 413,
  efunc_gen_Fetch_Z18 = 414,
  efunc_gen_Fetch_Z19 = 415,
  efunc_Passm_UnCondition = 416,
};


enum ident {
  ident_Conditionsm_Native = 0,
  ident_Conditionsm_Transform = 1,
  ident_Sentences = 2,
  ident_NativeBody = 3,
  ident_Metatable = 4,
  ident_Assign = 5,
  ident_Condition = 6,
  ident_Function = 7,
  ident_GNm_Entry = 8,
  ident_Enum = 9,
  ident_Swap = 10,
  ident_Declaration = 11,
  ident_Drive = 12,
  ident_Inline = 13,
  ident_Intrinsic = 14,
  ident_Spec = 15,
  ident_TkVariable = 16,
  ident_TkNewVariable = 17,
  ident_Brackets = 18,
  ident_ADTm_Brackets = 19,
  ident_CallBrackets = 20,
  ident_Closure = 21,
  ident_Symbol = 22,
  ident_Name = 23,
  ident_GNm_Local = 24,
  ident_ClosureBrackets = 25,
  ident_Mu = 26,
  ident_Up = 27,
  ident_Evm_met = 28,
  ident_Residue = 29,
  ident_u_u_Metau_Residue = 30,
  ident_Apply = 31,
  ident_Map = 32,
  ident_Reduce = 33,
  ident_Fetch = 34,
  ident_MapAccum = 35,
  ident_DoMapAccum = 36,
  ident_UnBracket = 37,
  ident_DelAccumulator = 38,
  ident_Inc = 39,
  ident_Dec = 40,
  ident_Pipe = 41,
  ident_Desugar = 42,
  ident_Passm_RemovePos = 43,
  ident_RemovePosm_Body = 44,
  ident_AssignOrCondition = 45,
  ident_RemovePosm_Blocks = 46,
  ident_RemovePosm_Expr = 47,
  ident_Passm_AttachEntries = 48,
  ident_Passm_RemoveRedundantDriveInlineIntrinsic = 49,
  ident_Passm_EnumerateVariables = 50,
  ident_EnumerateVarsm_Body = 51,
  ident_EnumerateVarsm_Blocks = 52,
  ident_EnumerateVarsm_Assignments = 53,
  ident_EnumerateVarsm_Expr = 54,
  ident_Passm_NameNestedFuncs = 55,
  ident_genu_eu_u_ = 56,
  ident_NameNestedBody = 57,
  ident_NameNestedBlocks = 58,
  ident_NameNestedAssigns = 59,
  ident_ChainTypeMarker = 60,
  ident_NameNestedResult = 61,
  ident_NameNestedResultRec = 62,
  ident_NameNestedResultRecm_Term = 63,
  ident_Passm_RemoveBlocksAndAssigns = 64,
  ident_RemoveAssignsm_Sentences = 65,
  ident_RemoveAssignsm_Sentence = 66,
  ident_RemoveAssignsm_Conditions = 67,
  ident_RemoveAssignsm_WindBlocks = 68,
  ident_RemoveAssignsm_Result = 69,
  ident_Passm_FlatNestedFuncs = 70,
  ident_ExtractNested = 71,
  ident_ExtractNestedRec = 72,
  ident_ExtractNestedm_Sentence = 73,
  ident_ExtractNestedm_Conditions = 74,
  ident_ExtractNestedm_Pattern = 75,
  ident_ExtractAllVars = 76,
  ident_Uniq = 77,
  ident_UpdateBorrowedVars = 78,
  ident_ExtractNestedm_Result = 79,
  ident_ExtractNestedm_Resultm_Term = 80,
  ident_CheckBorrowed = 81,
  ident_Passm_CleanupRedudandExterns = 82,
  ident_FilterDeclarations = 83,
  ident_Passm_UnfoldEnums = 84,
  ident_Ident = 85,
  ident_NativeBlock = 86,
  ident_Entry = 87,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply/4 s.Fn#1/5 e.Argument#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument#1 as range 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.Argument#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.Argument#1/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure#1/9 e.Bounded#1/7 )/6 e.Argument#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded#1 as range 7
  //DEBUG: e.Argument#1: 2
  //DEBUG: t.Closure#1: 9
  //DEBUG: e.Bounded#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure#1/9 } Tile{ AsIs: e.Bounded#1/7 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Map/4 s.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      //DEBUG: t.Next#1: 9
      //DEBUG: s.Fn#1: 5
      //DEBUG: e.Tail#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Next#1/9 } & $table/13 >/14 </15 & Map/16 s.Fn#1/5/17 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t.#0/15 e.0#0/13 )/6 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0#0 as range 13
      //DEBUG: t.Next#1: 9
      //DEBUG: e.Tail#1: 11
      //DEBUG: t.#0: 15
      //DEBUG: e.0#0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t.#0/15/19 e.0#0/13/21 Tile{ AsIs: t.Next#1/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t.#0/15 AsIs: e.0#0/13 AsIs: )/6 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn#1/5 AsIs: t.Next#1/9 } >/13 </14 & Map/15 t.Fn#1/5/16 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn#1/5 (/9 e.Tail#1/7 )/10 t.Acc#2/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Tail#1: 7
  //DEBUG: t.Acc#2: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/11 } Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail#1 as range 9
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn#1/5/15 (/17 Tile{ AsIs: e.Tail#1/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument#1/2 t.Function#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Argument#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function#1/5 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn#1/5 t.Acc#1/7 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 } (/9 )/10 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn#1/5 (/9 e.Scanned#1/7 )/10 (/13 e.Tail#1/11 )/14 t.Acc#2/15 e.StepScanned#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned#1 as range 7
  // closed e.Tail#1 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#2 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Scanned#1: 7
  //DEBUG: e.Tail#1: 11
  //DEBUG: t.Acc#2: 15
  //DEBUG: e.StepScanned#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/7 } Tile{ AsIs: e.StepScanned#2/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 t.Next#1/17 e.Tail#1/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned#1 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 15
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Tail#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn#1/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail#1/15 } )/20 </21 & Apply@2/22 t.Fn#1/5/23 Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: t.Next#1/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 9
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Scanned#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn#1/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 5
  //DEBUG: e.Expr#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Dec/4 s.Num#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num#1/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num#1/2 >/1
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num#1/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func#1/5 (/9 e.Funcs#1/7 )/10 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs#1 as range 7
  // closed e.Arg#2 as range 2
  //DEBUG: t.Func#1: 5
  //DEBUG: e.Funcs#1: 7
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func#1/5 } Tile{ AsIs: e.Arg#2/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#2 as range 2
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Pipe/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Pipe/4 t.Func#1/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func#1: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func#1/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func#1/7 e.Funcs#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs#1 as range 9
    //DEBUG: t.Func#1: 7
    //DEBUG: e.Funcs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func#1/7 } (/11 Tile{ AsIs: e.Funcs#1/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_Desugar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Desugar/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Desugar/4 s.new#1/5 s.new#2/6 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Desugar/4 s.MarkupContext#1/5 # Conditions-Native/6 e.AST#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Conditionsm_Native], context[6] ) )
      continue;
    // closed e.AST#1 as range 7
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.AST#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@5/4 } </9 Tile{ HalfReuse: & Map@4/6 AsIs: e.AST#1/7 AsIs: >/1 } Tile{ AsIs: s.MarkupContext#1/5 } >/10 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z5]);
    refalrts::reinit_name(context[6], functions[efunc_gen_Map_Z4]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[6], context[1] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Desugar/4 s.MarkupContext#1/5 # Conditions-Transform/6 e.AST#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Conditionsm_Transform], context[6] ) )
      continue;
    // closed e.AST#1 as range 7
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.AST#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@6/4 } </9 Tile{ HalfReuse: & Map@4/6 AsIs: e.AST#1/7 AsIs: >/1 } Tile{ AsIs: s.MarkupContext#1/5 } >/10 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z6]);
    refalrts::reinit_name(context[6], functions[efunc_gen_Map_Z4]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[6], context[1] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Desugar/4 s.MarkupContext#1/5 s.ConditionsMode#1/6 e.AST#1/2 >/1
  // closed e.AST#1 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: s.ConditionsMode#1: 6
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Fetch/8 Tile{ AsIs: e.AST#1/2 } </9 & Pipe/10 & Pass-RemovePos/11 & Pass-AttachEntries/12 & Pass-RemoveRedundantDriveInlineIntrinsic/13 & Pass-EnumerateVariables/14 & Pass-NameNestedFuncs/15 & Pass-RemoveBlocksAndAssigns/16 (/17 & Pass-FlatNestedFuncs/18 s.MarkupContext#1/5/19 )/20 Tile{ AsIs: </0 Reuse: & Desugar\1*2/4 AsIs: s.MarkupContext#1/5 AsIs: s.ConditionsMode#1/6 } >/21 & Pass-CleanupRedudandExterns/22 & Pass-UnfoldEnums/23 >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_Fetch]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Pipe]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Passm_RemovePos]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Passm_AttachEntries]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Passm_RemoveRedundantDriveInlineIntrinsic]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Passm_EnumerateVariables]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Passm_NameNestedFuncs]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Passm_RemoveBlocksAndAssigns]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Passm_FlatNestedFuncs]);
  refalrts::copy_stvar(vm, context[19], context[5]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Passm_CleanupRedudandExterns]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Passm_UnfoldEnums]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_Desugar_L1D2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[9], context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Desugar("Desugar", 0U, 0U, func_Desugar);


static refalrts::FnResult func_Passm_RemovePos(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pass-RemovePos/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_RemovePos("Pass-RemovePos", 0U, 0U, func_Passm_RemovePos);


static refalrts::FnResult func_gen_RemovePosm_Body_S1L1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & RemovePos-Body$1\1\1=1/4 s.ChainType#3/17 (/15 e.Result#3/13 )/16 (/11 e.Blocks#3/9 )/12 (/7 e.Pattern#3/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Result#3 as range 13
  // closed e.Blocks#3 as range 9
  // closed e.Pattern#3 as range 5
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Result#3: 13
  //DEBUG: e.Blocks#3: 9
  //DEBUG: e.Pattern#3: 5
  //DEBUG: s.ChainType#3: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.ChainType#3/17 AsIs: (/15 } Tile{ AsIs: </0 } & Map@3/18 Tile{ AsIs: e.Result#3/13 } >/19 )/20 (/21 Tile{ HalfReuse: </16 HalfReuse: & Map@5/11 AsIs: e.Blocks#3/9 HalfReuse: >/12 HalfReuse: )/7 } (/22 </23 & Map@3/24 Tile{ AsIs: e.Pattern#3/5 } >/25 Tile{ AsIs: )/8 HalfReuse: )/1 ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_name(context[11], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[7] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[16], context[7] );
  res = refalrts::splice_evar( res, context[19], context[21] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RemovePosm_Body_S1L1L1A1("RemovePos-Body$1\\1\\1=1", COOKIE1_, COOKIE2_, func_gen_RemovePosm_Body_S1L1L1A1);


static refalrts::FnResult func_RemovePosm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & RemovePos-Body/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & RemovePos-Body/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & RemovePos-Body/4 # Sentences/5 e.Sentences#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[5] ) )
      continue;
    // closed e.Sentences#1 as range 6
    //DEBUG: e.Sentences#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Sentences/0 HalfReuse: </4 HalfReuse: & Map@1/5 AsIs: e.Sentences#1/6 AsIs: >/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & RemovePos-Body/4 # NativeBody/5 t.SrcPos#1/8 e.Code#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[5] ) )
      continue;
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.Code#1 as range 6
    //DEBUG: t.SrcPos#1: 8
    //DEBUG: e.Code#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & RemovePos-Body/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/5 AsIs: t.SrcPos#1/8 } Tile{ AsIs: e.Code#1/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[5], context[9] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemovePos-Body/4 # Metatable/5 e.Metatable#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Metatable#1 as range 2
  //DEBUG: e.Metatable#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Metatable/0 HalfReuse: </4 HalfReuse: & Map@2/5 AsIs: e.Metatable#1/2 AsIs: >/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemovePosm_Body("RemovePos-Body", COOKIE1_, COOKIE2_, func_RemovePosm_Body);


static refalrts::FnResult func_AssignOrCondition(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & AssignOrCondition/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AssignOrCondition/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & AssignOrCondition/4 # Assign/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AssignOrCondition/4 # Assign/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AssignOrCondition/4 # Condition/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Condition], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AssignOrCondition/4 # Condition/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AssignOrCondition("AssignOrCondition", COOKIE1_, COOKIE2_, func_AssignOrCondition);


static refalrts::FnResult func_RemovePosm_Blocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & RemovePos-Blocks/4 e.Blocks#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Blocks#1 as range 2
  //DEBUG: e.Blocks#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: e.Blocks#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemovePosm_Blocks("RemovePos-Blocks", COOKIE1_, COOKIE2_, func_RemovePosm_Blocks);


static refalrts::FnResult func_RemovePosm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & RemovePos-Expr/4 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr#1 as range 2
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: e.Expr#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemovePosm_Expr("RemovePos-Expr", 0U, 0U, func_RemovePosm_Expr);


static refalrts::FnResult func_gen_Passm_AttachEntries_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Pass-AttachEntries\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Pass-AttachEntries\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Pass-AttachEntries\1/4 (/7 e.new#6/11 )/8 (/9 s.new#3/15 s.new#4/16 e.new#5/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#6 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    // closed e.new#5 as range 13
    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Function/15 s.ScopeClass#3/16 (/23 e.Name#3/21 )/24 e.Body#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Function], context[15] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 21
      // closed e.Body#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 21
      //DEBUG: e.Body#3: 19
      //16: s.ScopeClass#3
      //17: e.Entries#2
      //19: e.Body#3
      //21: e.Name#3
      //28: e.Entries#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Passm_AttachEntries_L1S1C1]);
      refalrts::copy_evar(vm, context[28], context[29], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </25 & Pass-AttachEntries\1$1?1/29 e._#4/30 (/36 e.Name#3/38 )/37 e._0#4/32 >/26
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::call_left( context[27], context[28], context[25], context[26] );
        context[30] = 0;
        context[31] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[32] = context[27];
          context[33] = context[28];
          context[34] = 0;
          context[35] = 0;
          context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
          if( ! context[36] )
            continue;
          refalrts::bracket_pointers(context[36], context[37]);
          if( ! refalrts::repeated_evar_left( vm, context[38], context[39], context[21], context[22], context[34], context[35] ) )
            continue;
          if( ! refalrts::empty_seq( context[34], context[35] ) )
            continue;
          // closed e._0#4 as range 32
          //DEBUG: s.ScopeClass#3: 16
          //DEBUG: e.Entries#2: 17
          //DEBUG: e.Name#3: 21
          //DEBUG: e.Body#3: 19
          //DEBUG: e._#4: 30
          //DEBUG: e._0#4: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 {REMOVED TILE} </25 & Pass-AttachEntries\1$1?1/29 e._#4/30 {REMOVED TILE} e.Name#3/38 )/37 e._0#4/32 >/26 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Function/15 } Tile{ HalfReuse: # GN-Entry/36 } Tile{ AsIs: (/23 AsIs: e.Name#3/21 AsIs: )/24 AsIs: e.Body#3/19 AsIs: )/10 } Tile{ ]] }
          refalrts::reinit_ident(context[36], identifiers[ident_GNm_Entry]);
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[23], context[10] );
          res = refalrts::splice_elem( res, context[36] );
          res = refalrts::splice_evar( res, context[9], context[15] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[30], context[31], context[27], context[28] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[25], context[26]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Enum/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Enum], context[15] ) )
        continue;
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 19
      //16: s.ScopeClass#3
      //17: e.Entries#2
      //19: e.Name#3
      //24: e.Entries#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Passm_AttachEntries_L1S2C1]);
      refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </21 & Pass-AttachEntries\1$2?1/25 e._#4/26 (/32 e.Name#3/34 )/33 e._0#4/28 >/22
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
        context[26] = 0;
        context[27] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[28] = context[23];
          context[29] = context[24];
          context[30] = 0;
          context[31] = 0;
          context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
          if( ! context[32] )
            continue;
          refalrts::bracket_pointers(context[32], context[33]);
          if( ! refalrts::repeated_evar_left( vm, context[34], context[35], context[19], context[20], context[30], context[31] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e._0#4 as range 28
          //DEBUG: s.ScopeClass#3: 16
          //DEBUG: e.Entries#2: 17
          //DEBUG: e.Name#3: 19
          //DEBUG: e._#4: 26
          //DEBUG: e._0#4: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 e.Name#3/19 )/10 </21 & Pass-AttachEntries\1$2?1/25 e._#4/26 {REMOVED TILE} e._0#4/28 >/22 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Enum/15 } Tile{ HalfReuse: # GN-Entry/32 AsIs: e.Name#3/34 AsIs: )/33 } Tile{ ]] }
          refalrts::reinit_ident(context[32], identifiers[ident_GNm_Entry]);
          refalrts::link_brackets( context[9], context[33] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[15] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[26], context[27], context[23], context[24] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[21], context[22]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Swap/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Swap], context[15] ) )
        continue;
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 19
      //16: s.ScopeClass#3
      //17: e.Entries#2
      //19: e.Name#3
      //24: e.Entries#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Passm_AttachEntries_L1S3C1]);
      refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </21 & Pass-AttachEntries\1$3?1/25 e._#4/26 (/32 e.Name#3/34 )/33 e._0#4/28 >/22
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
        context[26] = 0;
        context[27] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[28] = context[23];
          context[29] = context[24];
          context[30] = 0;
          context[31] = 0;
          context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
          if( ! context[32] )
            continue;
          refalrts::bracket_pointers(context[32], context[33]);
          if( ! refalrts::repeated_evar_left( vm, context[34], context[35], context[19], context[20], context[30], context[31] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e._0#4 as range 28
          //DEBUG: s.ScopeClass#3: 16
          //DEBUG: e.Entries#2: 17
          //DEBUG: e.Name#3: 19
          //DEBUG: e._#4: 26
          //DEBUG: e._0#4: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 e.Name#3/19 )/10 </21 & Pass-AttachEntries\1$3?1/25 e._#4/26 {REMOVED TILE} e._0#4/28 >/22 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Swap/15 } Tile{ HalfReuse: # GN-Entry/32 AsIs: e.Name#3/34 AsIs: )/33 } Tile{ ]] }
          refalrts::reinit_ident(context[32], identifiers[ident_GNm_Entry]);
          refalrts::link_brackets( context[9], context[33] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[15] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[26], context[27], context[23], context[24] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[21], context[22]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Declaration/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Declaration], context[15] ) )
        continue;
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 19
      //16: s.ScopeClass#3
      //17: e.Entries#2
      //19: e.Name#3
      //24: e.Entries#2

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Passm_AttachEntries_L1S4C1]);
      refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </21 & Pass-AttachEntries\1$4?1/25 e._#4/26 (/32 e.Name#3/34 )/33 e._0#4/28 >/22
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
        context[26] = 0;
        context[27] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[28] = context[23];
          context[29] = context[24];
          context[30] = 0;
          context[31] = 0;
          context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
          if( ! context[32] )
            continue;
          refalrts::bracket_pointers(context[32], context[33]);
          if( ! refalrts::repeated_evar_left( vm, context[34], context[35], context[19], context[20], context[30], context[31] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e._0#4 as range 28
          //DEBUG: s.ScopeClass#3: 16
          //DEBUG: e.Entries#2: 17
          //DEBUG: e.Name#3: 19
          //DEBUG: e._#4: 26
          //DEBUG: e._0#4: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 e.Name#3/19 )/10 </21 & Pass-AttachEntries\1$4?1/25 e._#4/26 {REMOVED TILE} e._0#4/28 >/22 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Declaration/15 } Tile{ HalfReuse: # GN-Entry/32 AsIs: e.Name#3/34 AsIs: )/33 } Tile{ ]] }
          refalrts::reinit_ident(context[32], identifiers[ident_GNm_Entry]);
          refalrts::link_brackets( context[9], context[33] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[15] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[26], context[27], context[23], context[24] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[21], context[22]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Drive/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Drive], context[15] ) )
        continue;
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 {REMOVED TILE} )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Drive/15 } Tile{ AsIs: e.Name#3/19 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Inline/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Inline], context[15] ) )
        continue;
      // closed e.Entries#2 as range 17
      // closed e.Name#3 as range 19
      //DEBUG: s.ScopeClass#3: 16
      //DEBUG: e.Entries#2: 17
      //DEBUG: e.Name#3: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 {REMOVED TILE} )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Inline/15 } Tile{ AsIs: e.Name#3/19 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 (/9 # Intrinsic/15 s.ScopeClass#3/16 e.Name#3/19 )/10 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[15] ) )
      continue;
    // closed e.Entries#2 as range 17
    // closed e.Name#3 as range 19
    //DEBUG: s.ScopeClass#3: 16
    //DEBUG: e.Entries#2: 17
    //DEBUG: e.Name#3: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/17 )/8 {REMOVED TILE} s.ScopeClass#3/16 {REMOVED TILE} )/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Intrinsic/15 } Tile{ AsIs: e.Name#3/19 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/5 )/8 t.Other#3/9 >/1
  // closed e.Entries#2 as range 5
  //DEBUG: t.Other#3: 9
  //DEBUG: e.Entries#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-AttachEntries\1/4 (/7 e.Entries#2/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Other#3/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_AttachEntries_L1("Pass-AttachEntries\\1", COOKIE1_, COOKIE2_, func_gen_Passm_AttachEntries_L1);


static refalrts::FnResult func_gen_Passm_AttachEntries_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Pass-AttachEntries=1/4 (/7 e.Entries#2/5 )/8 e.AST#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Entries#2 as range 5
  // closed e.AST#2 as range 2
  //DEBUG: e.Entries#2: 5
  //DEBUG: e.AST#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 AsIs: (/7 AsIs: e.Entries#2/5 AsIs: )/8 AsIs: e.AST#2/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_AttachEntries_A1("Pass-AttachEntries=1", COOKIE1_, COOKIE2_, func_gen_Passm_AttachEntries_A1);


static refalrts::FnResult func_Passm_AttachEntries(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Pass-AttachEntries/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-AttachEntries=1/4 } </5 & DoMapAccum@1/6 (/7 )/8 (/9 )/10 Tile{ AsIs: e.AST#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_AttachEntries_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_AttachEntries("Pass-AttachEntries", COOKIE1_, COOKIE2_, func_Passm_AttachEntries);


static refalrts::FnResult func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2/4 (/7 )/8 e.AST#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST#3 as range 2
  //DEBUG: e.AST#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2/4 (/7 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST#3/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2("Pass-RemoveRedundantDriveInlineIntrinsic=2", COOKIE1_, COOKIE2_, func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2);


static refalrts::FnResult func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.new#5/11 )/8 (/9 s.new#3/15 e.new#4/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels-B#3/20 (/26 e.Name#3/28 s.Label#3/30 )/27 e.Labels-E#3/22 )/8 (/9 s.Label#3/15 e.Name#3/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      // closed e.Name#3 as range 18
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[16];
        context[23] = context[17];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[18], context[19], context[24], context[25] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[30], context[15], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.Labels-E#3 as range 22
        //DEBUG: s.Label#3: 15
        //DEBUG: e.Name#3: 18
        //DEBUG: e.Labels-B#3: 20
        //DEBUG: e.Labels-E#3: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 {REMOVED TILE} (/26 e.Name#3/28 s.Label#3/30 )/27 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels-B#3/20 } Tile{ AsIs: e.Labels-E#3/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Label#3/15 AsIs: e.Name#3/18 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[10] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[16], context[17] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels-B#3/20 (/26 e.Name#3/29 # Drive/28 )/27 e.Labels-E#3/22 )/8 (/9 # Inline/15 e.Name#3/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Inline], context[15] ) )
        continue;
      // closed e.Name#3 as range 18
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[16];
        context[23] = context[17];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        context[28] = refalrts::ident_right( identifiers[ident_Drive], context[24], context[25] );
        if( ! context[28] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[18], context[19], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.Labels-E#3 as range 22
        //DEBUG: e.Name#3: 18
        //DEBUG: e.Labels-B#3: 20
        //DEBUG: e.Labels-E#3: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Inline/15 e.Name#3/18 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#3/20 AsIs: (/26 AsIs: e.Name#3/29 AsIs: # Drive/28 AsIs: )/27 AsIs: e.Labels-E#3/22 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[16], context[17] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.new#7/16 )/8 (/9 # Intrinsic/15 e.new#6/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[15] ) )
        continue;
      // closed e.new#7 as range 16
      // closed e.new#6 as range 18
      do {
        // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels-B#3/24 (/30 e.Name#3/33 # Drive/32 )/31 e.Labels-E#3/26 )/8 (/9 # Intrinsic/15 e.Name#3/22 )/10 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        // closed e.Name#3 as range 22
        context[24] = 0;
        context[25] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[26] = context[20];
          context[27] = context[21];
          context[28] = 0;
          context[29] = 0;
          context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
          if( ! context[30] )
            continue;
          refalrts::bracket_pointers(context[30], context[31]);
          context[32] = refalrts::ident_right( identifiers[ident_Drive], context[28], context[29] );
          if( ! context[32] )
            continue;
          if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
            continue;
          if( ! refalrts::empty_seq( context[28], context[29] ) )
            continue;
          // closed e.Labels-E#3 as range 26
          //DEBUG: e.Name#3: 22
          //DEBUG: e.Labels-B#3: 24
          //DEBUG: e.Labels-E#3: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Intrinsic/15 e.Name#3/22 )/10 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#3/24 AsIs: (/30 AsIs: e.Name#3/33 AsIs: # Drive/32 AsIs: )/31 AsIs: e.Labels-E#3/26 AsIs: )/8 } Tile{ ]] }
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[30], context[31] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[24], context[25], context[20], context[21] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels-B#3/24 (/30 e.Name#3/33 # Inline/32 )/31 e.Labels-E#3/26 )/8 (/9 # Intrinsic/15 e.Name#3/22 )/10 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      // closed e.Name#3 as range 22
      context[24] = 0;
      context[25] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[26] = context[20];
        context[27] = context[21];
        context[28] = 0;
        context[29] = 0;
        context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
        if( ! context[30] )
          continue;
        refalrts::bracket_pointers(context[30], context[31]);
        context[32] = refalrts::ident_right( identifiers[ident_Inline], context[28], context[29] );
        if( ! context[32] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
          continue;
        if( ! refalrts::empty_seq( context[28], context[29] ) )
          continue;
        // closed e.Labels-E#3 as range 26
        //DEBUG: e.Name#3: 22
        //DEBUG: e.Labels-B#3: 24
        //DEBUG: e.Labels-E#3: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Intrinsic/15 e.Name#3/22 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#3/24 AsIs: (/30 AsIs: e.Name#3/33 AsIs: # Inline/32 AsIs: )/31 AsIs: e.Labels-E#3/26 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[24], context[25], context[20], context[21] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels#3/16 )/8 (/9 # Drive/15 e.Name#3/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Drive], context[15] ) )
        continue;
      // closed e.Labels#3 as range 16
      // closed e.Name#3 as range 18
      //DEBUG: e.Labels#3: 16
      //DEBUG: e.Name#3: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Drive/15 e.Name#3/18 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels#3/16 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels#3/16 )/8 (/9 # Inline/15 e.Name#3/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Inline], context[15] ) )
        continue;
      // closed e.Labels#3 as range 16
      // closed e.Name#3 as range 18
      //DEBUG: e.Labels#3: 16
      //DEBUG: e.Name#3: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Inline/15 e.Name#3/18 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels#3/16 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels#3/16 )/8 (/9 # Intrinsic/15 e.Name#3/18 )/10 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[15] ) )
      continue;
    // closed e.Labels#3 as range 16
    // closed e.Name#3 as range 18
    //DEBUG: e.Labels#3: 16
    //DEBUG: e.Name#3: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} (/9 # Intrinsic/15 e.Name#3/18 )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels#3/16 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 (/7 e.Labels#3/5 )/8 t.Other#3/9 >/1
  // closed e.Labels#3 as range 5
  //DEBUG: t.Other#3: 9
  //DEBUG: e.Labels#3: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels#3/5 AsIs: )/8 AsIs: t.Other#3/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1("Pass-RemoveRedundantDriveInlineIntrinsic=2\\1", COOKIE1_, COOKIE2_, func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1);


static refalrts::FnResult func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1/4 (/7 e.Labels#2/5 )/8 e.AST#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Labels#2 as range 5
  // closed e.AST#2 as range 2
  //DEBUG: e.Labels#2: 5
  //DEBUG: e.AST#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Pass-RemoveRedundantDriveInlineIntrinsic=2/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@2/4 AsIs: (/7 AsIs: e.Labels#2/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.AST#2/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1("Pass-RemoveRedundantDriveInlineIntrinsic=1", COOKIE1_, COOKIE2_, func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1);


static refalrts::FnResult func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.new#5/11 )/8 (/9 s.new#3/15 e.new#4/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels-B#2/20 (/26 e.Name#2/28 s.KnownLabel#2/30 )/27 e.Labels-E#2/22 )/8 (/9 # Drive/15 e.Name#2/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Drive], context[15] ) )
        continue;
      // closed e.Name#2 as range 18
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[16];
        context[23] = context[17];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[18], context[19], context[24], context[25] ) )
          continue;
        // closed e.Labels-E#2 as range 22
        if( ! refalrts::svar_left( context[30], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: e.Name#2: 18
        //DEBUG: e.Labels-B#2: 20
        //DEBUG: e.Labels-E#2: 22
        //DEBUG: s.KnownLabel#2: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 {REMOVED TILE} {REMOVED TILE} s.KnownLabel#2/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#2/20 AsIs: (/26 } Tile{ AsIs: e.Name#2/28 } Tile{ HalfReuse: # Drive/1 } Tile{ AsIs: )/27 AsIs: e.Labels-E#2/22 AsIs: )/8 AsIs: (/9 AsIs: # Drive/15 AsIs: e.Name#2/18 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_Drive]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[27], context[10] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[7], context[26] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[16], context[17] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.new#7/16 )/8 (/9 # Inline/15 e.new#6/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Inline], context[15] ) )
        continue;
      // closed e.new#7 as range 16
      // closed e.new#6 as range 18
      do {
        // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels-B#2/24 (/30 e.Name#2/33 # Drive/32 )/31 e.Labels-E#2/26 )/8 (/9 # Inline/15 e.Name#2/22 )/10 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        // closed e.Name#2 as range 22
        context[24] = 0;
        context[25] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[26] = context[20];
          context[27] = context[21];
          context[28] = 0;
          context[29] = 0;
          context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
          if( ! context[30] )
            continue;
          refalrts::bracket_pointers(context[30], context[31]);
          context[32] = refalrts::ident_right( identifiers[ident_Drive], context[28], context[29] );
          if( ! context[32] )
            continue;
          if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
            continue;
          if( ! refalrts::empty_seq( context[28], context[29] ) )
            continue;
          // closed e.Labels-E#2 as range 26
          //DEBUG: e.Name#2: 22
          //DEBUG: e.Labels-B#2: 24
          //DEBUG: e.Labels-E#2: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#2/24 AsIs: (/30 AsIs: e.Name#2/33 AsIs: # Drive/32 AsIs: )/31 AsIs: e.Labels-E#2/26 AsIs: )/8 AsIs: (/9 AsIs: # Inline/15 AsIs: e.Name#2/22 AsIs: )/10 } Tile{ ]] }
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[30], context[31] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[7], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[24], context[25], context[20], context[21] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels-B#2/24 (/30 e.Name#2/33 # Intrinsic/32 )/31 e.Labels-E#2/26 )/8 (/9 # Inline/15 e.Name#2/22 )/10 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      // closed e.Name#2 as range 22
      context[24] = 0;
      context[25] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[26] = context[20];
        context[27] = context[21];
        context[28] = 0;
        context[29] = 0;
        context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
        if( ! context[30] )
          continue;
        refalrts::bracket_pointers(context[30], context[31]);
        context[32] = refalrts::ident_right( identifiers[ident_Intrinsic], context[28], context[29] );
        if( ! context[32] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
          continue;
        if( ! refalrts::empty_seq( context[28], context[29] ) )
          continue;
        // closed e.Labels-E#2 as range 26
        //DEBUG: e.Name#2: 22
        //DEBUG: e.Labels-B#2: 24
        //DEBUG: e.Labels-E#2: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#2/24 AsIs: (/30 AsIs: e.Name#2/33 Reuse: # Inline/32 AsIs: )/31 AsIs: e.Labels-E#2/26 AsIs: )/8 AsIs: (/9 AsIs: # Inline/15 AsIs: e.Name#2/22 AsIs: )/10 } Tile{ ]] }
        refalrts::update_ident(context[32], identifiers[ident_Inline]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[10] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[24], context[25], context[20], context[21] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels-B#2/20 (/26 e.Name#2/28 s.KnownLabel#2/30 )/27 e.Labels-E#2/22 )/8 (/9 # Intrinsic/15 e.Name#2/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[15] ) )
        continue;
      // closed e.Name#2 as range 18
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[16];
        context[23] = context[17];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[18], context[19], context[24], context[25] ) )
          continue;
        // closed e.Labels-E#2 as range 22
        if( ! refalrts::svar_left( context[30], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: e.Name#2: 18
        //DEBUG: e.Labels-B#2: 20
        //DEBUG: e.Labels-E#2: 22
        //DEBUG: s.KnownLabel#2: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B#2/20 AsIs: (/26 AsIs: e.Name#2/28 AsIs: s.KnownLabel#2/30 AsIs: )/27 AsIs: e.Labels-E#2/22 AsIs: )/8 AsIs: (/9 AsIs: # Intrinsic/15 AsIs: e.Name#2/18 AsIs: )/10 } Tile{ ]] }
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[10] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[16], context[17] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels#2/16 )/8 (/9 # Drive/15 e.Name#2/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Drive], context[15] ) )
        continue;
      // closed e.Labels#2 as range 16
      // closed e.Name#2 as range 18
      //DEBUG: e.Labels#2: 16
      //DEBUG: e.Name#2: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels#2/16 } Tile{ AsIs: (/7 } e.Name#2/18/20 Tile{ HalfReuse: # Drive/4 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Drive/15 AsIs: e.Name#2/18 AsIs: )/10 } Tile{ ]] }
      refalrts::copy_evar(vm, context[20], context[21], context[18], context[19]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels#2/16 )/8 (/9 # Inline/15 e.Name#2/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Inline], context[15] ) )
        continue;
      // closed e.Labels#2 as range 16
      // closed e.Name#2 as range 18
      //DEBUG: e.Labels#2: 16
      //DEBUG: e.Name#2: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels#2/16 } Tile{ AsIs: (/7 } e.Name#2/18/20 Tile{ HalfReuse: # Inline/4 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Inline/15 AsIs: e.Name#2/18 AsIs: )/10 } Tile{ ]] }
      refalrts::copy_evar(vm, context[20], context[21], context[18], context[19]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels#2/16 )/8 (/9 # Intrinsic/15 e.Name#2/18 )/10 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[15] ) )
      continue;
    // closed e.Labels#2 as range 16
    // closed e.Name#2 as range 18
    //DEBUG: e.Labels#2: 16
    //DEBUG: e.Name#2: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels#2/16 } Tile{ AsIs: (/7 } e.Name#2/18/20 Tile{ HalfReuse: # Intrinsic/4 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Intrinsic/15 AsIs: e.Name#2/18 AsIs: )/10 } Tile{ ]] }
    refalrts::copy_evar(vm, context[20], context[21], context[18], context[19]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 (/7 e.Labels#2/5 )/8 t.Other#2/9 >/1
  // closed e.Labels#2 as range 5
  //DEBUG: t.Other#2: 9
  //DEBUG: e.Labels#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels#2/5 AsIs: )/8 AsIs: t.Other#2/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1("Pass-RemoveRedundantDriveInlineIntrinsic=1\\1", COOKIE1_, COOKIE2_, func_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1);


static refalrts::FnResult func_Passm_RemoveRedundantDriveInlineIntrinsic(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Pass-RemoveRedundantDriveInlineIntrinsic/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-RemoveRedundantDriveInlineIntrinsic=1/4 } </5 & DoMapAccum@3/6 (/7 )/8 (/9 )/10 Tile{ AsIs: e.AST#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_RemoveRedundantDriveInlineIntrinsic("Pass-RemoveRedundantDriveInlineIntrinsic", COOKIE1_, COOKIE2_, func_Passm_RemoveRedundantDriveInlineIntrinsic);


static refalrts::FnResult func_gen_Passm_EnumerateVariables_L1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Pass-EnumerateVariables\1$1=1/4 t.Name#2/5 t.ScopeVars#3/7 e.EnumeratedPattern#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.EnumeratedPattern#3 as range 2
  //DEBUG: t.Name#2: 5
  //DEBUG: t.ScopeVars#3: 7
  //DEBUG: e.EnumeratedPattern#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} t.ScopeVars#3/7 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Spec/4 AsIs: t.Name#2/5 } Tile{ AsIs: e.EnumeratedPattern#3/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_EnumerateVariables_L1S1A1("Pass-EnumerateVariables\\1$1=1", COOKIE1_, COOKIE2_, func_gen_Passm_EnumerateVariables_L1S1A1);


static refalrts::FnResult func_Passm_EnumerateVariables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pass-EnumerateVariables/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_EnumerateVariables("Pass-EnumerateVariables", 0U, 0U, func_Passm_EnumerateVariables);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & EnumerateVars-Body$1\1=4/4 (/7 e.Pattern#3/5 )/8 (/11 e.Assigns#4/9 )/12 (/15 e.Result#5/13 )/16 e.Blocks#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Pattern#3 as range 5
  // closed e.Assigns#4 as range 9
  // closed e.Result#5 as range 13
  // closed e.Blocks#6 as range 2
  //DEBUG: e.Pattern#3: 5
  //DEBUG: e.Assigns#4: 9
  //DEBUG: e.Result#5: 13
  //DEBUG: e.Blocks#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern#3/5 AsIs: )/8 } Tile{ AsIs: e.Assigns#4/9 } Tile{ AsIs: (/15 AsIs: e.Result#5/13 AsIs: )/16 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Blocks#6/2 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A4("EnumerateVars-Body$1\\1=4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A4);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & EnumerateVars-Body$1\1=3/4 (/7 e.Pattern#3/5 )/8 (/11 e.Assigns#4/9 )/12 s.Depth#4/13 (/16 e.Blocks#2/14 )/17 (/20 e.ScopeVars#5/18 )/21 e.Result#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Pattern#3 as range 5
  // closed e.Assigns#4 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Blocks#2 as range 14
  // closed e.ScopeVars#5 as range 18
  // closed e.Result#5 as range 2
  //DEBUG: e.Pattern#3: 5
  //DEBUG: e.Assigns#4: 9
  //DEBUG: s.Depth#4: 13
  //DEBUG: e.Blocks#2: 14
  //DEBUG: e.ScopeVars#5: 18
  //DEBUG: e.Result#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1=4/4 AsIs: (/7 AsIs: e.Pattern#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Assigns#4/9 AsIs: )/12 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Result#5/2 } )/22 </23 & EnumerateVars-Blocks/24 </25 & Add/26 1/27 Tile{ AsIs: s.Depth#4/13 } Tile{ HalfReuse: >/17 AsIs: (/20 AsIs: e.ScopeVars#5/18 AsIs: )/21 } Tile{ AsIs: e.Blocks#2/14 } >/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_EnumerateVarsm_Blocks]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[27], 1UL);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1A4]);
  refalrts::reinit_close_call(context[17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[22], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A3("EnumerateVars-Body$1\\1=3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A3);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & EnumerateVars-Body$1\1=2/4 (/7 e.Pattern#3/5 )/8 (/11 e.Blocks#2/9 )/12 (/15 e.Result#2/13 )/16 (/19 e.ScopeVars#4/17 )/20 s.Depth#4/21 e.Assigns#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Pattern#3 as range 5
  // closed e.Blocks#2 as range 9
  // closed e.Result#2 as range 13
  // closed e.ScopeVars#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Assigns#4 as range 2
  //DEBUG: e.Pattern#3: 5
  //DEBUG: e.Blocks#2: 9
  //DEBUG: e.Result#2: 13
  //DEBUG: e.ScopeVars#4: 17
  //DEBUG: s.Depth#4: 21
  //DEBUG: e.Assigns#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth#4/21 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1=3/4 AsIs: (/7 AsIs: e.Pattern#3/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Assigns#4/2 } )/22 Tile{ HalfReuse: s.Depth4 #21/12 AsIs: (/15 } Tile{ AsIs: e.Blocks#2/9 } )/23 </24 & DoMapAccum@5/25 Tile{ HalfReuse: s.Depth4 #21/16 AsIs: (/19 AsIs: e.ScopeVars#4/17 AsIs: )/20 } (/26 )/27 Tile{ AsIs: e.Result#2/13 } >/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1A3]);
  refalrts::reinit_svar( context[12], context[21] );
  refalrts::reinit_svar( context[16], context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[23] );
  refalrts::link_brackets( context[11], context[22] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A2("EnumerateVars-Body$1\\1=2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A2);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & EnumerateVars-Body$1\1=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.Blocks#2/22 )/8 (/11 e.Result#2/24 )/12 s.Depth#1/13 (/16 )/17 (/20 e.ScopeVars#3/26 )/21 e.Pattern#3/28 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[2];
    context[29] = context[3];
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.Blocks#2 as range 22
    // closed e.Result#2 as range 24
    // closed e.ScopeVars#3 as range 26
    // closed e.Pattern#3 as range 28
    //DEBUG: s.Depth#1: 13
    //DEBUG: e.Blocks#2: 22
    //DEBUG: e.Result#2: 24
    //DEBUG: e.ScopeVars#3: 26
    //DEBUG: e.Pattern#3: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </30 & EnumerateVars-Body$1\1=3/31 (/32 Tile{ AsIs: e.Pattern#3/28 } Tile{ AsIs: )/12 } (/33 Tile{ HalfReuse: )/0 HalfReuse: s.Depth1 #13/4 AsIs: (/7 AsIs: e.Blocks#2/22 AsIs: )/8 HalfReuse: </11 } & DoMapAccum/34 [*]/35 & EnumerateVars-Expr\1/36 Tile{ HalfReuse: s.Depth1 #13/16 HalfReuse: {*}/17 AsIs: (/20 AsIs: e.ScopeVars#3/26 AsIs: )/21 } (/37 )/38 Tile{ AsIs: e.Result#2/24 } >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_EnumerateVarsm_Body_S1L1A3]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_DoMapAccum]);
    refalrts::alloc_closure_head(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_svar( context[4], context[13] );
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_svar( context[16], context[13] );
    refalrts::reinit_unwrapped_closure(context[17], context[35]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[33], context[0] );
    refalrts::link_brackets( context[32], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[16], context[21] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    refalrts::wrap_closure( context[17] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.new#9/22 )/8 (/11 e.new#10/24 )/12 s.new#7/13 (/16 (/34 s.new#11/48 (/46 e.new#12/44 )/47 (/42 e.new#13/40 )/43 (/38 e.new#14/36 )/39 )/35 e.new#15/26 )/17 (/20 e.new#16/28 )/21 e.new#8/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[26], context[27] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_right( context[36], context[37], context[32], context[33] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_right( context[40], context[41], context[32], context[33] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_right( context[44], context[45], context[32], context[33] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    // closed e.new#9 as range 22
    // closed e.new#10 as range 24
    // closed e.new#12 as range 44
    // closed e.new#13 as range 40
    // closed e.new#14 as range 36
    // closed e.new#15 as range 26
    // closed e.new#16 as range 28
    // closed e.new#8 as range 30
    if( ! refalrts::svar_left( context[48], context[32], context[33] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    do {
      // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.Blocks#2/49 )/8 (/11 e.Result#2/51 )/12 s.Depth#1/13 (/16 (/34 # Assign/48 (/46 e.3#0/53 )/47 (/42 e.5#0/55 )/43 (/38 e.7#0/57 )/39 )/35 e.#0/59 )/17 (/20 e.ScopeVars#3/61 )/21 e.Pattern#3/63 >/1
      context[49] = context[22];
      context[50] = context[23];
      context[51] = context[24];
      context[52] = context[25];
      context[53] = context[44];
      context[54] = context[45];
      context[55] = context[40];
      context[56] = context[41];
      context[57] = context[36];
      context[58] = context[37];
      context[59] = context[26];
      context[60] = context[27];
      context[61] = context[28];
      context[62] = context[29];
      context[63] = context[30];
      context[64] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_Assign], context[48] ) )
        continue;
      // closed e.Blocks#2 as range 49
      // closed e.Result#2 as range 51
      // closed e.3#0 as range 53
      // closed e.5#0 as range 55
      // closed e.7#0 as range 57
      // closed e.#0 as range 59
      // closed e.ScopeVars#3 as range 61
      // closed e.Pattern#3 as range 63
      //DEBUG: s.Depth#1: 13
      //DEBUG: e.Blocks#2: 49
      //DEBUG: e.Result#2: 51
      //DEBUG: e.3#0: 53
      //DEBUG: e.5#0: 55
      //DEBUG: e.7#0: 57
      //DEBUG: e.#0: 59
      //DEBUG: e.ScopeVars#3: 61
      //DEBUG: e.Pattern#3: 63

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/65 (/66 Tile{ AsIs: e.Pattern#3/63 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Blocks#2/49 AsIs: )/8 AsIs: (/11 AsIs: e.Result#2/51 AsIs: )/12 } </67 & EnumerateVars-Assignments$2=2@3/68 (/69 Tile{ AsIs: e.#0/59 } Tile{ AsIs: )/43 AsIs: (/38 AsIs: e.7#0/57 AsIs: )/39 HalfReuse: (/35 } Tile{ AsIs: e.5#0/55 } )/70 Tile{ AsIs: s.Depth#1/13 HalfReuse: </16 HalfReuse: & DoMapAccum@5/34 } Tile{ HalfReuse: s.Depth1 #13/17 AsIs: (/20 AsIs: e.ScopeVars#3/61 AsIs: )/21 } Tile{ HalfReuse: (/48 HalfReuse: )/46 AsIs: e.3#0/53 HalfReuse: >/47 HalfReuse: >/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[65], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z3]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_close_bracket(vm, context[70]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[35]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[34], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_svar( context[17], context[13] );
      refalrts::reinit_open_bracket(context[48]);
      refalrts::reinit_close_bracket(context[46]);
      refalrts::reinit_close_call(context[47]);
      refalrts::reinit_close_call(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[48], context[46] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[35], context[70] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[69], context[43] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[66], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[42] );
      res = refalrts::splice_evar( res, context[17], context[21] );
      res = refalrts::splice_evar( res, context[13], context[34] );
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[43], context[35] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.Blocks#2/49 )/8 (/11 e.Result#2/51 )/12 s.Depth#1/13 (/16 (/34 # Condition/48 (/46 e.3#0/53 )/47 (/42 e.5#0/55 )/43 (/38 e.7#0/57 )/39 )/35 e.#0/59 )/17 (/20 e.ScopeVars#3/61 )/21 e.Pattern#3/63 >/1
      context[49] = context[22];
      context[50] = context[23];
      context[51] = context[24];
      context[52] = context[25];
      context[53] = context[44];
      context[54] = context[45];
      context[55] = context[40];
      context[56] = context[41];
      context[57] = context[36];
      context[58] = context[37];
      context[59] = context[26];
      context[60] = context[27];
      context[61] = context[28];
      context[62] = context[29];
      context[63] = context[30];
      context[64] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_Condition], context[48] ) )
        continue;
      // closed e.Blocks#2 as range 49
      // closed e.Result#2 as range 51
      // closed e.3#0 as range 53
      // closed e.5#0 as range 55
      // closed e.7#0 as range 57
      // closed e.#0 as range 59
      // closed e.ScopeVars#3 as range 61
      // closed e.Pattern#3 as range 63
      //DEBUG: s.Depth#1: 13
      //DEBUG: e.Blocks#2: 49
      //DEBUG: e.Result#2: 51
      //DEBUG: e.3#0: 53
      //DEBUG: e.5#0: 55
      //DEBUG: e.7#0: 57
      //DEBUG: e.#0: 59
      //DEBUG: e.ScopeVars#3: 61
      //DEBUG: e.Pattern#3: 63

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/65 (/66 Tile{ AsIs: e.Pattern#3/63 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Blocks#2/49 AsIs: )/8 AsIs: (/11 AsIs: e.Result#2/51 AsIs: )/12 } </67 & EnumerateVars-Assignments$2=2@4/68 (/69 Tile{ AsIs: e.#0/59 } Tile{ AsIs: )/43 AsIs: (/38 AsIs: e.7#0/57 AsIs: )/39 HalfReuse: (/35 } Tile{ AsIs: e.5#0/55 } )/70 Tile{ AsIs: s.Depth#1/13 HalfReuse: </16 HalfReuse: & DoMapAccum@5/34 } Tile{ HalfReuse: s.Depth1 #13/17 AsIs: (/20 AsIs: e.ScopeVars#3/61 AsIs: )/21 } Tile{ HalfReuse: (/48 HalfReuse: )/46 AsIs: e.3#0/53 HalfReuse: >/47 HalfReuse: >/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[65], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z4]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_close_bracket(vm, context[70]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[35]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[34], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_svar( context[17], context[13] );
      refalrts::reinit_open_bracket(context[48]);
      refalrts::reinit_close_bracket(context[46]);
      refalrts::reinit_close_call(context[47]);
      refalrts::reinit_close_call(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[48], context[46] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[35], context[70] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[69], context[43] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[66], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[42] );
      res = refalrts::splice_evar( res, context[17], context[21] );
      res = refalrts::splice_evar( res, context[13], context[34] );
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[43], context[35] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.Blocks#2/49 )/8 (/11 e.Result#2/51 )/12 s.Depth#1/13 (/16 (/34 s.ChainType#1/48 (/46 e.3#0/53 )/47 (/42 e.5#0/55 )/43 (/38 e.7#0/57 )/39 )/35 e.#0/59 )/17 (/20 e.ScopeVars#3/61 )/21 e.Pattern#3/63 >/1
    context[49] = context[22];
    context[50] = context[23];
    context[51] = context[24];
    context[52] = context[25];
    context[53] = context[44];
    context[54] = context[45];
    context[55] = context[40];
    context[56] = context[41];
    context[57] = context[36];
    context[58] = context[37];
    context[59] = context[26];
    context[60] = context[27];
    context[61] = context[28];
    context[62] = context[29];
    context[63] = context[30];
    context[64] = context[31];
    // closed e.Blocks#2 as range 49
    // closed e.Result#2 as range 51
    // closed e.3#0 as range 53
    // closed e.5#0 as range 55
    // closed e.7#0 as range 57
    // closed e.#0 as range 59
    // closed e.ScopeVars#3 as range 61
    // closed e.Pattern#3 as range 63
    //DEBUG: s.Depth#1: 13
    //DEBUG: s.ChainType#1: 48
    //DEBUG: e.Blocks#2: 49
    //DEBUG: e.Result#2: 51
    //DEBUG: e.3#0: 53
    //DEBUG: e.5#0: 55
    //DEBUG: e.7#0: 57
    //DEBUG: e.#0: 59
    //DEBUG: e.ScopeVars#3: 61
    //DEBUG: e.Pattern#3: 63

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/65 (/66 Tile{ AsIs: e.Pattern#3/63 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Blocks#2/49 AsIs: )/8 AsIs: (/11 AsIs: e.Result#2/51 AsIs: )/12 } Tile{ HalfReuse: </16 HalfReuse: & EnumerateVars-Assignments$2=1@1/34 AsIs: s.ChainType#1/48 } (/67 Tile{ AsIs: e.#0/59 } Tile{ AsIs: )/43 AsIs: (/38 AsIs: e.7#0/57 AsIs: )/39 HalfReuse: (/35 } Tile{ AsIs: e.5#0/55 } )/68 Tile{ HalfReuse: s.Depth1 #13/17 AsIs: (/20 AsIs: e.ScopeVars#3/61 AsIs: )/21 } Tile{ AsIs: (/46 AsIs: e.3#0/53 AsIs: )/47 HalfReuse: </42 } & AssignOrCondition*2/69 s.ChainType#1/48/70 >/71 >/72 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[65], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
    refalrts::alloc_open_bracket(vm, context[66]);
    refalrts::alloc_open_bracket(vm, context[67]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_name(vm, context[69], functions[efunc_gen_AssignOrCondition_D2]);
    refalrts::copy_stvar(vm, context[70], context[48]);
    refalrts::alloc_close_call(vm, context[71]);
    refalrts::alloc_close_call(vm, context[72]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_name(context[34], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z1]);
    refalrts::reinit_open_bracket(context[35]);
    refalrts::reinit_svar( context[17], context[13] );
    refalrts::reinit_open_call(context[42]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[72] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[71] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[35], context[68] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[67], context[43] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[66], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[69], context[72] );
    res = refalrts::splice_evar( res, context[46], context[42] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_elem( res, context[68] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[43], context[35] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_elem( res, context[67] );
    res = refalrts::splice_evar( res, context[16], context[48] );
    res = refalrts::splice_evar( res, context[4], context[12] );
    res = refalrts::splice_evar( res, context[63], context[64] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Body$1\1=1/4 (/7 e.Blocks#2/5 )/8 (/11 e.Result#2/9 )/12 s.Depth#1/13 (/16 e.Assigns#2/14 )/17 (/20 e.ScopeVars#3/18 )/21 e.Pattern#3/2 >/1
  // closed e.Blocks#2 as range 5
  // closed e.Result#2 as range 9
  // closed e.Assigns#2 as range 14
  // closed e.ScopeVars#3 as range 18
  // closed e.Pattern#3 as range 2
  //DEBUG: s.Depth#1: 13
  //DEBUG: e.Blocks#2: 5
  //DEBUG: e.Result#2: 9
  //DEBUG: e.Assigns#2: 14
  //DEBUG: e.ScopeVars#3: 18
  //DEBUG: e.Pattern#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/22 (/23 Tile{ AsIs: e.Pattern#3/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Blocks#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.Result#2/9 AsIs: )/12 } </24 & EnumerateVars-Assignments@0/25 Tile{ AsIs: (/16 } )/26 Tile{ HalfReuse: s.Depth1 #13/17 AsIs: (/20 AsIs: e.ScopeVars#3/18 AsIs: )/21 } Tile{ AsIs: e.Assigns#2/14 } >/27 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_EnumerateVarsm_Assignments_Z0]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_svar( context[17], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[23], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A1("EnumerateVars-Body$1\\1=1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A1);


static refalrts::FnResult func_EnumerateVarsm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & EnumerateVars-Body/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Body/4 s.new#1/5 (/8 e.new#2/6 )/9 s.new#3/10 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Body/4 s.Depth#1/5 (/8 e.ScopeVars#1/11 )/9 # Sentences/10 e.Sentences#1/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[10] ) )
      continue;
    // closed e.ScopeVars#1 as range 11
    // closed e.Sentences#1 as range 13
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: e.Sentences#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Sentences/10 } Tile{ AsIs: </0 Reuse: & Map@10/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/11 AsIs: )/9 } Tile{ AsIs: e.Sentences#1/13 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EnumerateVars-Body/4 s.Depth#1/5 (/8 e.ScopeVars#1/11 )/9 # NativeBody/10 t.SrcPos#1/15 e.Code#1/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[10] ) )
      continue;
    // closed e.ScopeVars#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Code#1 as range 13
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: t.SrcPos#1: 15
    //DEBUG: e.Code#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EnumerateVars-Body/4 s.Depth#1/5 (/8 e.ScopeVars#1/11 )/9 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/10 AsIs: t.SrcPos#1/15 } Tile{ AsIs: e.Code#1/13 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[10], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Body/4 s.Depth#1/5 (/8 e.ScopeVars#1/6 )/9 # Metatable/10 e.Metatable#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars#1 as range 6
  // closed e.Metatable#1 as range 2
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.Metatable#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & EnumerateVars-Body/4 s.Depth#1/5 (/8 e.ScopeVars#1/6 )/9 # Metatable/10 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Metatable/0 } Tile{ AsIs: e.Metatable#1/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EnumerateVarsm_Body("EnumerateVars-Body", COOKIE1_, COOKIE2_, func_EnumerateVarsm_Body);


static refalrts::FnResult func_EnumerateVarsm_Blocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & EnumerateVars-Blocks/4 s.Depth#1/5 (/8 e.ScopeVars#1/6 )/9 e.Blocks#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.ScopeVars#1 as range 6
  // closed e.Blocks#1 as range 2
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.Blocks#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 AsIs: e.Blocks#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EnumerateVarsm_Blocks("EnumerateVars-Blocks", COOKIE1_, COOKIE2_, func_EnumerateVarsm_Blocks);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & EnumerateVars-Assignments$2=5/4 (/7 e.RAssignments#1/5 )/8 s.ChainType#1/9 (/12 e.Result#3/10 )/13 (/16 e.Blocks#5/14 )/17 s.Depth#4/18 (/21 e.Assignments#1/19 )/22 (/25 e.ScopeVars#6/23 )/26 e.Pattern#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RAssignments#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Result#3 as range 10
  // closed e.Blocks#5 as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Assignments#1 as range 19
  // closed e.ScopeVars#6 as range 23
  // closed e.Pattern#6 as range 2
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: s.ChainType#1: 9
  //DEBUG: e.Result#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: s.Depth#4: 18
  //DEBUG: e.Assignments#1: 19
  //DEBUG: e.ScopeVars#6: 23
  //DEBUG: e.Pattern#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Depth#4/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments@2/4 AsIs: (/7 AsIs: e.RAssignments#1/5 AsIs: )/8 AsIs: s.ChainType#1/9 AsIs: (/12 AsIs: e.Result#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 } Tile{ AsIs: (/21 } Tile{ AsIs: e.Pattern#6/2 } )/27 Tile{ HalfReuse: s.Depth4 #18/22 AsIs: (/25 AsIs: e.ScopeVars#6/23 AsIs: )/26 } Tile{ AsIs: e.Assignments#1/19 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_Z2]);
  refalrts::reinit_svar( context[22], context[18] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[27] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::splice_to_freelist_open( vm, context[17], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5("EnumerateVars-Assignments$2=5", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & EnumerateVars-Assignments$2=4/4 (/7 e.RAssignments#1/5 )/8 s.ChainType#1/9 (/12 e.Result#3/10 )/13 s.Depth#4/14 (/17 e.Assignments#1/15 )/18 (/21 e.ScopeVars#3/19 )/22 (/25 e.Pattern#1/23 )/26 e.Blocks#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RAssignments#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.Result#3 as range 10
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Assignments#1 as range 15
  // closed e.ScopeVars#3 as range 19
  // closed e.Pattern#1 as range 23
  // closed e.Blocks#5 as range 2
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: s.ChainType#1: 9
  //DEBUG: e.Result#3: 10
  //DEBUG: s.Depth#4: 14
  //DEBUG: e.Assignments#1: 15
  //DEBUG: e.ScopeVars#3: 19
  //DEBUG: e.Pattern#1: 23
  //DEBUG: e.Blocks#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5/4 AsIs: (/7 AsIs: e.RAssignments#1/5 AsIs: )/8 AsIs: s.ChainType#1/9 AsIs: (/12 AsIs: e.Result#3/10 AsIs: )/13 } (/27 Tile{ AsIs: e.Blocks#5/2 } )/28 Tile{ AsIs: s.Depth#4/14 AsIs: (/17 AsIs: e.Assignments#1/15 AsIs: )/18 HalfReuse: </21 } & DoMapAccum@5/29 s.Depth#4/14/30 (/31 Tile{ AsIs: e.ScopeVars#3/19 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: )/26 } Tile{ AsIs: e.Pattern#1/23 } >/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::copy_stvar(vm, context[30], context[14]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5]);
  refalrts::reinit_open_call(context[21]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[31], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_evar( res, context[14], context[21] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4("EnumerateVars-Assignments$2=4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & EnumerateVars-Assignments$2=3/4 (/7 e.RAssignments#1/5 )/8 s.ChainType#1/9 (/12 e.Result#3/10 )/13 (/16 e.Assignments#1/14 )/17 (/20 e.ScopeVars#3/18 )/21 (/24 e.Pattern#1/22 )/25 (/28 e.Blocks#1/26 )/29 s.Depth#4/30 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RAssignments#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.Result#3 as range 10
  // closed e.Assignments#1 as range 14
  // closed e.ScopeVars#3 as range 18
  // closed e.Pattern#1 as range 22
  // closed e.Blocks#1 as range 26
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: s.ChainType#1: 9
  //DEBUG: e.Result#3: 10
  //DEBUG: e.Assignments#1: 14
  //DEBUG: e.ScopeVars#3: 18
  //DEBUG: e.Pattern#1: 22
  //DEBUG: e.Blocks#1: 26
  //DEBUG: s.Depth#4: 30

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4/4 AsIs: (/7 AsIs: e.RAssignments#1/5 AsIs: )/8 AsIs: s.ChainType#1/9 AsIs: (/12 AsIs: e.Result#3/10 AsIs: )/13 HalfReuse: s.Depth4 #30/16 } (/31 Tile{ AsIs: e.Assignments#1/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.ScopeVars#3/18 AsIs: )/21 AsIs: (/24 AsIs: e.Pattern#1/22 AsIs: )/25 HalfReuse: </28 } Tile{ HalfReuse: & Map@11/29 AsIs: s.Depth#4/30 } (/32 e.ScopeVars#3/18/33 )/35 Tile{ AsIs: e.Blocks#1/26 } >/36 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::copy_evar(vm, context[33], context[34], context[18], context[19]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4]);
  refalrts::reinit_svar( context[16], context[30] );
  refalrts::reinit_open_call(context[28]);
  refalrts::reinit_name(context[29], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[31], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[32], context[35] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[17], context[28] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3("EnumerateVars-Assignments$2=3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & EnumerateVars-Assignments$2=2/4 (/7 e.RAssignments#1/5 )/8 s.ChainType#1/9 (/12 e.Assignments#1/10 )/13 (/16 e.Pattern#1/14 )/17 (/20 e.Blocks#1/18 )/21 s.Depth#1/22 (/25 e.ScopeVars#3/23 )/26 e.Result#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RAssignments#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Assignments#1 as range 10
  // closed e.Pattern#1 as range 14
  // closed e.Blocks#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.ScopeVars#3 as range 23
  // closed e.Result#3 as range 2
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: s.ChainType#1: 9
  //DEBUG: e.Assignments#1: 10
  //DEBUG: e.Pattern#1: 14
  //DEBUG: e.Blocks#1: 18
  //DEBUG: s.Depth#1: 22
  //DEBUG: e.ScopeVars#3: 23
  //DEBUG: e.Result#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3/4 AsIs: (/7 AsIs: e.RAssignments#1/5 AsIs: )/8 AsIs: s.ChainType#1/9 AsIs: (/12 } Tile{ AsIs: e.Result#3/2 } Tile{ AsIs: )/26 } (/27 Tile{ AsIs: e.Assignments#1/10 } )/28 (/29 Tile{ AsIs: e.ScopeVars#3/23 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Pattern#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Blocks#1/18 AsIs: )/21 } </30 & Add/31 1/32 Tile{ AsIs: s.Depth#1/22 HalfReuse: >/25 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[32], 1UL);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3]);
  refalrts::reinit_close_call(context[25]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[29], context[13] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[12], context[26] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[30], context[32] );
  res = refalrts::splice_evar( res, context[13], context[21] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2("EnumerateVars-Assignments$2=2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=1/4 (/7 e.RAssignments#1/5 )/8 s.ChainType#1/17 (/20 e.Assignments#1/18 )/21 (/24 e.Pattern#1/22 )/25 (/28 e.Blocks#1/26 )/29 s.Depth#1/30 (/15 e.ScopeVars#1/13 )/16 (/11 e.Result#1/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.RAssignments#1 as range 5
  // closed e.ScopeVars#1 as range 13
  // closed e.Result#1 as range 9
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.Assignments#1 as range 18
  // closed e.Pattern#1 as range 22
  // closed e.Blocks#1 as range 26
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: e.ScopeVars#1: 13
  //DEBUG: e.Result#1: 9
  //DEBUG: s.ChainType#1: 17
  //DEBUG: e.Assignments#1: 18
  //DEBUG: e.Pattern#1: 22
  //DEBUG: e.Blocks#1: 26
  //DEBUG: s.Depth#1: 30

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2/4 AsIs: (/7 AsIs: e.RAssignments#1/5 AsIs: )/8 AsIs: s.ChainType#1/17 AsIs: (/20 AsIs: e.Assignments#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Pattern#1/22 AsIs: )/25 AsIs: (/28 AsIs: e.Blocks#1/26 AsIs: )/29 AsIs: s.Depth#1/30 HalfReuse: </15 } & DoMapAccum@5/31 s.Depth#1/30/32 (/33 Tile{ AsIs: e.ScopeVars#1/13 } )/34 Tile{ HalfReuse: (/16 HalfReuse: )/11 AsIs: e.Result#1/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::copy_stvar(vm, context[32], context[30]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[16], context[11] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[31], context[33] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A1("EnumerateVars-Assignments$2=1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A1);


static refalrts::FnResult func_EnumerateVarsm_Assignments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & EnumerateVars-Assignments/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments/4 (/7 e.RAssignments#1/14 )/8 s.Depth#1/9 (/12 e.ScopeVars#1/16 )/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[10];
    context[17] = context[11];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.RAssignments#1 as range 14
    // closed e.ScopeVars#1 as range 16
    //DEBUG: s.Depth#1: 9
    //DEBUG: e.RAssignments#1: 14
    //DEBUG: e.ScopeVars#1: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EnumerateVars-Assignments/4 (/7 {REMOVED TILE} )/8 s.Depth#1/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: e.ScopeVars#1/16 AsIs: )/13 HalfReuse: s.Depth1 #9/1 } Tile{ AsIs: e.RAssignments#1/14 } Tile{ ]] }
    refalrts::reinit_svar( context[1], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments/4 (/7 e.new#11/5 )/8 s.new#5/9 (/12 e.new#12/10 )/13 (/16 s.new#6/30 (/28 e.new#7/26 )/29 (/24 e.new#8/22 )/25 (/20 e.new#9/18 )/21 )/17 e.new#10/2 >/1
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[14], context[15] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_right( context[22], context[23], context[14], context[15] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_right( context[26], context[27], context[14], context[15] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#11 as range 5
  // closed e.new#12 as range 10
  // closed e.new#7 as range 26
  // closed e.new#8 as range 22
  // closed e.new#9 as range 18
  // closed e.new#10 as range 2
  if( ! refalrts::svar_left( context[30], context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EnumerateVars-Assignments/4 (/7 e.RAssignments#1/31 )/8 s.Depth#1/9 (/12 e.ScopeVars#1/33 )/13 (/16 # Assign/30 (/28 e.Result#1/35 )/29 (/24 e.Blocks#1/37 )/25 (/20 e.Pattern#1/39 )/21 )/17 e.Assignments#1/41 >/1
    context[31] = context[5];
    context[32] = context[6];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[26];
    context[36] = context[27];
    context[37] = context[22];
    context[38] = context[23];
    context[39] = context[18];
    context[40] = context[19];
    context[41] = context[2];
    context[42] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[30] ) )
      continue;
    // closed e.RAssignments#1 as range 31
    // closed e.ScopeVars#1 as range 33
    // closed e.Result#1 as range 35
    // closed e.Blocks#1 as range 37
    // closed e.Pattern#1 as range 39
    // closed e.Assignments#1 as range 41
    //DEBUG: s.Depth#1: 9
    //DEBUG: e.RAssignments#1: 31
    //DEBUG: e.ScopeVars#1: 33
    //DEBUG: e.Result#1: 35
    //DEBUG: e.Blocks#1: 37
    //DEBUG: e.Pattern#1: 39
    //DEBUG: e.Assignments#1: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@1/4 AsIs: (/7 AsIs: e.RAssignments#1/31 AsIs: )/8 } Tile{ AsIs: (/28 } Tile{ AsIs: e.Assignments#1/41 } Tile{ AsIs: )/25 AsIs: (/20 AsIs: e.Pattern#1/39 AsIs: )/21 HalfReuse: (/17 } Tile{ AsIs: e.Blocks#1/37 } Tile{ AsIs: )/29 HalfReuse: s.Depth1 #9/24 } </43 & DoMapAccum@5/44 Tile{ AsIs: s.Depth#1/9 AsIs: (/12 AsIs: e.ScopeVars#1/33 AsIs: )/13 AsIs: (/16 HalfReuse: )/30 } Tile{ AsIs: e.Result#1/35 } >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_svar( context[24], context[9] );
    refalrts::reinit_close_bracket(context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[43] );
    refalrts::link_brackets( context[16], context[30] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[17], context[29] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[28], context[25] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[29], context[24] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[25], context[17] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EnumerateVars-Assignments/4 (/7 e.RAssignments#1/31 )/8 s.Depth#1/9 (/12 e.ScopeVars#1/33 )/13 (/16 # Condition/30 (/28 e.Result#1/35 )/29 (/24 e.Blocks#1/37 )/25 (/20 e.Pattern#1/39 )/21 )/17 e.Assignments#1/41 >/1
    context[31] = context[5];
    context[32] = context[6];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[26];
    context[36] = context[27];
    context[37] = context[22];
    context[38] = context[23];
    context[39] = context[18];
    context[40] = context[19];
    context[41] = context[2];
    context[42] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Condition], context[30] ) )
      continue;
    // closed e.RAssignments#1 as range 31
    // closed e.ScopeVars#1 as range 33
    // closed e.Result#1 as range 35
    // closed e.Blocks#1 as range 37
    // closed e.Pattern#1 as range 39
    // closed e.Assignments#1 as range 41
    //DEBUG: s.Depth#1: 9
    //DEBUG: e.RAssignments#1: 31
    //DEBUG: e.ScopeVars#1: 33
    //DEBUG: e.Result#1: 35
    //DEBUG: e.Blocks#1: 37
    //DEBUG: e.Pattern#1: 39
    //DEBUG: e.Assignments#1: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@2/4 AsIs: (/7 AsIs: e.RAssignments#1/31 AsIs: )/8 } Tile{ AsIs: (/28 } Tile{ AsIs: e.Assignments#1/41 } Tile{ AsIs: )/25 AsIs: (/20 AsIs: e.Pattern#1/39 AsIs: )/21 HalfReuse: (/17 } Tile{ AsIs: e.Blocks#1/37 } Tile{ AsIs: )/29 HalfReuse: s.Depth1 #9/24 } </43 & DoMapAccum@5/44 Tile{ AsIs: s.Depth#1/9 AsIs: (/12 AsIs: e.ScopeVars#1/33 AsIs: )/13 AsIs: (/16 HalfReuse: )/30 } Tile{ AsIs: e.Result#1/35 } >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z2]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_svar( context[24], context[9] );
    refalrts::reinit_close_bracket(context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[43] );
    refalrts::link_brackets( context[16], context[30] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[17], context[29] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[28], context[25] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[29], context[24] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[25], context[17] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments/4 (/7 e.RAssignments#1/5 )/8 s.Depth#1/9 (/12 e.ScopeVars#1/10 )/13 (/16 s.ChainType#1/30 (/28 e.Result#1/26 )/29 (/24 e.Blocks#1/22 )/25 (/20 e.Pattern#1/18 )/21 )/17 e.Assignments#1/2 >/1
  // closed e.RAssignments#1 as range 5
  // closed e.ScopeVars#1 as range 10
  // closed e.Result#1 as range 26
  // closed e.Blocks#1 as range 22
  // closed e.Pattern#1 as range 18
  // closed e.Assignments#1 as range 2
  //DEBUG: s.Depth#1: 9
  //DEBUG: s.ChainType#1: 30
  //DEBUG: e.RAssignments#1: 5
  //DEBUG: e.ScopeVars#1: 10
  //DEBUG: e.Result#1: 26
  //DEBUG: e.Blocks#1: 22
  //DEBUG: e.Pattern#1: 18
  //DEBUG: e.Assignments#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=1/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments#1/5 } )/31 Tile{ AsIs: s.ChainType#1/30 AsIs: (/28 } Tile{ AsIs: e.Assignments#1/2 } Tile{ AsIs: )/25 AsIs: (/20 AsIs: e.Pattern#1/18 AsIs: )/21 HalfReuse: (/17 } Tile{ AsIs: e.Blocks#1/22 } Tile{ AsIs: )/8 AsIs: s.Depth#1/9 AsIs: (/12 AsIs: e.ScopeVars#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/26 } Tile{ AsIs: )/29 HalfReuse: </24 } & AssignOrCondition*2/32 s.ChainType#1/30/33 >/34 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_gen_AssignOrCondition_D2]);
  refalrts::copy_stvar(vm, context[33], context[30]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1]);
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_open_call(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[16], context[29] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[28], context[25] );
  refalrts::link_brackets( context[7], context[31] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[34] );
  res = refalrts::splice_evar( res, context[29], context[24] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[25], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[30], context[28] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EnumerateVarsm_Assignments("EnumerateVars-Assignments", COOKIE1_, COOKIE2_, func_EnumerateVarsm_Assignments);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & EnumerateVars-Expr\1$1=1/4 (/7 e.ScopeVars#3/5 )/8 e.NewVar#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ScopeVars#3 as range 5
  // closed e.NewVar#3 as range 2
  //DEBUG: e.ScopeVars#3: 5
  //DEBUG: e.NewVar#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.ScopeVars#3/5 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # TkVariable/4 } Tile{ AsIs: e.NewVar#3/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkVariable]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1S1A1("EnumerateVars-Expr\\1$1=1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1S1A1);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & EnumerateVars-Expr\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Expr\1/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EnumerateVars-Expr\1/4 s.new#4/5 (/8 e.new#7/12 )/9 (/10 s.new#5/16 e.new#6/14 )/11 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = 0;
    context[15] = 0;
    if( ! refalrts::brackets_term( context[14], context[15], context[10] ) )
      continue;
    // closed e.new#7 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    // closed e.new#6 as range 14
    do {
      // </0 & EnumerateVars-Expr\1/4 s.new#8/5 (/8 e.new#12/17 )/9 (/10 s.new#9/16 s.new#10/21 e.new#11/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      // closed e.new#12 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new#11 as range 19
      do {
        // </0 & EnumerateVars-Expr\1/4 s.new#13/5 (/8 e.new#16/22 )/9 (/10 # TkVariable/16 s.new#14/21 e.new#15/24 )/11 >/1
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[16] ) )
          continue;
        // closed e.new#16 as range 22
        // closed e.new#15 as range 24
        do {
          // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/26 )/9 (/10 # TkVariable/16 s.Mode#2/21 '_'/30 e.Index#2/28 )/11 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = refalrts::char_left( '_', context[28], context[29] );
          if( ! context[30] )
            continue;
          // closed e.ScopeVars#2 as range 26
          // closed e.Index#2 as range 28
          //DEBUG: s.Depth#1: 5
          //DEBUG: s.Mode#2: 21
          //DEBUG: e.ScopeVars#2: 26
          //DEBUG: e.Index#2: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Depth#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Expr\1$1=1/4 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & NewVarName/9 AsIs: (/10 } Tile{ AsIs: e.ScopeVars#2/26 } Tile{ HalfReuse: )/16 AsIs: s.Mode#2/21 AsIs: '_'/30 AsIs: e.Index#2/28 HalfReuse: s.Depth1 #5/11 AsIs: >/1 } >/31 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Expr_L1S1A1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[9], functions[efunc_NewVarName]);
          refalrts::reinit_close_bracket(context[16]);
          refalrts::reinit_svar( context[11], context[5] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[10], context[16] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[9], context[10] );
          res = refalrts::splice_elem( res, context[8] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars-B#2/30 (/36 s.Mode#2/38 e.Index#2/39 s.Depth#2/41 )/37 e.ScopeVars-E#2/32 )/9 (/10 # TkVariable/16 s.Mode#2/21 e.Index#2/28 )/11 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          // closed e.Index#2 as range 28
          context[30] = 0;
          context[31] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[32] = context[26];
            context[33] = context[27];
            context[34] = 0;
            context[35] = 0;
            context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
            if( ! context[36] )
              continue;
            refalrts::bracket_pointers(context[36], context[37]);
            if( ! refalrts::repeated_stvar_left( vm, context[38], context[21], context[34], context[35] ) )
              continue;
            if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[28], context[29], context[34], context[35] ) )
              continue;
            // closed e.ScopeVars-E#2 as range 32
            if( ! refalrts::svar_left( context[41], context[34], context[35] ) )
              continue;
            if( ! refalrts::empty_seq( context[34], context[35] ) )
              continue;
            //DEBUG: s.Depth#1: 5
            //DEBUG: s.Mode#2: 21
            //DEBUG: e.Index#2: 28
            //DEBUG: e.ScopeVars-B#2: 30
            //DEBUG: e.ScopeVars-E#2: 32
            //DEBUG: s.Depth#2: 41

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.ScopeVars-B#2/30 AsIs: (/36 AsIs: s.Mode#2/38 AsIs: e.Index#2/39 AsIs: s.Depth#2/41 AsIs: )/37 AsIs: e.ScopeVars-E#2/32 AsIs: )/9 AsIs: (/10 AsIs: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/28 HalfReuse: s.Depth2 #41/11 HalfReuse: )/1 ]] }
            refalrts::reinit_svar( context[11], context[41] );
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[10], context[1] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::link_brackets( context[36], context[37] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[30], context[31], context[26], context[27] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/26 )/9 (/10 # TkVariable/16 s.Mode#2/21 e.Index#2/28 )/11 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        // closed e.ScopeVars#2 as range 26
        // closed e.Index#2 as range 28
        //DEBUG: s.Depth#1: 5
        //DEBUG: s.Mode#2: 21
        //DEBUG: e.ScopeVars#2: 26
        //DEBUG: e.Index#2: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } s.Mode#2/21/30 e.Index#2/28/31 Tile{ AsIs: s.Depth#1/5 HalfReuse: )/8 AsIs: e.ScopeVars#2/26 AsIs: )/9 AsIs: (/10 AsIs: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/28 HalfReuse: s.Depth1 #5/11 HalfReuse: )/1 ]] }
        refalrts::copy_stvar(vm, context[30], context[21]);
        refalrts::copy_evar(vm, context[31], context[32], context[28], context[29]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_close_bracket(context[8]);
        refalrts::reinit_svar( context[11], context[5] );
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[10], context[1] );
        refalrts::link_brackets( context[0], context[9] );
        refalrts::link_brackets( context[4], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[5];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/22 )/9 (/10 # TkNewVariable/16 s.Mode#2/21 e.Index#2/24 )/11 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 22
      // closed e.Index#2 as range 24
      //DEBUG: s.Depth#1: 5
      //DEBUG: s.Mode#2: 21
      //DEBUG: e.ScopeVars#2: 22
      //DEBUG: e.Index#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } s.Mode#2/21/26 e.Index#2/24/27 Tile{ AsIs: s.Depth#1/5 HalfReuse: )/8 AsIs: e.ScopeVars#2/22 AsIs: )/9 AsIs: (/10 Reuse: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/24 HalfReuse: s.Depth1 #5/11 HalfReuse: )/1 ]] }
      refalrts::copy_stvar(vm, context[26], context[21]);
      refalrts::copy_evar(vm, context[27], context[28], context[24], context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::update_ident(context[16], identifiers[ident_TkVariable]);
      refalrts::reinit_svar( context[11], context[5] );
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[10], context[1] );
      refalrts::link_brackets( context[0], context[9] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # Brackets/16 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 17
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </21 & Fetch@1/22 Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 AsIs: e.InBrackets#2/19 HalfReuse: >/11 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Fetch_Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # ADT-Brackets/16 (/23 e.Name#2/21 )/24 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[16] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.ScopeVars#2 as range 17
      // closed e.Name#2 as range 21
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.Name#2: 21
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Fetch@2/24 } Tile{ AsIs: (/23 } Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 } Tile{ AsIs: e.InBrackets#2/19 } >/26 Tile{ AsIs: )/11 } Tile{ AsIs: e.Name#2/21 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_name(context[24], functions[efunc_gen_Fetch_Z2]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[23], context[11] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[16] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # CallBrackets/16 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 17
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </21 & Fetch@3/22 Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 AsIs: e.InBrackets#2/19 HalfReuse: >/11 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Fetch_Z3]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # Closure/16 e.Sentences#2/19 )/11 >/1
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    context[20] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[16] ) )
      continue;
    // closed e.ScopeVars#2 as range 17
    // closed e.Sentences#2 as range 19
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#2: 17
    //DEBUG: e.Sentences#2: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@4/4 } Tile{ AsIs: (/10 HalfReuse: </16 } & EnumerateVars-Body/21 </22 & Add/23 1/24 Tile{ AsIs: s.Depth#1/5 } >/25 Tile{ AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 } Tile{ AsIs: e.Sentences#2/19 } >/26 Tile{ AsIs: )/11 } e.ScopeVars#2/17/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[21], functions[efunc_EnumerateVarsm_Body]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[24], 1UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[17], context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[10], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 (/8 e.ScopeVars#2/6 )/9 t.OtherTerm#2/10 >/1
  // closed e.ScopeVars#2 as range 6
  //DEBUG: t.OtherTerm#2: 10
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#2: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1/4 s.Depth#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.ScopeVars#2/6 AsIs: )/9 AsIs: t.OtherTerm#2/10 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1("EnumerateVars-Expr\\1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1);


static refalrts::FnResult func_EnumerateVarsm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & EnumerateVars-Expr/4 s.Depth#1/5 (/8 e.OriginScopeVars#1/6 )/9 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.OriginScopeVars#1 as range 6
  // closed e.Expr#1 as range 2
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.OriginScopeVars#1: 6
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.OriginScopeVars#1/6 AsIs: )/9 } (/10 )/11 Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EnumerateVarsm_Expr("EnumerateVars-Expr", COOKIE1_, COOKIE2_, func_EnumerateVarsm_Expr);


static refalrts::FnResult func_Passm_NameNestedFuncs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pass-NameNestedFuncs/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@12/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_NameNestedFuncs("Pass-NameNestedFuncs", COOKIE1_, COOKIE2_, func_Passm_NameNestedFuncs);


static refalrts::FnResult func_genu_eu_u_(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & gen_e__/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & gen_e__/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_genu_eu_u_("gen_e__", COOKIE1_, COOKIE2_, func_genu_eu_u_);


static refalrts::FnResult func_gen_NameNestedBody_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & NameNestedBody$2\1/4 (/7 e.MainName#1/5 )/8 s.SentenceNumber#2/25 (/11 (/15 e.Pattern#2/13 )/16 e.Assigns#2/9 (/23 e.Result#2/21 )/24 (/19 e.Blocks#2/17 )/20 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[9], context[10] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.MainName#1 as range 5
  // closed e.Pattern#2 as range 13
  // closed e.Assigns#2 as range 9
  // closed e.Result#2 as range 21
  // closed e.Blocks#2 as range 17
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Pattern#2: 13
  //DEBUG: e.Assigns#2: 9
  //DEBUG: e.Result#2: 21
  //DEBUG: e.Blocks#2: 17
  //DEBUG: s.SentenceNumber#2: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 & Add/27 1/28 s.SentenceNumber#2/25/29 >/30 (/31 (/32 Tile{ AsIs: e.Pattern#2/13 } )/33 </34 & DelAccumulator/35 </36 & DoMapAccum/37 Tile{ HalfReuse: [*]/0 Reuse: & NameNestedAssigns\1/4 AsIs: (/7 AsIs: e.MainName#1/5 HalfReuse: '$'/8 AsIs: s.SentenceNumber#2/25 HalfReuse: )/11 HalfReuse: {*}/15 } 1/38 (/39 Tile{ AsIs: )/16 AsIs: e.Assigns#2/9 HalfReuse: >/23 } >/40 (/41 </42 & DelAccumulator/43 </44 & DoMapAccum/45 (/46 & NameNestedResultRec-Term/47 e.MainName#1/5/48 '$'/50 s.SentenceNumber#2/25/51 )/52 1/53 (/54 )/55 Tile{ AsIs: e.Result#2/21 } >/56 >/57 )/58 (/59 </60 & NameNestedBlocks=1/61 </62 & DoMapAccum/63 [*]/64 & NameNestedBlocks=1\1/65 (/66 e.MainName#1/5/67 '$'/69 s.SentenceNumber#2/25/70 )/71 {*}/72 1/73 Tile{ HalfReuse: (/24 HalfReuse: )/19 AsIs: e.Blocks#2/17 HalfReuse: >/20 HalfReuse: >/12 HalfReuse: )/1 } )/74 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[28], 1UL);
  refalrts::copy_stvar(vm, context[29], context[25]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_DoMapAccum]);
  refalrts::alloc_number(vm, context[38], 1UL);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_DoMapAccum]);
  refalrts::alloc_open_bracket(vm, context[46]);
  refalrts::alloc_name(vm, context[47], functions[efunc_NameNestedResultRecm_Term]);
  refalrts::copy_evar(vm, context[48], context[49], context[5], context[6]);
  refalrts::alloc_char(vm, context[50], '$');
  refalrts::copy_stvar(vm, context[51], context[25]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_number(vm, context[53], 1UL);
  refalrts::alloc_open_bracket(vm, context[54]);
  refalrts::alloc_close_bracket(vm, context[55]);
  refalrts::alloc_close_call(vm, context[56]);
  refalrts::alloc_close_call(vm, context[57]);
  refalrts::alloc_close_bracket(vm, context[58]);
  refalrts::alloc_open_bracket(vm, context[59]);
  refalrts::alloc_open_call(vm, context[60]);
  refalrts::alloc_name(vm, context[61], functions[efunc_gen_NameNestedBlocks_A1]);
  refalrts::alloc_open_call(vm, context[62]);
  refalrts::alloc_name(vm, context[63], functions[efunc_DoMapAccum]);
  refalrts::alloc_closure_head(vm, context[64]);
  refalrts::alloc_name(vm, context[65], functions[efunc_gen_NameNestedBlocks_A1L1]);
  refalrts::alloc_open_bracket(vm, context[66]);
  refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
  refalrts::alloc_char(vm, context[69], '$');
  refalrts::copy_stvar(vm, context[70], context[25]);
  refalrts::alloc_close_bracket(vm, context[71]);
  refalrts::alloc_unwrapped_closure(vm, context[72], context[64]);
  refalrts::alloc_number(vm, context[73], 1UL);
  refalrts::alloc_close_bracket(vm, context[74]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_NameNestedAssigns_L1]);
  refalrts::reinit_char(context[8], '$');
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_unwrapped_closure(context[15], context[0]);
  refalrts::reinit_close_call(context[23]);
  refalrts::reinit_open_bracket(context[24]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::reinit_close_call(context[20]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[31], context[74] );
  refalrts::link_brackets( context[59], context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[62] );
  refalrts::link_brackets( context[24], context[19] );
  refalrts::link_brackets( context[66], context[71] );
  refalrts::link_brackets( context[41], context[58] );
  refalrts::push_stack( vm, context[57] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[56] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[54], context[55] );
  refalrts::link_brackets( context[46], context[52] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[39], context[16] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[74] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_evar( res, context[56], context[73] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[40], context[55] );
  res = refalrts::splice_evar( res, context[16], context[23] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[26], context[32] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  refalrts::wrap_closure( context[72] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedBody_S2L1("NameNestedBody$2\\1", COOKIE1_, COOKIE2_, func_gen_NameNestedBody_S2L1);


static refalrts::FnResult func_NameNestedBody(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & NameNestedBody/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NameNestedBody/4 (/7 e.new#1/5 )/8 s.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & NameNestedBody/4 (/7 e.new#5/10 )/8 # Sentences/9 e.new#4/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[9] ) )
      continue;
    // closed e.new#5 as range 10
    // closed e.new#4 as range 12
    do {
      // </0 & NameNestedBody/4 (/7 e.MainName#1/14 )/8 # Sentences/9 (/20 (/24 e.Pattern#1/22 )/25 e.Assigns#1/18 (/32 e.Result#1/30 )/33 (/28 e.Blocks#1/26 )/29 )/21 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[18], context[19] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_right( context[26], context[27], context[18], context[19] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[18], context[19] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.MainName#1 as range 14
      // closed e.Pattern#1 as range 22
      // closed e.Assigns#1 as range 18
      // closed e.Result#1 as range 30
      // closed e.Blocks#1 as range 26
      //DEBUG: e.MainName#1: 14
      //DEBUG: e.Pattern#1: 22
      //DEBUG: e.Assigns#1: 18
      //DEBUG: e.Result#1: 30
      //DEBUG: e.Blocks#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Sentences/34 Tile{ AsIs: (/32 } (/35 Tile{ AsIs: e.Pattern#1/22 } Tile{ AsIs: )/25 } </36 & DelAccumulator/37 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: (/7 AsIs: e.MainName#1/14 AsIs: )/8 HalfReuse: 1/9 AsIs: (/20 HalfReuse: )/24 } Tile{ AsIs: e.Assigns#1/18 } >/38 >/39 (/40 </41 & DelAccumulator/42 </43 & DoMapAccum@7/44 (/45 e.MainName#1/14/46 )/48 1/49 (/50 )/51 Tile{ AsIs: e.Result#1/30 } >/52 >/53 )/54 (/55 </56 & NameNestedBlocks=1/57 </58 & DoMapAccum@8/59 (/60 e.MainName#1/14/61 )/63 1/64 Tile{ HalfReuse: (/33 HalfReuse: )/28 AsIs: e.Blocks#1/26 HalfReuse: >/29 HalfReuse: >/21 HalfReuse: )/1 } )/65 Tile{ ]] }
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Sentences]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DelAccumulator]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_DelAccumulator]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[14], context[15]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_NameNestedBlocks_A1]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::copy_evar(vm, context[61], context[62], context[14], context[15]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::alloc_number(vm, context[64], 1UL);
      refalrts::alloc_close_bracket(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
      refalrts::reinit_number(context[9], 1UL);
      refalrts::reinit_close_bracket(context[24]);
      refalrts::reinit_open_bracket(context[33]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::reinit_close_call(context[29]);
      refalrts::reinit_close_call(context[21]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[32], context[65] );
      refalrts::link_brackets( context[55], context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[33], context[28] );
      refalrts::link_brackets( context[60], context[63] );
      refalrts::link_brackets( context[40], context[54] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::link_brackets( context[45], context[48] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[24] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[35], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[65] );
      res = refalrts::splice_evar( res, context[33], context[1] );
      res = refalrts::splice_evar( res, context[52], context[64] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[38], context[51] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[24] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameNestedBody/4 (/7 e.MainName#1/14 )/8 # Sentences/9 e.Sentences#1/16 >/1
    context[14] = context[10];
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    // closed e.MainName#1 as range 14
    // closed e.Sentences#1 as range 16
    //DEBUG: e.MainName#1: 14
    //DEBUG: e.Sentences#1: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Sentences/18 </19 & DelAccumulator/20 Tile{ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.MainName#1/14 AsIs: )/8 HalfReuse: 1/9 } (/21 )/22 Tile{ AsIs: e.Sentences#1/16 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Sentences]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::reinit_number(context[9], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NameNestedBody/4 (/7 e.MainName#1/10 )/8 # NativeBody/9 t.SrcPos#1/14 e.Code#1/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[9] ) )
      continue;
    // closed e.MainName#1 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.Code#1 as range 12
    //DEBUG: e.MainName#1: 10
    //DEBUG: t.SrcPos#1: 14
    //DEBUG: e.Code#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NameNestedBody/4 (/7 e.MainName#1/10 )/8 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/9 AsIs: t.SrcPos#1/14 } Tile{ AsIs: e.Code#1/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameNestedBody/4 (/7 e.MainName#1/5 )/8 # Metatable/9 e.Metatable#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.MainName#1 as range 5
  // closed e.Metatable#1 as range 2
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Metatable#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & NameNestedBody/4 (/7 e.MainName#1/5 )/8 # Metatable/9 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Metatable/0 } Tile{ AsIs: e.Metatable#1/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedBody("NameNestedBody", COOKIE1_, COOKIE2_, func_NameNestedBody);


static refalrts::FnResult func_gen_NameNestedBlocks_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & NameNestedBlocks=1/4 s.BlockNumber#2/5 e.Blocks#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Blocks#2 as range 2
  //DEBUG: s.BlockNumber#2: 5
  //DEBUG: e.Blocks#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NameNestedBlocks=1/4 s.BlockNumber#2/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Blocks#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedBlocks_A1("NameNestedBlocks=1", COOKIE1_, COOKIE2_, func_gen_NameNestedBlocks_A1);


static refalrts::FnResult func_gen_NameNestedBlocks_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 98 elems
  refalrts::Iter context[98];
  refalrts::zeros( context, 98 );
  // </0 & NameNestedBlocks=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NameNestedBlocks=1\1/4 (/7 e.new#1/5 )/8 s.new#2/13 (/11 e.new#3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#3 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NameNestedBlocks=1\1/4 (/7 e.new#5/14 )/8 s.new#4/13 (/11 s.new#6/18 e.new#7/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    // closed e.new#5 as range 14
    if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
      continue;
    // closed e.new#7 as range 16
    do {
      // </0 & NameNestedBlocks=1\1/4 (/7 e.new#9/19 )/8 s.new#8/13 (/11 # Sentences/18 e.new#10/21 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[18] ) )
        continue;
      // closed e.new#9 as range 19
      // closed e.new#10 as range 21
      do {
        // </0 & NameNestedBlocks=1\1/4 (/7 e.MainName#1/23 )/8 s.BlockNumber#2/13 (/11 # Sentences/18 (/29 (/33 e.3#0/31 )/34 e.6#0/27 (/41 e.7#0/39 )/42 (/37 e.5#0/35 )/38 )/30 )/12 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[27], context[28] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_right( context[35], context[36], context[27], context[28] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_right( context[39], context[40], context[27], context[28] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.MainName#1 as range 23
        // closed e.3#0 as range 31
        // closed e.6#0 as range 27
        // closed e.7#0 as range 39
        // closed e.5#0 as range 35
        //DEBUG: s.BlockNumber#2: 13
        //DEBUG: e.MainName#1: 23
        //DEBUG: e.3#0: 31
        //DEBUG: e.6#0: 27
        //DEBUG: e.7#0: 39
        //DEBUG: e.5#0: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </43 & Add/44 1/45 s.BlockNumber#2/13/46 Tile{ HalfReuse: >/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.MainName#1/23 HalfReuse: ':'/8 AsIs: s.BlockNumber#2/13 HalfReuse: )/11 AsIs: # Sentences/18 AsIs: (/29 AsIs: (/33 AsIs: e.3#0/31 AsIs: )/34 } </47 & DelAccumulator/48 </49 & DoMapAccum/50 [*]/51 & NameNestedAssigns\1/52 Tile{ AsIs: (/41 } e.MainName#1/23/53 ':'/55 s.BlockNumber#2/13/56 )/57 {*}/58 1/59 (/60 )/61 Tile{ AsIs: e.6#0/27 } >/62 >/63 (/64 </65 & DelAccumulator/66 </67 & DoMapAccum/68 (/69 & NameNestedResultRec-Term/70 e.MainName#1/23/71 ':'/73 s.BlockNumber#2/13/74 )/75 1/76 (/77 )/78 Tile{ AsIs: e.7#0/39 } >/79 >/80 )/81 (/82 </83 & NameNestedBlocks=1/84 </85 & DoMapAccum/86 [*]/87 & NameNestedBlocks=1\1/88 (/89 e.MainName#1/23/90 ':'/92 s.BlockNumber#2/13/93 )/94 {*}/95 1/96 Tile{ HalfReuse: (/42 HalfReuse: )/37 AsIs: e.5#0/35 HalfReuse: >/38 HalfReuse: >/30 AsIs: )/12 HalfReuse: )/1 } )/97 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[45], 1UL);
        refalrts::copy_stvar(vm, context[46], context[13]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_DelAccumulator]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoMapAccum]);
        refalrts::alloc_closure_head(vm, context[51]);
        refalrts::alloc_name(vm, context[52], functions[efunc_gen_NameNestedAssigns_L1]);
        refalrts::copy_evar(vm, context[53], context[54], context[23], context[24]);
        refalrts::alloc_char(vm, context[55], ':');
        refalrts::copy_stvar(vm, context[56], context[13]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_unwrapped_closure(vm, context[58], context[51]);
        refalrts::alloc_number(vm, context[59], 1UL);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_close_bracket(vm, context[61]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_DelAccumulator]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_DoMapAccum]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::alloc_name(vm, context[70], functions[efunc_NameNestedResultRecm_Term]);
        refalrts::copy_evar(vm, context[71], context[72], context[23], context[24]);
        refalrts::alloc_char(vm, context[73], ':');
        refalrts::copy_stvar(vm, context[74], context[13]);
        refalrts::alloc_close_bracket(vm, context[75]);
        refalrts::alloc_number(vm, context[76], 1UL);
        refalrts::alloc_open_bracket(vm, context[77]);
        refalrts::alloc_close_bracket(vm, context[78]);
        refalrts::alloc_close_call(vm, context[79]);
        refalrts::alloc_close_call(vm, context[80]);
        refalrts::alloc_close_bracket(vm, context[81]);
        refalrts::alloc_open_bracket(vm, context[82]);
        refalrts::alloc_open_call(vm, context[83]);
        refalrts::alloc_name(vm, context[84], functions[efunc_gen_NameNestedBlocks_A1]);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_DoMapAccum]);
        refalrts::alloc_closure_head(vm, context[87]);
        refalrts::alloc_name(vm, context[88], functions[efunc_gen_NameNestedBlocks_A1L1]);
        refalrts::alloc_open_bracket(vm, context[89]);
        refalrts::copy_evar(vm, context[90], context[91], context[23], context[24]);
        refalrts::alloc_char(vm, context[92], ':');
        refalrts::copy_stvar(vm, context[93], context[13]);
        refalrts::alloc_close_bracket(vm, context[94]);
        refalrts::alloc_unwrapped_closure(vm, context[95], context[87]);
        refalrts::alloc_number(vm, context[96], 1UL);
        refalrts::alloc_close_bracket(vm, context[97]);
        refalrts::reinit_close_call(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_char(context[8], ':');
        refalrts::reinit_close_bracket(context[11]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::reinit_close_call(context[38]);
        refalrts::reinit_close_call(context[30]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[4], context[97] );
        refalrts::link_brackets( context[29], context[1] );
        refalrts::link_brackets( context[82], context[12] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[83] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[85] );
        refalrts::link_brackets( context[42], context[37] );
        refalrts::link_brackets( context[89], context[94] );
        refalrts::link_brackets( context[64], context[81] );
        refalrts::push_stack( vm, context[80] );
        refalrts::push_stack( vm, context[65] );
        refalrts::push_stack( vm, context[79] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[77], context[78] );
        refalrts::link_brackets( context[69], context[75] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[60], context[61] );
        refalrts::link_brackets( context[41], context[57] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[7], context[11] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[43] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[97] );
        res = refalrts::splice_evar( res, context[42], context[1] );
        res = refalrts::splice_evar( res, context[79], context[96] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[62], context[78] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[55], context[61] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[47], context[52] );
        res = refalrts::splice_evar( res, context[0], context[34] );
        res = refalrts::splice_evar( res, context[43], context[46] );
        refalrts::use( res );
        refalrts::wrap_closure( context[58] );
        refalrts::wrap_closure( context[95] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NameNestedBlocks=1\1/4 (/7 e.MainName#1/23 )/8 s.BlockNumber#2/13 (/11 # Sentences/18 e.#0/25 )/12 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.MainName#1 as range 23
      // closed e.#0 as range 25
      //DEBUG: s.BlockNumber#2: 13
      //DEBUG: e.MainName#1: 23
      //DEBUG: e.#0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </27 & Add/28 1/29 s.BlockNumber#2/13/30 Tile{ HalfReuse: >/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.MainName#1/23 HalfReuse: ':'/8 AsIs: s.BlockNumber#2/13 HalfReuse: )/11 AsIs: # Sentences/18 } </31 & DelAccumulator/32 </33 & DoMapAccum/34 [*]/35 & NameNestedBody$2\1/36 (/37 e.MainName#1/23/38 ':'/40 s.BlockNumber#2/13/41 )/42 {*}/43 1/44 (/45 )/46 Tile{ AsIs: e.#0/25 } >/47 Tile{ HalfReuse: >/12 HalfReuse: )/1 ]] }
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[29], 1UL);
      refalrts::copy_stvar(vm, context[30], context[13]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_DelAccumulator]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_DoMapAccum]);
      refalrts::alloc_closure_head(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_NameNestedBody_S2L1]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[23], context[24]);
      refalrts::alloc_char(vm, context[40], ':');
      refalrts::copy_stvar(vm, context[41], context[13]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_unwrapped_closure(vm, context[43], context[35]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::reinit_close_call(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[8], ':');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[31], context[46] );
      res = refalrts::splice_evar( res, context[0], context[18] );
      res = refalrts::splice_evar( res, context[27], context[30] );
      refalrts::use( res );
      refalrts::wrap_closure( context[43] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NameNestedBlocks=1\1/4 (/7 e.MainName#1/19 )/8 s.BlockNumber#2/13 (/11 # NativeBody/18 t.0#0/23 e.0#0/21 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[18] ) )
        continue;
      // closed e.MainName#1 as range 19
      context[24] = refalrts::tvar_left( context[23], context[21], context[22] );
      if( ! context[24] )
        continue;
      // closed e.0#0 as range 21
      //DEBUG: s.BlockNumber#2: 13
      //DEBUG: e.MainName#1: 19
      //DEBUG: t.0#0: 23
      //DEBUG: e.0#0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </25 & Add/26 1/27 Tile{ HalfReuse: s.BlockNumber2 #13/1 } Tile{ HalfReuse: >/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.MainName#1/19 HalfReuse: ':'/8 AsIs: s.BlockNumber#2/13 HalfReuse: )/11 AsIs: # NativeBody/18 AsIs: t.0#0/23 AsIs: e.0#0/21 AsIs: )/12 } Tile{ ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[27], 1UL);
      refalrts::reinit_svar( context[1], context[13] );
      refalrts::reinit_close_call(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[8], ':');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::link_brackets( context[4], context[12] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameNestedBlocks=1\1/4 (/7 e.MainName#1/19 )/8 s.BlockNumber#2/13 (/11 # Metatable/18 e.#0/21 )/12 >/1
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[16];
    context[22] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[18] ) )
      continue;
    // closed e.MainName#1 as range 19
    // closed e.#0 as range 21
    //DEBUG: s.BlockNumber#2: 13
    //DEBUG: e.MainName#1: 19
    //DEBUG: e.#0: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </23 & Add/24 1/25 Tile{ HalfReuse: s.BlockNumber2 #13/1 } Tile{ HalfReuse: >/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.MainName#1/19 HalfReuse: ':'/8 AsIs: s.BlockNumber#2/13 HalfReuse: )/11 AsIs: # Metatable/18 AsIs: e.#0/21 AsIs: )/12 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[25], 1UL);
    refalrts::reinit_svar( context[1], context[13] );
    refalrts::reinit_close_call(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[8], ':');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::link_brackets( context[4], context[12] );
    refalrts::link_brackets( context[7], context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameNestedBlocks=1\1/4 (/7 e.MainName#1/5 )/8 s.BlockNumber#2/13 (/11 e.Body#2/9 )/12 >/1
  // closed e.MainName#1 as range 5
  // closed e.Body#2 as range 9
  //DEBUG: s.BlockNumber#2: 13
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Body#2: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Add/15 1/16 s.BlockNumber#2/13/17 >/18 (/19 (/20 e.MainName#1/5/21 ':'/23 s.BlockNumber#2/13/24 )/25 Tile{ AsIs: </0 Reuse: & NameNestedBody*4/4 AsIs: (/7 AsIs: e.MainName#1/5 HalfReuse: ':'/8 AsIs: s.BlockNumber#2/13 HalfReuse: )/11 AsIs: e.Body#2/9 HalfReuse: >/12 HalfReuse: )/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[16], 1UL);
  refalrts::copy_stvar(vm, context[17], context[13]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[5], context[6]);
  refalrts::alloc_char(vm, context[23], ':');
  refalrts::copy_stvar(vm, context[24], context[13]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_NameNestedBody_D4]);
  refalrts::reinit_char(context[8], ':');
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[19], context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[14], context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedBlocks_A1L1("NameNestedBlocks=1\\1", COOKIE1_, COOKIE2_, func_gen_NameNestedBlocks_A1L1);


static refalrts::FnResult func_NameNestedBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & NameNestedBlocks/4 (/7 e.MainName#1/5 )/8 e.Blocks#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.MainName#1 as range 5
  // closed e.Blocks#1 as range 2
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Blocks#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & NameNestedBlocks=1/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: (/7 AsIs: e.MainName#1/5 AsIs: )/8 } 1/11 (/12 )/13 Tile{ AsIs: e.Blocks#1/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_NameNestedBlocks_A1]);
  refalrts::alloc_number(vm, context[11], 1UL);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedBlocks("NameNestedBlocks", COOKIE1_, COOKIE2_, func_NameNestedBlocks);


static refalrts::FnResult func_gen_NameNestedAssigns_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & NameNestedAssigns\1=1/4 s.AssignId#2/5 s.ChainType#2/6 (/9 e.Result#2/7 )/10 (/13 e.Blocks#2/11 )/14 (/17 e.Pattern#2/15 )/18 (/21 e.MainName#1/19 )/22 s.Marker#3/23 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Result#2 as range 7
  // closed e.Blocks#2 as range 11
  // closed e.Pattern#2 as range 15
  // closed e.MainName#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.AssignId#2: 5
  //DEBUG: s.ChainType#2: 6
  //DEBUG: e.Result#2: 7
  //DEBUG: e.Blocks#2: 11
  //DEBUG: e.Pattern#2: 15
  //DEBUG: e.MainName#1: 19
  //DEBUG: s.Marker#3: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/24 Tile{ AsIs: s.AssignId#2/5 } >/25 (/26 Tile{ AsIs: s.ChainType#2/6 AsIs: (/9 } e.MainName#1/19/27 s.Marker#3/23/29 s.AssignId#2/5/30 Tile{ AsIs: )/10 AsIs: (/13 } </31 & DelAccumulator/32 </33 & DoMapAccum/34 (/35 & NameNestedResultRec-Term/36 Tile{ AsIs: e.MainName#1/19 } Tile{ AsIs: s.Marker#3/23 HalfReuse: s.AssignId2 #5/1 } Tile{ AsIs: )/22 } 1/37 (/38 )/39 Tile{ AsIs: e.Result#2/7 } >/40 >/41 )/42 (/43 </44 & NameNestedBlocks=1/45 </46 & DoMapAccum/47 [*]/48 & NameNestedBlocks=1\1/49 (/50 e.MainName#1/19/51 s.Marker#3/23/53 s.AssignId#2/5/54 )/55 {*}/56 1/57 (/58 )/59 Tile{ AsIs: e.Blocks#2/11 } >/60 >/61 Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Pattern#2/15 AsIs: )/18 HalfReuse: )/21 } Tile{ ]] }
  refalrts::alloc_number(vm, context[24], 1UL);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::copy_evar(vm, context[27], context[28], context[19], context[20]);
  refalrts::copy_stvar(vm, context[29], context[23]);
  refalrts::copy_stvar(vm, context[30], context[5]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_DoMapAccum]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_NameNestedResultRecm_Term]);
  refalrts::alloc_number(vm, context[37], 1UL);
  refalrts::alloc_open_bracket(vm, context[38]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::alloc_close_bracket(vm, context[42]);
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_gen_NameNestedBlocks_A1]);
  refalrts::alloc_open_call(vm, context[46]);
  refalrts::alloc_name(vm, context[47], functions[efunc_DoMapAccum]);
  refalrts::alloc_closure_head(vm, context[48]);
  refalrts::alloc_name(vm, context[49], functions[efunc_gen_NameNestedBlocks_A1L1]);
  refalrts::alloc_open_bracket(vm, context[50]);
  refalrts::copy_evar(vm, context[51], context[52], context[19], context[20]);
  refalrts::copy_stvar(vm, context[53], context[23]);
  refalrts::copy_stvar(vm, context[54], context[5]);
  refalrts::alloc_close_bracket(vm, context[55]);
  refalrts::alloc_unwrapped_closure(vm, context[56], context[48]);
  refalrts::alloc_number(vm, context[57], 1UL);
  refalrts::alloc_open_bracket(vm, context[58]);
  refalrts::alloc_close_bracket(vm, context[59]);
  refalrts::alloc_close_call(vm, context[60]);
  refalrts::alloc_close_call(vm, context[61]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::reinit_close_bracket(context[21]);
  refalrts::link_brackets( context[26], context[21] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[43], context[14] );
  refalrts::push_stack( vm, context[61] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[46] );
  refalrts::link_brackets( context[58], context[59] );
  refalrts::link_brackets( context[50], context[55] );
  refalrts::link_brackets( context[13], context[42] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[35], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[21] );
  res = refalrts::splice_evar( res, context[60], context[61] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[40], context[59] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[37], context[39] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[1] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[31], context[36] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[24] );
  refalrts::use( res );
  refalrts::wrap_closure( context[56] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedAssigns_L1A1("NameNestedAssigns\\1=1", COOKIE1_, COOKIE2_, func_gen_NameNestedAssigns_L1A1);


static refalrts::FnResult func_gen_NameNestedAssigns_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & NameNestedAssigns\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NameNestedAssigns\1/4 (/7 e.new#1/5 )/8 s.new#2/25 (/11 s.new#3/26 (/23 e.new#4/21 )/24 (/19 e.new#5/17 )/20 (/15 e.new#6/13 )/16 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[9], context[10] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#4 as range 21
  // closed e.new#5 as range 17
  // closed e.new#6 as range 13
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NameNestedAssigns\1/4 (/7 e.MainName#1/27 )/8 s.AssignId#2/25 (/11 # Assign/26 (/23 e.Result#2/29 )/24 (/19 e.Blocks#2/31 )/20 (/15 e.Pattern#2/33 )/16 )/12 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[13];
    context[34] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[26] ) )
      continue;
    // closed e.MainName#1 as range 27
    // closed e.Result#2 as range 29
    // closed e.Blocks#2 as range 31
    // closed e.Pattern#2 as range 33
    //DEBUG: s.AssignId#2: 25
    //DEBUG: e.MainName#1: 27
    //DEBUG: e.Result#2: 29
    //DEBUG: e.Blocks#2: 31
    //DEBUG: e.Pattern#2: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </35 & Add/36 1/37 s.AssignId#2/25/38 Tile{ AsIs: >/1 } (/39 # Assign/40 (/41 e.MainName#1/27/42 '='/44 s.AssignId#2/25/45 Tile{ AsIs: )/24 AsIs: (/19 } </46 & DelAccumulator/47 Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#1/27 HalfReuse: '='/8 AsIs: s.AssignId#2/25 HalfReuse: )/11 HalfReuse: 1/26 AsIs: (/23 } )/48 Tile{ AsIs: e.Result#2/29 } >/49 >/50 )/51 (/52 </53 & NameNestedBlocks=1/54 </55 & DoMapAccum@8/56 (/57 e.MainName#1/27/58 '='/60 s.AssignId#2/25/61 )/62 1/63 (/64 )/65 Tile{ AsIs: e.Blocks#2/31 } >/66 >/67 Tile{ AsIs: )/20 AsIs: (/15 AsIs: e.Pattern#2/33 AsIs: )/16 AsIs: )/12 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[37], 1UL);
    refalrts::copy_stvar(vm, context[38], context[25]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_Assign]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[27], context[28]);
    refalrts::alloc_char(vm, context[44], '=');
    refalrts::copy_stvar(vm, context[45], context[25]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_DelAccumulator]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_gen_NameNestedBlocks_A1]);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[27], context[28]);
    refalrts::alloc_char(vm, context[60], '=');
    refalrts::copy_stvar(vm, context[61], context[25]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_number(vm, context[63], 1UL);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::reinit_char(context[8], '=');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_number(context[26], 1UL);
    refalrts::link_brackets( context[39], context[12] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[52], context[20] );
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[55] );
    refalrts::link_brackets( context[64], context[65] );
    refalrts::link_brackets( context[57], context[62] );
    refalrts::link_brackets( context[19], context[51] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[48] );
    refalrts::link_brackets( context[7], context[11] );
    refalrts::link_brackets( context[41], context[24] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[12] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[49], context[65] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[0], context[23] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[24], context[19] );
    res = refalrts::splice_evar( res, context[39], context[45] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[35], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NameNestedAssigns\1/4 (/7 e.MainName#1/27 )/8 s.AssignId#2/25 (/11 # Condition/26 (/23 e.Result#2/29 )/24 (/19 e.Blocks#2/31 )/20 (/15 e.Pattern#2/33 )/16 )/12 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[13];
    context[34] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_Condition], context[26] ) )
      continue;
    // closed e.MainName#1 as range 27
    // closed e.Result#2 as range 29
    // closed e.Blocks#2 as range 31
    // closed e.Pattern#2 as range 33
    //DEBUG: s.AssignId#2: 25
    //DEBUG: e.MainName#1: 27
    //DEBUG: e.Result#2: 29
    //DEBUG: e.Blocks#2: 31
    //DEBUG: e.Pattern#2: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </35 & Add/36 1/37 s.AssignId#2/25/38 Tile{ AsIs: >/1 } (/39 # Condition/40 (/41 e.MainName#1/27/42 '?'/44 s.AssignId#2/25/45 Tile{ AsIs: )/24 AsIs: (/19 } </46 & DelAccumulator/47 Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#1/27 HalfReuse: '?'/8 AsIs: s.AssignId#2/25 HalfReuse: )/11 HalfReuse: 1/26 AsIs: (/23 } )/48 Tile{ AsIs: e.Result#2/29 } >/49 >/50 )/51 (/52 </53 & NameNestedBlocks=1/54 </55 & DoMapAccum@8/56 (/57 e.MainName#1/27/58 '?'/60 s.AssignId#2/25/61 )/62 1/63 (/64 )/65 Tile{ AsIs: e.Blocks#2/31 } >/66 >/67 Tile{ AsIs: )/20 AsIs: (/15 AsIs: e.Pattern#2/33 AsIs: )/16 AsIs: )/12 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[37], 1UL);
    refalrts::copy_stvar(vm, context[38], context[25]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_Condition]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[27], context[28]);
    refalrts::alloc_char(vm, context[44], '?');
    refalrts::copy_stvar(vm, context[45], context[25]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_DelAccumulator]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_gen_NameNestedBlocks_A1]);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[27], context[28]);
    refalrts::alloc_char(vm, context[60], '?');
    refalrts::copy_stvar(vm, context[61], context[25]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_number(vm, context[63], 1UL);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::reinit_char(context[8], '?');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_number(context[26], 1UL);
    refalrts::link_brackets( context[39], context[12] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[52], context[20] );
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[55] );
    refalrts::link_brackets( context[64], context[65] );
    refalrts::link_brackets( context[57], context[62] );
    refalrts::link_brackets( context[19], context[51] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[48] );
    refalrts::link_brackets( context[7], context[11] );
    refalrts::link_brackets( context[41], context[24] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[12] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[49], context[65] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[0], context[23] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[24], context[19] );
    res = refalrts::splice_evar( res, context[39], context[45] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[35], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameNestedAssigns\1/4 (/7 e.MainName#1/5 )/8 s.AssignId#2/25 (/11 s.ChainType#2/26 (/23 e.Result#2/21 )/24 (/19 e.Blocks#2/17 )/20 (/15 e.Pattern#2/13 )/16 )/12 >/1
  // closed e.MainName#1 as range 5
  // closed e.Result#2 as range 21
  // closed e.Blocks#2 as range 17
  // closed e.Pattern#2 as range 13
  //DEBUG: s.AssignId#2: 25
  //DEBUG: s.ChainType#2: 26
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Result#2: 21
  //DEBUG: e.Blocks#2: 17
  //DEBUG: e.Pattern#2: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.AssignId#2/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameNestedAssigns\1=1/4 } Tile{ HalfReuse: s.AssignId2 #25/11 AsIs: s.ChainType#2/26 AsIs: (/23 AsIs: e.Result#2/21 AsIs: )/24 AsIs: (/19 AsIs: e.Blocks#2/17 AsIs: )/20 AsIs: (/15 AsIs: e.Pattern#2/13 AsIs: )/16 HalfReuse: (/12 } Tile{ AsIs: e.MainName#1/5 } Tile{ AsIs: )/8 } Tile{ HalfReuse: </7 } & ChainTypeMarker*2/27 s.ChainType#2/26/28 >/29 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_ChainTypeMarker_D2]);
  refalrts::copy_stvar(vm, context[28], context[26]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_NameNestedAssigns_L1A1]);
  refalrts::reinit_svar( context[11], context[25] );
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[29] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedAssigns_L1("NameNestedAssigns\\1", COOKIE1_, COOKIE2_, func_gen_NameNestedAssigns_L1);


static refalrts::FnResult func_NameNestedAssigns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & NameNestedAssigns/4 (/7 e.MainName#1/5 )/8 e.Assigns#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.MainName#1 as range 5
  // closed e.Assigns#1 as range 2
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Assigns#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DelAccumulator/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: (/7 AsIs: e.MainName#1/5 AsIs: )/8 } 1/11 (/12 )/13 Tile{ AsIs: e.Assigns#1/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_DelAccumulator]);
  refalrts::alloc_number(vm, context[11], 1UL);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedAssigns("NameNestedAssigns", COOKIE1_, COOKIE2_, func_NameNestedAssigns);


static refalrts::FnResult func_ChainTypeMarker(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & ChainTypeMarker/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ChainTypeMarker/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ChainTypeMarker/4 # Assign/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ChainTypeMarker/4 # Assign/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '='/1 ]] }
    refalrts::reinit_char(context[1], '=');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ChainTypeMarker/4 # Condition/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Condition], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ChainTypeMarker/4 # Condition/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '?'/1 ]] }
  refalrts::reinit_char(context[1], '?');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ChainTypeMarker("ChainTypeMarker", COOKIE1_, COOKIE2_, func_ChainTypeMarker);


static refalrts::FnResult func_NameNestedResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & NameNestedResult/4 (/7 e.MainName#1/5 )/8 e.Result#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.MainName#1 as range 5
  // closed e.Result#1 as range 2
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Result#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DelAccumulator/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#1/5 AsIs: )/8 } 1/11 (/12 )/13 Tile{ AsIs: e.Result#1/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_DelAccumulator]);
  refalrts::alloc_number(vm, context[11], 1UL);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedResult("NameNestedResult", COOKIE1_, COOKIE2_, func_NameNestedResult);


static refalrts::FnResult func_NameNestedResultRec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & NameNestedResultRec/4 s.StartNumber#1/5 (/8 e.MainName#1/6 )/9 e.Result#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.MainName#1 as range 6
  // closed e.Result#1 as range 2
  //DEBUG: s.StartNumber#1: 5
  //DEBUG: e.MainName#1: 6
  //DEBUG: e.Result#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 } (/10 Tile{ AsIs: e.MainName#1/6 } )/11 Tile{ AsIs: s.StartNumber#1/5 AsIs: (/8 } Tile{ AsIs: )/9 AsIs: e.Result#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[5], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedResultRec("NameNestedResultRec", COOKIE1_, COOKIE2_, func_NameNestedResultRec);


static refalrts::FnResult func_gen_NameNestedResultRecm_Term_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & NameNestedResultRec-Term$1=1/4 s.NextNumber#2/5 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.InBrackets#2 as range 2
  //DEBUG: s.NextNumber#2: 5
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.NextNumber#2/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.NextNumber2 #5/0 HalfReuse: (/4 } # Brackets/6 Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_Brackets]);
  refalrts::reinit_svar( context[0], context[5] );
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedResultRecm_Term_S1A1("NameNestedResultRec-Term$1=1", COOKIE1_, COOKIE2_, func_gen_NameNestedResultRecm_Term_S1A1);


static refalrts::FnResult func_gen_NameNestedResultRecm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & NameNestedResultRec-Term$2=1/4 (/7 e.Name#1/5 )/8 s.NextNumber#2/9 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.InBrackets#2 as range 2
  //DEBUG: e.Name#1: 5
  //DEBUG: s.NextNumber#2: 9
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.NextNumber#2/9 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name#1/5 AsIs: )/8 } Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedResultRecm_Term_S2A1("NameNestedResultRec-Term$2=1", COOKIE1_, COOKIE2_, func_gen_NameNestedResultRecm_Term_S2A1);


static refalrts::FnResult func_gen_NameNestedResultRecm_Term_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & NameNestedResultRec-Term$3=1/4 s.NextNumber#2/5 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.InBrackets#2 as range 2
  //DEBUG: s.NextNumber#2: 5
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.NextNumber#2/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.NextNumber2 #5/0 HalfReuse: (/4 } # CallBrackets/6 Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_CallBrackets]);
  refalrts::reinit_svar( context[0], context[5] );
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameNestedResultRecm_Term_S3A1("NameNestedResultRec-Term$3=1", COOKIE1_, COOKIE2_, func_gen_NameNestedResultRecm_Term_S3A1);


static refalrts::FnResult func_NameNestedResultRecm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 103 elems
  refalrts::Iter context[103];
  refalrts::zeros( context, 103 );
  // </0 & NameNestedResultRec-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NameNestedResultRec-Term/4 e.new#1/2 s.new#2/7 t.new#3/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & NameNestedResultRec-Term/4 e.new#7/8 s.new#6/7 (/5 s.new#4/12 e.new#5/10 )/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[10] = 0;
    context[11] = 0;
    if( ! refalrts::brackets_term( context[10], context[11], context[5] ) )
      continue;
    // closed e.new#7 as range 8
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    // closed e.new#5 as range 10
    do {
      // </0 & NameNestedResultRec-Term/4 e.MainName#1/13 s.NextNumber#1/7 (/5 # Brackets/12 e.InBrackets#1/15 )/6 >/1
      context[13] = context[8];
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[12] ) )
        continue;
      // closed e.MainName#1 as range 13
      // closed e.InBrackets#1 as range 15
      //DEBUG: s.NextNumber#1: 7
      //DEBUG: e.MainName#1: 13
      //DEBUG: e.InBrackets#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameNestedResultRec-Term$1=1/4 } </17 & DoMapAccum@7/18 (/19 Tile{ AsIs: e.MainName#1/13 } )/20 Tile{ AsIs: s.NextNumber#1/7 AsIs: (/5 HalfReuse: )/12 AsIs: e.InBrackets#1/15 HalfReuse: >/6 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_gen_NameNestedResultRecm_Term_S1A1]);
      refalrts::reinit_close_bracket(context[12]);
      refalrts::reinit_close_call(context[6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[5], context[12] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NameNestedResultRec-Term/4 e.MainName#1/13 s.NextNumber#1/7 (/5 # ADT-Brackets/12 (/19 e.Name#1/17 )/20 e.InBrackets#1/15 )/6 >/1
      context[13] = context[8];
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[12] ) )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.MainName#1 as range 13
      // closed e.Name#1 as range 17
      // closed e.InBrackets#1 as range 15
      //DEBUG: s.NextNumber#1: 7
      //DEBUG: e.MainName#1: 13
      //DEBUG: e.Name#1: 17
      //DEBUG: e.InBrackets#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameNestedResultRec-Term$2=1/4 } (/21 Tile{ AsIs: e.Name#1/17 } )/22 </23 Tile{ HalfReuse: & DoMapAccum@7/12 AsIs: (/19 } Tile{ AsIs: e.MainName#1/13 } )/24 Tile{ AsIs: s.NextNumber#1/7 AsIs: (/5 } Tile{ AsIs: )/20 AsIs: e.InBrackets#1/15 HalfReuse: >/6 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_NameNestedResultRecm_Term_S2A1]);
      refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::reinit_close_call(context[6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[5], context[20] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[7], context[5] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NameNestedResultRec-Term/4 e.MainName#1/13 s.NextNumber#1/7 (/5 # CallBrackets/12 e.InBrackets#1/15 )/6 >/1
      context[13] = context[8];
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[12] ) )
        continue;
      // closed e.MainName#1 as range 13
      // closed e.InBrackets#1 as range 15
      //DEBUG: s.NextNumber#1: 7
      //DEBUG: e.MainName#1: 13
      //DEBUG: e.InBrackets#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameNestedResultRec-Term$3=1/4 } </17 & DoMapAccum@7/18 (/19 Tile{ AsIs: e.MainName#1/13 } )/20 Tile{ AsIs: s.NextNumber#1/7 AsIs: (/5 HalfReuse: )/12 AsIs: e.InBrackets#1/15 HalfReuse: >/6 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_gen_NameNestedResultRecm_Term_S3A1]);
      refalrts::reinit_close_bracket(context[12]);
      refalrts::reinit_close_call(context[6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[5], context[12] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameNestedResultRec-Term/4 e.new#10/13 s.new#9/7 (/5 # Closure/12 e.new#8/15 )/6 >/1
    context[13] = context[8];
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[12] ) )
      continue;
    // closed e.new#10 as range 13
    // closed e.new#8 as range 15
    do {
      // </0 & NameNestedResultRec-Term/4 e.new#14/17 s.new#13/7 (/5 # Closure/12 s.new#11/21 e.new#12/19 )/6 >/1
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      // closed e.new#14 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new#12 as range 19
      do {
        // </0 & NameNestedResultRec-Term/4 e.new#17/22 s.new#16/7 (/5 # Closure/12 # Sentences/21 e.new#15/24 )/6 >/1
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Sentences], context[21] ) )
          continue;
        // closed e.new#17 as range 22
        // closed e.new#15 as range 24
        do {
          // </0 & NameNestedResultRec-Term/4 e.MainName#1/26 s.NextNumber#1/7 (/5 # Closure/12 # Sentences/21 (/32 (/36 e.3#0/34 )/37 e.6#0/30 (/44 e.7#0/42 )/45 (/40 e.5#0/38 )/41 )/33 )/6 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = 0;
          context[31] = 0;
          context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
          if( ! context[32] )
            continue;
          refalrts::bracket_pointers(context[32], context[33]);
          context[34] = 0;
          context[35] = 0;
          context[36] = refalrts::brackets_left( context[34], context[35], context[30], context[31] );
          if( ! context[36] )
            continue;
          refalrts::bracket_pointers(context[36], context[37]);
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::brackets_right( context[38], context[39], context[30], context[31] );
          if( ! context[40] )
            continue;
          refalrts::bracket_pointers(context[40], context[41]);
          context[42] = 0;
          context[43] = 0;
          context[44] = refalrts::brackets_right( context[42], context[43], context[30], context[31] );
          if( ! context[44] )
            continue;
          refalrts::bracket_pointers(context[44], context[45]);
          if( ! refalrts::empty_seq( context[28], context[29] ) )
            continue;
          // closed e.MainName#1 as range 26
          // closed e.3#0 as range 34
          // closed e.6#0 as range 30
          // closed e.7#0 as range 42
          // closed e.5#0 as range 38
          //DEBUG: s.NextNumber#1: 7
          //DEBUG: e.MainName#1: 26
          //DEBUG: e.3#0: 34
          //DEBUG: e.6#0: 30
          //DEBUG: e.7#0: 42
          //DEBUG: e.5#0: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/46 Tile{ AsIs: s.NextNumber#1/7 } >/47 (/48 # Closure/49 Tile{ AsIs: (/44 } Tile{ AsIs: e.MainName#1/26 } '\\'/50 Tile{ HalfReuse: s.NextNumber1 #7/5 HalfReuse: )/12 AsIs: # Sentences/21 AsIs: (/32 AsIs: (/36 AsIs: e.3#0/34 AsIs: )/37 } </51 & DelAccumulator/52 </53 & DoMapAccum/54 [*]/55 & NameNestedAssigns\1/56 (/57 e.MainName#1/26/58 '\\'/60 s.NextNumber#1/7/61 )/62 {*}/63 1/64 (/65 )/66 Tile{ AsIs: e.6#0/30 } >/67 >/68 (/69 </70 & DelAccumulator/71 </72 & DoMapAccum/73 (/74 & NameNestedResultRec-Term/75 e.MainName#1/26/76 '\\'/78 s.NextNumber#1/7/79 )/80 1/81 (/82 )/83 Tile{ AsIs: e.7#0/42 } >/84 >/85 )/86 (/87 </88 & NameNestedBlocks=1/89 </90 & DoMapAccum/91 [*]/92 & NameNestedBlocks=1\1/93 (/94 e.MainName#1/26/95 '\\'/97 s.NextNumber#1/7/98 )/99 {*}/100 1/101 Tile{ HalfReuse: (/45 HalfReuse: )/40 AsIs: e.5#0/38 HalfReuse: >/41 HalfReuse: >/33 AsIs: )/6 HalfReuse: )/1 } )/102 Tile{ ]] }
          refalrts::alloc_number(vm, context[46], 1UL);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_ident(vm, context[49], identifiers[ident_Closure]);
          refalrts::alloc_char(vm, context[50], '\\');
          refalrts::alloc_open_call(vm, context[51]);
          refalrts::alloc_name(vm, context[52], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_DoMapAccum]);
          refalrts::alloc_closure_head(vm, context[55]);
          refalrts::alloc_name(vm, context[56], functions[efunc_gen_NameNestedAssigns_L1]);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::copy_evar(vm, context[58], context[59], context[26], context[27]);
          refalrts::alloc_char(vm, context[60], '\\');
          refalrts::copy_stvar(vm, context[61], context[7]);
          refalrts::alloc_close_bracket(vm, context[62]);
          refalrts::alloc_unwrapped_closure(vm, context[63], context[55]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::alloc_close_call(vm, context[68]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::alloc_open_call(vm, context[70]);
          refalrts::alloc_name(vm, context[71], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[72]);
          refalrts::alloc_name(vm, context[73], functions[efunc_DoMapAccum]);
          refalrts::alloc_open_bracket(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_NameNestedResultRecm_Term]);
          refalrts::copy_evar(vm, context[76], context[77], context[26], context[27]);
          refalrts::alloc_char(vm, context[78], '\\');
          refalrts::copy_stvar(vm, context[79], context[7]);
          refalrts::alloc_close_bracket(vm, context[80]);
          refalrts::alloc_number(vm, context[81], 1UL);
          refalrts::alloc_open_bracket(vm, context[82]);
          refalrts::alloc_close_bracket(vm, context[83]);
          refalrts::alloc_close_call(vm, context[84]);
          refalrts::alloc_close_call(vm, context[85]);
          refalrts::alloc_close_bracket(vm, context[86]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::alloc_open_call(vm, context[88]);
          refalrts::alloc_name(vm, context[89], functions[efunc_gen_NameNestedBlocks_A1]);
          refalrts::alloc_open_call(vm, context[90]);
          refalrts::alloc_name(vm, context[91], functions[efunc_DoMapAccum]);
          refalrts::alloc_closure_head(vm, context[92]);
          refalrts::alloc_name(vm, context[93], functions[efunc_gen_NameNestedBlocks_A1L1]);
          refalrts::alloc_open_bracket(vm, context[94]);
          refalrts::copy_evar(vm, context[95], context[96], context[26], context[27]);
          refalrts::alloc_char(vm, context[97], '\\');
          refalrts::copy_stvar(vm, context[98], context[7]);
          refalrts::alloc_close_bracket(vm, context[99]);
          refalrts::alloc_unwrapped_closure(vm, context[100], context[92]);
          refalrts::alloc_number(vm, context[101], 1UL);
          refalrts::alloc_close_bracket(vm, context[102]);
          refalrts::update_name(context[4], functions[efunc_Add]);
          refalrts::reinit_svar( context[5], context[7] );
          refalrts::reinit_close_bracket(context[12]);
          refalrts::reinit_open_bracket(context[45]);
          refalrts::reinit_close_bracket(context[40]);
          refalrts::reinit_close_call(context[41]);
          refalrts::reinit_close_call(context[33]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[48], context[102] );
          refalrts::link_brackets( context[32], context[1] );
          refalrts::link_brackets( context[87], context[6] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[88] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[90] );
          refalrts::link_brackets( context[45], context[40] );
          refalrts::link_brackets( context[94], context[99] );
          refalrts::link_brackets( context[69], context[86] );
          refalrts::push_stack( vm, context[85] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[84] );
          refalrts::push_stack( vm, context[72] );
          refalrts::link_brackets( context[82], context[83] );
          refalrts::link_brackets( context[74], context[80] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[51] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[65], context[66] );
          refalrts::link_brackets( context[57], context[62] );
          refalrts::link_brackets( context[36], context[37] );
          refalrts::link_brackets( context[44], context[12] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[102] );
          res = refalrts::splice_evar( res, context[45], context[1] );
          res = refalrts::splice_evar( res, context[84], context[101] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[67], context[83] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[51], context[66] );
          res = refalrts::splice_evar( res, context[5], context[37] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_evar( res, context[47], context[49] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_elem( res, context[46] );
          refalrts::use( res );
          refalrts::wrap_closure( context[63] );
          refalrts::wrap_closure( context[100] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NameNestedResultRec-Term/4 e.MainName#1/26 s.NextNumber#1/7 (/5 # Closure/12 # Sentences/21 e.#0/28 )/6 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        // closed e.MainName#1 as range 26
        // closed e.#0 as range 28
        //DEBUG: s.NextNumber#1: 7
        //DEBUG: e.MainName#1: 26
        //DEBUG: e.#0: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/30 s.NextNumber#1/7/31 >/32 (/33 # Closure/34 (/35 Tile{ AsIs: e.MainName#1/26 } '\\'/36 Tile{ AsIs: s.NextNumber#1/7 } )/37 # Sentences/38 </39 & DelAccumulator/40 </41 & DoMapAccum/42 [*]/43 & NameNestedBody$2\1/44 (/45 e.MainName#1/26/46 '\\'/48 s.NextNumber#1/7/49 )/50 {*}/51 Tile{ HalfReuse: 1/5 HalfReuse: (/12 HalfReuse: )/21 AsIs: e.#0/28 HalfReuse: >/6 AsIs: >/1 } )/52 Tile{ ]] }
        refalrts::alloc_number(vm, context[30], 1UL);
        refalrts::copy_stvar(vm, context[31], context[7]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_Closure]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_char(vm, context[36], '\\');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_ident(vm, context[38], identifiers[ident_Sentences]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_DelAccumulator]);
        refalrts::alloc_open_call(vm, context[41]);
        refalrts::alloc_name(vm, context[42], functions[efunc_DoMapAccum]);
        refalrts::alloc_closure_head(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_NameNestedBody_S2L1]);
        refalrts::alloc_open_bracket(vm, context[45]);
        refalrts::copy_evar(vm, context[46], context[47], context[26], context[27]);
        refalrts::alloc_char(vm, context[48], '\\');
        refalrts::copy_stvar(vm, context[49], context[7]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_unwrapped_closure(vm, context[51], context[43]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_number(context[5], 1UL);
        refalrts::reinit_open_bracket(context[12]);
        refalrts::reinit_close_bracket(context[21]);
        refalrts::reinit_close_call(context[6]);
        refalrts::link_brackets( context[33], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[41] );
        refalrts::link_brackets( context[12], context[21] );
        refalrts::link_brackets( context[45], context[50] );
        refalrts::link_brackets( context[35], context[37] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_evar( res, context[5], context[1] );
        res = refalrts::splice_evar( res, context[37], context[51] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[30], context[35] );
        refalrts::use( res );
        refalrts::wrap_closure( context[51] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NameNestedResultRec-Term/4 e.MainName#1/22 s.NextNumber#1/7 (/5 # Closure/12 # NativeBody/21 t.0#0/26 e.0#0/24 )/6 >/1
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[21] ) )
          continue;
        // closed e.MainName#1 as range 22
        context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
        if( ! context[27] )
          continue;
        // closed e.0#0 as range 24
        //DEBUG: s.NextNumber#1: 7
        //DEBUG: e.MainName#1: 22
        //DEBUG: t.0#0: 26
        //DEBUG: e.0#0: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/28 Tile{ AsIs: s.NextNumber#1/7 } Tile{ AsIs: >/1 } (/29 # Closure/30 (/31 Tile{ AsIs: e.MainName#1/22 } '\\'/32 Tile{ HalfReuse: s.NextNumber1 #7/5 HalfReuse: )/12 AsIs: # NativeBody/21 AsIs: t.0#0/26 AsIs: e.0#0/24 AsIs: )/6 } Tile{ ]] }
        refalrts::alloc_number(vm, context[28], 1UL);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_ident(vm, context[30], identifiers[ident_Closure]);
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_char(vm, context[32], '\\');
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_svar( context[5], context[7] );
        refalrts::reinit_close_bracket(context[12]);
        refalrts::link_brackets( context[29], context[6] );
        refalrts::link_brackets( context[31], context[12] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[29], context[31] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NameNestedResultRec-Term/4 e.MainName#1/22 s.NextNumber#1/7 (/5 # Closure/12 # Metatable/21 e.#0/24 )/6 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Metatable], context[21] ) )
        continue;
      // closed e.MainName#1 as range 22
      // closed e.#0 as range 24
      //DEBUG: s.NextNumber#1: 7
      //DEBUG: e.MainName#1: 22
      //DEBUG: e.#0: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/26 Tile{ AsIs: s.NextNumber#1/7 } Tile{ AsIs: >/1 } (/27 # Closure/28 (/29 Tile{ AsIs: e.MainName#1/22 } '\\'/30 Tile{ HalfReuse: s.NextNumber1 #7/5 HalfReuse: )/12 AsIs: # Metatable/21 AsIs: e.#0/24 AsIs: )/6 } Tile{ ]] }
      refalrts::alloc_number(vm, context[26], 1UL);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Closure]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_char(vm, context[30], '\\');
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_svar( context[5], context[7] );
      refalrts::reinit_close_bracket(context[12]);
      refalrts::link_brackets( context[27], context[6] );
      refalrts::link_brackets( context[29], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameNestedResultRec-Term/4 e.MainName#1/17 s.NextNumber#1/7 (/5 # Closure/12 e.Sentences#1/19 )/6 >/1
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    context[20] = context[16];
    // closed e.MainName#1 as range 17
    // closed e.Sentences#1 as range 19
    //DEBUG: s.NextNumber#1: 7
    //DEBUG: e.MainName#1: 17
    //DEBUG: e.Sentences#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/21 s.NextNumber#1/7/22 >/23 (/24 # Closure/25 (/26 Tile{ AsIs: e.MainName#1/17 } '\\'/27 Tile{ AsIs: s.NextNumber#1/7 } )/28 </29 & NameNestedBody*4/30 (/31 e.MainName#1/17/32 '\\'/34 Tile{ HalfReuse: s.NextNumber1 #7/5 HalfReuse: )/12 AsIs: e.Sentences#1/19 HalfReuse: >/6 HalfReuse: )/1 ]] }
    refalrts::alloc_number(vm, context[21], 1UL);
    refalrts::copy_stvar(vm, context[22], context[7]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Closure]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_char(vm, context[27], '\\');
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_NameNestedBody_D4]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::copy_evar(vm, context[32], context[33], context[17], context[18]);
    refalrts::alloc_char(vm, context[34], '\\');
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_svar( context[5], context[7] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_close_call(context[6]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[24], context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[31], context[12] );
    refalrts::link_brackets( context[26], context[28] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[28], context[34] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[21], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameNestedResultRec-Term/4 e.MainName#1/2 s.NextNumber#1/7 t.OtherTerm#1/5 >/1
  // closed e.MainName#1 as range 2
  //DEBUG: t.OtherTerm#1: 5
  //DEBUG: s.NextNumber#1: 7
  //DEBUG: e.MainName#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NameNestedResultRec-Term/4 e.MainName#1/2 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.NextNumber#1/7 AsIs: t.OtherTerm#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameNestedResultRecm_Term("NameNestedResultRec-Term", COOKIE1_, COOKIE2_, func_NameNestedResultRecm_Term);


static refalrts::FnResult func_Passm_RemoveBlocksAndAssigns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pass-RemoveBlocksAndAssigns/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_RemoveBlocksAndAssigns("Pass-RemoveBlocksAndAssigns", COOKIE1_, COOKIE2_, func_Passm_RemoveBlocksAndAssigns);


static refalrts::FnResult func_RemoveAssignsm_Sentences(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & RemoveAssigns-Sentences/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & RemoveAssigns-Sentences/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & RemoveAssigns-Sentences/4 # Sentences/5 e.Sentences#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[5] ) )
      continue;
    // closed e.Sentences#1 as range 6
    //DEBUG: e.Sentences#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Sentences/0 HalfReuse: </4 HalfReuse: & Map@13/5 AsIs: e.Sentences#1/6 AsIs: >/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & RemoveAssigns-Sentences/4 # NativeBody/5 t.SrcPos#1/8 e.Code#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[5] ) )
      continue;
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.Code#1 as range 6
    //DEBUG: t.SrcPos#1: 8
    //DEBUG: e.Code#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & RemoveAssigns-Sentences/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/5 AsIs: t.SrcPos#1/8 } Tile{ AsIs: e.Code#1/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[5], context[9] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemoveAssigns-Sentences/4 # Metatable/5 e.Metatable#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Metatable#1 as range 2
  //DEBUG: e.Metatable#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & RemoveAssigns-Sentences/4 # Metatable/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Metatable/0 } Tile{ AsIs: e.Metatable#1/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveAssignsm_Sentences("RemoveAssigns-Sentences", COOKIE1_, COOKIE2_, func_RemoveAssignsm_Sentences);


static refalrts::FnResult func_gen_RemoveAssignsm_Sentence_S2A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & RemoveAssigns-Sentence$2=3/4 (/7 e.Pattern#1/5 )/8 (/11 e.Conditions#2/9 )/12 e.Result#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Pattern#1 as range 5
  // closed e.Conditions#2 as range 9
  // closed e.Result#4 as range 2
  //DEBUG: e.Pattern#1: 5
  //DEBUG: e.Conditions#2: 9
  //DEBUG: e.Result#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern#1/5 AsIs: )/8 } Tile{ AsIs: e.Conditions#2/9 } Tile{ HalfReuse: (/12 AsIs: e.Result#4/2 HalfReuse: )/1 } Tile{ HalfReuse: )/11 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::link_brackets( context[4], context[11] );
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RemoveAssignsm_Sentence_S2A3("RemoveAssigns-Sentence$2=3", COOKIE1_, COOKIE2_, func_gen_RemoveAssignsm_Sentence_S2A3);


static refalrts::FnResult func_gen_RemoveAssignsm_Sentence_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & RemoveAssigns-Sentence$2=2/4 (/7 e.Pattern#1/5 )/8 (/11 e.Conditions#2/9 )/12 (/15 e.Result#3/13 )/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern#1 as range 5
  // closed e.Conditions#2 as range 9
  // closed e.Result#3 as range 13
  //DEBUG: e.Pattern#1: 5
  //DEBUG: e.Conditions#2: 9
  //DEBUG: e.Result#3: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemoveAssigns-Sentence$2=3/4 AsIs: (/7 AsIs: e.Pattern#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Conditions#2/9 AsIs: )/12 HalfReuse: </15 } & Map@15/17 Tile{ AsIs: e.Result#3/13 } Tile{ HalfReuse: >/16 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z15]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Sentence_S2A3]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RemoveAssignsm_Sentence_S2A2("RemoveAssigns-Sentence$2=2", COOKIE1_, COOKIE2_, func_gen_RemoveAssignsm_Sentence_S2A2);


static refalrts::FnResult func_gen_RemoveAssignsm_Sentence_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & RemoveAssigns-Sentence$2=1/4 (/7 e.Pattern#1/5 )/8 (/11 e.Result#1/9 )/12 (/15 e.Blocks#1/13 )/16 e.Conditions#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Pattern#1 as range 5
  // closed e.Result#1 as range 9
  // closed e.Blocks#1 as range 13
  // closed e.Conditions#2 as range 2
  //DEBUG: e.Pattern#1: 5
  //DEBUG: e.Result#1: 9
  //DEBUG: e.Blocks#1: 13
  //DEBUG: e.Conditions#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemoveAssigns-Sentence$2=2/4 AsIs: (/7 AsIs: e.Pattern#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Conditions#2/2 } Tile{ AsIs: )/12 } </17 & Reduce@1/18 (/19 Tile{ AsIs: e.Result#1/9 } Tile{ HalfReuse: )/15 AsIs: e.Blocks#1/13 HalfReuse: >/16 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Reduce_Z1]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Sentence_S2A2]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[19], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RemoveAssignsm_Sentence_S2A1("RemoveAssigns-Sentence$2=1", COOKIE1_, COOKIE2_, func_gen_RemoveAssignsm_Sentence_S2A1);


static refalrts::FnResult func_RemoveAssignsm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & RemoveAssigns-Sentence/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & RemoveAssigns-Sentence/4 (/7 (/11 e.new#1/9 )/12 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 9
  // closed e.new#2 as range 5
  do {
    // </0 & RemoveAssigns-Sentence/4 (/7 (/11 e.Pattern#1/13 )/12 e.Conditions#1/17 (/23 # Assign/25 (/28 e.AssignName#1/26 )/29 (/32 e.AssignResult#1/30 )/33 (/36 e.Blocks#1/34 )/37 (/40 e.AssignPattern#1/38 )/41 )/24 e.SentenceTail#1/19 )/8 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[5];
    context[16] = context[6];
    // closed e.Pattern#1 as range 13
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[15];
      context[20] = context[16];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = refalrts::ident_left( identifiers[ident_Assign], context[21], context[22] );
      if( ! context[25] )
        continue;
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[21], context[22] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[21], context[22] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[21], context[22] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[21], context[22] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.AssignName#1 as range 26
      // closed e.AssignResult#1 as range 30
      // closed e.Blocks#1 as range 34
      // closed e.AssignPattern#1 as range 38
      // closed e.SentenceTail#1 as range 19
      //DEBUG: e.Pattern#1: 13
      //DEBUG: e.Conditions#1: 17
      //DEBUG: e.AssignName#1: 26
      //DEBUG: e.AssignResult#1: 30
      //DEBUG: e.Blocks#1: 34
      //DEBUG: e.AssignPattern#1: 38
      //DEBUG: e.SentenceTail#1: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & RemoveAssigns-Sentence/4 AsIs: (/7 AsIs: (/11 AsIs: e.Pattern#1/13 AsIs: )/12 AsIs: e.Conditions#1/17 AsIs: (/23 } Tile{ AsIs: e.AssignResult#1/30 } Tile{ AsIs: )/33 AsIs: (/36 AsIs: e.Blocks#1/34 HalfReuse: (/37 AsIs: (/40 } Tile{ AsIs: e.AssignName#1/26 } Tile{ AsIs: )/41 } Tile{ Reuse: # Sentences/25 AsIs: (/28 } (/42 Tile{ AsIs: e.AssignPattern#1/38 } Tile{ AsIs: )/24 AsIs: e.SentenceTail#1/19 AsIs: )/8 HalfReuse: )/1 } Tile{ AsIs: )/29 HalfReuse: )/32 } >/43 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::reinit_open_bracket(context[37]);
      refalrts::update_ident(context[25], identifiers[ident_Sentences]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::link_brackets( context[36], context[29] );
      refalrts::link_brackets( context[37], context[1] );
      refalrts::link_brackets( context[28], context[8] );
      refalrts::link_brackets( context[42], context[24] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[23], context[33] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[24], context[1] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[25], context[28] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[33], context[40] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[17], context[18], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemoveAssigns-Sentence/4 (/7 (/11 e.Pattern#1/9 )/12 e.Conditions#1/5 (/19 e.Result#1/17 )/20 (/15 e.Blocks#1/13 )/16 )/8 >/1
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Pattern#1 as range 9
  // closed e.Conditions#1 as range 5
  // closed e.Result#1 as range 17
  // closed e.Blocks#1 as range 13
  //DEBUG: e.Pattern#1: 9
  //DEBUG: e.Conditions#1: 5
  //DEBUG: e.Result#1: 17
  //DEBUG: e.Blocks#1: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & RemoveAssigns-Sentence$2=1/7 AsIs: (/11 AsIs: e.Pattern#1/9 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#1/17 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#1/13 AsIs: )/16 HalfReuse: </8 HalfReuse: & Map@16/1 } Tile{ AsIs: e.Conditions#1/5 } Tile{ HalfReuse: >/0 } >/21 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_RemoveAssignsm_Sentence_S2A1]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[1], functions[efunc_gen_Map_Z16]);
  refalrts::reinit_close_call(context[0]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[19], context[1] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveAssignsm_Sentence("RemoveAssigns-Sentence", COOKIE1_, COOKIE2_, func_RemoveAssignsm_Sentence);


static refalrts::FnResult func_gen_RemoveAssignsm_Conditions_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & RemoveAssigns-Conditions\1=1/4 (/7 e.ConditionName#2/5 )/8 (/11 e.Pattern#2/9 )/12 (/15 e.Result#3/13 )/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ConditionName#2 as range 5
  // closed e.Pattern#2 as range 9
  // closed e.Result#3 as range 13
  //DEBUG: e.ConditionName#2: 5
  //DEBUG: e.Pattern#2: 9
  //DEBUG: e.Result#3: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.ConditionName#2/5 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: </12 HalfReuse: & Map@15/15 AsIs: e.Result#3/13 HalfReuse: >/16 HalfReuse: )/1 } (/17 Tile{ AsIs: e.Pattern#2/9 } )/18 )/19 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RemoveAssignsm_Conditions_L1A1("RemoveAssigns-Conditions\\1=1", COOKIE1_, COOKIE2_, func_gen_RemoveAssignsm_Conditions_L1A1);


static refalrts::FnResult func_RemoveAssignsm_Conditions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & RemoveAssigns-Conditions/4 e.Conditions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Conditions#1 as range 2
  //DEBUG: e.Conditions#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@16/4 AsIs: e.Conditions#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveAssignsm_Conditions("RemoveAssigns-Conditions", COOKIE1_, COOKIE2_, func_RemoveAssignsm_Conditions);


static refalrts::FnResult func_RemoveAssignsm_WindBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & RemoveAssigns-WindBlocks/4 (/7 e.Result#1/5 )/8 e.Blocks#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Result#1 as range 5
  // closed e.Blocks#1 as range 2
  //DEBUG: e.Result#1: 5
  //DEBUG: e.Blocks#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 AsIs: (/7 AsIs: e.Result#1/5 AsIs: )/8 AsIs: e.Blocks#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveAssignsm_WindBlocks("RemoveAssigns-WindBlocks", COOKIE1_, COOKIE2_, func_RemoveAssignsm_WindBlocks);


static refalrts::FnResult func_RemoveAssignsm_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & RemoveAssigns-Result/4 e.Expr#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr#1 as range 2
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 AsIs: e.Expr#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveAssignsm_Result("RemoveAssigns-Result", COOKIE1_, COOKIE2_, func_RemoveAssignsm_Result);


static refalrts::FnResult func_gen_Passm_FlatNestedFuncs_L1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Pass-FlatNestedFuncs\1$1=1/4 s.ScopeClass#2/5 (/8 e.Name#2/6 )/9 (/12 e.NestedFuncs#3/10 )/13 e.Body#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.Name#2 as range 6
  // closed e.NestedFuncs#3 as range 10
  // closed e.Body#3 as range 2
  //DEBUG: s.ScopeClass#2: 5
  //DEBUG: e.Name#2: 6
  //DEBUG: e.NestedFuncs#3: 10
  //DEBUG: e.Body#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.NestedFuncs#3/10 } Tile{ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.ScopeClass#2/5 AsIs: (/8 AsIs: e.Name#2/6 AsIs: )/9 } Tile{ AsIs: e.Body#3/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Function]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_FlatNestedFuncs_L1S1A1("Pass-FlatNestedFuncs\\1$1=1", COOKIE1_, COOKIE2_, func_gen_Passm_FlatNestedFuncs_L1S1A1);


static refalrts::FnResult func_Passm_FlatNestedFuncs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Pass-FlatNestedFuncs/4 s.MarkupContext#1/5 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST#1 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@17/4 AsIs: s.MarkupContext#1/5 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_FlatNestedFuncs("Pass-FlatNestedFuncs", COOKIE1_, COOKIE2_, func_Passm_FlatNestedFuncs);


static refalrts::FnResult func_gen_ExtractNested_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ExtractNested=1/4 (/7 )/8 (/11 e.NestedFuncs#2/9 )/12 e.Sentences#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NestedFuncs#2 as range 9
  // closed e.Sentences#2 as range 2
  //DEBUG: e.NestedFuncs#2: 9
  //DEBUG: e.Sentences#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractNested=1/4 (/7 )/8 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.NestedFuncs#2/9 AsIs: )/12 } Tile{ AsIs: e.Sentences#2/2 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNested_A1("ExtractNested=1", COOKIE1_, COOKIE2_, func_gen_ExtractNested_A1);


static refalrts::FnResult func_ExtractNested(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ExtractNested/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ExtractNested/4 s.new#3/5 s.new#4/8 e.new#5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new#5 as range 6
    do {
      // </0 & ExtractNested/4 s.MarkupContext#1/5 # Sentences/8 e.#0/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[8] ) )
        continue;
      // closed e.#0 as range 9
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.#0: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </11 & ExtractNested=1/12 </13 & ExtractNestedRec$1=1/14 Tile{ AsIs: </0 Reuse: & DoMapAccum@10/4 AsIs: s.MarkupContext#1/5 HalfReuse: (/8 } (/15 )/16 (/17 )/18 )/19 (/20 )/21 Tile{ AsIs: e.#0/9 } >/22 >/23 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[11]);
      refalrts::alloc_name(vm, context[12], functions[efunc_gen_ExtractNested_A1]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_ExtractNestedRec_S1A1]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_close_bracket(vm, context[16]);
      refalrts::alloc_open_bracket(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[8], context[19] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[15], context[21] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[11], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested/4 s.MarkupContext#1/5 # NativeBody/8 t.0#0/11 e.0#0/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[8] ) )
        continue;
      context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.0#0 as range 9
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: t.0#0: 11
      //DEBUG: e.0#0: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: # NativeBody/8 AsIs: t.0#0/11 } Tile{ AsIs: e.0#0/9 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested/4 s.MarkupContext#1/5 # Metatable/8 e.#0/9 >/1
    context[9] = context[6];
    context[10] = context[7];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[8] ) )
      continue;
    // closed e.#0 as range 9
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: # Metatable/8 } Tile{ AsIs: e.#0/9 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested/4 s.MarkupContext#1/5 e.Sentences#1/2 >/1
  // closed e.Sentences#1 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.Sentences#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested=1/4 } </6 & ExtractNestedRec*3/7 Tile{ AsIs: s.MarkupContext#1/5 } (/8 )/9 Tile{ AsIs: e.Sentences#1/2 } >/10 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_ExtractNestedRec_D3]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNested_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNested("ExtractNested", COOKIE1_, COOKIE2_, func_ExtractNested);


static refalrts::FnResult func_gen_ExtractNestedRec_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ExtractNestedRec$1=1/4 (/7 (/11 e.NestedFuncs#2/9 )/12 (/15 e.BorrowedVars#2/13 )/16 )/8 e.Sentences#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NestedFuncs#2 as range 9
  // closed e.BorrowedVars#2 as range 13
  // closed e.Sentences#2 as range 2
  //DEBUG: e.NestedFuncs#2: 9
  //DEBUG: e.BorrowedVars#2: 13
  //DEBUG: e.Sentences#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ExtractNestedRec$1=1/4 {REMOVED TILE} {REMOVED TILE} )/16 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.BorrowedVars#2/13 } Tile{ HalfReuse: )/7 AsIs: (/11 AsIs: e.NestedFuncs#2/9 AsIs: )/12 HalfReuse: # Sentences/15 } Tile{ AsIs: e.Sentences#2/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_ident(context[15], identifiers[ident_Sentences]);
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedRec_S1A1("ExtractNestedRec$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedRec_S1A1);


static refalrts::FnResult func_ExtractNestedRec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & ExtractNestedRec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNestedRec/4 s.new#1/5 (/8 e.new#2/6 )/9 s.new#3/10 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & ExtractNestedRec/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/11 )/9 # Sentences/10 e.Sentences#1/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[10] ) )
      continue;
    // closed e.ScopeVars#1 as range 11
    // closed e.Sentences#1 as range 13
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: e.Sentences#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & ExtractNestedRec$1=1/16 Tile{ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/11 AsIs: )/9 HalfReuse: (/10 } (/17 )/18 (/19 )/20 )/21 (/22 )/23 Tile{ AsIs: e.Sentences#1/13 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_ExtractNestedRec_S1A1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[10], context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[17], context[23] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ExtractNestedRec/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/11 )/9 # NativeBody/10 t.SrcPos#1/15 e.Code#1/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[10] ) )
      continue;
    // closed e.ScopeVars#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Code#1 as range 13
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: t.SrcPos#1: 15
    //DEBUG: e.Code#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} e.ScopeVars#1/11 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: (/8 } Tile{ AsIs: )/9 AsIs: # NativeBody/10 AsIs: t.SrcPos#1/15 } Tile{ AsIs: e.Code#1/13 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNestedRec/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 # Metatable/10 e.Metatable#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars#1 as range 6
  // closed e.Metatable#1 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.Metatable#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} e.ScopeVars#1/6 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: (/8 } Tile{ AsIs: )/9 AsIs: # Metatable/10 } Tile{ AsIs: e.Metatable#1/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedRec("ExtractNestedRec", COOKIE1_, COOKIE2_, func_ExtractNestedRec);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & ExtractNested-Sentence=3/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.ConditionsNestedFuncs#3/9 )/12 (/15 e.Pattern#1/13 )/16 (/19 e.Conditions#3/17 )/20 (/23 e.ResultNestedFuncs#4/21 )/24 (/27 e.BorrowedVars#4/25 )/28 e.Result#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.ConditionsNestedFuncs#3 as range 9
  // closed e.Pattern#1 as range 13
  // closed e.Conditions#3 as range 17
  // closed e.ResultNestedFuncs#4 as range 21
  // closed e.BorrowedVars#4 as range 25
  // closed e.Result#4 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.ConditionsNestedFuncs#3: 9
  //DEBUG: e.Pattern#1: 13
  //DEBUG: e.Conditions#3: 17
  //DEBUG: e.ResultNestedFuncs#4: 21
  //DEBUG: e.BorrowedVars#4: 25
  //DEBUG: e.Result#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/5 } Tile{ AsIs: e.ConditionsNestedFuncs#3/9 } Tile{ AsIs: e.ResultNestedFuncs#4/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.BorrowedVars#4/25 AsIs: )/28 } Tile{ AsIs: )/20 } Tile{ HalfReuse: (/12 AsIs: (/15 AsIs: e.Pattern#1/13 AsIs: )/16 } Tile{ AsIs: e.Conditions#3/17 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Result#4/2 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[23], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[0], context[20] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[4], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[24], context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A3("ExtractNested-Sentence=3", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A3);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & ExtractNested-Sentence=2/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.Pattern#1/9 )/12 s.MarkupContext#1/13 (/16 e.ScopeVars#1/14 )/17 (/20 e.Result#1/18 )/21 (/24 e.ConditionsNestedFuncs#3/22 )/25 (/28 e.BorrowedVars#3/26 )/29 (/32 e.LocalVars#3/30 )/33 e.Conditions#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.Pattern#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.ScopeVars#1 as range 14
  // closed e.Result#1 as range 18
  // closed e.ConditionsNestedFuncs#3 as range 22
  // closed e.BorrowedVars#3 as range 26
  // closed e.LocalVars#3 as range 30
  // closed e.Conditions#3 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.Pattern#1: 9
  //DEBUG: s.MarkupContext#1: 13
  //DEBUG: e.ScopeVars#1: 14
  //DEBUG: e.Result#1: 18
  //DEBUG: e.ConditionsNestedFuncs#3: 22
  //DEBUG: e.BorrowedVars#3: 26
  //DEBUG: e.LocalVars#3: 30
  //DEBUG: e.Conditions#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=3/4 AsIs: (/7 AsIs: e.NestedFuncs#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ConditionsNestedFuncs#3/22 } Tile{ AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Pattern#1/9 } )/34 (/35 Tile{ AsIs: e.Conditions#3/2 } Tile{ AsIs: )/33 } </36 & ExtractNested-Result=1/37 </38 Tile{ HalfReuse: & DoMapAccum@12/12 AsIs: s.MarkupContext#1/13 AsIs: (/16 AsIs: e.ScopeVars#1/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.LocalVars#3/30 } )/39 (/40 (/41 Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.BorrowedVars#3/26 AsIs: )/29 HalfReuse: )/32 } (/42 )/43 Tile{ AsIs: e.Result#1/18 } >/44 >/45 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_gen_ExtractNestedm_Result_A1]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_open_bracket(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A3]);
  refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z12]);
  refalrts::reinit_close_bracket(context[32]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[38] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[40], context[32] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[41], context[25] );
  refalrts::link_brackets( context[20], context[39] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[35], context[33] );
  refalrts::link_brackets( context[24], context[34] );
  refalrts::link_brackets( context[11], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[44], context[45] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[25], context[32] );
  res = refalrts::splice_evar( res, context[39], context[41] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[12], context[20] );
  res = refalrts::splice_evar( res, context[36], context[38] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A2("ExtractNested-Sentence=2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A2);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & ExtractNested-Sentence=1/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.Pattern#1/9 )/12 s.MarkupContext#1/13 (/16 e.ScopeVars#1/14 )/17 (/20 e.Result#1/18 )/21 (/24 e.Conditions#1/22 )/25 (/28 e.BorrowedVars#2/26 )/29 e.LocalVars#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.Pattern#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.ScopeVars#1 as range 14
  // closed e.Result#1 as range 18
  // closed e.Conditions#1 as range 22
  // closed e.BorrowedVars#2 as range 26
  // closed e.LocalVars#2 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.Pattern#1: 9
  //DEBUG: s.MarkupContext#1: 13
  //DEBUG: e.ScopeVars#1: 14
  //DEBUG: e.Result#1: 18
  //DEBUG: e.Conditions#1: 22
  //DEBUG: e.BorrowedVars#2: 26
  //DEBUG: e.LocalVars#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=2/4 AsIs: (/7 AsIs: e.NestedFuncs#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern#1/9 AsIs: )/12 AsIs: s.MarkupContext#1/13 AsIs: (/16 AsIs: e.ScopeVars#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Result#1/18 AsIs: )/21 HalfReuse: </24 } & ExtractNested-Conditions/30 Tile{ HalfReuse: s.MarkupContext1 #13/25 AsIs: (/28 AsIs: e.BorrowedVars#2/26 AsIs: )/29 } (/31 e.ScopeVars#1/14/32 )/34 (/35 Tile{ AsIs: e.LocalVars#2/2 } )/36 Tile{ AsIs: e.Conditions#1/22 } >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[30], functions[efunc_ExtractNestedm_Conditions]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::copy_evar(vm, context[32], context[33], context[14], context[15]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A2]);
  refalrts::reinit_open_call(context[24]);
  refalrts::reinit_svar( context[25], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[34] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[31], context[35] );
  res = refalrts::splice_evar( res, context[25], context[29] );
  res = refalrts::splice_elem( res, context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A1("ExtractNested-Sentence=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A1);


static refalrts::FnResult func_ExtractNestedm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & ExtractNested-Sentence/4 s.MarkupContext#1/29 e.ScopeVars#1/2 (/15 (/19 e.NestedFuncs#1/17 )/20 (/23 e.BorrowedVars#1/21 )/24 )/16 (/7 (/11 e.Pattern#1/9 )/12 e.Conditions#1/5 (/27 e.Result#1/25 )/28 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NestedFuncs#1 as range 17
  // closed e.BorrowedVars#1 as range 21
  // closed e.Pattern#1 as range 9
  // closed e.Conditions#1 as range 5
  // closed e.Result#1 as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars#1 as range 2
  //DEBUG: e.NestedFuncs#1: 17
  //DEBUG: e.BorrowedVars#1: 21
  //DEBUG: e.Pattern#1: 9
  //DEBUG: e.Conditions#1: 5
  //DEBUG: e.Result#1: 25
  //DEBUG: s.MarkupContext#1: 29
  //DEBUG: e.ScopeVars#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext#1/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=1/4 } (/30 Tile{ AsIs: e.NestedFuncs#1/17 } )/31 (/32 Tile{ AsIs: e.Pattern#1/9 } Tile{ AsIs: )/12 } Tile{ HalfReuse: s.MarkupContext1 #29/15 AsIs: (/19 } Tile{ AsIs: e.ScopeVars#1/2 } )/33 Tile{ AsIs: (/27 AsIs: e.Result#1/25 AsIs: )/28 HalfReuse: (/8 } Tile{ AsIs: e.Conditions#1/5 } )/34 </35 & MapAccum@1/36 (/37 e.ScopeVars#1/2/38 Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.BorrowedVars#1/21 AsIs: )/24 HalfReuse: </16 HalfReuse: & Uniq/7 HalfReuse: </11 } & ExtractAllVars/40 e.Pattern#1/9/41 >/43 >/44 >/45 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::copy_evar(vm, context[38], context[39], context[2], context[3]);
  refalrts::alloc_name(vm, context[40], functions[efunc_ExtractAllVars]);
  refalrts::copy_evar(vm, context[41], context[42], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A1]);
  refalrts::reinit_svar( context[15], context[29] );
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_name(context[7], functions[efunc_Uniq]);
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[37], context[20] );
  refalrts::link_brackets( context[8], context[34] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[19], context[33] );
  refalrts::link_brackets( context[32], context[12] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[45] );
  res = refalrts::splice_evar( res, context[20], context[11] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[34], context[37] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[27], context[8] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[30] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedm_Sentence("ExtractNested-Sentence", COOKIE1_, COOKIE2_, func_ExtractNestedm_Sentence);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ExtractNested-Conditions$1=4/4 (/7 e.ResultNestedFuncs#2/5 )/8 (/11 e.ConditionName#1/9 )/12 (/15 e.Result#2/13 )/16 (/19 e.Pattern#1/17 )/20 (/23 e.ConditionsNestedFuncs#5/21 )/24 (/27 e.BorrowedVars#5/25 )/28 (/31 e.LocalVars#5/29 )/32 e.Conditions#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.ResultNestedFuncs#2 as range 5
  // closed e.ConditionName#1 as range 9
  // closed e.Result#2 as range 13
  // closed e.Pattern#1 as range 17
  // closed e.ConditionsNestedFuncs#5 as range 21
  // closed e.BorrowedVars#5 as range 25
  // closed e.LocalVars#5 as range 29
  // closed e.Conditions#5 as range 2
  //DEBUG: e.ResultNestedFuncs#2: 5
  //DEBUG: e.ConditionName#1: 9
  //DEBUG: e.Result#2: 13
  //DEBUG: e.Pattern#1: 17
  //DEBUG: e.ConditionsNestedFuncs#5: 21
  //DEBUG: e.BorrowedVars#5: 25
  //DEBUG: e.LocalVars#5: 29
  //DEBUG: e.Conditions#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ExtractNested-Conditions$1=4/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.ResultNestedFuncs#2/5 } Tile{ AsIs: e.ConditionsNestedFuncs#5/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.BorrowedVars#5/25 AsIs: )/28 AsIs: (/31 AsIs: e.LocalVars#5/29 AsIs: )/32 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.ConditionName#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern#1/17 AsIs: )/20 HalfReuse: )/23 } Tile{ AsIs: e.Conditions#5/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
  refalrts::reinit_close_bracket(context[23]);
  refalrts::link_brackets( context[7], context[23] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[0], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[24], context[32] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A4("ExtractNested-Conditions$1=4", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A4);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & ExtractNested-Conditions$1=3/4 (/7 e.ResultNestedFuncs#2/5 )/8 (/11 e.ConditionName#1/9 )/12 (/15 e.Result#2/13 )/16 (/19 e.Pattern#1/17 )/20 s.MarkupContext#1/21 (/24 e.BorrowedVars#3/22 )/25 (/28 e.ScopeVars#1/26 )/29 (/32 e.Conditions#1/30 )/33 e.LocalVars#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.ResultNestedFuncs#2 as range 5
  // closed e.ConditionName#1 as range 9
  // closed e.Result#2 as range 13
  // closed e.Pattern#1 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.BorrowedVars#3 as range 22
  // closed e.ScopeVars#1 as range 26
  // closed e.Conditions#1 as range 30
  // closed e.LocalVars#4 as range 2
  //DEBUG: e.ResultNestedFuncs#2: 5
  //DEBUG: e.ConditionName#1: 9
  //DEBUG: e.Result#2: 13
  //DEBUG: e.Pattern#1: 17
  //DEBUG: s.MarkupContext#1: 21
  //DEBUG: e.BorrowedVars#3: 22
  //DEBUG: e.ScopeVars#1: 26
  //DEBUG: e.Conditions#1: 30
  //DEBUG: e.LocalVars#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=4/4 AsIs: (/7 AsIs: e.ResultNestedFuncs#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern#1/17 AsIs: )/20 } </34 & ExtractNested-Conditions/35 Tile{ AsIs: s.MarkupContext#1/21 AsIs: (/24 AsIs: e.BorrowedVars#3/22 AsIs: )/25 AsIs: (/28 AsIs: e.ScopeVars#1/26 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.LocalVars#4/2 } Tile{ AsIs: )/33 } Tile{ AsIs: e.Conditions#1/30 } >/36 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_ExtractNestedm_Conditions]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[21], context[32] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A3("ExtractNested-Conditions$1=3", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A3);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & ExtractNested-Conditions$1=2/4 (/7 e.ResultNestedFuncs#2/5 )/8 (/11 e.ConditionName#1/9 )/12 (/15 e.Result#2/13 )/16 (/19 e.Pattern#1/17 )/20 s.MarkupContext#1/21 (/24 e.ScopeVars#1/22 )/25 (/28 e.Conditions#1/26 )/29 (/32 e.LocalVars#1/30 )/33 (/36 e.BorrowedVars#3/34 )/37 e.PatternLocalVars#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.ResultNestedFuncs#2 as range 5
  // closed e.ConditionName#1 as range 9
  // closed e.Result#2 as range 13
  // closed e.Pattern#1 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.ScopeVars#1 as range 22
  // closed e.Conditions#1 as range 26
  // closed e.LocalVars#1 as range 30
  // closed e.BorrowedVars#3 as range 34
  // closed e.PatternLocalVars#3 as range 2
  //DEBUG: e.ResultNestedFuncs#2: 5
  //DEBUG: e.ConditionName#1: 9
  //DEBUG: e.Result#2: 13
  //DEBUG: e.Pattern#1: 17
  //DEBUG: s.MarkupContext#1: 21
  //DEBUG: e.ScopeVars#1: 22
  //DEBUG: e.Conditions#1: 26
  //DEBUG: e.LocalVars#1: 30
  //DEBUG: e.BorrowedVars#3: 34
  //DEBUG: e.PatternLocalVars#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=3/4 AsIs: (/7 AsIs: e.ResultNestedFuncs#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern#1/17 AsIs: )/20 AsIs: s.MarkupContext#1/21 AsIs: (/24 } Tile{ AsIs: e.BorrowedVars#3/34 } Tile{ AsIs: )/33 AsIs: (/36 } Tile{ AsIs: e.ScopeVars#1/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Conditions#1/26 AsIs: )/29 HalfReuse: </32 } Tile{ HalfReuse: & Uniq/37 } Tile{ AsIs: e.LocalVars#1/30 } Tile{ AsIs: e.PatternLocalVars#3/2 } >/38 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A3]);
  refalrts::reinit_open_call(context[32]);
  refalrts::reinit_name(context[37], functions[efunc_Uniq]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[36], context[25] );
  refalrts::link_brackets( context[24], context[33] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_evar( res, context[25], context[32] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[33], context[36] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A2("ExtractNested-Conditions$1=2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A2);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & ExtractNested-Conditions$1=1/4 (/7 e.ConditionName#1/5 )/8 (/11 e.Pattern#1/9 )/12 s.MarkupContext#1/13 (/16 e.ScopeVars#1/14 )/17 (/20 e.Conditions#1/18 )/21 (/24 e.LocalVars#1/22 )/25 (/28 e.ResultNestedFuncs#2/26 )/29 (/32 e.BorrowedVars#2/30 )/33 e.Result#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ConditionName#1 as range 5
  // closed e.Pattern#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.ScopeVars#1 as range 14
  // closed e.Conditions#1 as range 18
  // closed e.LocalVars#1 as range 22
  // closed e.ResultNestedFuncs#2 as range 26
  // closed e.BorrowedVars#2 as range 30
  // closed e.Result#2 as range 2
  //DEBUG: e.ConditionName#1: 5
  //DEBUG: e.Pattern#1: 9
  //DEBUG: s.MarkupContext#1: 13
  //DEBUG: e.ScopeVars#1: 14
  //DEBUG: e.Conditions#1: 18
  //DEBUG: e.LocalVars#1: 22
  //DEBUG: e.ResultNestedFuncs#2: 26
  //DEBUG: e.BorrowedVars#2: 30
  //DEBUG: e.Result#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=2/4 AsIs: (/7 } Tile{ AsIs: e.ResultNestedFuncs#2/26 } )/34 (/35 Tile{ AsIs: e.ConditionName#1/5 } )/36 (/37 Tile{ AsIs: e.Result#2/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern#1/9 AsIs: )/12 AsIs: s.MarkupContext#1/13 AsIs: (/16 AsIs: e.ScopeVars#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Conditions#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.LocalVars#1/22 AsIs: )/25 HalfReuse: </28 } & MapAccum@1/38 (/39 e.ScopeVars#1/14/40 Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.BorrowedVars#2/30 AsIs: )/33 } </42 & Uniq/43 </44 & ExtractAllVars/45 e.Pattern#1/9/46 >/48 >/49 >/50 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_name(vm, context[38], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::copy_evar(vm, context[40], context[41], context[14], context[15]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_Uniq]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_ExtractAllVars]);
  refalrts::copy_evar(vm, context[46], context[47], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::alloc_close_call(vm, context[50]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A2]);
  refalrts::reinit_open_call(context[28]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[50] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[39], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[37], context[8] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[7], context[34] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[42], context[50] );
  res = refalrts::splice_evar( res, context[29], context[33] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[8], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A1("ExtractNested-Conditions$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A1);


static refalrts::FnResult func_ExtractNestedm_Conditions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & ExtractNested-Conditions/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & ExtractNested-Conditions/4 s.MarkupContext#1/5 (/8 e.BorrowedVars#1/18 )/9 (/12 e.ScopeVars#1/20 )/13 (/16 e.LocalVars#1/22 )/17 (/28 # Condition/30 (/33 e.ConditionName#1/31 )/34 (/37 e.Result#1/35 )/38 (/41 e.Pattern#1/39 )/42 )/29 e.Conditions#1/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    context[30] = refalrts::ident_left( identifiers[ident_Condition], context[26], context[27] );
    if( ! context[30] )
      continue;
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[26], context[27] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    context[35] = 0;
    context[36] = 0;
    context[37] = refalrts::brackets_left( context[35], context[36], context[26], context[27] );
    if( ! context[37] )
      continue;
    refalrts::bracket_pointers(context[37], context[38]);
    context[39] = 0;
    context[40] = 0;
    context[41] = refalrts::brackets_left( context[39], context[40], context[26], context[27] );
    if( ! context[41] )
      continue;
    refalrts::bracket_pointers(context[41], context[42]);
    if( ! refalrts::empty_seq( context[26], context[27] ) )
      continue;
    // closed e.BorrowedVars#1 as range 18
    // closed e.ScopeVars#1 as range 20
    // closed e.LocalVars#1 as range 22
    // closed e.ConditionName#1 as range 31
    // closed e.Result#1 as range 35
    // closed e.Pattern#1 as range 39
    // closed e.Conditions#1 as range 24
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.BorrowedVars#1: 18
    //DEBUG: e.ScopeVars#1: 20
    //DEBUG: e.LocalVars#1: 22
    //DEBUG: e.ConditionName#1: 31
    //DEBUG: e.Result#1: 35
    //DEBUG: e.Pattern#1: 39
    //DEBUG: e.Conditions#1: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=1/4 } Tile{ AsIs: (/8 } Tile{ AsIs: e.ConditionName#1/31 } Tile{ AsIs: )/38 AsIs: (/41 AsIs: e.Pattern#1/39 AsIs: )/42 HalfReuse: s.MarkupContext1 #5/29 } (/43 e.ScopeVars#1/20/44 )/46 (/47 Tile{ AsIs: e.Conditions#1/24 } Tile{ AsIs: )/34 AsIs: (/37 } e.LocalVars#1/22/48 )/50 </51 & ExtractNested-Result=1/52 </53 & DoMapAccum@12/54 Tile{ HalfReuse: s.MarkupContext1 #5/9 AsIs: (/12 AsIs: e.ScopeVars#1/20 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#1/22 AsIs: )/17 AsIs: (/28 HalfReuse: (/30 HalfReuse: )/33 } (/55 Tile{ AsIs: e.BorrowedVars#1/18 } )/56 )/57 (/58 )/59 Tile{ AsIs: e.Result#1/35 } >/60 >/61 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[20], context[21]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_evar(vm, context[48], context[49], context[22], context[23]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_ExtractNestedm_Result_A1]);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_close_bracket(vm, context[59]);
    refalrts::alloc_close_call(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A1]);
    refalrts::reinit_svar( context[29], context[5] );
    refalrts::reinit_svar( context[9], context[5] );
    refalrts::reinit_open_bracket(context[30]);
    refalrts::reinit_close_bracket(context[33]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[53] );
    refalrts::link_brackets( context[58], context[59] );
    refalrts::link_brackets( context[28], context[57] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[30], context[33] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[37], context[50] );
    refalrts::link_brackets( context[47], context[34] );
    refalrts::link_brackets( context[43], context[46] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::link_brackets( context[8], context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[56], context[59] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[9], context[33] );
    res = refalrts::splice_evar( res, context[50], context[54] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    res = refalrts::splice_evar( res, context[38], context[29] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions/4 s.MarkupContext#1/5 (/8 e.BorrowedVars#1/6 )/9 (/12 e.ScopeVars#1/10 )/13 (/16 e.LocalVars#1/14 )/17 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.BorrowedVars#1 as range 6
  // closed e.ScopeVars#1 as range 10
  // closed e.LocalVars#1 as range 14
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.BorrowedVars#1: 6
  //DEBUG: e.ScopeVars#1: 10
  //DEBUG: e.LocalVars#1: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ExtractNested-Conditions/4 s.MarkupContext#1/5 (/8 {REMOVED TILE} {REMOVED TILE} e.ScopeVars#1/10 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.BorrowedVars#1/6 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#1/14 AsIs: )/17 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[0], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedm_Conditions("ExtractNested-Conditions", COOKIE1_, COOKIE2_, func_ExtractNestedm_Conditions);


static refalrts::FnResult func_ExtractNestedm_Pattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ExtractNested-Pattern/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.BorrowedVars#1/9 )/12 e.Pattern#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ScopeVars#1 as range 5
  // closed e.BorrowedVars#1 as range 9
  // closed e.Pattern#1 as range 2
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.BorrowedVars#1: 9
  //DEBUG: e.Pattern#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MapAccum@1/4 AsIs: (/7 AsIs: e.ScopeVars#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.BorrowedVars#1/9 AsIs: )/12 } </13 & Uniq/14 </15 & ExtractAllVars/16 Tile{ AsIs: e.Pattern#1/2 } >/17 >/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Uniq]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_ExtractAllVars]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_MapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedm_Pattern("ExtractNested-Pattern", COOKIE1_, COOKIE2_, func_ExtractNestedm_Pattern);


static refalrts::FnResult func_ExtractAllVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ExtractAllVars/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & ExtractAllVars/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & ExtractAllVars/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & ExtractAllVars/4 (/7 # TkVariable/13 s.Mode#1/18 e.Index#1/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
          continue;
        // closed e.Tail#1 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.Index#1 as range 14
        //DEBUG: e.Tail#1: 16
        //DEBUG: s.Mode#1: 18
        //DEBUG: e.Index#1: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/13 AsIs: s.Mode#1/18 AsIs: e.Index#1/14 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & ExtractAllVars/4 } Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[13], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ExtractAllVars/4 (/7 # Brackets/13 e.Inner#1/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.Inner#1 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.Inner#1: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 # Brackets/13 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractAllVars/4 } Tile{ AsIs: e.Inner#1/14 } Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ExtractAllVars/4 (/7 # ADT-Brackets/13 e.Inner#1/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      // closed e.Inner#1 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: e.Inner#1: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # ADT-Brackets/13 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractAllVars/4 } Tile{ AsIs: e.Inner#1/14 } Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractAllVars/4 t.OtherTerm#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.OtherTerm#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.OtherTerm#1/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & ExtractAllVars/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractAllVars/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractAllVars/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractAllVars("ExtractAllVars", COOKIE1_, COOKIE2_, func_ExtractAllVars);


static refalrts::FnResult func_Uniq(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Uniq/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Uniq/4 e.Uniqs#1/7 t.Repeated#1/11 e.NotScanned-M#1/13 t.Repeated#1/17 e.NotScanned-E#1/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
      if( ! context[12] )
        continue;
      context[13] = 0;
      context[14] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[15] = context[9];
        context[16] = context[10];
        context[18] = refalrts::repeated_stvar_left( vm, context[17], context[11], context[15], context[16] );
        if( ! context[18] )
          continue;
        // closed e.NotScanned-E#1 as range 15
        //DEBUG: e.Uniqs#1: 7
        //DEBUG: t.Repeated#1: 11
        //DEBUG: e.NotScanned-M#1: 13
        //DEBUG: e.NotScanned-E#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Repeated#1/11 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Uniqs#1/7 } Tile{ AsIs: </0 AsIs: & Uniq/4 } Tile{ AsIs: e.NotScanned-M#1/13 } Tile{ AsIs: t.Repeated#1/17 AsIs: e.NotScanned-E#1/15 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[17];
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Uniq/4 e.Uniqs#1/2 >/1
  // closed e.Uniqs#1 as range 2
  //DEBUG: e.Uniqs#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Uniq/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Uniqs#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Uniq("Uniq", COOKIE1_, COOKIE2_, func_Uniq);


static refalrts::FnResult func_UpdateBorrowedVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & UpdateBorrowedVars/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & UpdateBorrowedVars/4 e.new#1/2 (/11 e.new#2/9 )/12 (/7 s.new#3/13 e.new#4/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 5
  do {
    // </0 & UpdateBorrowedVars/4 e.ScopeVars#1/14 (/11 e.BorrowedVars-B#1/20 (/26 s.Mode#1/28 e.Index#1/29 )/27 e.BorrowedVars-E#1/22 )/12 (/7 s.Mode#1/13 e.Index#1/18 )/8 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[5];
    context[19] = context[6];
    // closed e.ScopeVars#1 as range 14
    // closed e.Index#1 as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[16];
      context[23] = context[17];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[13], context[24], context[25] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[18], context[19], context[24], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.BorrowedVars-E#1 as range 22
      //DEBUG: s.Mode#1: 13
      //DEBUG: e.ScopeVars#1: 14
      //DEBUG: e.Index#1: 18
      //DEBUG: e.BorrowedVars-B#1: 20
      //DEBUG: e.BorrowedVars-E#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & UpdateBorrowedVars/4 e.ScopeVars#1/14 {REMOVED TILE} (/7 s.Mode#1/13 e.Index#1/18 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.BorrowedVars-B#1/20 AsIs: (/26 AsIs: s.Mode#1/28 AsIs: e.Index#1/29 AsIs: )/27 AsIs: e.BorrowedVars-E#1/22 AsIs: )/12 } Tile{ ]] }
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[16], context[17] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & UpdateBorrowedVars/4 e.ScopeVars-B#1/20 (/26 s.Mode#1/28 e.Index#1/29 )/27 e.ScopeVars-E#1/22 (/11 e.BorrowedVars#1/16 )/12 (/7 s.Mode#1/13 e.Index#1/18 )/8 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[5];
    context[19] = context[6];
    // closed e.BorrowedVars#1 as range 16
    // closed e.Index#1 as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[14];
      context[23] = context[15];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[13], context[24], context[25] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[18], context[19], context[24], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.ScopeVars-E#1 as range 22
      //DEBUG: s.Mode#1: 13
      //DEBUG: e.BorrowedVars#1: 16
      //DEBUG: e.Index#1: 18
      //DEBUG: e.ScopeVars-B#1: 20
      //DEBUG: e.ScopeVars-E#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & UpdateBorrowedVars/4 e.ScopeVars-B#1/20 (/26 s.Mode#1/28 e.Index#1/29 )/27 e.ScopeVars-E#1/22 (/11 {REMOVED TILE} )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.BorrowedVars#1/16 } Tile{ AsIs: (/7 AsIs: s.Mode#1/13 AsIs: e.Index#1/18 AsIs: )/8 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateBorrowedVars/4 e.ScopeVars#1/2 (/11 e.BorrowedVars#1/9 )/12 (/7 s.Mode#1/13 e.Index#1/5 )/8 >/1
  // closed e.ScopeVars#1 as range 2
  // closed e.BorrowedVars#1 as range 9
  // closed e.Index#1 as range 5
  //DEBUG: s.Mode#1: 13
  //DEBUG: e.ScopeVars#1: 2
  //DEBUG: e.BorrowedVars#1: 9
  //DEBUG: e.Index#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UpdateBorrowedVars/4 e.ScopeVars#1/2 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.BorrowedVars#1/9 AsIs: )/12 AsIs: (/7 AsIs: s.Mode#1/13 AsIs: e.Index#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UpdateBorrowedVars("UpdateBorrowedVars", COOKIE1_, COOKIE2_, func_UpdateBorrowedVars);


static refalrts::FnResult func_gen_ExtractNestedm_Result_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ExtractNested-Result=1/4 (/7 (/11 e.NestedFuncs#2/9 )/12 (/15 e.BorrowedVars#2/13 )/16 )/8 e.Result#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NestedFuncs#2 as range 9
  // closed e.BorrowedVars#2 as range 13
  // closed e.Result#2 as range 2
  //DEBUG: e.NestedFuncs#2: 9
  //DEBUG: e.BorrowedVars#2: 13
  //DEBUG: e.Result#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractNested-Result=1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.NestedFuncs#2/9 AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#2/13 AsIs: )/16 } Tile{ AsIs: e.Result#2/2 } Tile{ ]] }
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Result_A1("ExtractNested-Result=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Result_A1);


static refalrts::FnResult func_ExtractNestedm_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & ExtractNested-Result/4 s.MarkupContext#1/5 (/8 e.OriginBorrowedVars#1/6 )/9 (/12 e.ScopeVars#1/10 )/13 (/16 e.LocalVars#1/14 )/17 e.OriginResult#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.OriginBorrowedVars#1 as range 6
  // closed e.ScopeVars#1 as range 10
  // closed e.LocalVars#1 as range 14
  // closed e.OriginResult#1 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.OriginBorrowedVars#1: 6
  //DEBUG: e.ScopeVars#1: 10
  //DEBUG: e.LocalVars#1: 14
  //DEBUG: e.OriginResult#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result=1/4 } </18 & DoMapAccum@12/19 Tile{ HalfReuse: s.MarkupContext1 #5/9 AsIs: (/12 AsIs: e.ScopeVars#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#1/14 AsIs: )/17 } (/20 Tile{ AsIs: (/8 } )/21 (/22 Tile{ AsIs: e.OriginBorrowedVars#1/6 } )/23 )/24 (/25 )/26 Tile{ AsIs: e.OriginResult#1/2 } >/27 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoMapAccum_Z12]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Result_A1]);
  refalrts::reinit_svar( context[9], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[20], context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[8], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedm_Result("ExtractNested-Result", COOKIE1_, COOKIE2_, func_ExtractNestedm_Result);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ExtractNested-Result-Term$2=1/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.InBracketsNestedFuncs#2/9 )/12 (/15 e.BorrowedVars#2/13 )/16 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.InBracketsNestedFuncs#2 as range 9
  // closed e.BorrowedVars#2 as range 13
  // closed e.InBrackets#2 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.InBracketsNestedFuncs#2: 9
  //DEBUG: e.BorrowedVars#2: 13
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/5 } Tile{ AsIs: e.InBracketsNestedFuncs#2/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#2/13 AsIs: )/16 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # Brackets/7 } Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S2A1("ExtractNested-Result-Term$2=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S2A1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ExtractNested-Result-Term$3=1/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.Name#1/9 )/12 (/15 e.InBracketsNestedFuncs#2/13 )/16 (/19 e.BorrowedVars#2/17 )/20 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.Name#1 as range 9
  // closed e.InBracketsNestedFuncs#2 as range 13
  // closed e.BorrowedVars#2 as range 17
  // closed e.InBrackets#2 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.Name#1: 9
  //DEBUG: e.InBracketsNestedFuncs#2: 13
  //DEBUG: e.BorrowedVars#2: 17
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/5 } Tile{ AsIs: e.InBracketsNestedFuncs#2/13 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.BorrowedVars#2/17 AsIs: )/20 } Tile{ HalfReuse: )/7 } Tile{ AsIs: (/15 } Tile{ HalfReuse: # ADT-Brackets/8 AsIs: (/11 AsIs: e.Name#1/9 AsIs: )/12 } Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_ident(context[8], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[15], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[4], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S3A1("ExtractNested-Result-Term$3=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S3A1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ExtractNested-Result-Term$4=1/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.InBracketsNestedFuncs#2/9 )/12 (/15 e.BorrowedVars#2/13 )/16 e.InBrackets#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.InBracketsNestedFuncs#2 as range 9
  // closed e.BorrowedVars#2 as range 13
  // closed e.InBrackets#2 as range 2
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.InBracketsNestedFuncs#2: 9
  //DEBUG: e.BorrowedVars#2: 13
  //DEBUG: e.InBrackets#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/5 } Tile{ AsIs: e.InBracketsNestedFuncs#2/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#2/13 AsIs: )/16 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # CallBrackets/7 } Tile{ AsIs: e.InBrackets#2/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S4A1("ExtractNested-Result-Term$4=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S4A1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ExtractNested-Result-Term$5=2/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.NestedNestedFuncs#2/9 )/12 t.Function#3/13 e.OptMarks#3/2 (/19 e.BorrowedVars#3/17 )/20 t.ClosureTerm#3/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.NestedFuncs#1 as range 5
  // closed e.NestedNestedFuncs#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[16] = refalrts::tvar_right( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.OptMarks#3 as range 2
  // closed e.BorrowedVars#3 as range 17
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.NestedNestedFuncs#2: 9
  //DEBUG: t.Function#3: 13
  //DEBUG: t.ClosureTerm#3: 15
  //DEBUG: e.OptMarks#3: 2
  //DEBUG: e.BorrowedVars#3: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/5 } Tile{ AsIs: e.NestedNestedFuncs#2/9 } Tile{ AsIs: t.Function#3/13 } Tile{ AsIs: e.OptMarks#3/2 } Tile{ AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.BorrowedVars#3/17 AsIs: )/20 } Tile{ AsIs: )/8 } Tile{ AsIs: t.ClosureTerm#3/15 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2("ExtractNested-Result-Term$5=2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & ExtractNested-Result-Term$5=2:1$1=1/4 (/7 e.ClosureName#1/5 )/8 (/11 e.Body#3/9 )/12 (/15 e.BorrowedVars#1/13 )/16 e.DriveLabelOpt#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.ClosureName#1 as range 5
  // closed e.Body#3 as range 9
  // closed e.BorrowedVars#1 as range 13
  // closed e.DriveLabelOpt#4 as range 2
  //DEBUG: e.ClosureName#1: 5
  //DEBUG: e.Body#3: 9
  //DEBUG: e.BorrowedVars#1: 13
  //DEBUG: e.DriveLabelOpt#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Function/0 HalfReuse: # GN-Local/4 AsIs: (/7 AsIs: e.ClosureName#1/5 AsIs: )/8 } Tile{ AsIs: e.Body#3/9 } Tile{ AsIs: )/12 } Tile{ AsIs: e.DriveLabelOpt#4/2 } Tile{ AsIs: (/15 AsIs: e.BorrowedVars#1/13 AsIs: )/16 } (/17 # Symbol/18 # Name/19 e.ClosureName#1/5/20 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Name]);
  refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
  refalrts::reinit_ident(context[0], identifiers[ident_Function]);
  refalrts::reinit_ident(context[4], identifiers[ident_GNm_Local]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[17], context[1] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1("ExtractNested-Result-Term$5=2:1$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & ExtractNested-Result-Term$5=2:1$2=1/4 (/7 e.ClosureName#1/5 )/8 (/11 e.Sentences#3/9 )/12 (/15 e.ScopeVars#1/13 )/16 (/19 e.BorrowedVars#1/17 )/20 (/23 e.NestedBorrowedVars#2/21 )/24 e.Context#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.ClosureName#1 as range 5
  // closed e.Sentences#3 as range 9
  // closed e.ScopeVars#1 as range 13
  // closed e.BorrowedVars#1 as range 17
  // closed e.NestedBorrowedVars#2 as range 21
  // closed e.Context#4 as range 2
  //DEBUG: e.ClosureName#1: 5
  //DEBUG: e.Sentences#3: 9
  //DEBUG: e.ScopeVars#1: 13
  //DEBUG: e.BorrowedVars#1: 17
  //DEBUG: e.NestedBorrowedVars#2: 21
  //DEBUG: e.Context#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/25 # Function/26 # GN-Local/27 Tile{ AsIs: (/23 } e.ClosureName#1/5/28 )/30 # Sentences/31 </32 & Map@18/33 (/34 e.Context#4/2/35 )/37 Tile{ AsIs: e.Sentences#3/9 } >/38 Tile{ HalfReuse: )/0 HalfReuse: (/4 HalfReuse: # Drive/7 AsIs: e.ClosureName#1/5 AsIs: )/8 AsIs: (/11 } # Spec/39 (/40 e.ClosureName#1/5/41 )/43 </44 & CreateSpecPatternForContext/45 e.Context#4/2/46 >/48 )/49 </50 Tile{ HalfReuse: & Reduce@2/12 AsIs: (/15 AsIs: e.ScopeVars#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.BorrowedVars#1/17 AsIs: )/20 } Tile{ AsIs: e.NestedBorrowedVars#2/21 } >/51 (/52 # ClosureBrackets/53 (/54 # Symbol/55 # Name/56 e.ClosureName#1/5/57 Tile{ AsIs: )/24 AsIs: e.Context#4/2 HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_ident(vm, context[26], identifiers[ident_Function]);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_GNm_Local]);
  refalrts::copy_evar(vm, context[28], context[29], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_ident(vm, context[31], identifiers[ident_Sentences]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z18]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::copy_evar(vm, context[35], context[36], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_ident(vm, context[39], identifiers[ident_Spec]);
  refalrts::alloc_open_bracket(vm, context[40]);
  refalrts::copy_evar(vm, context[41], context[42], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_CreateSpecPatternForContext]);
  refalrts::copy_evar(vm, context[46], context[47], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_bracket(vm, context[49]);
  refalrts::alloc_open_call(vm, context[50]);
  refalrts::alloc_close_call(vm, context[51]);
  refalrts::alloc_open_bracket(vm, context[52]);
  refalrts::alloc_ident(vm, context[53], identifiers[ident_ClosureBrackets]);
  refalrts::alloc_open_bracket(vm, context[54]);
  refalrts::alloc_ident(vm, context[55], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[56], identifiers[ident_Name]);
  refalrts::copy_evar(vm, context[57], context[58], context[5], context[6]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Drive]);
  refalrts::reinit_name(context[12], functions[efunc_gen_Reduce_Z2]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[52], context[1] );
  refalrts::link_brackets( context[54], context[24] );
  refalrts::push_stack( vm, context[51] );
  refalrts::push_stack( vm, context[50] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[49] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[40], context[43] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::link_brackets( context[25], context[0] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[34], context[37] );
  refalrts::link_brackets( context[23], context[30] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[57], context[58] );
  res = refalrts::splice_evar( res, context[51], context[56] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[12], context[20] );
  res = refalrts::splice_evar( res, context[39], context[50] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[30], context[37] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[25], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1("ExtractNested-Result-Term$5=2:1$2=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & ExtractNested-Result-Term$5=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.new#11/30 )/8 (/11 e.new#12/32 )/12 (/15 e.new#13/34 )/16 (/19 e.new#14/36 )/20 s.new#9/21 (/24 )/25 (/28 e.new#15/38 )/29 e.new#10/40 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[2];
    context[41] = context[3];
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new#11 as range 30
    // closed e.new#12 as range 32
    // closed e.new#13 as range 34
    // closed e.new#14 as range 36
    // closed e.new#15 as range 38
    // closed e.new#10 as range 40
    do {
      // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.new#19/42 )/8 (/11 e.new#20/44 )/12 (/15 e.new#21/46 )/16 (/19 e.new#22/48 )/20 s.new#16/21 (/24 )/25 (/28 e.new#23/50 )/29 s.new#17/54 e.new#18/52 >/1
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[38];
      context[51] = context[39];
      context[52] = context[40];
      context[53] = context[41];
      // closed e.new#19 as range 42
      // closed e.new#20 as range 44
      // closed e.new#21 as range 46
      // closed e.new#22 as range 48
      // closed e.new#23 as range 50
      if( ! refalrts::svar_left( context[54], context[52], context[53] ) )
        continue;
      // closed e.new#18 as range 52
      do {
        // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.NestedFuncs#1/55 )/8 (/11 e.ClosureName#1/57 )/12 (/15 e.BorrowedVars#1/59 )/16 (/19 e.ScopeVars#1/61 )/20 s.MarkupContext#1/21 (/24 )/25 (/28 e.NestedNestedFuncs#2/63 )/29 # Sentences/54 e.#0/65 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[44];
        context[58] = context[45];
        context[59] = context[46];
        context[60] = context[47];
        context[61] = context[48];
        context[62] = context[49];
        context[63] = context[50];
        context[64] = context[51];
        context[65] = context[52];
        context[66] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_Sentences], context[54] ) )
          continue;
        // closed e.NestedFuncs#1 as range 55
        // closed e.ClosureName#1 as range 57
        // closed e.BorrowedVars#1 as range 59
        // closed e.ScopeVars#1 as range 61
        // closed e.NestedNestedFuncs#2 as range 63
        // closed e.#0 as range 65
        //DEBUG: s.MarkupContext#1: 21
        //DEBUG: e.NestedFuncs#1: 55
        //DEBUG: e.ClosureName#1: 57
        //DEBUG: e.BorrowedVars#1: 59
        //DEBUG: e.ScopeVars#1: 61
        //DEBUG: e.NestedNestedFuncs#2: 63
        //DEBUG: e.#0: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars#1/61 {REMOVED TILE} s.MarkupContext#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/55 } Tile{ AsIs: e.NestedNestedFuncs#2/63 } Tile{ AsIs: (/24 HalfReuse: # Function/25 HalfReuse: # GN-Local/28 } Tile{ AsIs: (/7 } e.ClosureName#1/57/67 Tile{ AsIs: )/29 AsIs: # Sentences/54 AsIs: e.#0/65 HalfReuse: )/1 } Tile{ AsIs: (/11 } # Drive/69 Tile{ AsIs: e.ClosureName#1/57 } Tile{ AsIs: )/20 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#1/59 AsIs: )/16 HalfReuse: )/19 } (/70 # Symbol/71 # Name/72 e.ClosureName#1/57/73 Tile{ AsIs: )/8 } Tile{ ]] }
        refalrts::copy_evar(vm, context[67], context[68], context[57], context[58]);
        refalrts::alloc_ident(vm, context[69], identifiers[ident_Drive]);
        refalrts::alloc_open_bracket(vm, context[70]);
        refalrts::alloc_ident(vm, context[71], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[72], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[73], context[74], context[57], context[58]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_ident(context[25], identifiers[ident_Function]);
        refalrts::reinit_ident(context[28], identifiers[ident_GNm_Local]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::link_brackets( context[70], context[8] );
        refalrts::link_brackets( context[0], context[19] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[4], context[12] );
        refalrts::link_brackets( context[11], context[20] );
        refalrts::link_brackets( context[24], context[1] );
        refalrts::link_brackets( context[7], context[29] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[73], context[74] );
        res = refalrts::splice_evar( res, context[70], context[72] );
        res = refalrts::splice_evar( res, context[12], context[19] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[29], context[1] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[24], context[28] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.NestedFuncs#1/55 )/8 (/11 e.ClosureName#1/57 )/12 (/15 e.BorrowedVars#1/59 )/16 (/19 e.ScopeVars#1/61 )/20 s.MarkupContext#1/21 (/24 )/25 (/28 e.NestedNestedFuncs#2/63 )/29 # NativeBody/54 e.#0/65 >/1
      context[55] = context[42];
      context[56] = context[43];
      context[57] = context[44];
      context[58] = context[45];
      context[59] = context[46];
      context[60] = context[47];
      context[61] = context[48];
      context[62] = context[49];
      context[63] = context[50];
      context[64] = context[51];
      context[65] = context[52];
      context[66] = context[53];
      if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[54] ) )
        continue;
      // closed e.NestedFuncs#1 as range 55
      // closed e.ClosureName#1 as range 57
      // closed e.BorrowedVars#1 as range 59
      // closed e.ScopeVars#1 as range 61
      // closed e.NestedNestedFuncs#2 as range 63
      // closed e.#0 as range 65
      //DEBUG: s.MarkupContext#1: 21
      //DEBUG: e.NestedFuncs#1: 55
      //DEBUG: e.ClosureName#1: 57
      //DEBUG: e.BorrowedVars#1: 59
      //DEBUG: e.ScopeVars#1: 61
      //DEBUG: e.NestedNestedFuncs#2: 63
      //DEBUG: e.#0: 65

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars#1/61 {REMOVED TILE} s.MarkupContext#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs#1/55 } Tile{ AsIs: e.NestedNestedFuncs#2/63 } Tile{ AsIs: (/24 HalfReuse: # Function/25 HalfReuse: # GN-Local/28 } Tile{ AsIs: (/7 } Tile{ AsIs: e.ClosureName#1/57 } Tile{ AsIs: )/29 AsIs: # NativeBody/54 AsIs: e.#0/65 HalfReuse: )/1 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#1/59 AsIs: )/16 HalfReuse: )/19 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Symbol/8 } # Name/67 e.ClosureName#1/57/68 Tile{ AsIs: )/20 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[67], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[68], context[69], context[57], context[58]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[25], identifiers[ident_Function]);
      refalrts::reinit_ident(context[28], identifiers[ident_GNm_Local]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_ident(context[8], identifiers[ident_Symbol]);
      refalrts::link_brackets( context[11], context[20] );
      refalrts::link_brackets( context[0], context[19] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[4], context[12] );
      refalrts::link_brackets( context[24], context[1] );
      refalrts::link_brackets( context[7], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[24], context[28] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.NestedFuncs#1/42 )/8 (/11 e.ClosureName#1/44 )/12 (/15 e.BorrowedVars#1/46 )/16 (/19 e.ScopeVars#1/48 )/20 s.MarkupContext#1/21 (/24 )/25 (/28 e.NestedNestedFuncs#2/50 )/29 e.Body#2/52 >/1
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    context[47] = context[35];
    context[48] = context[36];
    context[49] = context[37];
    context[50] = context[38];
    context[51] = context[39];
    context[52] = context[40];
    context[53] = context[41];
    // closed e.NestedFuncs#1 as range 42
    // closed e.ClosureName#1 as range 44
    // closed e.BorrowedVars#1 as range 46
    // closed e.ScopeVars#1 as range 48
    // closed e.NestedNestedFuncs#2 as range 50
    // closed e.Body#2 as range 52
    //DEBUG: s.MarkupContext#1: 21
    //DEBUG: e.NestedFuncs#1: 42
    //DEBUG: e.ClosureName#1: 44
    //DEBUG: e.BorrowedVars#1: 46
    //DEBUG: e.ScopeVars#1: 48
    //DEBUG: e.NestedNestedFuncs#2: 50
    //DEBUG: e.Body#2: 52

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars#1/48 {REMOVED TILE} s.MarkupContext#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.NestedFuncs#1/42 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/50 } Tile{ AsIs: )/20 } </54 & ExtractNested-Result-Term$5=2:1$1=1/55 Tile{ AsIs: (/24 } Tile{ AsIs: e.ClosureName#1/44 } Tile{ AsIs: )/25 AsIs: (/28 } e.Body#2/52/56 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#1/46 AsIs: )/16 HalfReuse: </19 } & ExtractNested-Result-Term$5=2:1$1=1:1*2/58 (/59 e.ClosureName#1/44/60 Tile{ AsIs: )/29 AsIs: e.Body#2/52 AsIs: >/1 } >/62 >/63 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1]);
    refalrts::copy_evar(vm, context[56], context[57], context[52], context[53]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
    refalrts::alloc_open_bracket(vm, context[59]);
    refalrts::copy_evar(vm, context[60], context[61], context[44], context[45]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
    refalrts::reinit_open_call(context[19]);
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[59], context[29] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[28], context[12] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.NestedFuncs#1/30 )/8 (/11 e.ClosureName#1/32 )/12 (/15 e.BorrowedVars#1/34 )/16 (/19 e.ScopeVars#1/36 )/20 s.MarkupContext#1/21 (/24 e.NestedBorrowedVars#2/38 )/25 (/28 e.NestedNestedFuncs#2/40 )/29 # Sentences/44 e.#0/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    context[44] = refalrts::ident_left( identifiers[ident_Sentences], context[42], context[43] );
    if( ! context[44] )
      continue;
    // closed e.NestedFuncs#1 as range 30
    // closed e.ClosureName#1 as range 32
    // closed e.BorrowedVars#1 as range 34
    // closed e.ScopeVars#1 as range 36
    // closed e.NestedBorrowedVars#2 as range 38
    // closed e.NestedNestedFuncs#2 as range 40
    // closed e.#0 as range 42
    //DEBUG: s.MarkupContext#1: 21
    //DEBUG: e.NestedFuncs#1: 30
    //DEBUG: e.ClosureName#1: 32
    //DEBUG: e.BorrowedVars#1: 34
    //DEBUG: e.ScopeVars#1: 36
    //DEBUG: e.NestedBorrowedVars#2: 38
    //DEBUG: e.NestedNestedFuncs#2: 40
    //DEBUG: e.#0: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.NestedFuncs#1/30 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/40 } Tile{ AsIs: )/20 } </45 & ExtractNested-Result-Term$5=2:1$2=1/46 (/47 Tile{ AsIs: e.ClosureName#1/32 } Tile{ AsIs: )/29 HalfReuse: (/44 AsIs: e.#0/42 HalfReuse: )/1 } (/48 Tile{ AsIs: e.ScopeVars#1/36 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars#1/34 AsIs: )/16 AsIs: (/19 } e.NestedBorrowedVars#2/38/49 )/51 </52 & CreateContext/53 Tile{ HalfReuse: s.MarkupContext1 #21/24 AsIs: e.NestedBorrowedVars#2/38 HalfReuse: >/25 HalfReuse: >/28 } >/54 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[38], context[39]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_CreateContext]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
    refalrts::reinit_open_bracket(context[44]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_svar( context[24], context[21] );
    refalrts::reinit_close_call(context[25]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[52] );
    refalrts::link_brackets( context[19], context[51] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[48], context[12] );
    refalrts::link_brackets( context[44], context[1] );
    refalrts::link_brackets( context[47], context[29] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[51], context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=1/4 (/7 e.NestedFuncs#1/5 )/8 (/11 e.ClosureName#1/9 )/12 (/15 e.BorrowedVars#1/13 )/16 (/19 e.ScopeVars#1/17 )/20 s.MarkupContext#1/21 (/24 e.NestedBorrowedVars#2/22 )/25 (/28 e.NestedNestedFuncs#2/26 )/29 e.Body#2/2 >/1
  // closed e.NestedFuncs#1 as range 5
  // closed e.ClosureName#1 as range 9
  // closed e.BorrowedVars#1 as range 13
  // closed e.ScopeVars#1 as range 17
  // closed e.NestedBorrowedVars#2 as range 22
  // closed e.NestedNestedFuncs#2 as range 26
  // closed e.Body#2 as range 2
  //DEBUG: s.MarkupContext#1: 21
  //DEBUG: e.NestedFuncs#1: 5
  //DEBUG: e.ClosureName#1: 9
  //DEBUG: e.BorrowedVars#1: 13
  //DEBUG: e.ScopeVars#1: 17
  //DEBUG: e.NestedBorrowedVars#2: 22
  //DEBUG: e.NestedNestedFuncs#2: 26
  //DEBUG: e.Body#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.NestedFuncs#1/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/26 } )/30 </31 & ExtractNested-Result-Term$5=2:1*2/32 (/33 Tile{ AsIs: e.ClosureName#1/9 } Tile{ AsIs: )/29 } Tile{ AsIs: (/28 } Tile{ AsIs: e.BorrowedVars#1/13 } Tile{ AsIs: )/12 AsIs: (/15 } e.NestedBorrowedVars#2/22/34 Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars#1/17 AsIs: )/20 AsIs: s.MarkupContext#1/21 AsIs: (/24 AsIs: e.NestedBorrowedVars#2/22 AsIs: )/25 } Tile{ AsIs: e.Body#2/2 } >/36 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1D2]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[22], context[23]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[28], context[12] );
  refalrts::link_brackets( context[33], context[29] );
  refalrts::link_brackets( context[11], context[30] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[25] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A1("ExtractNested-Result-Term$5=1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A1);


static refalrts::FnResult func_ExtractNestedm_Resultm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 91 elems
  refalrts::Iter context[91];
  refalrts::zeros( context, 91 );
  // </0 & ExtractNested-Result-Term/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 (/20 e.new#4/18 )/21 (/24 e.new#5/22 )/25 )/17 t.new#6/26 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[14], context[15] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  if( ! refalrts::empty_seq( context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 18
  // closed e.new#5 as range 22
  context[27] = refalrts::tvar_left( context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ExtractNested-Result-Term/4 s.new#7/5 (/8 e.new#10/28 )/9 (/12 e.new#11/30 )/13 (/16 (/20 e.new#12/32 )/21 (/24 e.new#13/34 )/25 )/17 (/26 s.new#8/38 e.new#9/36 )/27 >/1
    context[28] = context[6];
    context[29] = context[7];
    context[30] = context[10];
    context[31] = context[11];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = 0;
    context[37] = 0;
    if( ! refalrts::brackets_term( context[36], context[37], context[26] ) )
      continue;
    // closed e.new#10 as range 28
    // closed e.new#11 as range 30
    // closed e.new#12 as range 32
    // closed e.new#13 as range 34
    if( ! refalrts::svar_left( context[38], context[36], context[37] ) )
      continue;
    // closed e.new#9 as range 36
    do {
      // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/39 )/9 (/12 e.LocalVars#1/41 )/13 (/16 (/20 e.NestedFuncs#1/43 )/21 (/24 e.BorrowedVars#1/45 )/25 )/17 (/26 # TkVariable/38 s.Mode#1/49 e.Index#1/47 )/27 >/1
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[38] ) )
        continue;
      // closed e.ScopeVars#1 as range 39
      // closed e.LocalVars#1 as range 41
      // closed e.NestedFuncs#1 as range 43
      // closed e.BorrowedVars#1 as range 45
      if( ! refalrts::svar_left( context[49], context[47], context[48] ) )
        continue;
      // closed e.Index#1 as range 47
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 39
      //DEBUG: e.LocalVars#1: 41
      //DEBUG: e.NestedFuncs#1: 43
      //DEBUG: e.BorrowedVars#1: 45
      //DEBUG: s.Mode#1: 49
      //DEBUG: e.Index#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} e.LocalVars#1/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/16 AsIs: (/20 AsIs: e.NestedFuncs#1/43 AsIs: )/21 HalfReuse: </24 } Tile{ Reuse: & CheckBorrowed/4 } Tile{ AsIs: (/8 AsIs: e.ScopeVars#1/39 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.BorrowedVars#1/45 } Tile{ AsIs: )/13 } Tile{ HalfReuse: (/1 } Tile{ HalfReuse: s.Mode1 #49/0 } e.Index#1/47/50 )/52 Tile{ HalfReuse: >/25 AsIs: )/17 AsIs: (/26 AsIs: # TkVariable/38 AsIs: s.Mode#1/49 AsIs: e.Index#1/47 AsIs: )/27 } Tile{ ]] }
      refalrts::copy_evar(vm, context[50], context[51], context[47], context[48]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_open_call(context[24]);
      refalrts::update_name(context[4], functions[efunc_CheckBorrowed]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_svar( context[0], context[49] );
      refalrts::reinit_close_call(context[25]);
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[1], context[52] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/39 )/9 (/12 e.LocalVars#1/41 )/13 (/16 (/20 e.NestedFuncs#1/43 )/21 (/24 e.BorrowedVars#1/45 )/25 )/17 (/26 # Brackets/38 e.InBrackets#1/47 )/27 >/1
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[38] ) )
        continue;
      // closed e.ScopeVars#1 as range 39
      // closed e.LocalVars#1 as range 41
      // closed e.NestedFuncs#1 as range 43
      // closed e.BorrowedVars#1 as range 45
      // closed e.InBrackets#1 as range 47
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 39
      //DEBUG: e.LocalVars#1: 41
      //DEBUG: e.NestedFuncs#1: 43
      //DEBUG: e.BorrowedVars#1: 45
      //DEBUG: e.InBrackets#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </49 & ExtractNested-Result-Term$2=1/50 (/51 Tile{ AsIs: e.NestedFuncs#1/43 } )/52 </53 & ExtractNested-Result=1/54 Tile{ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/39 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/41 AsIs: )/13 AsIs: (/16 AsIs: (/20 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/45 AsIs: )/25 AsIs: )/17 AsIs: (/26 HalfReuse: )/38 AsIs: e.InBrackets#1/47 HalfReuse: >/27 AsIs: >/1 } >/55 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_ExtractNestedm_Resultm_Term_S2A1]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_ExtractNestedm_Result_A1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[38] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[0], context[20] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[49], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/39 )/9 (/12 e.LocalVars#1/41 )/13 (/16 (/20 e.NestedFuncs#1/43 )/21 (/24 e.BorrowedVars#1/45 )/25 )/17 (/26 # ADT-Brackets/38 (/51 e.Name#1/49 )/52 e.InBrackets#1/47 )/27 >/1
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[38] ) )
        continue;
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
      if( ! context[51] )
        continue;
      refalrts::bracket_pointers(context[51], context[52]);
      // closed e.ScopeVars#1 as range 39
      // closed e.LocalVars#1 as range 41
      // closed e.NestedFuncs#1 as range 43
      // closed e.BorrowedVars#1 as range 45
      // closed e.Name#1 as range 49
      // closed e.InBrackets#1 as range 47
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 39
      //DEBUG: e.LocalVars#1: 41
      //DEBUG: e.NestedFuncs#1: 43
      //DEBUG: e.BorrowedVars#1: 45
      //DEBUG: e.Name#1: 49
      //DEBUG: e.InBrackets#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </53 & ExtractNested-Result-Term$3=1/54 (/55 Tile{ AsIs: e.NestedFuncs#1/43 } )/56 Tile{ AsIs: (/51 AsIs: e.Name#1/49 AsIs: )/52 } </57 & ExtractNested-Result=1/58 Tile{ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/39 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/41 AsIs: )/13 AsIs: (/16 AsIs: (/20 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/45 AsIs: )/25 AsIs: )/17 AsIs: (/26 HalfReuse: )/38 } Tile{ AsIs: e.InBrackets#1/47 } >/59 Tile{ HalfReuse: >/27 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_ExtractNestedm_Resultm_Term_S3A1]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_gen_ExtractNestedm_Result_A1]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[38] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[55], context[56] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_elem( res, context[59] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[21], context[38] );
      res = refalrts::splice_evar( res, context[0], context[20] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[53], context[55] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/39 )/9 (/12 e.LocalVars#1/41 )/13 (/16 (/20 e.NestedFuncs#1/43 )/21 (/24 e.BorrowedVars#1/45 )/25 )/17 (/26 # CallBrackets/38 e.InBrackets#1/47 )/27 >/1
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[38] ) )
        continue;
      // closed e.ScopeVars#1 as range 39
      // closed e.LocalVars#1 as range 41
      // closed e.NestedFuncs#1 as range 43
      // closed e.BorrowedVars#1 as range 45
      // closed e.InBrackets#1 as range 47
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 39
      //DEBUG: e.LocalVars#1: 41
      //DEBUG: e.NestedFuncs#1: 43
      //DEBUG: e.BorrowedVars#1: 45
      //DEBUG: e.InBrackets#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </49 & ExtractNested-Result-Term$4=1/50 (/51 Tile{ AsIs: e.NestedFuncs#1/43 } )/52 </53 & ExtractNested-Result=1/54 Tile{ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/39 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/41 AsIs: )/13 AsIs: (/16 AsIs: (/20 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/45 AsIs: )/25 AsIs: )/17 AsIs: (/26 HalfReuse: )/38 AsIs: e.InBrackets#1/47 HalfReuse: >/27 AsIs: >/1 } >/55 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_ExtractNestedm_Resultm_Term_S4A1]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_ExtractNestedm_Result_A1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[38] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[0], context[20] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[49], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested-Result-Term/4 s.new#14/5 (/8 e.new#17/39 )/9 (/12 e.new#18/41 )/13 (/16 (/20 e.new#19/43 )/21 (/24 e.new#20/45 )/25 )/17 (/26 # Closure/38 (/51 e.new#15/49 )/52 e.new#16/47 )/27 >/1
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    context[43] = context[32];
    context[44] = context[33];
    context[45] = context[34];
    context[46] = context[35];
    context[47] = context[36];
    context[48] = context[37];
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[38] ) )
      continue;
    context[49] = 0;
    context[50] = 0;
    context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
    if( ! context[51] )
      continue;
    refalrts::bracket_pointers(context[51], context[52]);
    // closed e.new#17 as range 39
    // closed e.new#18 as range 41
    // closed e.new#19 as range 43
    // closed e.new#20 as range 45
    // closed e.new#15 as range 49
    // closed e.new#16 as range 47
    do {
      // </0 & ExtractNested-Result-Term/4 s.new#21/5 (/8 e.new#25/53 )/9 (/12 e.new#26/55 )/13 (/16 (/20 e.new#27/57 )/21 (/24 e.new#28/59 )/25 )/17 (/26 # Closure/38 (/51 e.new#24/61 )/52 s.new#22/65 e.new#23/63 )/27 >/1
      context[53] = context[39];
      context[54] = context[40];
      context[55] = context[41];
      context[56] = context[42];
      context[57] = context[43];
      context[58] = context[44];
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[49];
      context[62] = context[50];
      context[63] = context[47];
      context[64] = context[48];
      // closed e.new#25 as range 53
      // closed e.new#26 as range 55
      // closed e.new#27 as range 57
      // closed e.new#28 as range 59
      // closed e.new#24 as range 61
      if( ! refalrts::svar_left( context[65], context[63], context[64] ) )
        continue;
      // closed e.new#23 as range 63
      do {
        // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/66 )/9 (/12 e.LocalVars#1/68 )/13 (/16 (/20 e.NestedFuncs#1/70 )/21 (/24 e.BorrowedVars#1/72 )/25 )/17 (/26 # Closure/38 (/51 e.ClosureName#1/74 )/52 # Sentences/65 e.#0/76 )/27 >/1
        context[66] = context[53];
        context[67] = context[54];
        context[68] = context[55];
        context[69] = context[56];
        context[70] = context[57];
        context[71] = context[58];
        context[72] = context[59];
        context[73] = context[60];
        context[74] = context[61];
        context[75] = context[62];
        context[76] = context[63];
        context[77] = context[64];
        if( ! refalrts::ident_term( identifiers[ident_Sentences], context[65] ) )
          continue;
        // closed e.ScopeVars#1 as range 66
        // closed e.LocalVars#1 as range 68
        // closed e.NestedFuncs#1 as range 70
        // closed e.BorrowedVars#1 as range 72
        // closed e.ClosureName#1 as range 74
        // closed e.#0 as range 76
        //DEBUG: s.MarkupContext#1: 5
        //DEBUG: e.ScopeVars#1: 66
        //DEBUG: e.LocalVars#1: 68
        //DEBUG: e.NestedFuncs#1: 70
        //DEBUG: e.BorrowedVars#1: 72
        //DEBUG: e.ClosureName#1: 74
        //DEBUG: e.#0: 76

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & ExtractNested-Result-Term$5=1/38 AsIs: (/51 } Tile{ AsIs: e.NestedFuncs#1/70 } )/78 (/79 Tile{ AsIs: e.ClosureName#1/74 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/72 AsIs: )/25 HalfReuse: (/17 } e.ScopeVars#1/66/80 )/82 s.MarkupContext#1/5/83 </84 & ExtractNestedRec$1=1/85 Tile{ AsIs: </0 Reuse: & DoMapAccum@13/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/66 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/68 AsIs: )/13 AsIs: (/16 AsIs: (/20 } )/86 (/87 )/88 )/89 Tile{ HalfReuse: (/52 HalfReuse: )/65 AsIs: e.#0/76 HalfReuse: >/27 AsIs: >/1 } >/90 Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[78]);
        refalrts::alloc_open_bracket(vm, context[79]);
        refalrts::copy_evar(vm, context[80], context[81], context[66], context[67]);
        refalrts::alloc_close_bracket(vm, context[82]);
        refalrts::copy_stvar(vm, context[83], context[5]);
        refalrts::alloc_open_call(vm, context[84]);
        refalrts::alloc_name(vm, context[85], functions[efunc_gen_ExtractNestedRec_S1A1]);
        refalrts::alloc_close_bracket(vm, context[86]);
        refalrts::alloc_open_bracket(vm, context[87]);
        refalrts::alloc_close_bracket(vm, context[88]);
        refalrts::alloc_close_bracket(vm, context[89]);
        refalrts::alloc_close_call(vm, context[90]);
        refalrts::reinit_open_call(context[26]);
        refalrts::reinit_name(context[38], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
        refalrts::reinit_open_bracket(context[52]);
        refalrts::reinit_close_bracket(context[65]);
        refalrts::reinit_close_call(context[27]);
        refalrts::push_stack( vm, context[90] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[84] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[52], context[65] );
        refalrts::link_brackets( context[16], context[89] );
        refalrts::link_brackets( context[87], context[88] );
        refalrts::link_brackets( context[20], context[86] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[17], context[82] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[79], context[21] );
        refalrts::link_brackets( context[51], context[78] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[90] );
        res = refalrts::splice_evar( res, context[52], context[1] );
        res = refalrts::splice_evar( res, context[86], context[89] );
        res = refalrts::splice_evar( res, context[0], context[20] );
        res = refalrts::splice_evar( res, context[82], context[85] );
        res = refalrts::splice_evar( res, context[80], context[81] );
        res = refalrts::splice_evar( res, context[21], context[17] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[78], context[79] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[26], context[51] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/66 )/9 (/12 e.LocalVars#1/68 )/13 (/16 (/20 e.NestedFuncs#1/70 )/21 (/24 e.BorrowedVars#1/72 )/25 )/17 (/26 # Closure/38 (/51 e.ClosureName#1/74 )/52 # NativeBody/65 t.0#0/78 e.0#0/76 )/27 >/1
        context[66] = context[53];
        context[67] = context[54];
        context[68] = context[55];
        context[69] = context[56];
        context[70] = context[57];
        context[71] = context[58];
        context[72] = context[59];
        context[73] = context[60];
        context[74] = context[61];
        context[75] = context[62];
        context[76] = context[63];
        context[77] = context[64];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[65] ) )
          continue;
        // closed e.ScopeVars#1 as range 66
        // closed e.LocalVars#1 as range 68
        // closed e.NestedFuncs#1 as range 70
        // closed e.BorrowedVars#1 as range 72
        // closed e.ClosureName#1 as range 74
        context[79] = refalrts::tvar_left( context[78], context[76], context[77] );
        if( ! context[79] )
          continue;
        // closed e.0#0 as range 76
        //DEBUG: s.MarkupContext#1: 5
        //DEBUG: e.ScopeVars#1: 66
        //DEBUG: e.LocalVars#1: 68
        //DEBUG: e.NestedFuncs#1: 70
        //DEBUG: e.BorrowedVars#1: 72
        //DEBUG: e.ClosureName#1: 74
        //DEBUG: t.0#0: 78
        //DEBUG: e.0#0: 76

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 {REMOVED TILE} e.ScopeVars#1/66 {REMOVED TILE} e.LocalVars#1/68 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/16 AsIs: (/20 } Tile{ AsIs: e.NestedFuncs#1/70 } Tile{ AsIs: (/8 } Tile{ HalfReuse: # Function/1 } Tile{ HalfReuse: # GN-Local/9 AsIs: (/12 } e.ClosureName#1/74/80 Tile{ AsIs: )/13 } Tile{ AsIs: # NativeBody/65 AsIs: t.0#0/78 AsIs: e.0#0/76 AsIs: )/27 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/72 AsIs: )/25 AsIs: )/17 AsIs: (/26 Reuse: # Symbol/38 HalfReuse: # Name/51 AsIs: e.ClosureName#1/74 AsIs: )/52 } Tile{ ]] }
        refalrts::copy_evar(vm, context[80], context[81], context[74], context[75]);
        refalrts::reinit_ident(context[1], identifiers[ident_Function]);
        refalrts::reinit_ident(context[9], identifiers[ident_GNm_Local]);
        refalrts::update_ident(context[38], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[51], identifiers[ident_Name]);
        refalrts::link_brackets( context[26], context[52] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[8], context[27] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[21], context[52] );
        res = refalrts::splice_evar( res, context[65], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[80], context[81] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/66 )/9 (/12 e.LocalVars#1/68 )/13 (/16 (/20 e.NestedFuncs#1/70 )/21 (/24 e.BorrowedVars#1/72 )/25 )/17 (/26 # Closure/38 (/51 e.ClosureName#1/74 )/52 # Metatable/65 e.#0/76 )/27 >/1
      context[66] = context[53];
      context[67] = context[54];
      context[68] = context[55];
      context[69] = context[56];
      context[70] = context[57];
      context[71] = context[58];
      context[72] = context[59];
      context[73] = context[60];
      context[74] = context[61];
      context[75] = context[62];
      context[76] = context[63];
      context[77] = context[64];
      if( ! refalrts::ident_term( identifiers[ident_Metatable], context[65] ) )
        continue;
      // closed e.ScopeVars#1 as range 66
      // closed e.LocalVars#1 as range 68
      // closed e.NestedFuncs#1 as range 70
      // closed e.BorrowedVars#1 as range 72
      // closed e.ClosureName#1 as range 74
      // closed e.#0 as range 76
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 66
      //DEBUG: e.LocalVars#1: 68
      //DEBUG: e.NestedFuncs#1: 70
      //DEBUG: e.BorrowedVars#1: 72
      //DEBUG: e.ClosureName#1: 74
      //DEBUG: e.#0: 76

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE} e.ScopeVars#1/66 {REMOVED TILE} e.LocalVars#1/68 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & ExtractNested-Result-Term$5=2@1/16 AsIs: (/20 AsIs: e.NestedFuncs#1/70 AsIs: )/21 HalfReuse: </24 } Tile{ Reuse: & ExtractNested-Result-Term$5=2:1$1=1@1/4 } Tile{ AsIs: (/8 } e.ClosureName#1/74/78 Tile{ AsIs: )/9 AsIs: (/12 } e.#0/76/80 Tile{ AsIs: )/25 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.BorrowedVars#1/72 } Tile{ AsIs: )/17 HalfReuse: </26 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1:1*2/38 AsIs: (/51 AsIs: e.ClosureName#1/74 AsIs: )/52 AsIs: # Metatable/65 AsIs: e.#0/76 HalfReuse: >/27 AsIs: >/1 } >/82 Tile{ ]] }
      refalrts::copy_evar(vm, context[78], context[79], context[74], context[75]);
      refalrts::copy_evar(vm, context[80], context[81], context[76], context[77]);
      refalrts::alloc_close_call(vm, context[82]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[16], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z1]);
      refalrts::reinit_open_call(context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_call(context[26]);
      refalrts::reinit_name(context[38], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[82] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[0], context[17] );
      refalrts::link_brackets( context[12], context[25] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[82] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[80], context[81] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[78], context[79] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[13], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/53 )/9 (/12 e.LocalVars#1/55 )/13 (/16 (/20 e.NestedFuncs#1/57 )/21 (/24 e.BorrowedVars#1/59 )/25 )/17 (/26 # Closure/38 (/51 e.ClosureName#1/61 )/52 e.Body#1/63 )/27 >/1
    context[53] = context[39];
    context[54] = context[40];
    context[55] = context[41];
    context[56] = context[42];
    context[57] = context[43];
    context[58] = context[44];
    context[59] = context[45];
    context[60] = context[46];
    context[61] = context[49];
    context[62] = context[50];
    context[63] = context[47];
    context[64] = context[48];
    // closed e.ScopeVars#1 as range 53
    // closed e.LocalVars#1 as range 55
    // closed e.NestedFuncs#1 as range 57
    // closed e.BorrowedVars#1 as range 59
    // closed e.ClosureName#1 as range 61
    // closed e.Body#1 as range 63
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 53
    //DEBUG: e.LocalVars#1: 55
    //DEBUG: e.NestedFuncs#1: 57
    //DEBUG: e.BorrowedVars#1: 59
    //DEBUG: e.ClosureName#1: 61
    //DEBUG: e.Body#1: 63

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/51 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & ExtractNested-Result-Term$5=1/16 AsIs: (/20 AsIs: e.NestedFuncs#1/57 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.ClosureName#1/61 } Tile{ AsIs: )/17 AsIs: (/26 } Tile{ AsIs: e.BorrowedVars#1/59 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.ScopeVars#1/53 } Tile{ AsIs: )/25 } Tile{ HalfReuse: s.MarkupContext1 #5/38 } Tile{ AsIs: </0 Reuse: & ExtractNestedRec*3/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 } e.ScopeVars#1/53/65 Tile{ AsIs: e.LocalVars#1/55 } Tile{ AsIs: )/52 AsIs: e.Body#1/63 HalfReuse: >/27 AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[65], context[66], context[53], context[54]);
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[16], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1]);
    refalrts::reinit_svar( context[38], context[5] );
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedRec_D3]);
    refalrts::reinit_close_call(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[52] );
    refalrts::link_brackets( context[12], context[25] );
    refalrts::link_brackets( context[26], context[9] );
    refalrts::link_brackets( context[24], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[52];
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[13], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#1/10 )/13 (/16 (/20 e.NestedFuncs#1/18 )/21 (/24 e.BorrowedVars#1/22 )/25 )/17 t.OtherTerm#1/26 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.LocalVars#1 as range 10
  // closed e.NestedFuncs#1 as range 18
  // closed e.BorrowedVars#1 as range 22
  //DEBUG: t.OtherTerm#1: 26
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.LocalVars#1: 10
  //DEBUG: e.NestedFuncs#1: 18
  //DEBUG: e.BorrowedVars#1: 22

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractNested-Result-Term/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#1/10 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/16 AsIs: (/20 AsIs: e.NestedFuncs#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.BorrowedVars#1/22 AsIs: )/25 AsIs: )/17 AsIs: t.OtherTerm#1/26 } Tile{ ]] }
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[16], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractNestedm_Resultm_Term("ExtractNested-Result-Term", COOKIE1_, COOKIE2_, func_ExtractNestedm_Resultm_Term);


static refalrts::FnResult func_CheckBorrowed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CheckBorrowed/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CheckBorrowed/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 s.new#3/17 e.new#4/13 )/16 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 13
  do {
    // </0 & CheckBorrowed/4 (/7 e.ScopeVars#1/18 )/8 (/11 e.BorrowedVars-B#1/24 (/30 s.Mode#1/32 e.Index#1/33 )/31 e.BorrowedVars-E#1/26 )/12 (/15 s.Mode#1/17 e.Index#1/22 )/16 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    // closed e.ScopeVars#1 as range 18
    // closed e.Index#1 as range 22
    context[24] = 0;
    context[25] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[26] = context[20];
      context[27] = context[21];
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      if( ! refalrts::repeated_stvar_left( vm, context[32], context[17], context[28], context[29] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.BorrowedVars-E#1 as range 26
      //DEBUG: s.Mode#1: 17
      //DEBUG: e.ScopeVars#1: 18
      //DEBUG: e.Index#1: 22
      //DEBUG: e.BorrowedVars-B#1: 24
      //DEBUG: e.BorrowedVars-E#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckBorrowed/4 (/7 e.ScopeVars#1/18 )/8 {REMOVED TILE} (/15 s.Mode#1/17 e.Index#1/22 )/16 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.BorrowedVars-B#1/24 AsIs: (/30 AsIs: s.Mode#1/32 AsIs: e.Index#1/33 AsIs: )/31 AsIs: e.BorrowedVars-E#1/26 AsIs: )/12 } Tile{ ]] }
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[24], context[25], context[20], context[21] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckBorrowed/4 (/7 e.ScopeVars-B#1/24 (/30 s.Mode#1/32 e.Index#1/33 )/31 e.ScopeVars-E#1/26 )/8 (/11 e.BorrowedVars#1/20 )/12 (/15 s.Mode#1/17 e.Index#1/22 )/16 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    // closed e.BorrowedVars#1 as range 20
    // closed e.Index#1 as range 22
    context[24] = 0;
    context[25] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[26] = context[18];
      context[27] = context[19];
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      if( ! refalrts::repeated_stvar_left( vm, context[32], context[17], context[28], context[29] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[22], context[23], context[28], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.ScopeVars-E#1 as range 26
      //DEBUG: s.Mode#1: 17
      //DEBUG: e.BorrowedVars#1: 20
      //DEBUG: e.Index#1: 22
      //DEBUG: e.ScopeVars-B#1: 24
      //DEBUG: e.ScopeVars-E#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckBorrowed/4 (/7 e.ScopeVars-B#1/24 (/30 s.Mode#1/32 e.Index#1/33 )/31 e.ScopeVars-E#1/26 )/8 (/11 {REMOVED TILE} )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.BorrowedVars#1/20 } Tile{ AsIs: (/15 AsIs: s.Mode#1/17 AsIs: e.Index#1/22 AsIs: )/16 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[24], context[25], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckBorrowed/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.BorrowedVars#1/9 )/12 (/15 s.Mode#1/17 e.Index#1/13 )/16 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.BorrowedVars#1 as range 9
  // closed e.Index#1 as range 13
  //DEBUG: s.Mode#1: 17
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.BorrowedVars#1: 9
  //DEBUG: e.Index#1: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckBorrowed/4 (/7 e.ScopeVars#1/5 )/8 {REMOVED TILE} (/15 s.Mode#1/17 e.Index#1/13 )/16 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.BorrowedVars#1/9 AsIs: )/12 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckBorrowed("CheckBorrowed", COOKIE1_, COOKIE2_, func_CheckBorrowed);


static refalrts::FnResult func_gen_Passm_CleanupRedudandExterns_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Pass-CleanupRedudandExterns=3/4 (/7 e._#4/5 )/8 e.AST#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e._#4 as range 5
  // closed e.AST#4 as range 2
  //DEBUG: e._#4: 5
  //DEBUG: e.AST#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-CleanupRedudandExterns=3/4 (/7 e._#4/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST#4/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_CleanupRedudandExterns_A3("Pass-CleanupRedudandExterns=3", COOKIE1_, COOKIE2_, func_gen_Passm_CleanupRedudandExterns_A3);


static refalrts::FnResult func_gen_Passm_CleanupRedudandExterns_A3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Pass-CleanupRedudandExterns=3\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Pass-CleanupRedudandExterns=3\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Pass-CleanupRedudandExterns=3\1/4 (/7 e.new#5/11 )/8 (/9 # Declaration/15 s.new#3/16 e.new#4/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_Declaration], context[13], context[14] );
    if( ! context[15] )
      continue;
    // closed e.new#5 as range 11
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & Pass-CleanupRedudandExterns=3\1/4 (/7 e.DeclaredFunctions-B#4/21 (/27 e.Name#4/29 )/28 e.DeclaredFunctions-E#4/23 )/8 (/9 # Declaration/15 s.ScopeClass#4/16 e.Name#4/19 )/10 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      // closed e.Name#4 as range 19
      context[21] = 0;
      context[22] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[23] = context[17];
        context[24] = context[18];
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
        if( ! context[27] )
          continue;
        refalrts::bracket_pointers(context[27], context[28]);
        if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[19], context[20], context[25], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.DeclaredFunctions-E#4 as range 23
        //DEBUG: s.ScopeClass#4: 16
        //DEBUG: e.Name#4: 19
        //DEBUG: e.DeclaredFunctions-B#4: 21
        //DEBUG: e.DeclaredFunctions-E#4: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Pass-CleanupRedudandExterns=3\1/4 {REMOVED TILE} (/9 # Declaration/15 s.ScopeClass#4/16 e.Name#4/19 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.DeclaredFunctions-B#4/21 AsIs: (/27 AsIs: e.Name#4/29 AsIs: )/28 AsIs: e.DeclaredFunctions-E#4/23 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[21], context[22], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pass-CleanupRedudandExterns=3\1/4 (/7 e.DeclaredFunctions#4/17 )/8 (/9 # Declaration/15 s.ScopeClass#4/16 e.Name#4/19 )/10 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.DeclaredFunctions#4 as range 17
    // closed e.Name#4 as range 19
    //DEBUG: s.ScopeClass#4: 16
    //DEBUG: e.DeclaredFunctions#4: 17
    //DEBUG: e.Name#4: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Pass-CleanupRedudandExterns=3\1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.DeclaredFunctions#4/17 } Tile{ AsIs: (/7 } e.Name#4/19/21 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Declaration/15 AsIs: s.ScopeClass#4/16 AsIs: e.Name#4/19 AsIs: )/10 } Tile{ ]] }
    refalrts::copy_evar(vm, context[21], context[22], context[19], context[20]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pass-CleanupRedudandExterns=3\1/4 (/7 e.DeclaredFunctions#4/5 )/8 t.Other#4/9 >/1
  // closed e.DeclaredFunctions#4 as range 5
  //DEBUG: t.Other#4: 9
  //DEBUG: e.DeclaredFunctions#4: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pass-CleanupRedudandExterns=3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.DeclaredFunctions#4/5 AsIs: )/8 AsIs: t.Other#4/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_CleanupRedudandExterns_A3L1("Pass-CleanupRedudandExterns=3\\1", COOKIE1_, COOKIE2_, func_gen_Passm_CleanupRedudandExterns_A3L1);


static refalrts::FnResult func_gen_Passm_CleanupRedudandExterns_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Pass-CleanupRedudandExterns=2/4 (/7 e.DefinedFunctions#3/5 )/8 e.AST#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.DefinedFunctions#3 as range 5
  // closed e.AST#3 as range 2
  //DEBUG: e.DefinedFunctions#3: 5
  //DEBUG: e.AST#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.DefinedFunctions#3/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-CleanupRedudandExterns=3/4 HalfReuse: </7 } & DoMapAccum@14/9 (/10 )/11 (/12 Tile{ AsIs: )/8 AsIs: e.AST#3/2 AsIs: >/1 } >/13 Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_DoMapAccum_Z14]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_CleanupRedudandExterns_A2("Pass-CleanupRedudandExterns=2", COOKIE1_, COOKIE2_, func_gen_Passm_CleanupRedudandExterns_A2);


static refalrts::FnResult func_gen_Passm_CleanupRedudandExterns_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Pass-CleanupRedudandExterns=1/4 (/7 e.DefinedFunctions#2/5 )/8 e.AST#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.DefinedFunctions#2 as range 5
  // closed e.AST#2 as range 2
  //DEBUG: e.DefinedFunctions#2: 5
  //DEBUG: e.AST#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Pass-CleanupRedudandExterns=2/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@15/4 AsIs: (/7 AsIs: e.DefinedFunctions#2/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.AST#2/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_CleanupRedudandExterns_A2]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Passm_CleanupRedudandExterns_A1("Pass-CleanupRedudandExterns=1", COOKIE1_, COOKIE2_, func_gen_Passm_CleanupRedudandExterns_A1);


static refalrts::FnResult func_Passm_CleanupRedudandExterns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Pass-CleanupRedudandExterns/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-CleanupRedudandExterns=1/4 } </5 & DoMapAccum@16/6 (/7 )/8 (/9 )/10 Tile{ AsIs: e.AST#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z16]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_CleanupRedudandExterns("Pass-CleanupRedudandExterns", COOKIE1_, COOKIE2_, func_Passm_CleanupRedudandExterns);


static refalrts::FnResult func_FilterDeclarations(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & FilterDeclarations/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FilterDeclarations/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FilterDeclarations/4 (/7 e.DefinedFunctions-B#1/17 (/23 e.Name#1/25 )/24 e.DefinedFunctions-E#1/19 )/8 (/9 # Declaration/15 s.ScopeClass#1/16 e.Name#1/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_Declaration], context[13], context[14] );
    if( ! context[15] )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    // closed e.Name#1 as range 13
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[11];
      context[20] = context[12];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      if( ! refalrts::repeated_evar_left( vm, context[25], context[26], context[13], context[14], context[21], context[22] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.DefinedFunctions-E#1 as range 19
      //DEBUG: s.ScopeClass#1: 16
      //DEBUG: e.Name#1: 13
      //DEBUG: e.DefinedFunctions-B#1: 17
      //DEBUG: e.DefinedFunctions-E#1: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FilterDeclarations/4 {REMOVED TILE} (/9 # Declaration/15 s.ScopeClass#1/16 e.Name#1/13 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.DefinedFunctions-B#1/17 AsIs: (/23 AsIs: e.Name#1/25 AsIs: )/24 AsIs: e.DefinedFunctions-E#1/19 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[17], context[18], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FilterDeclarations/4 (/7 e.DefinedFunctions#1/5 )/8 t.OtherItem#1/9 >/1
  // closed e.DefinedFunctions#1 as range 5
  //DEBUG: t.OtherItem#1: 9
  //DEBUG: e.DefinedFunctions#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FilterDeclarations/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.DefinedFunctions#1/5 AsIs: )/8 AsIs: t.OtherItem#1/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FilterDeclarations("FilterDeclarations", COOKIE1_, COOKIE2_, func_FilterDeclarations);


static refalrts::FnResult func_Passm_UnfoldEnums(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pass-UnfoldEnums/4 e.AST#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST#1 as range 2
  //DEBUG: e.AST#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@19/4 AsIs: e.AST#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z19]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_UnfoldEnums("Pass-UnfoldEnums", COOKIE1_, COOKIE2_, func_Passm_UnfoldEnums);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@2/4 t.new#1/5 t.new#2/7 t.new#3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn#1/5 t.Acc#1/7 t.Next#1/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: s.Fn#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 t.Acc#1/7 t.Next#1/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn#0/5 t.Acc#1/7 t.Next#1/9 >/1
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: t.Next#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Map@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@1/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@1/4 (/7 (/15 e.1#0/13 )/16 e.4#0/11 (/23 e.5#0/21 )/24 (/19 e.3#0/17 )/20 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.1#0 as range 13
      // closed e.4#0 as range 11
      // closed e.5#0 as range 21
      // closed e.3#0 as range 17
      // closed e.Tail#1 as range 9
      //DEBUG: e.1#0: 13
      //DEBUG: e.4#0: 11
      //DEBUG: e.5#0: 21
      //DEBUG: e.3#0: 17
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: </7 HalfReuse: & Map@3/15 AsIs: e.1#0/13 HalfReuse: >/16 } )/25 </26 & Map@6/27 Tile{ AsIs: e.4#0/11 } >/28 Tile{ AsIs: (/23 } </29 & Map@3/30 Tile{ AsIs: e.5#0/21 } >/31 Tile{ AsIs: )/24 AsIs: (/19 } </32 & Map@5/33 Tile{ AsIs: e.3#0/17 } >/34 )/35 )/36 Tile{ HalfReuse: </20 HalfReuse: & Map@1/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z6]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z3]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z5]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z3]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[0], context[36] );
      refalrts::link_brackets( context[19], context[35] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[4], context[25] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[19] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemovePos-Body$1\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemovePos-Body$1\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@2/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@2/4 (/7 t.#0/19 (/15 # Symbol/17 # Name/18 t.3#0/21 e.5#0/13 )/16 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_right( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left( identifiers[ident_Symbol], context[13], context[14] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_Name], context[13], context[14] );
      if( ! context[18] )
        continue;
      // closed e.Tail#1 as range 9
      context[20] = refalrts::tvar_left( context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      context[22] = refalrts::tvar_left( context[21], context[13], context[14] );
      if( ! context[22] )
        continue;
      // closed e.5#0 as range 13
      //DEBUG: e.Tail#1: 9
      //DEBUG: t.#0: 19
      //DEBUG: t.3#0: 21
      //DEBUG: e.5#0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.3#0/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: t.#0/19 AsIs: (/15 AsIs: # Symbol/17 AsIs: # Name/18 } Tile{ AsIs: e.5#0/13 } Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ HalfReuse: </16 HalfReuse: & Map@2/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[15], context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[7], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemovePos-Body$3\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S3L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemovePos-Body$3\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@3/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@3/4 (/7 s.new#6/13 t.new#7/18 t.new#8/20 e.new#9/14 )/8 e.new#10/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new#10 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        context[21] = refalrts::tvar_left( context[20], context[14], context[15] );
        if( ! context[21] )
          continue;
        // closed e.new#9 as range 14
        do {
          // </0 & Map@3/4 (/7 s.new#11/13 t.new#12/18 s.new#13/20 e.new#14/22 )/8 e.new#15/24 >/1
          context[22] = context[14];
          context[23] = context[15];
          context[24] = context[16];
          context[25] = context[17];
          if( ! refalrts::svar_term( context[20], context[20] ) )
            continue;
          // closed e.new#14 as range 22
          // closed e.new#15 as range 24
          do {
            // </0 & Map@3/4 (/7 # TkVariable/13 t.0#0/18 s.Mode#2/20 e.2#0/26 )/8 e.Tail#1/28 >/1
            context[26] = context[22];
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[13] ) )
              continue;
            // closed e.2#0 as range 26
            // closed e.Tail#1 as range 28
            //DEBUG: t.0#0: 18
            //DEBUG: s.Mode#2: 20
            //DEBUG: e.2#0: 26
            //DEBUG: e.Tail#1: 28

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TkVariable/13 } Tile{ AsIs: s.Mode#2/20 } Tile{ AsIs: e.2#0/26 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/28 AsIs: >/1 ]] }
            refalrts::reinit_close_bracket(context[4]);
            refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[4] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_elem( res, context[0] );
            res = refalrts::splice_elem( res, context[4] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[20] );
            res = refalrts::splice_evar( res, context[7], context[13] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@3/4 (/7 # TkNewVariable/13 t.0#0/18 s.Mode#2/20 e.2#0/26 )/8 e.Tail#1/28 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[13] ) )
            continue;
          // closed e.2#0 as range 26
          // closed e.Tail#1 as range 28
          //DEBUG: t.0#0: 18
          //DEBUG: s.Mode#2: 20
          //DEBUG: e.2#0: 26
          //DEBUG: e.Tail#1: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # TkNewVariable/13 } Tile{ AsIs: s.Mode#2/20 } Tile{ AsIs: e.2#0/26 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/28 AsIs: >/1 ]] }
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[4] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_elem( res, context[0] );
          res = refalrts::splice_elem( res, context[4] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[7], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 # Symbol/13 # Name/18 t.1#0/20 e.2#0/22 )/8 e.Tail#1/24 >/1
        context[22] = context[14];
        context[23] = context[15];
        context[24] = context[16];
        context[25] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        // closed e.2#0 as range 22
        // closed e.Tail#1 as range 24
        //DEBUG: t.1#0: 20
        //DEBUG: e.2#0: 22
        //DEBUG: e.Tail#1: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1#0/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Symbol/13 AsIs: # Name/18 } Tile{ AsIs: e.2#0/22 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/24 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[7], context[18] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 # Brackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & Map@3/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@3/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 # ADT-Brackets/13 t.0#0/18 (/22 e.3#0/20 )/23 e.2#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        // closed e.Tail#1 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::brackets_left( context[20], context[21], context[14], context[15] );
        if( ! context[22] )
          continue;
        refalrts::bracket_pointers(context[22], context[23]);
        // closed e.3#0 as range 20
        // closed e.2#0 as range 14
        //DEBUG: e.Tail#1: 16
        //DEBUG: t.0#0: 18
        //DEBUG: e.3#0: 20
        //DEBUG: e.2#0: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # ADT-Brackets/13 } Tile{ AsIs: (/22 AsIs: e.3#0/20 AsIs: )/23 } Tile{ AsIs: </0 AsIs: & Map@3/4 } Tile{ AsIs: e.2#0/14 } >/24 )/25 </26 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[7], context[25] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[7], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 # CallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@3/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@3/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@3/4 (/7 # Closure/13 e.new#6/14 )/8 e.new#7/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[13] ) )
        continue;
      // closed e.new#6 as range 14
      // closed e.new#7 as range 16
      do {
        // </0 & Map@3/4 (/7 # Closure/13 s.new#8/22 e.new#9/18 )/8 e.new#10/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new#10 as range 20
        if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
          continue;
        // closed e.new#9 as range 18
        do {
          // </0 & Map@3/4 (/7 # Closure/13 # Sentences/22 e.#0/23 )/8 e.Tail#1/25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[22] ) )
            continue;
          // closed e.#0 as range 23
          // closed e.Tail#1 as range 25
          //DEBUG: e.#0: 23
          //DEBUG: e.Tail#1: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Closure/4 HalfReuse: # Sentences/7 HalfReuse: </13 HalfReuse: & Map@1/22 AsIs: e.#0/23 HalfReuse: >/8 } )/27 </28 & Map@3/29 Tile{ AsIs: e.Tail#1/25 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z3]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_Closure]);
          refalrts::reinit_ident(context[7], identifiers[ident_Sentences]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[22], functions[efunc_gen_Map_Z1]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[28] );
          refalrts::link_brackets( context[0], context[27] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[27], context[29] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@3/4 (/7 # Closure/13 # NativeBody/22 t.0#0/27 e.1#0/23 )/8 e.Tail#1/25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[22] ) )
            continue;
          // closed e.Tail#1 as range 25
          context[28] = refalrts::tvar_left( context[27], context[23], context[24] );
          if( ! context[28] )
            continue;
          // closed e.1#0 as range 23
          //DEBUG: e.Tail#1: 25
          //DEBUG: t.0#0: 27
          //DEBUG: e.1#0: 23

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: # NativeBody/22 AsIs: t.0#0/27 AsIs: e.1#0/23 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@3/4 } Tile{ AsIs: e.Tail#1/25 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 # Closure/13 # Metatable/22 e.#0/23 )/8 e.Tail#1/25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[22] ) )
          continue;
        // closed e.#0 as range 23
        // closed e.Tail#1 as range 25
        //DEBUG: e.#0: 23
        //DEBUG: e.Tail#1: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Closure/4 HalfReuse: # Metatable/7 HalfReuse: </13 HalfReuse: & Map@2/22 AsIs: e.#0/23 HalfReuse: >/8 } )/27 </28 & Map@3/29 Tile{ AsIs: e.Tail#1/25 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Closure]);
        refalrts::reinit_ident(context[7], identifiers[ident_Metatable]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[22], functions[efunc_gen_Map_Z2]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[0], context[27] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[27], context[29] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@3/4 (/7 # Closure/13 e.0#0/18 )/8 e.Tail#1/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.0#0 as range 18
      // closed e.Tail#1 as range 20
      //DEBUG: e.0#0: 18
      //DEBUG: e.Tail#1: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Closure/4 HalfReuse: </7 HalfReuse: & RemovePos-Body*3/13 AsIs: e.0#0/18 HalfReuse: >/8 } )/22 </23 & Map@3/24 Tile{ AsIs: e.Tail#1/20 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z3]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Closure]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_RemovePosm_Body_D3]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[0], context[22] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@3/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemovePos-Expr\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Expr_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & Map@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@4/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.new#3/13 t.new#4/14 e.new#5/11 )/8 e.new#6/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#6 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.new#5 as range 11
      do {
        // </0 & Map@4/4 (/7 # Function/13 t.new#7/14 s.new#8/20 (/23 e.new#9/21 )/24 e.new#10/16 )/8 e.new#11/18 >/1
        context[16] = context[11];
        context[17] = context[12];
        context[18] = context[9];
        context[19] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Function], context[13] ) )
          continue;
        // closed e.new#11 as range 18
        if( ! refalrts::svar_left( context[20], context[16], context[17] ) )
          continue;
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[16], context[17] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        // closed e.new#9 as range 21
        // closed e.new#10 as range 16
        do {
          // </0 & Map@4/4 (/7 # Function/13 t.new#12/14 s.new#13/20 (/23 e.new#16/25 )/24 s.new#14/31 e.new#15/27 )/8 e.new#17/29 >/1
          context[25] = context[21];
          context[26] = context[22];
          context[27] = context[16];
          context[28] = context[17];
          context[29] = context[18];
          context[30] = context[19];
          // closed e.new#16 as range 25
          // closed e.new#17 as range 29
          if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
            continue;
          // closed e.new#15 as range 27
          do {
            // </0 & Map@4/4 (/7 # Function/13 t.0#0/14 s.ScopeClass#2/20 (/23 e.4#0/32 )/24 # Sentences/31 e.#0/34 )/8 e.Tail#1/36 >/1
            context[32] = context[25];
            context[33] = context[26];
            context[34] = context[27];
            context[35] = context[28];
            context[36] = context[29];
            context[37] = context[30];
            if( ! refalrts::ident_term( identifiers[ident_Sentences], context[31] ) )
              continue;
            // closed e.4#0 as range 32
            // closed e.#0 as range 34
            // closed e.Tail#1 as range 36
            //DEBUG: t.0#0: 14
            //DEBUG: s.ScopeClass#2: 20
            //DEBUG: e.4#0: 32
            //DEBUG: e.#0: 34
            //DEBUG: e.Tail#1: 36

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 } Tile{ AsIs: s.ScopeClass#2/20 AsIs: (/23 AsIs: e.4#0/32 AsIs: )/24 AsIs: # Sentences/31 } Tile{ AsIs: </0 Reuse: & Map@1/4 } Tile{ AsIs: e.#0/34 } >/38 )/39 </40 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/36 AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[38]);
            refalrts::alloc_close_bracket(vm, context[39]);
            refalrts::alloc_open_call(vm, context[40]);
            refalrts::update_name(context[4], functions[efunc_gen_Map_Z1]);
            refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[40] );
            refalrts::link_brackets( context[7], context[39] );
            refalrts::push_stack( vm, context[38] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[23], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[38], context[40] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[20], context[31] );
            res = refalrts::splice_evar( res, context[7], context[13] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Map@4/4 (/7 # Function/13 t.0#0/14 s.ScopeClass#2/20 (/23 e.4#0/32 )/24 # NativeBody/31 t.1#0/38 e.0#0/34 )/8 e.Tail#1/36 >/1
            context[32] = context[25];
            context[33] = context[26];
            context[34] = context[27];
            context[35] = context[28];
            context[36] = context[29];
            context[37] = context[30];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[31] ) )
              continue;
            // closed e.4#0 as range 32
            // closed e.Tail#1 as range 36
            context[39] = refalrts::tvar_left( context[38], context[34], context[35] );
            if( ! context[39] )
              continue;
            // closed e.0#0 as range 34
            //DEBUG: t.0#0: 14
            //DEBUG: s.ScopeClass#2: 20
            //DEBUG: e.4#0: 32
            //DEBUG: e.Tail#1: 36
            //DEBUG: t.1#0: 38
            //DEBUG: e.0#0: 34

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 } Tile{ AsIs: s.ScopeClass#2/20 AsIs: (/23 AsIs: e.4#0/32 AsIs: )/24 AsIs: # NativeBody/31 AsIs: t.1#0/38 AsIs: e.0#0/34 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.Tail#1/36 } Tile{ AsIs: >/1 ]] }
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[23], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[36], context[37] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[20], context[8] );
            res = refalrts::splice_evar( res, context[7], context[13] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@4/4 (/7 # Function/13 t.0#0/14 s.ScopeClass#2/20 (/23 e.4#0/32 )/24 # Metatable/31 e.#0/34 )/8 e.Tail#1/36 >/1
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          context[35] = context[28];
          context[36] = context[29];
          context[37] = context[30];
          if( ! refalrts::ident_term( identifiers[ident_Metatable], context[31] ) )
            continue;
          // closed e.4#0 as range 32
          // closed e.#0 as range 34
          // closed e.Tail#1 as range 36
          //DEBUG: t.0#0: 14
          //DEBUG: s.ScopeClass#2: 20
          //DEBUG: e.4#0: 32
          //DEBUG: e.#0: 34
          //DEBUG: e.Tail#1: 36

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 } Tile{ AsIs: s.ScopeClass#2/20 AsIs: (/23 AsIs: e.4#0/32 AsIs: )/24 AsIs: # Metatable/31 } Tile{ AsIs: </0 Reuse: & Map@2/4 } Tile{ AsIs: e.#0/34 } >/38 )/39 </40 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/36 AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[40] );
          refalrts::link_brackets( context[7], context[39] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[20], context[31] );
          res = refalrts::splice_evar( res, context[7], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@4/4 (/7 # Function/13 t.0#0/14 s.ScopeClass#2/20 (/23 e.4#0/25 )/24 e.3#0/27 )/8 e.Tail#1/29 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[16];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[19];
        // closed e.4#0 as range 25
        // closed e.3#0 as range 27
        // closed e.Tail#1 as range 29
        //DEBUG: t.0#0: 14
        //DEBUG: s.ScopeClass#2: 20
        //DEBUG: e.4#0: 25
        //DEBUG: e.3#0: 27
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 } Tile{ AsIs: s.ScopeClass#2/20 AsIs: (/23 AsIs: e.4#0/25 AsIs: )/24 } Tile{ AsIs: </0 Reuse: & RemovePos-Body*3/4 } Tile{ AsIs: e.3#0/27 } >/31 )/32 </33 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/29 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_D3]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[7], context[32] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[7], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 (/7 # Ident/13 t.0#0/14 e.1#0/16 )/8 e.Tail#1/18 >/1
        context[16] = context[11];
        context[17] = context[12];
        context[18] = context[9];
        context[19] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[13] ) )
          continue;
        // closed e.1#0 as range 16
        // closed e.Tail#1 as range 18
        //DEBUG: t.0#0: 14
        //DEBUG: e.1#0: 16
        //DEBUG: e.Tail#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Ident/13 } Tile{ AsIs: e.1#0/16 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/18 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[7], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 (/7 # NativeBlock/13 t.0#0/14 e.1#0/16 )/8 e.Tail#1/18 >/1
        context[16] = context[11];
        context[17] = context[12];
        context[18] = context[9];
        context[19] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[13] ) )
          continue;
        // closed e.1#0 as range 16
        // closed e.Tail#1 as range 18
        //DEBUG: t.0#0: 14
        //DEBUG: e.1#0: 16
        //DEBUG: e.Tail#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # NativeBlock/13 AsIs: t.0#0/14 AsIs: e.1#0/16 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[18], context[19] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@4/4 (/7 s.new#7/13 t.new#8/14 t.new#9/20 e.new#10/16 )/8 e.new#11/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[9];
      context[19] = context[10];
      // closed e.new#11 as range 18
      context[21] = refalrts::tvar_left( context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      // closed e.new#10 as range 16
      do {
        // </0 & Map@4/4 (/7 # Spec/13 t.0#0/14 (/20 e.3#0/26 )/21 e.2#0/22 )/8 e.Tail#1/24 >/1
        context[22] = context[16];
        context[23] = context[17];
        context[24] = context[18];
        context[25] = context[19];
        context[26] = 0;
        context[27] = 0;
        if( ! refalrts::brackets_term( context[26], context[27], context[20] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Spec], context[13] ) )
          continue;
        // closed e.3#0 as range 26
        // closed e.2#0 as range 22
        // closed e.Tail#1 as range 24
        //DEBUG: t.0#0: 14
        //DEBUG: e.3#0: 26
        //DEBUG: e.2#0: 22
        //DEBUG: e.Tail#1: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Spec/13 } Tile{ AsIs: (/20 AsIs: e.3#0/26 AsIs: )/21 } Tile{ AsIs: </0 Reuse: & Map@3/4 } Tile{ AsIs: e.2#0/22 } >/28 )/29 </30 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/24 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[7], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[28], context[30] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[7], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@4/4 (/7 s.EnumSwapDeclaration#2/13 t.0#0/14 s.ScopeClass#2/20 e.2#0/22 )/8 e.Tail#1/24 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      if( ! refalrts::svar_term( context[20], context[20] ) )
        continue;
      // closed e.2#0 as range 22
      // closed e.Tail#1 as range 24
      //DEBUG: t.0#0: 14
      //DEBUG: s.ScopeClass#2: 20
      //DEBUG: s.EnumSwapDeclaration#2: 13
      //DEBUG: e.2#0: 22
      //DEBUG: e.Tail#1: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0#0/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.EnumSwapDeclaration#2/13 } Tile{ AsIs: s.ScopeClass#2/20 } Tile{ AsIs: e.2#0/22 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/24 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[7], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-RemovePos\1*5/4 AsIs: t.Next#1/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_Passm_RemovePos_L1D5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & Pass-RemovePos\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemovePos_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Map@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@5/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@5/4 (/7 e.new#3/11 )/8 e.new#4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#3 as range 11
      // closed e.new#4 as range 9
      do {
        // </0 & Map@5/4 (/7 s.new#5/17 e.new#6/13 )/8 e.new#7/15 >/1
        context[13] = context[11];
        context[14] = context[12];
        context[15] = context[9];
        context[16] = context[10];
        // closed e.new#7 as range 15
        if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
          continue;
        // closed e.new#6 as range 13
        do {
          // </0 & Map@5/4 (/7 # Sentences/17 e.0#0/18 )/8 e.Tail#1/20 >/1
          context[18] = context[13];
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[17] ) )
            continue;
          // closed e.0#0 as range 18
          // closed e.Tail#1 as range 20
          //DEBUG: e.0#0: 18
          //DEBUG: e.Tail#1: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Sentences/4 HalfReuse: </7 HalfReuse: & Map@1/17 AsIs: e.0#0/18 HalfReuse: >/8 } )/22 </23 & Map@5/24 Tile{ AsIs: e.Tail#1/20 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[22]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z5]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_Sentences]);
          refalrts::reinit_open_call(context[7]);
          refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z1]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::link_brackets( context[0], context[22] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[7] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[20], context[21] );
          res = refalrts::splice_evar( res, context[22], context[24] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@5/4 (/7 # NativeBody/17 t.0#0/22 e.1#0/18 )/8 e.Tail#1/20 >/1
          context[18] = context[13];
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[17] ) )
            continue;
          // closed e.Tail#1 as range 20
          context[23] = refalrts::tvar_left( context[22], context[18], context[19] );
          if( ! context[23] )
            continue;
          // closed e.1#0 as range 18
          //DEBUG: e.Tail#1: 20
          //DEBUG: t.0#0: 22
          //DEBUG: e.1#0: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # NativeBody/17 AsIs: t.0#0/22 AsIs: e.1#0/18 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@5/4 } Tile{ AsIs: e.Tail#1/20 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[20], context[21] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@5/4 (/7 # Metatable/17 e.0#0/18 )/8 e.Tail#1/20 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[17] ) )
          continue;
        // closed e.0#0 as range 18
        // closed e.Tail#1 as range 20
        //DEBUG: e.0#0: 18
        //DEBUG: e.Tail#1: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Metatable/4 HalfReuse: </7 HalfReuse: & Map@2/17 AsIs: e.0#0/18 HalfReuse: >/8 } )/22 </23 & Map@5/24 Tile{ AsIs: e.Tail#1/20 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z5]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Metatable]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z2]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::link_brackets( context[0], context[22] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[22], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@5/4 (/7 e.#0/13 )/8 e.Tail#1/15 >/1
      context[13] = context[11];
      context[14] = context[12];
      context[15] = context[9];
      context[16] = context[10];
      // closed e.#0 as range 13
      // closed e.Tail#1 as range 15
      //DEBUG: e.#0: 13
      //DEBUG: e.Tail#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: </4 HalfReuse: & RemovePos-Body*3/7 AsIs: e.#0/13 HalfReuse: >/8 } )/17 </18 & Map@5/19 Tile{ AsIs: e.Tail#1/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z5]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_RemovePosm_Body_D3]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[0], context[17] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemovePos-Blocks\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Blocks_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemovePos-Blocks\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Blocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Map@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@6/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@6/4 (/7 s.new#3/25 (/23 e.new#4/21 )/24 (/19 e.new#5/17 )/20 (/15 e.new#6/13 )/16 )/8 e.new#7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_right( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.new#4 as range 21
      // closed e.new#5 as range 17
      // closed e.new#6 as range 13
      // closed e.new#7 as range 9
      if( ! refalrts::svar_left( context[25], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      do {
        // </0 & Map@6/4 (/7 # Assign/25 (/23 e.2#0/26 )/24 (/19 e.4#0/28 )/20 (/15 e.6#0/30 )/16 )/8 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[13];
        context[31] = context[14];
        context[32] = context[9];
        context[33] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Assign], context[25] ) )
          continue;
        // closed e.2#0 as range 26
        // closed e.4#0 as range 28
        // closed e.6#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.2#0: 26
        //DEBUG: e.4#0: 28
        //DEBUG: e.6#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Assign/4 AsIs: (/7 HalfReuse: </25 HalfReuse: & Map@3/23 AsIs: e.2#0/26 HalfReuse: >/24 HalfReuse: )/19 } (/34 </35 & Map@5/36 Tile{ AsIs: e.4#0/28 } >/37 Tile{ AsIs: )/20 AsIs: (/15 } </38 & Map@3/39 Tile{ AsIs: e.6#0/30 } >/40 )/41 )/42 Tile{ HalfReuse: </16 HalfReuse: & Map@6/8 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z5]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z3]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[23], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_close_call(context[24]);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[0], context[42] );
        refalrts::link_brackets( context[15], context[41] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[34], context[20] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[7], context[19] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[40], context[42] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[20], context[15] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[34], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 # Condition/25 (/23 e.2#0/26 )/24 (/19 e.4#0/28 )/20 (/15 e.6#0/30 )/16 )/8 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[13];
        context[31] = context[14];
        context[32] = context[9];
        context[33] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Condition], context[25] ) )
          continue;
        // closed e.2#0 as range 26
        // closed e.4#0 as range 28
        // closed e.6#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.2#0: 26
        //DEBUG: e.4#0: 28
        //DEBUG: e.6#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 HalfReuse: </25 HalfReuse: & Map@3/23 AsIs: e.2#0/26 HalfReuse: >/24 HalfReuse: )/19 } (/34 </35 & Map@5/36 Tile{ AsIs: e.4#0/28 } >/37 Tile{ AsIs: )/20 AsIs: (/15 } </38 & Map@3/39 Tile{ AsIs: e.6#0/30 } >/40 )/41 )/42 Tile{ HalfReuse: </16 HalfReuse: & Map@6/8 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z5]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z3]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[23], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_close_call(context[24]);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[0], context[42] );
        refalrts::link_brackets( context[15], context[41] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[34], context[20] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[7], context[19] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[40], context[42] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[20], context[15] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[34], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@6/4 (/7 s.ChainType#3/25 (/23 e.2#0/26 )/24 (/19 e.4#0/28 )/20 (/15 e.6#0/30 )/16 )/8 e.Tail#1/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[13];
      context[31] = context[14];
      context[32] = context[9];
      context[33] = context[10];
      // closed e.2#0 as range 26
      // closed e.4#0 as range 28
      // closed e.6#0 as range 30
      // closed e.Tail#1 as range 32
      //DEBUG: s.ChainType#3: 25
      //DEBUG: e.2#0: 26
      //DEBUG: e.4#0: 28
      //DEBUG: e.6#0: 30
      //DEBUG: e.Tail#1: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & RemovePos-Body$1\1\1=1/7 AsIs: s.ChainType#3/25 AsIs: (/23 AsIs: e.2#0/26 AsIs: )/24 AsIs: (/19 AsIs: e.4#0/28 AsIs: )/20 AsIs: (/15 AsIs: e.6#0/30 AsIs: )/16 HalfReuse: </8 } & AssignOrCondition*2/34 s.ChainType#3/25/35 >/36 >/37 Tile{ AsIs: </0 } & Map@6/38 Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_AssignOrCondition_D2]);
      refalrts::copy_stvar(vm, context[35], context[25]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_RemovePosm_Body_S1L1L1A1]);
      refalrts::reinit_open_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[34], context[37] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemovePos-Body$1\1\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@6/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z6]);
    refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S1L1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemovePos-Body$1\1\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemovePosm_Body_S1L1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@7/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@7/4 (/7 e.Entries#2/9 )/8 t.Next#1/13 e.Tail#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Entries#2 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Tail#1 as range 11
    //DEBUG: e.Entries#2: 9
    //DEBUG: t.Next#1: 13
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Pass-AttachEntries\1/4 AsIs: (/7 AsIs: e.Entries#2/9 AsIs: )/8 AsIs: t.Next#1/13 } >/15 </16 & Map@7/17 (/18 e.Entries#2/9/19 )/21 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z7]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Passm_AttachEntries_L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 (/7 e.Entries#2/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Entries#2 as range 9
    //DEBUG: e.Entries#2: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 (/7 e.Entries#2/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 (/7 e.Entries#2/5 )/8 e.items#0/2 >/1
  // closed e.Entries#2 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.Entries#2: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & Pass-AttachEntries\1@0/4 AsIs: (/7 AsIs: e.Entries#2/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_AttachEntries_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new#8/21 )/6 (/9 e.new#11/17 )/10 t.new#9/15 e.new#10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#11 as range 17
      // closed e.new#10 as range 19
      do {
        // </0 & DoMapAccum@1/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 (/15 # Entry/31 # GN-Entry/32 e.2#0/29 )/16 e.Tail#1/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Entry], context[29], context[30] );
        if( ! context[31] )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_GNm_Entry], context[29], context[30] );
        if( ! context[32] )
          continue;
        // closed e.#0 as range 23
        // closed e.Scanned#1 as range 25
        // closed e.2#0 as range 29
        // closed e.Tail#1 as range 27
        //DEBUG: e.#0: 23
        //DEBUG: e.Scanned#1: 25
        //DEBUG: e.2#0: 29
        //DEBUG: e.Tail#1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} # Entry/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.#0/23 HalfReuse: (/6 } Tile{ AsIs: e.2#0/29 } Tile{ HalfReuse: )/32 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/27 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[6]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e.#0/23 )/6 (/9 e.Scanned#1/25 )/10 t.Next#1/15 e.Tail#1/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e.#0 as range 23
      // closed e.Scanned#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.Next#1: 15
      //DEBUG: e.#0: 23
      //DEBUG: e.Scanned#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.#0/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: t.Next#1/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & Pass-AttachEntries=1\1*2/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Passm_AttachEntries_A1L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Pass-AttachEntries=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_AttachEntries_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@2/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & Pass-RemoveRedundantDriveInlineIntrinsic=2\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Pass-RemoveRedundantDriveInlineIntrinsic=2\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@3/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & Pass-RemoveRedundantDriveInlineIntrinsic=1\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Pass-RemoveRedundantDriveInlineIntrinsic=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@4/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@4/4 (/5 e.#0/21 )/6 (/9 e.Scanned#1/17 )/10 (/15 # TkVariable/25 s.Mode#2/26 '_'/27 e.3#0/23 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_TkVariable], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e.#0 as range 21
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      context[27] = refalrts::char_left( '_', context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.3#0 as range 23
      //DEBUG: e.#0: 21
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.Mode#2: 26
      //DEBUG: e.3#0: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode#2/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoMapAccum$1=1@4/29 (/30 Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } )/31 Tile{ HalfReuse: </25 } & EnumerateVars-Expr\1$1=1/32 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e.#0/21 AsIs: )/6 HalfReuse: s.Mode2 #26/9 } Tile{ AsIs: '_'/27 AsIs: e.3#0/23 HalfReuse: 0/16 } >/33 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_S1A1Z4]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_EnumerateVarsm_Expr_L1S1A1]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_call(context[25]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::reinit_number(context[16], 0UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[31] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[27], context[16] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & EnumerateVars-Expr\1@1*1/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_EnumerateVarsm_Expr_L1Z1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & EnumerateVars-Expr\1@0/14 Tile{ HalfReuse: 0/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Map@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@8/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@8/4 (/7 (/15 e.1#0/13 )/16 e.4#0/11 (/23 e.5#0/21 )/24 (/19 e.3#0/17 )/20 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.1#0 as range 13
      // closed e.4#0 as range 11
      // closed e.5#0 as range 21
      // closed e.3#0 as range 17
      // closed e.Tail#1 as range 9
      //DEBUG: e.1#0: 13
      //DEBUG: e.4#0: 11
      //DEBUG: e.5#0: 21
      //DEBUG: e.3#0: 17
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1=1@1/4 AsIs: (/7 } Tile{ AsIs: e.3#0/17 } )/25 Tile{ AsIs: (/23 AsIs: e.5#0/21 AsIs: )/24 AsIs: (/19 } Tile{ AsIs: e.4#0/11 } )/26 </27 & DoMapAccum@17/28 (/29 )/30 (/31 Tile{ HalfReuse: )/15 AsIs: e.1#0/13 HalfReuse: >/16 } >/32 Tile{ HalfReuse: </20 HalfReuse: & Map@8/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoMapAccum_Z17]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1Z1]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[31], context[15] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[19], context[26] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[7], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[31] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[23], context[19] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1*1/4 } 1/11 (/12 )/13 Tile{ AsIs: t.Next#1/7 } >/14 </15 & Map@8/16 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[11], 1UL);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Map_Z8]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[14], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & EnumerateVars-Body$1\1@0/8 1/9 (/10 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_EnumerateVarsm_Body_S1L1Z0]);
  refalrts::alloc_number(vm, context[9], 1UL);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[10], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Map@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@9/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@9/4 (/7 s.new#3/13 t.new#4/14 e.new#5/11 )/8 e.new#6/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#6 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.new#5 as range 11
      do {
        // </0 & Map@9/4 (/7 # Spec/13 t.0#0/14 e.1#0/16 )/8 e.Tail#1/18 >/1
        context[16] = context[11];
        context[17] = context[12];
        context[18] = context[9];
        context[19] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Spec], context[13] ) )
          continue;
        // closed e.1#0 as range 16
        // closed e.Tail#1 as range 18
        //DEBUG: t.0#0: 14
        //DEBUG: e.1#0: 16
        //DEBUG: e.Tail#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </20 & Pass-EnumerateVariables\1$1=1/21 Tile{ AsIs: t.0#0/14 } Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/7 HalfReuse: )/13 } (/22 )/23 Tile{ AsIs: e.1#0/16 } >/24 >/25 </26 Tile{ HalfReuse: & Map@9/8 AsIs: e.Tail#1/18 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_gen_Passm_EnumerateVariables_L1S1A1]);
        refalrts::alloc_open_bracket(vm, context[22]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
        refalrts::reinit_close_bracket(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::link_brackets( context[7], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@9/4 (/7 # Function/13 s.new#7/14 (/22 e.new#8/20 )/23 e.new#9/16 )/8 e.new#10/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[9];
      context[19] = context[10];
      if( ! refalrts::svar_term( context[14], context[14] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Function], context[13] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      // closed e.new#8 as range 20
      // closed e.new#9 as range 16
      // closed e.new#10 as range 18
      do {
        // </0 & Map@9/4 (/7 # Function/13 s.new#11/14 (/22 e.new#14/24 )/23 s.new#12/30 e.new#13/26 )/8 e.new#15/28 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[16];
        context[27] = context[17];
        context[28] = context[18];
        context[29] = context[19];
        // closed e.new#14 as range 24
        // closed e.new#15 as range 28
        if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
          continue;
        // closed e.new#13 as range 26
        do {
          // </0 & Map@9/4 (/7 # Function/13 s.ScopeClass#2/14 (/22 e.3#0/31 )/23 # Sentences/30 e.#0/33 )/8 e.Tail#1/35 >/1
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          context[35] = context[28];
          context[36] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[30] ) )
            continue;
          // closed e.3#0 as range 31
          // closed e.#0 as range 33
          // closed e.Tail#1 as range 35
          //DEBUG: s.ScopeClass#2: 14
          //DEBUG: e.3#0: 31
          //DEBUG: e.#0: 33
          //DEBUG: e.Tail#1: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/22 AsIs: e.3#0/31 AsIs: )/23 AsIs: # Sentences/30 } Tile{ AsIs: </0 Reuse: & Map@8/4 } Tile{ AsIs: e.#0/33 } >/37 )/38 </39 Tile{ HalfReuse: & Map@9/8 AsIs: e.Tail#1/35 AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_close_bracket(vm, context[38]);
          refalrts::alloc_open_call(vm, context[39]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z9]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[39] );
          refalrts::link_brackets( context[7], context[38] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@9/4 (/7 # Function/13 s.ScopeClass#2/14 (/22 e.3#0/31 )/23 # NativeBody/30 t.0#0/37 e.0#0/33 )/8 e.Tail#1/35 >/1
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          context[35] = context[28];
          context[36] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[30] ) )
            continue;
          // closed e.3#0 as range 31
          // closed e.Tail#1 as range 35
          context[38] = refalrts::tvar_left( context[37], context[33], context[34] );
          if( ! context[38] )
            continue;
          // closed e.0#0 as range 33
          //DEBUG: s.ScopeClass#2: 14
          //DEBUG: e.3#0: 31
          //DEBUG: e.Tail#1: 35
          //DEBUG: t.0#0: 37
          //DEBUG: e.0#0: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/22 AsIs: e.3#0/31 AsIs: )/23 AsIs: # NativeBody/30 AsIs: t.0#0/37 AsIs: e.0#0/33 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@9/4 } Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@9/4 (/7 # Function/13 s.ScopeClass#2/14 (/22 e.3#0/31 )/23 # Metatable/30 e.#0/33 )/8 e.Tail#1/35 >/1
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[28];
        context[36] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[30] ) )
          continue;
        // closed e.3#0 as range 31
        // closed e.#0 as range 33
        // closed e.Tail#1 as range 35
        //DEBUG: s.ScopeClass#2: 14
        //DEBUG: e.3#0: 31
        //DEBUG: e.#0: 33
        //DEBUG: e.Tail#1: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/22 AsIs: e.3#0/31 AsIs: )/23 AsIs: # Metatable/30 AsIs: e.#0/33 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@9/4 } Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@9/4 (/7 # Function/13 s.ScopeClass#2/14 (/22 e.3#0/24 )/23 e.2#0/26 )/8 e.Tail#1/28 >/1
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[16];
      context[27] = context[17];
      context[28] = context[18];
      context[29] = context[19];
      // closed e.3#0 as range 24
      // closed e.2#0 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.3#0: 24
      //DEBUG: e.2#0: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/22 AsIs: e.3#0/24 AsIs: )/23 } Tile{ AsIs: </0 Reuse: & EnumerateVars-Body*3/4 } 1/30 (/31 )/32 Tile{ AsIs: e.2#0/26 } >/33 )/34 </35 Tile{ HalfReuse: & Map@9/8 AsIs: e.Tail#1/28 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[30], 1UL);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[7], context[34] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[33], context[35] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@9/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & Pass-EnumerateVariables\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_EnumerateVariables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@5/4 s.new#1/5 t.new#2/6 (/10 e.new#3/8 )/11 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new#3 as range 8
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@5/4 s.new#5/5 t.new#6/6 (/10 e.new#9/12 )/11 t.new#7/16 e.new#8/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new#9 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.new#8 as range 14
    do {
      // </0 & DoMapAccum@5/4 s.Depth#4/5 (/6 e.#0/22 )/7 (/10 e.Scanned#1/18 )/11 (/16 # TkVariable/26 s.Mode#2/27 '_'/28 e.3#0/24 )/17 e.Tail#1/20 >/1
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[6] ) )
        continue;
      context[24] = 0;
      context[25] = 0;
      if( ! refalrts::brackets_term( context[24], context[25], context[16] ) )
        continue;
      context[26] = refalrts::ident_left( identifiers[ident_TkVariable], context[24], context[25] );
      if( ! context[26] )
        continue;
      // closed e.#0 as range 22
      // closed e.Scanned#1 as range 18
      // closed e.Tail#1 as range 20
      if( ! refalrts::svar_left( context[27], context[24], context[25] ) )
        continue;
      context[28] = refalrts::char_left( '_', context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.3#0 as range 24
      //DEBUG: s.Depth#4: 5
      //DEBUG: e.#0: 22
      //DEBUG: e.Scanned#1: 18
      //DEBUG: e.Tail#1: 20
      //DEBUG: s.Mode#2: 27
      //DEBUG: e.3#0: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 AsIs: s.Depth#4/5 AsIs: (/6 } Tile{ AsIs: e.Scanned#1/18 } Tile{ AsIs: )/7 AsIs: (/10 } Tile{ AsIs: e.Tail#1/20 } )/29 </30 & EnumerateVars-Expr\1$1=1/31 </32 Tile{ HalfReuse: & NewVarName/11 AsIs: (/16 } Tile{ AsIs: e.#0/22 } Tile{ HalfReuse: )/26 AsIs: s.Mode#2/27 AsIs: '_'/28 AsIs: e.3#0/24 HalfReuse: s.Depth4 #5/17 } >/33 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_EnumerateVarsm_Expr_L1S1A1]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
      refalrts::reinit_name(context[11], functions[efunc_NewVarName]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::reinit_svar( context[17], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[16], context[26] );
      refalrts::link_brackets( context[10], context[29] );
      refalrts::link_brackets( context[6], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[26], context[17] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@5/4 s.Depth#4/5 t.Acc#1/6 (/10 e.Scanned#1/18 )/11 t.Next#1/16 e.Tail#1/20 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    // closed e.Scanned#1 as range 18
    // closed e.Tail#1 as range 20
    //DEBUG: t.Acc#1: 6
    //DEBUG: t.Next#1: 16
    //DEBUG: s.Depth#4: 5
    //DEBUG: e.Scanned#1: 18
    //DEBUG: e.Tail#1: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 AsIs: s.Depth#4/5 } Tile{ AsIs: (/10 AsIs: e.Scanned#1/18 AsIs: )/11 } (/22 Tile{ AsIs: e.Tail#1/20 } )/23 </24 & EnumerateVars-Expr\1*1/25 s.Depth#4/5/26 Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: t.Next#1/16 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_EnumerateVarsm_Expr_L1D1]);
    refalrts::copy_stvar(vm, context[26], context[5]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[23], context[26] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 s.Depth#4/5 t.Acc#1/6 (/10 e.Scanned#1/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 12
    //DEBUG: t.Acc#1: 6
    //DEBUG: s.Depth#4: 5
    //DEBUG: e.Scanned#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 s.Depth#4/5 {REMOVED TILE} (/10 {REMOVED TILE} )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: e.Scanned#1/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 s.Depth#4/5 t.acc#0/6 (/10 e.scanned#0/8 )/11 e.items#0/2 >/1
  // closed e.scanned#0 as range 8
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 6
  //DEBUG: s.Depth#4: 5
  //DEBUG: e.scanned#0: 8
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } [*]/12 & EnumerateVars-Expr\1@0/13 Tile{ AsIs: s.Depth#4/5 } {*}/14 Tile{ AsIs: t.acc#0/6 AsIs: (/10 AsIs: e.scanned#0/8 AsIs: )/11 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & Map@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@10/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 2
  do {
    // </0 & Map@10/4 s.new#4/5 (/8 e.new#7/10 )/9 t.new#5/14 e.new#6/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new#7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new#6 as range 12
    do {
      // </0 & Map@10/4 s.Depth#1/5 (/8 e.ScopeVars#1/16 )/9 (/14 (/24 e.1#0/22 )/25 e.4#0/20 (/32 e.5#0/30 )/33 (/28 e.3#0/26 )/29 )/15 e.Tail#1/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_right( context[26], context[27], context[20], context[21] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[20], context[21] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      // closed e.ScopeVars#1 as range 16
      // closed e.1#0 as range 22
      // closed e.4#0 as range 20
      // closed e.5#0 as range 30
      // closed e.3#0 as range 26
      // closed e.Tail#1 as range 18
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#1: 16
      //DEBUG: e.1#0: 22
      //DEBUG: e.4#0: 20
      //DEBUG: e.5#0: 30
      //DEBUG: e.3#0: 26
      //DEBUG: e.Tail#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </34 & EnumerateVars-Body$1\1=1/35 (/36 Tile{ AsIs: e.3#0/26 } )/37 Tile{ AsIs: (/32 AsIs: e.5#0/30 AsIs: )/33 HalfReuse: s.Depth1 #5/28 } (/38 Tile{ AsIs: e.4#0/20 } Tile{ AsIs: )/29 } Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/16 AsIs: )/9 AsIs: (/14 HalfReuse: )/24 AsIs: e.1#0/22 HalfReuse: >/25 } >/39 </40 & Map@10/41 s.Depth#1/5/42 (/43 e.ScopeVars#1/16/44 Tile{ AsIs: )/15 AsIs: e.Tail#1/18 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_Map_Z10]);
      refalrts::copy_stvar(vm, context[42], context[5]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[16], context[17]);
      refalrts::reinit_svar( context[28], context[5] );
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[24]);
      refalrts::reinit_close_call(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[43], context[15] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[24] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[38], context[29] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[39], context[43] );
      res = refalrts::splice_evar( res, context[0], context[25] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[32], context[28] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 s.Depth#1/5 (/8 e.ScopeVars#1/16 )/9 t.Next#1/14 e.Tail#1/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.ScopeVars#1 as range 16
    // closed e.Tail#1 as range 18
    //DEBUG: t.Next#1: 14
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 16
    //DEBUG: e.Tail#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1*1/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/16 AsIs: )/9 AsIs: t.Next#1/14 } >/20 </21 & Map@10/22 s.Depth#1/5/23 (/24 e.ScopeVars#1/16/25 )/27 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z10]);
    refalrts::copy_stvar(vm, context[23], context[5]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[20], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 s.Depth#1/5 (/8 e.ScopeVars#1/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 10
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 s.Depth#1/5 (/8 e.ScopeVars#1/10 )/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 s.Depth#1/5 (/8 e.ScopeVars#1/6 )/9 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.items#0 as range 2
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 Tile{ HalfReuse: [*]/0 Reuse: & EnumerateVars-Body$1\1@0/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Map@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@11/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 2
  do {
    // </0 & Map@11/4 s.new#4/5 (/8 e.new#7/10 )/9 t.new#5/14 e.new#6/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new#7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new#6 as range 12
    do {
      // </0 & Map@11/4 s.new#8/5 (/8 e.new#11/16 )/9 (/14 e.new#9/20 )/15 e.new#10/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      // closed e.new#11 as range 16
      // closed e.new#9 as range 20
      // closed e.new#10 as range 18
      do {
        // </0 & Map@11/4 s.new#12/5 (/8 e.new#16/22 )/9 (/14 s.new#13/28 e.new#14/24 )/15 e.new#15/26 >/1
        context[22] = context[16];
        context[23] = context[17];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[18];
        context[27] = context[19];
        // closed e.new#16 as range 22
        // closed e.new#15 as range 26
        if( ! refalrts::svar_left( context[28], context[24], context[25] ) )
          continue;
        // closed e.new#14 as range 24
        do {
          // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/29 )/9 (/14 # Sentences/28 e.0#0/31 )/15 e.Tail#1/33 >/1
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[28] ) )
            continue;
          // closed e.ScopeVars#1 as range 29
          // closed e.0#0 as range 31
          // closed e.Tail#1 as range 33
          //DEBUG: s.Depth#1: 5
          //DEBUG: e.ScopeVars#1: 29
          //DEBUG: e.0#0: 31
          //DEBUG: e.Tail#1: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # Sentences/28 } </35 & Map@10/36 s.Depth#1/5/37 (/38 e.ScopeVars#1/29/39 Tile{ AsIs: )/15 } Tile{ AsIs: e.0#0/31 } >/41 )/42 Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/29 AsIs: )/9 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z10]);
          refalrts::copy_stvar(vm, context[37], context[5]);
          refalrts::alloc_open_bracket(vm, context[38]);
          refalrts::copy_evar(vm, context[39], context[40], context[29], context[30]);
          refalrts::alloc_close_call(vm, context[41]);
          refalrts::alloc_close_bracket(vm, context[42]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[14], context[42] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[38], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_evar( res, context[14], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/29 )/9 (/14 # NativeBody/28 t.0#0/35 e.1#0/31 )/15 e.Tail#1/33 >/1
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[28] ) )
            continue;
          // closed e.ScopeVars#1 as range 29
          // closed e.Tail#1 as range 33
          context[36] = refalrts::tvar_left( context[35], context[31], context[32] );
          if( ! context[36] )
            continue;
          // closed e.1#0 as range 31
          //DEBUG: s.Depth#1: 5
          //DEBUG: e.ScopeVars#1: 29
          //DEBUG: e.Tail#1: 33
          //DEBUG: t.0#0: 35
          //DEBUG: e.1#0: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # NativeBody/28 AsIs: t.0#0/35 AsIs: e.1#0/31 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/29 AsIs: )/9 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[14], context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/29 )/9 (/14 # Metatable/28 e.0#0/31 )/15 e.Tail#1/33 >/1
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[28] ) )
          continue;
        // closed e.ScopeVars#1 as range 29
        // closed e.0#0 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: s.Depth#1: 5
        //DEBUG: e.ScopeVars#1: 29
        //DEBUG: e.0#0: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # Metatable/28 AsIs: e.0#0/31 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/29 AsIs: )/9 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/22 )/9 (/14 e.#0/24 )/15 e.Tail#1/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[18];
      context[27] = context[19];
      // closed e.ScopeVars#1 as range 22
      // closed e.#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#1: 22
      //DEBUG: e.#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/28 </29 & EnumerateVars-Body*3/30 s.Depth#1/5/31 (/32 e.ScopeVars#1/22/33 Tile{ HalfReuse: )/14 AsIs: e.#0/24 HalfReuse: >/15 } )/35 Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/22 AsIs: )/9 } Tile{ AsIs: e.Tail#1/26 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::copy_stvar(vm, context[31], context[5]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_close_bracket(context[14]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[28], context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[32], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[28], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/16 )/9 t.Next#1/14 e.Tail#1/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.ScopeVars#1 as range 16
    // closed e.Tail#1 as range 18
    //DEBUG: t.Next#1: 14
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 16
    //DEBUG: e.Tail#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Blocks\1*1/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/16 AsIs: )/9 AsIs: t.Next#1/14 } >/20 </21 & Map@11/22 s.Depth#1/5/23 (/24 e.ScopeVars#1/16/25 )/27 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z11]);
    refalrts::copy_stvar(vm, context[23], context[5]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Blocks_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[20], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 10
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/10 )/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 s.Depth#1/5 (/8 e.ScopeVars#1/6 )/9 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.items#0 as range 2
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 Tile{ HalfReuse: [*]/0 Reuse: & EnumerateVars-Blocks\1@0/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Blocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 78 elems
  refalrts::Iter context[78];
  refalrts::zeros( context, 78 );
  // </0 & EnumerateVars-Assignments@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments@2/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 (/25 e.new#7/23 )/26 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new#7 as range 23
  // closed e.new#8 as range 2
  do {
    // </0 & EnumerateVars-Assignments@2/4 (/7 e.RAssignments0#1/27 )/8 s.ChainType0#1/9 (/12 e.Result#3/29 )/13 (/16 e.Blocks#5/31 )/17 (/20 e.Pattern#6/33 )/21 s.Depth#4/22 (/25 e.ScopeVars#6/35 )/26 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[10];
    context[30] = context[11];
    context[31] = context[14];
    context[32] = context[15];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[23];
    context[36] = context[24];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.RAssignments0#1 as range 27
    // closed e.Result#3 as range 29
    // closed e.Blocks#5 as range 31
    // closed e.Pattern#6 as range 33
    // closed e.ScopeVars#6 as range 35
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth#4: 22
    //DEBUG: e.RAssignments0#1: 27
    //DEBUG: e.Result#3: 29
    //DEBUG: e.Blocks#5: 31
    //DEBUG: e.Pattern#6: 33
    //DEBUG: e.ScopeVars#6: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth#4/22 (/25 {REMOVED TILE} )/26 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.ScopeVars#6/35 } Tile{ HalfReuse: )/4 HalfReuse: s.Depth4 #22/7 AsIs: e.RAssignments0#1/27 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result#3/29 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/31 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/33 AsIs: )/21 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_svar( context[7], context[22] );
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[8], context[1] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[4], context[21] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EnumerateVars-Assignments@2/4 (/7 e.new#16/27 )/8 s.new#9/9 (/12 e.new#17/29 )/13 (/16 e.new#18/31 )/17 (/20 e.new#19/33 )/21 s.new#10/22 (/25 e.new#20/35 )/26 (/41 s.new#11/55 (/53 e.new#12/51 )/54 (/49 e.new#13/47 )/50 (/45 e.new#14/43 )/46 )/42 e.new#15/37 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[10];
    context[30] = context[11];
    context[31] = context[14];
    context[32] = context[15];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    context[39] = 0;
    context[40] = 0;
    context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
    if( ! context[41] )
      continue;
    refalrts::bracket_pointers(context[41], context[42]);
    context[43] = 0;
    context[44] = 0;
    context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
    if( ! context[45] )
      continue;
    refalrts::bracket_pointers(context[45], context[46]);
    context[47] = 0;
    context[48] = 0;
    context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
    if( ! context[49] )
      continue;
    refalrts::bracket_pointers(context[49], context[50]);
    context[51] = 0;
    context[52] = 0;
    context[53] = refalrts::brackets_right( context[51], context[52], context[39], context[40] );
    if( ! context[53] )
      continue;
    refalrts::bracket_pointers(context[53], context[54]);
    // closed e.new#16 as range 27
    // closed e.new#17 as range 29
    // closed e.new#18 as range 31
    // closed e.new#19 as range 33
    // closed e.new#20 as range 35
    // closed e.new#12 as range 51
    // closed e.new#13 as range 47
    // closed e.new#14 as range 43
    // closed e.new#15 as range 37
    if( ! refalrts::svar_left( context[55], context[39], context[40] ) )
      continue;
    if( ! refalrts::empty_seq( context[39], context[40] ) )
      continue;
    do {
      // </0 & EnumerateVars-Assignments@2/4 (/7 e.RAssignments0#1/56 )/8 s.ChainType0#1/9 (/12 e.Result#3/58 )/13 (/16 e.Blocks#5/60 )/17 (/20 e.Pattern#6/62 )/21 s.Depth#4/22 (/25 e.ScopeVars#6/64 )/26 (/41 # Assign/55 (/53 e.Result#1/66 )/54 (/49 e.Blocks#1/68 )/50 (/45 e.Pattern#1/70 )/46 )/42 e.Assignments#1/72 >/1
      context[56] = context[27];
      context[57] = context[28];
      context[58] = context[29];
      context[59] = context[30];
      context[60] = context[31];
      context[61] = context[32];
      context[62] = context[33];
      context[63] = context[34];
      context[64] = context[35];
      context[65] = context[36];
      context[66] = context[51];
      context[67] = context[52];
      context[68] = context[47];
      context[69] = context[48];
      context[70] = context[43];
      context[71] = context[44];
      context[72] = context[37];
      context[73] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Assign], context[55] ) )
        continue;
      // closed e.RAssignments0#1 as range 56
      // closed e.Result#3 as range 58
      // closed e.Blocks#5 as range 60
      // closed e.Pattern#6 as range 62
      // closed e.ScopeVars#6 as range 64
      // closed e.Result#1 as range 66
      // closed e.Blocks#1 as range 68
      // closed e.Pattern#1 as range 70
      // closed e.Assignments#1 as range 72
      //DEBUG: s.ChainType0#1: 9
      //DEBUG: s.Depth#4: 22
      //DEBUG: e.RAssignments0#1: 56
      //DEBUG: e.Result#3: 58
      //DEBUG: e.Blocks#5: 60
      //DEBUG: e.Pattern#6: 62
      //DEBUG: e.ScopeVars#6: 64
      //DEBUG: e.Result#1: 66
      //DEBUG: e.Blocks#1: 68
      //DEBUG: e.Pattern#1: 70
      //DEBUG: e.Assignments#1: 72

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@5/4 AsIs: (/7 AsIs: e.RAssignments0#1/56 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result#3/58 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/60 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/62 AsIs: )/21 } Tile{ AsIs: (/53 } Tile{ AsIs: e.Assignments#1/72 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.Pattern#1/70 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.Blocks#1/68 } Tile{ AsIs: )/54 HalfReuse: s.Depth4 #22/49 } </74 & DoMapAccum@5/75 Tile{ AsIs: s.Depth#4/22 AsIs: (/25 AsIs: e.ScopeVars#6/64 AsIs: )/26 AsIs: (/41 HalfReuse: )/55 } Tile{ AsIs: e.Result#1/66 } >/76 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::alloc_close_call(vm, context[76]);
      refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z5]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::reinit_svar( context[49], context[22] );
      refalrts::reinit_close_bracket(context[55]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[76] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[41], context[55] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[42], context[54] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[53], context[50] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[76] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_evar( res, context[22], context[55] );
      res = refalrts::splice_evar( res, context[74], context[75] );
      res = refalrts::splice_evar( res, context[54], context[49] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[50], context[42] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_elem( res, context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Assignments@2/4 (/7 e.RAssignments0#1/56 )/8 s.ChainType0#1/9 (/12 e.Result#3/58 )/13 (/16 e.Blocks#5/60 )/17 (/20 e.Pattern#6/62 )/21 s.Depth#4/22 (/25 e.ScopeVars#6/64 )/26 (/41 # Condition/55 (/53 e.Result#1/66 )/54 (/49 e.Blocks#1/68 )/50 (/45 e.Pattern#1/70 )/46 )/42 e.Assignments#1/72 >/1
      context[56] = context[27];
      context[57] = context[28];
      context[58] = context[29];
      context[59] = context[30];
      context[60] = context[31];
      context[61] = context[32];
      context[62] = context[33];
      context[63] = context[34];
      context[64] = context[35];
      context[65] = context[36];
      context[66] = context[51];
      context[67] = context[52];
      context[68] = context[47];
      context[69] = context[48];
      context[70] = context[43];
      context[71] = context[44];
      context[72] = context[37];
      context[73] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Condition], context[55] ) )
        continue;
      // closed e.RAssignments0#1 as range 56
      // closed e.Result#3 as range 58
      // closed e.Blocks#5 as range 60
      // closed e.Pattern#6 as range 62
      // closed e.ScopeVars#6 as range 64
      // closed e.Result#1 as range 66
      // closed e.Blocks#1 as range 68
      // closed e.Pattern#1 as range 70
      // closed e.Assignments#1 as range 72
      //DEBUG: s.ChainType0#1: 9
      //DEBUG: s.Depth#4: 22
      //DEBUG: e.RAssignments0#1: 56
      //DEBUG: e.Result#3: 58
      //DEBUG: e.Blocks#5: 60
      //DEBUG: e.Pattern#6: 62
      //DEBUG: e.ScopeVars#6: 64
      //DEBUG: e.Result#1: 66
      //DEBUG: e.Blocks#1: 68
      //DEBUG: e.Pattern#1: 70
      //DEBUG: e.Assignments#1: 72

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@6/4 AsIs: (/7 AsIs: e.RAssignments0#1/56 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result#3/58 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/60 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/62 AsIs: )/21 } Tile{ AsIs: (/53 } Tile{ AsIs: e.Assignments#1/72 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.Pattern#1/70 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.Blocks#1/68 } Tile{ AsIs: )/54 HalfReuse: s.Depth4 #22/49 } </74 & DoMapAccum@5/75 Tile{ AsIs: s.Depth#4/22 AsIs: (/25 AsIs: e.ScopeVars#6/64 AsIs: )/26 AsIs: (/41 HalfReuse: )/55 } Tile{ AsIs: e.Result#1/66 } >/76 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::alloc_close_call(vm, context[76]);
      refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z6]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::reinit_svar( context[49], context[22] );
      refalrts::reinit_close_bracket(context[55]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[76] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[41], context[55] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[42], context[54] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[53], context[50] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[76] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_evar( res, context[22], context[55] );
      res = refalrts::splice_evar( res, context[74], context[75] );
      res = refalrts::splice_evar( res, context[54], context[49] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[50], context[42] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_elem( res, context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Assignments@2/4 (/7 e.RAssignments0#1/56 )/8 s.ChainType0#1/9 (/12 e.Result#3/58 )/13 (/16 e.Blocks#5/60 )/17 (/20 e.Pattern#6/62 )/21 s.Depth#4/22 (/25 e.ScopeVars#6/64 )/26 (/41 s.ChainType#1/55 (/53 e.Result#1/66 )/54 (/49 e.Blocks#1/68 )/50 (/45 e.Pattern#1/70 )/46 )/42 e.Assignments#1/72 >/1
    context[56] = context[27];
    context[57] = context[28];
    context[58] = context[29];
    context[59] = context[30];
    context[60] = context[31];
    context[61] = context[32];
    context[62] = context[33];
    context[63] = context[34];
    context[64] = context[35];
    context[65] = context[36];
    context[66] = context[51];
    context[67] = context[52];
    context[68] = context[47];
    context[69] = context[48];
    context[70] = context[43];
    context[71] = context[44];
    context[72] = context[37];
    context[73] = context[38];
    // closed e.RAssignments0#1 as range 56
    // closed e.Result#3 as range 58
    // closed e.Blocks#5 as range 60
    // closed e.Pattern#6 as range 62
    // closed e.ScopeVars#6 as range 64
    // closed e.Result#1 as range 66
    // closed e.Blocks#1 as range 68
    // closed e.Pattern#1 as range 70
    // closed e.Assignments#1 as range 72
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth#4: 22
    //DEBUG: s.ChainType#1: 55
    //DEBUG: e.RAssignments0#1: 56
    //DEBUG: e.Result#3: 58
    //DEBUG: e.Blocks#5: 60
    //DEBUG: e.Pattern#6: 62
    //DEBUG: e.ScopeVars#6: 64
    //DEBUG: e.Result#1: 66
    //DEBUG: e.Blocks#1: 68
    //DEBUG: e.Pattern#1: 70
    //DEBUG: e.Assignments#1: 72

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=1@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/56 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result#3/58 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/60 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/62 AsIs: )/21 } Tile{ AsIs: s.ChainType#1/55 AsIs: (/53 } Tile{ AsIs: e.Assignments#1/72 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.Pattern#1/70 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.Blocks#1/68 } )/74 Tile{ AsIs: s.Depth#4/22 AsIs: (/25 AsIs: e.ScopeVars#6/64 AsIs: )/26 AsIs: (/41 } Tile{ AsIs: e.Result#1/66 } Tile{ AsIs: )/54 HalfReuse: </49 } & AssignOrCondition*2/75 s.ChainType#1/55/76 >/77 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[74]);
    refalrts::alloc_name(vm, context[75], functions[efunc_gen_AssignOrCondition_D2]);
    refalrts::copy_stvar(vm, context[76], context[55]);
    refalrts::alloc_close_call(vm, context[77]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z2]);
    refalrts::reinit_open_bracket(context[42]);
    refalrts::reinit_open_call(context[49]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[77] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[41], context[54] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[42], context[74] );
    refalrts::link_brackets( context[45], context[46] );
    refalrts::link_brackets( context[53], context[50] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[75], context[77] );
    res = refalrts::splice_evar( res, context[54], context[49] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[22], context[41] );
    res = refalrts::splice_elem( res, context[74] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_evar( res, context[50], context[42] );
    res = refalrts::splice_evar( res, context[72], context[73] );
    res = refalrts::splice_evar( res, context[55], context[53] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments@2/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 s.Depth#4/22 (/25 e.ScopeVars#6/23 )/26 e.dyn#2/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.ScopeVars#6 as range 23
  // closed e.dyn#2 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth#4: 22
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.ScopeVars#6: 23
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/18 AsIs: )/21 } )/27 )/28 Tile{ AsIs: s.Depth#4/22 AsIs: (/25 AsIs: e.ScopeVars#6/23 AsIs: )/26 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::link_brackets( context[8], context[27] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_Z2("EnumerateVars-Assignments@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_Z2);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & EnumerateVars-Assignments$2=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@1/4 (/7 e.RAssignments0#1/22 )/8 (/11 e.Assignments0#1/24 )/12 (/15 e.Pattern0#1/26 )/16 (/19 e.Blocks0#1/28 )/20 s.Depth0#1/21 (/34 e.ScopeVars#3/32 )/35 e.Result#3/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    // closed e.RAssignments0#1 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.Pattern0#1 as range 26
    // closed e.Blocks0#1 as range 28
    // closed e.ScopeVars#3 as range 32
    // closed e.Result#3 as range 30
    //DEBUG: s.Depth0#1: 21
    //DEBUG: e.RAssignments0#1: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.Pattern0#1: 26
    //DEBUG: e.Blocks0#1: 28
    //DEBUG: e.ScopeVars#3: 32
    //DEBUG: e.Result#3: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@1/4 AsIs: (/7 AsIs: e.RAssignments0#1/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Result#3/30 } )/36 (/37 Tile{ AsIs: e.Assignments0#1/24 } Tile{ AsIs: )/35 } (/38 Tile{ AsIs: e.ScopeVars#3/32 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Pattern0#1/26 AsIs: )/16 AsIs: (/19 AsIs: e.Blocks0#1/28 AsIs: )/20 } </39 & Add/40 1/41 Tile{ AsIs: s.Depth0#1/21 HalfReuse: >/34 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z1]);
    refalrts::reinit_close_call(context[34]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[38], context[12] );
    refalrts::link_brackets( context[37], context[35] );
    refalrts::link_brackets( context[11], context[36] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[34] );
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[12], context[20] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@1/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.Pattern0#1/13 )/16 (/19 e.Blocks0#1/17 )/20 s.Depth0#1/21 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.Pattern0#1 as range 13
  // closed e.Blocks0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#1: 21
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.Pattern0#1: 13
  //DEBUG: e.Blocks0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/22 Tile{ HalfReuse: # Assign/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Blocks0#1/17 AsIs: )/20 AsIs: s.Depth0#1/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z1("EnumerateVars-Assignments$2=2@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z1);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & EnumerateVars-Assignments$2=2@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@2/4 (/7 e.RAssignments0#1/22 )/8 (/11 e.Assignments0#1/24 )/12 (/15 e.Pattern0#1/26 )/16 (/19 e.Blocks0#1/28 )/20 s.Depth0#1/21 (/34 e.ScopeVars#3/32 )/35 e.Result#3/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    // closed e.RAssignments0#1 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.Pattern0#1 as range 26
    // closed e.Blocks0#1 as range 28
    // closed e.ScopeVars#3 as range 32
    // closed e.Result#3 as range 30
    //DEBUG: s.Depth0#1: 21
    //DEBUG: e.RAssignments0#1: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.Pattern0#1: 26
    //DEBUG: e.Blocks0#1: 28
    //DEBUG: e.ScopeVars#3: 32
    //DEBUG: e.Result#3: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Result#3/30 } )/36 (/37 Tile{ AsIs: e.Assignments0#1/24 } Tile{ AsIs: )/35 } (/38 Tile{ AsIs: e.ScopeVars#3/32 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Pattern0#1/26 AsIs: )/16 AsIs: (/19 AsIs: e.Blocks0#1/28 AsIs: )/20 } </39 & Add/40 1/41 Tile{ AsIs: s.Depth0#1/21 HalfReuse: >/34 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z2]);
    refalrts::reinit_close_call(context[34]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[38], context[12] );
    refalrts::link_brackets( context[37], context[35] );
    refalrts::link_brackets( context[11], context[36] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[34] );
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[12], context[20] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@2/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.Pattern0#1/13 )/16 (/19 e.Blocks0#1/17 )/20 s.Depth0#1/21 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.Pattern0#1 as range 13
  // closed e.Blocks0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#1: 21
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.Pattern0#1: 13
  //DEBUG: e.Blocks0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/22 Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Blocks0#1/17 AsIs: )/20 AsIs: s.Depth0#1/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z2("EnumerateVars-Assignments$2=2@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z2);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Fetch@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Fetch@1/4 (/9 e.0#0/7 )/10 e.#0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.0#0 as range 7
    // closed e.#0 as range 5
    //DEBUG: e.0#0: 7
    //DEBUG: e.#0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.0#0/7 AsIs: )/10 } Tile{ HalfReuse: (/0 HalfReuse: # Brackets/4 } Tile{ AsIs: e.#0/5 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@1/4 e.Argument#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument#1 as range 5
    //DEBUG: e.Argument#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Expr\1$5\1*1/4 AsIs: e.Argument#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Expr_L1S5L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 e.arg#0/2 >/1
  // closed e.arg#0 as range 2
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg#0/2 HalfReuse: & EnumerateVars-Expr\1$5\1@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_EnumerateVarsm_Expr_L1S5L1Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_Fetch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Fetch@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@2/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Fetch@2/4 (/7 (/15 e.0#0/13 )/16 e.#0/9 )/8 e.Name#2/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.0#0 as range 13
    // closed e.#0 as range 9
    // closed e.Name#2 as range 11
    //DEBUG: e.0#0: 13
    //DEBUG: e.#0: 9
    //DEBUG: e.Name#2: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: e.0#0/13 AsIs: )/16 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # ADT-Brackets/4 } Tile{ HalfReuse: (/8 AsIs: e.Name#2/11 HalfReuse: )/1 } Tile{ AsIs: e.#0/9 } Tile{ HalfReuse: )/0 } Tile{ ]] }
    refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::link_brackets( context[7], context[0] );
    refalrts::link_brackets( context[8], context[1] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@2/4 (/7 e.Argument#1/9 )/8 e.Name#2/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Argument#1 as range 9
    // closed e.Name#2 as range 11
    //DEBUG: e.Argument#1: 9
    //DEBUG: e.Name#2: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Expr\1$6\1*1/4 AsIs: (/7 } Tile{ AsIs: e.Name#2/11 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Argument#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Expr_L1S6L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@2/4 (/7 e.arg#0/5 )/8 e.Name#2/2 >/1
  // closed e.arg#0 as range 5
  // closed e.Name#2 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.Name#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/9 & EnumerateVars-Expr\1$6\1@0/10 Tile{ AsIs: (/7 } Tile{ AsIs: e.Name#2/2 } Tile{ AsIs: )/8 } {*}/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_EnumerateVarsm_Expr_L1S6L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z2("Fetch@2", COOKIE1_, COOKIE2_, func_gen_Fetch_Z2);


static refalrts::FnResult func_gen_Fetch_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Fetch@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Fetch@3/4 (/9 e.0#0/7 )/10 e.#0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.0#0 as range 7
    // closed e.#0 as range 5
    //DEBUG: e.0#0: 7
    //DEBUG: e.#0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.0#0/7 AsIs: )/10 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 } Tile{ AsIs: e.#0/5 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@3/4 e.Argument#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument#1 as range 5
    //DEBUG: e.Argument#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Expr\1$7\1*1/4 AsIs: e.Argument#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Expr_L1S7L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@3/4 e.arg#0/2 >/1
  // closed e.arg#0 as range 2
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg#0/2 HalfReuse: & EnumerateVars-Expr\1$7\1@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_EnumerateVarsm_Expr_L1S7L1Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z3("Fetch@3", COOKIE1_, COOKIE2_, func_gen_Fetch_Z3);


static refalrts::FnResult func_gen_Fetch_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Fetch@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@4/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Fetch@4/4 (/7 e.Argument#1/9 )/8 e.ScopeVars#2/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Argument#1 as range 9
    // closed e.ScopeVars#2 as range 11
    //DEBUG: e.Argument#1: 9
    //DEBUG: e.ScopeVars#2: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } Tile{ AsIs: e.ScopeVars#2/11 } Tile{ HalfReuse: )/0 HalfReuse: (/4 HalfReuse: # Closure/7 AsIs: e.Argument#1/9 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_Closure]);
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[1], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@4/4 (/7 e.arg#0/5 )/8 e.ScopeVars#2/2 >/1
  // closed e.arg#0 as range 5
  // closed e.ScopeVars#2 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.ScopeVars#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/9 & EnumerateVars-Expr\1$8\1@0/10 Tile{ AsIs: (/7 } Tile{ AsIs: e.ScopeVars#2/2 } Tile{ AsIs: )/8 } {*}/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_EnumerateVarsm_Expr_L1S8L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z4("Fetch@4", COOKIE1_, COOKIE2_, func_gen_Fetch_Z4);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@12/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@12/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/15 )/18 e.2#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      // closed e.3#0 as range 15
      // closed e.2#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.3#0: 15
      //DEBUG: e.2#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/15 AsIs: )/18 } </19 & NameNestedBody/20 (/21 Tile{ AsIs: </0 Reuse: & AddSuffix/4 } e.3#0/15/22 (/24 )/25 >/26 )/27 Tile{ AsIs: e.2#0/11 } >/28 )/29 </30 Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_NameNestedBody]);
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_AddSuffix]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[7], context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[21], context[27] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      res = refalrts::splice_evar( res, context[7], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & Pass-NameNestedFuncs\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_NameNestedFuncs_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_DoMapAccum_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 98 elems
  refalrts::Iter context[98];
  refalrts::zeros( context, 98 );
  // </0 & DoMapAccum@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@6/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@6/4 (/7 e.new#8/15 )/8 t.new#5/9 (/13 e.new#9/17 )/14 t.new#6/21 e.new#7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new#8 as range 15
    // closed e.new#9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new#7 as range 19
    do {
      // </0 & DoMapAccum@6/4 (/7 e.new#16/23 )/8 s.new#10/9 (/13 e.new#17/25 )/14 (/21 s.new#11/43 (/41 e.new#12/39 )/42 (/37 e.new#13/35 )/38 (/33 e.new#14/31 )/34 )/22 e.new#15/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = 0;
      context[30] = 0;
      if( ! refalrts::brackets_term( context[29], context[30], context[21] ) )
        continue;
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_right( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[29], context[30] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_right( context[39], context[40], context[29], context[30] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.new#16 as range 23
      // closed e.new#17 as range 25
      // closed e.new#12 as range 39
      // closed e.new#13 as range 35
      // closed e.new#14 as range 31
      // closed e.new#15 as range 27
      if( ! refalrts::svar_left( context[43], context[29], context[30] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      do {
        // </0 & DoMapAccum@6/4 (/7 e.MainName#3/44 )/8 s.AssignId#2/9 (/13 e.Scanned#1/46 )/14 (/21 # Assign/43 (/41 e.2#0/48 )/42 (/37 e.4#0/50 )/38 (/33 e.6#0/52 )/34 )/22 e.Tail#1/54 >/1
        context[44] = context[23];
        context[45] = context[24];
        context[46] = context[25];
        context[47] = context[26];
        context[48] = context[39];
        context[49] = context[40];
        context[50] = context[35];
        context[51] = context[36];
        context[52] = context[31];
        context[53] = context[32];
        context[54] = context[27];
        context[55] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_Assign], context[43] ) )
          continue;
        // closed e.MainName#3 as range 44
        // closed e.Scanned#1 as range 46
        // closed e.2#0 as range 48
        // closed e.4#0 as range 50
        // closed e.6#0 as range 52
        // closed e.Tail#1 as range 54
        //DEBUG: s.AssignId#2: 9
        //DEBUG: e.MainName#3: 44
        //DEBUG: e.Scanned#1: 46
        //DEBUG: e.2#0: 48
        //DEBUG: e.4#0: 50
        //DEBUG: e.6#0: 52
        //DEBUG: e.Tail#1: 54

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: (/7 AsIs: e.MainName#3/44 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/54 } )/56 </57 & Add/58 1/59 Tile{ AsIs: s.AssignId#2/9 } >/60 (/61 # Assign/62 (/63 e.MainName#3/44/64 '='/66 s.AssignId#2/9/67 )/68 (/69 </70 & DelAccumulator/71 </72 & DoMapAccum@7/73 (/74 e.MainName#3/44/75 '='/77 s.AssignId#2/9/78 )/79 1/80 Tile{ HalfReuse: (/43 HalfReuse: )/41 AsIs: e.2#0/48 HalfReuse: >/42 HalfReuse: >/37 } )/81 (/82 </83 & NameNestedBlocks=1/84 </85 & DoMapAccum@8/86 (/87 e.MainName#3/44/88 '='/90 s.AssignId#2/9/91 )/92 1/93 (/94 )/95 Tile{ AsIs: e.4#0/50 } >/96 >/97 Tile{ AsIs: )/38 AsIs: (/33 AsIs: e.6#0/52 AsIs: )/34 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[59], 1UL);
        refalrts::alloc_close_call(vm, context[60]);
        refalrts::alloc_open_bracket(vm, context[61]);
        refalrts::alloc_ident(vm, context[62], identifiers[ident_Assign]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::copy_evar(vm, context[64], context[65], context[44], context[45]);
        refalrts::alloc_char(vm, context[66], '=');
        refalrts::copy_stvar(vm, context[67], context[9]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_DelAccumulator]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_gen_DoMapAccum_Z7]);
        refalrts::alloc_open_bracket(vm, context[74]);
        refalrts::copy_evar(vm, context[75], context[76], context[44], context[45]);
        refalrts::alloc_char(vm, context[77], '=');
        refalrts::copy_stvar(vm, context[78], context[9]);
        refalrts::alloc_close_bracket(vm, context[79]);
        refalrts::alloc_number(vm, context[80], 1UL);
        refalrts::alloc_close_bracket(vm, context[81]);
        refalrts::alloc_open_bracket(vm, context[82]);
        refalrts::alloc_open_call(vm, context[83]);
        refalrts::alloc_name(vm, context[84], functions[efunc_gen_NameNestedBlocks_A1]);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_gen_DoMapAccum_Z8]);
        refalrts::alloc_open_bracket(vm, context[87]);
        refalrts::copy_evar(vm, context[88], context[89], context[44], context[45]);
        refalrts::alloc_char(vm, context[90], '=');
        refalrts::copy_stvar(vm, context[91], context[9]);
        refalrts::alloc_close_bracket(vm, context[92]);
        refalrts::alloc_number(vm, context[93], 1UL);
        refalrts::alloc_open_bracket(vm, context[94]);
        refalrts::alloc_close_bracket(vm, context[95]);
        refalrts::alloc_close_call(vm, context[96]);
        refalrts::alloc_close_call(vm, context[97]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
        refalrts::reinit_open_bracket(context[43]);
        refalrts::reinit_close_bracket(context[41]);
        refalrts::reinit_close_call(context[42]);
        refalrts::reinit_close_call(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[61], context[22] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[82], context[38] );
        refalrts::push_stack( vm, context[97] );
        refalrts::push_stack( vm, context[83] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[85] );
        refalrts::link_brackets( context[94], context[95] );
        refalrts::link_brackets( context[87], context[92] );
        refalrts::link_brackets( context[69], context[81] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[72] );
        refalrts::link_brackets( context[43], context[41] );
        refalrts::link_brackets( context[74], context[79] );
        refalrts::link_brackets( context[63], context[68] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[21], context[56] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[22] );
        res = refalrts::splice_evar( res, context[96], context[97] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[81], context[95] );
        res = refalrts::splice_evar( res, context[43], context[37] );
        res = refalrts::splice_evar( res, context[60], context[80] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[56], context[59] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@6/4 (/7 e.MainName#3/44 )/8 s.AssignId#2/9 (/13 e.Scanned#1/46 )/14 (/21 # Condition/43 (/41 e.2#0/48 )/42 (/37 e.4#0/50 )/38 (/33 e.6#0/52 )/34 )/22 e.Tail#1/54 >/1
        context[44] = context[23];
        context[45] = context[24];
        context[46] = context[25];
        context[47] = context[26];
        context[48] = context[39];
        context[49] = context[40];
        context[50] = context[35];
        context[51] = context[36];
        context[52] = context[31];
        context[53] = context[32];
        context[54] = context[27];
        context[55] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_Condition], context[43] ) )
          continue;
        // closed e.MainName#3 as range 44
        // closed e.Scanned#1 as range 46
        // closed e.2#0 as range 48
        // closed e.4#0 as range 50
        // closed e.6#0 as range 52
        // closed e.Tail#1 as range 54
        //DEBUG: s.AssignId#2: 9
        //DEBUG: e.MainName#3: 44
        //DEBUG: e.Scanned#1: 46
        //DEBUG: e.2#0: 48
        //DEBUG: e.4#0: 50
        //DEBUG: e.6#0: 52
        //DEBUG: e.Tail#1: 54

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: (/7 AsIs: e.MainName#3/44 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/54 } )/56 </57 & Add/58 1/59 Tile{ AsIs: s.AssignId#2/9 } >/60 (/61 # Condition/62 (/63 e.MainName#3/44/64 '?'/66 s.AssignId#2/9/67 )/68 (/69 </70 & DelAccumulator/71 </72 & DoMapAccum@7/73 (/74 e.MainName#3/44/75 '?'/77 s.AssignId#2/9/78 )/79 1/80 Tile{ HalfReuse: (/43 HalfReuse: )/41 AsIs: e.2#0/48 HalfReuse: >/42 HalfReuse: >/37 } )/81 (/82 </83 & NameNestedBlocks=1/84 </85 & DoMapAccum@8/86 (/87 e.MainName#3/44/88 '?'/90 s.AssignId#2/9/91 )/92 1/93 (/94 )/95 Tile{ AsIs: e.4#0/50 } >/96 >/97 Tile{ AsIs: )/38 AsIs: (/33 AsIs: e.6#0/52 AsIs: )/34 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[59], 1UL);
        refalrts::alloc_close_call(vm, context[60]);
        refalrts::alloc_open_bracket(vm, context[61]);
        refalrts::alloc_ident(vm, context[62], identifiers[ident_Condition]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::copy_evar(vm, context[64], context[65], context[44], context[45]);
        refalrts::alloc_char(vm, context[66], '?');
        refalrts::copy_stvar(vm, context[67], context[9]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_DelAccumulator]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_gen_DoMapAccum_Z7]);
        refalrts::alloc_open_bracket(vm, context[74]);
        refalrts::copy_evar(vm, context[75], context[76], context[44], context[45]);
        refalrts::alloc_char(vm, context[77], '?');
        refalrts::copy_stvar(vm, context[78], context[9]);
        refalrts::alloc_close_bracket(vm, context[79]);
        refalrts::alloc_number(vm, context[80], 1UL);
        refalrts::alloc_close_bracket(vm, context[81]);
        refalrts::alloc_open_bracket(vm, context[82]);
        refalrts::alloc_open_call(vm, context[83]);
        refalrts::alloc_name(vm, context[84], functions[efunc_gen_NameNestedBlocks_A1]);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_gen_DoMapAccum_Z8]);
        refalrts::alloc_open_bracket(vm, context[87]);
        refalrts::copy_evar(vm, context[88], context[89], context[44], context[45]);
        refalrts::alloc_char(vm, context[90], '?');
        refalrts::copy_stvar(vm, context[91], context[9]);
        refalrts::alloc_close_bracket(vm, context[92]);
        refalrts::alloc_number(vm, context[93], 1UL);
        refalrts::alloc_open_bracket(vm, context[94]);
        refalrts::alloc_close_bracket(vm, context[95]);
        refalrts::alloc_close_call(vm, context[96]);
        refalrts::alloc_close_call(vm, context[97]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
        refalrts::reinit_open_bracket(context[43]);
        refalrts::reinit_close_bracket(context[41]);
        refalrts::reinit_close_call(context[42]);
        refalrts::reinit_close_call(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[61], context[22] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[82], context[38] );
        refalrts::push_stack( vm, context[97] );
        refalrts::push_stack( vm, context[83] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[85] );
        refalrts::link_brackets( context[94], context[95] );
        refalrts::link_brackets( context[87], context[92] );
        refalrts::link_brackets( context[69], context[81] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[72] );
        refalrts::link_brackets( context[43], context[41] );
        refalrts::link_brackets( context[74], context[79] );
        refalrts::link_brackets( context[63], context[68] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[21], context[56] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[22] );
        res = refalrts::splice_evar( res, context[96], context[97] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[81], context[95] );
        res = refalrts::splice_evar( res, context[43], context[37] );
        res = refalrts::splice_evar( res, context[60], context[80] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[56], context[59] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@6/4 (/7 e.MainName#3/44 )/8 s.AssignId#2/9 (/13 e.Scanned#1/46 )/14 (/21 s.ChainType#2/43 (/41 e.2#0/48 )/42 (/37 e.4#0/50 )/38 (/33 e.6#0/52 )/34 )/22 e.Tail#1/54 >/1
      context[44] = context[23];
      context[45] = context[24];
      context[46] = context[25];
      context[47] = context[26];
      context[48] = context[39];
      context[49] = context[40];
      context[50] = context[35];
      context[51] = context[36];
      context[52] = context[31];
      context[53] = context[32];
      context[54] = context[27];
      context[55] = context[28];
      // closed e.MainName#3 as range 44
      // closed e.Scanned#1 as range 46
      // closed e.2#0 as range 48
      // closed e.4#0 as range 50
      // closed e.6#0 as range 52
      // closed e.Tail#1 as range 54
      //DEBUG: s.AssignId#2: 9
      //DEBUG: s.ChainType#2: 43
      //DEBUG: e.MainName#3: 44
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.2#0: 48
      //DEBUG: e.4#0: 50
      //DEBUG: e.6#0: 52
      //DEBUG: e.Tail#1: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.AssignId#2/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: (/7 AsIs: e.MainName#3/44 AsIs: )/8 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/46 } )/56 (/57 Tile{ AsIs: e.Tail#1/54 } )/58 </59 Tile{ HalfReuse: & NameNestedAssigns\1=1/14 HalfReuse: s.AssignId2 #9/21 AsIs: s.ChainType#2/43 AsIs: (/41 AsIs: e.2#0/48 AsIs: )/42 AsIs: (/37 AsIs: e.4#0/50 AsIs: )/38 AsIs: (/33 AsIs: e.6#0/52 AsIs: )/34 HalfReuse: (/22 } e.MainName#3/44/60 )/62 </63 & ChainTypeMarker*2/64 s.ChainType#2/43/65 >/66 >/67 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::copy_evar(vm, context[60], context[61], context[44], context[45]);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_gen_ChainTypeMarker_D2]);
      refalrts::copy_stvar(vm, context[65], context[43]);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
      refalrts::reinit_name(context[14], functions[efunc_gen_NameNestedAssigns_L1A1]);
      refalrts::reinit_svar( context[21], context[9] );
      refalrts::reinit_open_bracket(context[22]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[22], context[62] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::link_brackets( context[57], context[58] );
      refalrts::link_brackets( context[13], context[56] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[62], context[67] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[14], context[22] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@6/4 (/7 e.MainName#3/23 )/8 t.Acc#1/9 (/13 e.Scanned#1/25 )/14 t.Next#1/21 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.MainName#3 as range 23
    // closed e.Scanned#1 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.Acc#1: 9
    //DEBUG: t.Next#1: 21
    //DEBUG: e.MainName#3: 23
    //DEBUG: e.Scanned#1: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: (/7 AsIs: e.MainName#3/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail#1/27 } )/30 </31 & NameNestedAssigns\1*1/32 (/33 e.MainName#3/23/34 )/36 Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/21 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_NameNestedAssigns_L1D1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[36] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@6/4 (/7 e.MainName#3/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.MainName#3 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.MainName#3: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@6/4 (/7 e.MainName#3/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@6/4 (/7 e.MainName#3/5 )/8 t.acc#0/9 (/13 e.scanned#0/11 )/14 e.items#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.scanned#0 as range 11
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 9
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.scanned#0: 11
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & NameNestedAssigns\1@0/15 (/16 Tile{ AsIs: e.MainName#3/5 } )/17 Tile{ HalfReuse: {*}/8 AsIs: t.acc#0/9 AsIs: (/13 AsIs: e.scanned#0/11 AsIs: )/14 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_NameNestedAssigns_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z6("DoMapAccum@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z6);


static refalrts::FnResult func_gen_DoMapAccum_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 151 elems
  refalrts::Iter context[151];
  refalrts::zeros( context, 151 );
  // </0 & DoMapAccum@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@7/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@7/4 (/7 e.new#8/15 )/8 t.new#5/9 (/13 e.new#9/17 )/14 t.new#6/21 e.new#7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new#8 as range 15
    // closed e.new#9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new#7 as range 19
    do {
      // </0 & DoMapAccum@7/4 (/7 e.new#13/23 )/8 s.new#10/9 (/13 e.new#14/25 )/14 t.new#11/21 e.new#12/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new#13 as range 23
      // closed e.new#14 as range 25
      // closed e.new#12 as range 27
      do {
        // </0 & DoMapAccum@7/4 (/7 e.new#19/29 )/8 s.new#15/9 (/13 e.new#20/31 )/14 (/21 s.new#16/37 e.new#17/35 )/22 e.new#18/33 >/1
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[21] ) )
          continue;
        // closed e.new#19 as range 29
        // closed e.new#20 as range 31
        // closed e.new#18 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        // closed e.new#17 as range 35
        do {
          // </0 & DoMapAccum@7/4 (/7 e.MainName#3/38 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/40 )/14 (/21 # Brackets/37 e.0#0/42 )/22 e.Tail#1/44 >/1
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[33];
          context[45] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
            continue;
          // closed e.MainName#3 as range 38
          // closed e.Scanned#1 as range 40
          // closed e.0#0 as range 42
          // closed e.Tail#1 as range 44
          //DEBUG: s.NextNumber#1: 9
          //DEBUG: e.MainName#3: 38
          //DEBUG: e.Scanned#1: 40
          //DEBUG: e.0#0: 42
          //DEBUG: e.Tail#1: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </46 & DoMapAccum$1=1@7/47 (/48 e.MainName#3/38/49 Tile{ AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Scanned#1/40 } )/51 (/52 Tile{ AsIs: e.Tail#1/44 } )/53 </54 & NameNestedResultRec-Term$1=1/55 Tile{ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#3/38 AsIs: )/8 AsIs: s.NextNumber#1/9 AsIs: (/13 } Tile{ HalfReuse: )/37 AsIs: e.0#0/42 HalfReuse: >/22 } >/56 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[46]);
          refalrts::alloc_name(vm, context[47], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::copy_evar(vm, context[49], context[50], context[38], context[39]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_close_bracket(vm, context[53]);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_gen_NameNestedResultRecm_Term_S1A1]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::reinit_close_bracket(context[37]);
          refalrts::reinit_close_call(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[37] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[52], context[53] );
          refalrts::link_brackets( context[21], context[51] );
          refalrts::link_brackets( context[48], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[56] );
          res = refalrts::splice_evar( res, context[37], context[22] );
          res = refalrts::splice_evar( res, context[0], context[13] );
          res = refalrts::splice_evar( res, context[53], context[55] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[14], context[21] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[46], context[48] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@7/4 (/7 e.MainName#3/38 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/40 )/14 (/21 # ADT-Brackets/37 (/48 e.2#0/46 )/49 e.1#0/42 )/22 e.Tail#1/44 >/1
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[33];
          context[45] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
            continue;
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::brackets_left( context[46], context[47], context[42], context[43] );
          if( ! context[48] )
            continue;
          refalrts::bracket_pointers(context[48], context[49]);
          // closed e.MainName#3 as range 38
          // closed e.Scanned#1 as range 40
          // closed e.2#0 as range 46
          // closed e.1#0 as range 42
          // closed e.Tail#1 as range 44
          //DEBUG: s.NextNumber#1: 9
          //DEBUG: e.MainName#3: 38
          //DEBUG: e.Scanned#1: 40
          //DEBUG: e.2#0: 46
          //DEBUG: e.1#0: 42
          //DEBUG: e.Tail#1: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </50 & DoMapAccum$1=1@7/51 (/52 e.MainName#3/38/53 Tile{ AsIs: )/22 } (/55 Tile{ AsIs: e.Scanned#1/40 } )/56 (/57 Tile{ AsIs: e.Tail#1/44 } Tile{ AsIs: )/14 HalfReuse: </21 HalfReuse: & NameNestedResultRec-Term$2=1/37 AsIs: (/48 AsIs: e.2#0/46 AsIs: )/49 } Tile{ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#3/38 AsIs: )/8 AsIs: s.NextNumber#1/9 AsIs: (/13 } )/58 Tile{ AsIs: e.1#0/42 } >/59 >/60 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[50]);
          refalrts::alloc_name(vm, context[51], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::copy_evar(vm, context[53], context[54], context[38], context[39]);
          refalrts::alloc_open_bracket(vm, context[55]);
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_close_call(vm, context[59]);
          refalrts::alloc_close_call(vm, context[60]);
          refalrts::reinit_open_call(context[21]);
          refalrts::reinit_name(context[37], functions[efunc_gen_NameNestedResultRecm_Term_S2A1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[60] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[59] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[58] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::link_brackets( context[57], context[14] );
          refalrts::link_brackets( context[55], context[56] );
          refalrts::link_brackets( context[52], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[58] );
          res = refalrts::splice_evar( res, context[0], context[13] );
          res = refalrts::splice_evar( res, context[14], context[49] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_elem( res, context[55] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[50], context[52] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@7/4 (/7 e.MainName#3/38 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/40 )/14 (/21 # CallBrackets/37 e.0#0/42 )/22 e.Tail#1/44 >/1
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[33];
          context[45] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
            continue;
          // closed e.MainName#3 as range 38
          // closed e.Scanned#1 as range 40
          // closed e.0#0 as range 42
          // closed e.Tail#1 as range 44
          //DEBUG: s.NextNumber#1: 9
          //DEBUG: e.MainName#3: 38
          //DEBUG: e.Scanned#1: 40
          //DEBUG: e.0#0: 42
          //DEBUG: e.Tail#1: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </46 & DoMapAccum$1=1@7/47 (/48 e.MainName#3/38/49 Tile{ AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Scanned#1/40 } )/51 (/52 Tile{ AsIs: e.Tail#1/44 } )/53 </54 & NameNestedResultRec-Term$3=1/55 Tile{ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#3/38 AsIs: )/8 AsIs: s.NextNumber#1/9 AsIs: (/13 } Tile{ HalfReuse: )/37 AsIs: e.0#0/42 HalfReuse: >/22 } >/56 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[46]);
          refalrts::alloc_name(vm, context[47], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::copy_evar(vm, context[49], context[50], context[38], context[39]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_close_bracket(vm, context[53]);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_gen_NameNestedResultRecm_Term_S3A1]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::reinit_close_bracket(context[37]);
          refalrts::reinit_close_call(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[37] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[52], context[53] );
          refalrts::link_brackets( context[21], context[51] );
          refalrts::link_brackets( context[48], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[56] );
          res = refalrts::splice_evar( res, context[37], context[22] );
          res = refalrts::splice_evar( res, context[0], context[13] );
          res = refalrts::splice_evar( res, context[53], context[55] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[14], context[21] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[46], context[48] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@7/4 (/7 e.new#24/38 )/8 s.new#21/9 (/13 e.new#25/40 )/14 (/21 # Closure/37 e.new#22/42 )/22 e.new#23/44 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        context[44] = context[33];
        context[45] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[37] ) )
          continue;
        // closed e.new#24 as range 38
        // closed e.new#25 as range 40
        // closed e.new#22 as range 42
        // closed e.new#23 as range 44
        do {
          // </0 & DoMapAccum@7/4 (/7 e.new#30/46 )/8 s.new#26/9 (/13 e.new#31/48 )/14 (/21 # Closure/37 s.new#27/54 e.new#28/50 )/22 e.new#29/52 >/1
          context[46] = context[38];
          context[47] = context[39];
          context[48] = context[40];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          // closed e.new#30 as range 46
          // closed e.new#31 as range 48
          // closed e.new#29 as range 52
          if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
            continue;
          // closed e.new#28 as range 50
          do {
            // </0 & DoMapAccum@7/4 (/7 e.new#35/55 )/8 s.new#32/9 (/13 e.new#36/57 )/14 (/21 # Closure/37 # Sentences/54 e.new#33/59 )/22 e.new#34/61 >/1
            context[55] = context[46];
            context[56] = context[47];
            context[57] = context[48];
            context[58] = context[49];
            context[59] = context[50];
            context[60] = context[51];
            context[61] = context[52];
            context[62] = context[53];
            if( ! refalrts::ident_term( identifiers[ident_Sentences], context[54] ) )
              continue;
            // closed e.new#35 as range 55
            // closed e.new#36 as range 57
            // closed e.new#33 as range 59
            // closed e.new#34 as range 61
            do {
              // </0 & DoMapAccum@7/4 (/7 e.MainName#3/63 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/65 )/14 (/21 # Closure/37 # Sentences/54 (/73 (/77 e.4#0/75 )/78 e.7#0/71 (/85 e.8#0/83 )/86 (/81 e.6#0/79 )/82 )/74 )/22 e.Tail#1/69 >/1
              context[63] = context[55];
              context[64] = context[56];
              context[65] = context[57];
              context[66] = context[58];
              context[67] = context[59];
              context[68] = context[60];
              context[69] = context[61];
              context[70] = context[62];
              context[71] = 0;
              context[72] = 0;
              context[73] = refalrts::brackets_left( context[71], context[72], context[67], context[68] );
              if( ! context[73] )
                continue;
              refalrts::bracket_pointers(context[73], context[74]);
              context[75] = 0;
              context[76] = 0;
              context[77] = refalrts::brackets_left( context[75], context[76], context[71], context[72] );
              if( ! context[77] )
                continue;
              refalrts::bracket_pointers(context[77], context[78]);
              context[79] = 0;
              context[80] = 0;
              context[81] = refalrts::brackets_right( context[79], context[80], context[71], context[72] );
              if( ! context[81] )
                continue;
              refalrts::bracket_pointers(context[81], context[82]);
              context[83] = 0;
              context[84] = 0;
              context[85] = refalrts::brackets_right( context[83], context[84], context[71], context[72] );
              if( ! context[85] )
                continue;
              refalrts::bracket_pointers(context[85], context[86]);
              if( ! refalrts::empty_seq( context[67], context[68] ) )
                continue;
              // closed e.MainName#3 as range 63
              // closed e.Scanned#1 as range 65
              // closed e.4#0 as range 75
              // closed e.7#0 as range 71
              // closed e.8#0 as range 83
              // closed e.6#0 as range 79
              // closed e.Tail#1 as range 69
              //DEBUG: s.NextNumber#1: 9
              //DEBUG: e.MainName#3: 63
              //DEBUG: e.Scanned#1: 65
              //DEBUG: e.4#0: 75
              //DEBUG: e.7#0: 71
              //DEBUG: e.8#0: 83
              //DEBUG: e.6#0: 79
              //DEBUG: e.Tail#1: 69

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/63 AsIs: )/8 } (/87 Tile{ AsIs: e.Scanned#1/65 } )/88 (/89 Tile{ AsIs: e.Tail#1/69 } )/90 </91 & Add/92 1/93 s.NextNumber#1/9/94 >/95 Tile{ AsIs: (/85 } # Closure/96 (/97 e.MainName#3/63/98 Tile{ HalfReuse: '\\'/14 HalfReuse: s.NextNumber1 #9/21 HalfReuse: )/37 AsIs: # Sentences/54 AsIs: (/73 AsIs: (/77 AsIs: e.4#0/75 AsIs: )/78 } </100 & DelAccumulator/101 </102 & DoMapAccum/103 [*]/104 & NameNestedAssigns\1/105 (/106 e.MainName#3/63/107 '\\'/109 Tile{ AsIs: s.NextNumber#1/9 HalfReuse: )/13 } {*}/110 1/111 (/112 )/113 Tile{ AsIs: e.7#0/71 } >/114 >/115 (/116 </117 & DelAccumulator/118 </119 & DoMapAccum/120 (/121 & NameNestedResultRec-Term/122 e.MainName#3/63/123 '\\'/125 s.NextNumber#1/9/126 )/127 1/128 (/129 )/130 Tile{ AsIs: e.8#0/83 } >/131 >/132 )/133 (/134 </135 & NameNestedBlocks=1/136 </137 & DoMapAccum/138 [*]/139 & NameNestedBlocks=1\1/140 (/141 e.MainName#3/63/142 '\\'/144 s.NextNumber#1/9/145 )/146 {*}/147 1/148 Tile{ HalfReuse: (/86 HalfReuse: )/81 AsIs: e.6#0/79 HalfReuse: >/82 HalfReuse: >/74 AsIs: )/22 } )/149 )/150 Tile{ AsIs: >/1 ]] }
              refalrts::alloc_open_bracket(vm, context[87]);
              refalrts::alloc_close_bracket(vm, context[88]);
              refalrts::alloc_open_bracket(vm, context[89]);
              refalrts::alloc_close_bracket(vm, context[90]);
              refalrts::alloc_open_call(vm, context[91]);
              refalrts::alloc_name(vm, context[92], functions[efunc_Add]);
              refalrts::alloc_number(vm, context[93], 1UL);
              refalrts::copy_stvar(vm, context[94], context[9]);
              refalrts::alloc_close_call(vm, context[95]);
              refalrts::alloc_ident(vm, context[96], identifiers[ident_Closure]);
              refalrts::alloc_open_bracket(vm, context[97]);
              refalrts::copy_evar(vm, context[98], context[99], context[63], context[64]);
              refalrts::alloc_open_call(vm, context[100]);
              refalrts::alloc_name(vm, context[101], functions[efunc_DelAccumulator]);
              refalrts::alloc_open_call(vm, context[102]);
              refalrts::alloc_name(vm, context[103], functions[efunc_DoMapAccum]);
              refalrts::alloc_closure_head(vm, context[104]);
              refalrts::alloc_name(vm, context[105], functions[efunc_gen_NameNestedAssigns_L1]);
              refalrts::alloc_open_bracket(vm, context[106]);
              refalrts::copy_evar(vm, context[107], context[108], context[63], context[64]);
              refalrts::alloc_char(vm, context[109], '\\');
              refalrts::alloc_unwrapped_closure(vm, context[110], context[104]);
              refalrts::alloc_number(vm, context[111], 1UL);
              refalrts::alloc_open_bracket(vm, context[112]);
              refalrts::alloc_close_bracket(vm, context[113]);
              refalrts::alloc_close_call(vm, context[114]);
              refalrts::alloc_close_call(vm, context[115]);
              refalrts::alloc_open_bracket(vm, context[116]);
              refalrts::alloc_open_call(vm, context[117]);
              refalrts::alloc_name(vm, context[118], functions[efunc_DelAccumulator]);
              refalrts::alloc_open_call(vm, context[119]);
              refalrts::alloc_name(vm, context[120], functions[efunc_DoMapAccum]);
              refalrts::alloc_open_bracket(vm, context[121]);
              refalrts::alloc_name(vm, context[122], functions[efunc_NameNestedResultRecm_Term]);
              refalrts::copy_evar(vm, context[123], context[124], context[63], context[64]);
              refalrts::alloc_char(vm, context[125], '\\');
              refalrts::copy_stvar(vm, context[126], context[9]);
              refalrts::alloc_close_bracket(vm, context[127]);
              refalrts::alloc_number(vm, context[128], 1UL);
              refalrts::alloc_open_bracket(vm, context[129]);
              refalrts::alloc_close_bracket(vm, context[130]);
              refalrts::alloc_close_call(vm, context[131]);
              refalrts::alloc_close_call(vm, context[132]);
              refalrts::alloc_close_bracket(vm, context[133]);
              refalrts::alloc_open_bracket(vm, context[134]);
              refalrts::alloc_open_call(vm, context[135]);
              refalrts::alloc_name(vm, context[136], functions[efunc_gen_NameNestedBlocks_A1]);
              refalrts::alloc_open_call(vm, context[137]);
              refalrts::alloc_name(vm, context[138], functions[efunc_DoMapAccum]);
              refalrts::alloc_closure_head(vm, context[139]);
              refalrts::alloc_name(vm, context[140], functions[efunc_gen_NameNestedBlocks_A1L1]);
              refalrts::alloc_open_bracket(vm, context[141]);
              refalrts::copy_evar(vm, context[142], context[143], context[63], context[64]);
              refalrts::alloc_char(vm, context[144], '\\');
              refalrts::copy_stvar(vm, context[145], context[9]);
              refalrts::alloc_close_bracket(vm, context[146]);
              refalrts::alloc_unwrapped_closure(vm, context[147], context[139]);
              refalrts::alloc_number(vm, context[148], 1UL);
              refalrts::alloc_close_bracket(vm, context[149]);
              refalrts::alloc_close_bracket(vm, context[150]);
              refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
              refalrts::reinit_char(context[14], '\\');
              refalrts::reinit_svar( context[21], context[9] );
              refalrts::reinit_close_bracket(context[37]);
              refalrts::reinit_close_bracket(context[13]);
              refalrts::reinit_open_bracket(context[86]);
              refalrts::reinit_close_bracket(context[81]);
              refalrts::reinit_close_call(context[82]);
              refalrts::reinit_close_call(context[74]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[85], context[150] );
              refalrts::link_brackets( context[73], context[149] );
              refalrts::link_brackets( context[134], context[22] );
              refalrts::push_stack( vm, context[74] );
              refalrts::push_stack( vm, context[135] );
              refalrts::push_stack( vm, context[82] );
              refalrts::push_stack( vm, context[137] );
              refalrts::link_brackets( context[86], context[81] );
              refalrts::link_brackets( context[141], context[146] );
              refalrts::link_brackets( context[116], context[133] );
              refalrts::push_stack( vm, context[132] );
              refalrts::push_stack( vm, context[117] );
              refalrts::push_stack( vm, context[131] );
              refalrts::push_stack( vm, context[119] );
              refalrts::link_brackets( context[129], context[130] );
              refalrts::link_brackets( context[121], context[127] );
              refalrts::push_stack( vm, context[115] );
              refalrts::push_stack( vm, context[100] );
              refalrts::push_stack( vm, context[114] );
              refalrts::push_stack( vm, context[102] );
              refalrts::link_brackets( context[112], context[113] );
              refalrts::link_brackets( context[106], context[13] );
              refalrts::link_brackets( context[77], context[78] );
              refalrts::link_brackets( context[97], context[37] );
              refalrts::push_stack( vm, context[95] );
              refalrts::push_stack( vm, context[91] );
              refalrts::link_brackets( context[89], context[90] );
              refalrts::link_brackets( context[87], context[88] );
              refalrts::link_brackets( context[7], context[8] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[149], context[150] );
              res = refalrts::splice_evar( res, context[86], context[22] );
              res = refalrts::splice_evar( res, context[131], context[148] );
              res = refalrts::splice_evar( res, context[83], context[84] );
              res = refalrts::splice_evar( res, context[114], context[130] );
              res = refalrts::splice_evar( res, context[71], context[72] );
              res = refalrts::splice_evar( res, context[110], context[113] );
              res = refalrts::splice_evar( res, context[9], context[13] );
              res = refalrts::splice_evar( res, context[100], context[109] );
              res = refalrts::splice_evar( res, context[14], context[78] );
              res = refalrts::splice_evar( res, context[98], context[99] );
              res = refalrts::splice_evar( res, context[96], context[97] );
              res = refalrts::splice_elem( res, context[85] );
              res = refalrts::splice_evar( res, context[90], context[95] );
              res = refalrts::splice_evar( res, context[69], context[70] );
              res = refalrts::splice_evar( res, context[88], context[89] );
              res = refalrts::splice_evar( res, context[65], context[66] );
              res = refalrts::splice_elem( res, context[87] );
              refalrts::use( res );
              refalrts::wrap_closure( context[110] );
              refalrts::wrap_closure( context[147] );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & DoMapAccum@7/4 (/7 e.MainName#3/63 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/65 )/14 (/21 # Closure/37 # Sentences/54 e.#0/67 )/22 e.Tail#1/69 >/1
            context[63] = context[55];
            context[64] = context[56];
            context[65] = context[57];
            context[66] = context[58];
            context[67] = context[59];
            context[68] = context[60];
            context[69] = context[61];
            context[70] = context[62];
            // closed e.MainName#3 as range 63
            // closed e.Scanned#1 as range 65
            // closed e.#0 as range 67
            // closed e.Tail#1 as range 69
            //DEBUG: s.NextNumber#1: 9
            //DEBUG: e.MainName#3: 63
            //DEBUG: e.Scanned#1: 65
            //DEBUG: e.#0: 67
            //DEBUG: e.Tail#1: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/63 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/65 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/69 } )/71 </72 & Add/73 1/74 Tile{ AsIs: s.NextNumber#1/9 } >/75 (/76 # Closure/77 (/78 e.MainName#3/63/79 '\\'/81 s.NextNumber#1/9/82 )/83 # Sentences/84 </85 & DelAccumulator/86 </87 & DoMapAccum/88 [*]/89 & NameNestedBody$2\1/90 (/91 e.MainName#3/63/92 '\\'/94 s.NextNumber#1/9/95 )/96 {*}/97 1/98 Tile{ HalfReuse: (/37 HalfReuse: )/54 AsIs: e.#0/67 HalfReuse: >/22 } >/99 )/100 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[71]);
            refalrts::alloc_open_call(vm, context[72]);
            refalrts::alloc_name(vm, context[73], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[74], 1UL);
            refalrts::alloc_close_call(vm, context[75]);
            refalrts::alloc_open_bracket(vm, context[76]);
            refalrts::alloc_ident(vm, context[77], identifiers[ident_Closure]);
            refalrts::alloc_open_bracket(vm, context[78]);
            refalrts::copy_evar(vm, context[79], context[80], context[63], context[64]);
            refalrts::alloc_char(vm, context[81], '\\');
            refalrts::copy_stvar(vm, context[82], context[9]);
            refalrts::alloc_close_bracket(vm, context[83]);
            refalrts::alloc_ident(vm, context[84], identifiers[ident_Sentences]);
            refalrts::alloc_open_call(vm, context[85]);
            refalrts::alloc_name(vm, context[86], functions[efunc_DelAccumulator]);
            refalrts::alloc_open_call(vm, context[87]);
            refalrts::alloc_name(vm, context[88], functions[efunc_DoMapAccum]);
            refalrts::alloc_closure_head(vm, context[89]);
            refalrts::alloc_name(vm, context[90], functions[efunc_gen_NameNestedBody_S2L1]);
            refalrts::alloc_open_bracket(vm, context[91]);
            refalrts::copy_evar(vm, context[92], context[93], context[63], context[64]);
            refalrts::alloc_char(vm, context[94], '\\');
            refalrts::copy_stvar(vm, context[95], context[9]);
            refalrts::alloc_close_bracket(vm, context[96]);
            refalrts::alloc_unwrapped_closure(vm, context[97], context[89]);
            refalrts::alloc_number(vm, context[98], 1UL);
            refalrts::alloc_close_call(vm, context[99]);
            refalrts::alloc_close_bracket(vm, context[100]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
            refalrts::reinit_open_bracket(context[37]);
            refalrts::reinit_close_bracket(context[54]);
            refalrts::reinit_close_call(context[22]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[76], context[100] );
            refalrts::push_stack( vm, context[99] );
            refalrts::push_stack( vm, context[85] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[87] );
            refalrts::link_brackets( context[37], context[54] );
            refalrts::link_brackets( context[91], context[96] );
            refalrts::link_brackets( context[78], context[83] );
            refalrts::push_stack( vm, context[75] );
            refalrts::push_stack( vm, context[72] );
            refalrts::link_brackets( context[21], context[71] );
            refalrts::link_brackets( context[13], context[14] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[99], context[100] );
            res = refalrts::splice_evar( res, context[37], context[22] );
            res = refalrts::splice_evar( res, context[75], context[98] );
            res = refalrts::splice_elem( res, context[9] );
            res = refalrts::splice_evar( res, context[71], context[74] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_evar( res, context[13], context[21] );
            refalrts::use( res );
            refalrts::wrap_closure( context[97] );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@7/4 (/7 e.MainName#3/55 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/57 )/14 (/21 # Closure/37 # NativeBody/54 t.0#0/63 e.1#0/59 )/22 e.Tail#1/61 >/1
            context[55] = context[46];
            context[56] = context[47];
            context[57] = context[48];
            context[58] = context[49];
            context[59] = context[50];
            context[60] = context[51];
            context[61] = context[52];
            context[62] = context[53];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[54] ) )
              continue;
            // closed e.MainName#3 as range 55
            // closed e.Scanned#1 as range 57
            // closed e.Tail#1 as range 61
            context[64] = refalrts::tvar_left( context[63], context[59], context[60] );
            if( ! context[64] )
              continue;
            // closed e.1#0 as range 59
            //DEBUG: s.NextNumber#1: 9
            //DEBUG: e.MainName#3: 55
            //DEBUG: e.Scanned#1: 57
            //DEBUG: e.Tail#1: 61
            //DEBUG: t.0#0: 63
            //DEBUG: e.1#0: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/55 AsIs: )/8 } (/65 Tile{ AsIs: e.Scanned#1/57 } )/66 (/67 Tile{ AsIs: e.Tail#1/61 } )/68 </69 & Add/70 1/71 Tile{ AsIs: s.NextNumber#1/9 HalfReuse: >/13 } (/72 # Closure/73 (/74 e.MainName#3/55/75 Tile{ HalfReuse: '\\'/14 HalfReuse: s.NextNumber1 #9/21 HalfReuse: )/37 AsIs: # NativeBody/54 AsIs: t.0#0/63 AsIs: e.1#0/59 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[65]);
            refalrts::alloc_close_bracket(vm, context[66]);
            refalrts::alloc_open_bracket(vm, context[67]);
            refalrts::alloc_close_bracket(vm, context[68]);
            refalrts::alloc_open_call(vm, context[69]);
            refalrts::alloc_name(vm, context[70], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[71], 1UL);
            refalrts::alloc_open_bracket(vm, context[72]);
            refalrts::alloc_ident(vm, context[73], identifiers[ident_Closure]);
            refalrts::alloc_open_bracket(vm, context[74]);
            refalrts::copy_evar(vm, context[75], context[76], context[55], context[56]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
            refalrts::reinit_close_call(context[13]);
            refalrts::reinit_char(context[14], '\\');
            refalrts::reinit_svar( context[21], context[9] );
            refalrts::reinit_close_bracket(context[37]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[72], context[22] );
            refalrts::link_brackets( context[74], context[37] );
            refalrts::push_stack( vm, context[13] );
            refalrts::push_stack( vm, context[69] );
            refalrts::link_brackets( context[67], context[68] );
            refalrts::link_brackets( context[65], context[66] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[14], context[22] );
            res = refalrts::splice_evar( res, context[75], context[76] );
            res = refalrts::splice_evar( res, context[72], context[74] );
            res = refalrts::splice_evar( res, context[9], context[13] );
            res = refalrts::splice_evar( res, context[68], context[71] );
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[66], context[67] );
            res = refalrts::splice_evar( res, context[57], context[58] );
            res = refalrts::splice_elem( res, context[65] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@7/4 (/7 e.MainName#3/55 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/57 )/14 (/21 # Closure/37 # Metatable/54 e.#0/59 )/22 e.Tail#1/61 >/1
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          context[62] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_Metatable], context[54] ) )
            continue;
          // closed e.MainName#3 as range 55
          // closed e.Scanned#1 as range 57
          // closed e.#0 as range 59
          // closed e.Tail#1 as range 61
          //DEBUG: s.NextNumber#1: 9
          //DEBUG: e.MainName#3: 55
          //DEBUG: e.Scanned#1: 57
          //DEBUG: e.#0: 59
          //DEBUG: e.Tail#1: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/55 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/57 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/61 } )/63 </64 & Add/65 1/66 Tile{ AsIs: s.NextNumber#1/9 } >/67 (/68 # Closure/69 (/70 e.MainName#3/55/71 '\\'/73 s.NextNumber#1/9/74 Tile{ HalfReuse: )/37 AsIs: # Metatable/54 AsIs: e.#0/59 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[63]);
          refalrts::alloc_open_call(vm, context[64]);
          refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[66], 1UL);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::alloc_ident(vm, context[69], identifiers[ident_Closure]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::copy_evar(vm, context[71], context[72], context[55], context[56]);
          refalrts::alloc_char(vm, context[73], '\\');
          refalrts::copy_stvar(vm, context[74], context[9]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::reinit_close_bracket(context[37]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[68], context[22] );
          refalrts::link_brackets( context[70], context[37] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[64] );
          refalrts::link_brackets( context[21], context[63] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[37], context[22] );
          res = refalrts::splice_evar( res, context[67], context[74] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_evar( res, context[63], context[66] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[13], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@7/4 (/7 e.MainName#3/46 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/48 )/14 (/21 # Closure/37 e.0#0/50 )/22 e.Tail#1/52 >/1
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        // closed e.MainName#3 as range 46
        // closed e.Scanned#1 as range 48
        // closed e.0#0 as range 50
        // closed e.Tail#1 as range 52
        //DEBUG: s.NextNumber#1: 9
        //DEBUG: e.MainName#3: 46
        //DEBUG: e.Scanned#1: 48
        //DEBUG: e.0#0: 50
        //DEBUG: e.Tail#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/46 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/48 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/52 } )/54 </55 & Add/56 1/57 Tile{ AsIs: s.NextNumber#1/9 } >/58 (/59 # Closure/60 (/61 e.MainName#3/46/62 '\\'/64 s.NextNumber#1/9/65 )/66 </67 & NameNestedBody*4/68 (/69 e.MainName#3/46/70 '\\'/72 s.NextNumber#1/9/73 Tile{ HalfReuse: )/37 AsIs: e.0#0/50 HalfReuse: >/22 } )/74 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[57], 1UL);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::alloc_open_bracket(vm, context[59]);
        refalrts::alloc_ident(vm, context[60], identifiers[ident_Closure]);
        refalrts::alloc_open_bracket(vm, context[61]);
        refalrts::copy_evar(vm, context[62], context[63], context[46], context[47]);
        refalrts::alloc_char(vm, context[64], '\\');
        refalrts::copy_stvar(vm, context[65], context[9]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_gen_NameNestedBody_D4]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::copy_evar(vm, context[70], context[71], context[46], context[47]);
        refalrts::alloc_char(vm, context[72], '\\');
        refalrts::copy_stvar(vm, context[73], context[9]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::reinit_close_call(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[59], context[74] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[69], context[37] );
        refalrts::link_brackets( context[61], context[66] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[55] );
        refalrts::link_brackets( context[21], context[54] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[74] );
        res = refalrts::splice_evar( res, context[37], context[22] );
        res = refalrts::splice_evar( res, context[58], context[73] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@7/4 (/7 e.MainName#3/29 )/8 s.NextNumber#1/9 (/13 e.Scanned#1/31 )/14 t.Next#1/21 e.Tail#1/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      // closed e.MainName#3 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.Next#1: 21
      //DEBUG: s.NextNumber#1: 9
      //DEBUG: e.MainName#3: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#3/29 AsIs: )/8 AsIs: s.NextNumber#1/9 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/31 } Tile{ AsIs: t.Next#1/21 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@7/4 (/7 e.MainName#3/23 )/8 t.Acc#1/9 (/13 e.Scanned#1/25 )/14 t.Next#1/21 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.MainName#3 as range 23
    // closed e.Scanned#1 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.Acc#1: 9
    //DEBUG: t.Next#1: 21
    //DEBUG: e.MainName#3: 23
    //DEBUG: e.Scanned#1: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: (/7 AsIs: e.MainName#3/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail#1/27 } )/30 </31 & NameNestedResultRec-Term*5/32 e.MainName#3/23/33 Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/21 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_NameNestedResultRecm_Term_D5]);
    refalrts::copy_evar(vm, context[33], context[34], context[23], context[24]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@7/4 (/7 e.MainName#3/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.MainName#3 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.MainName#3: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@7/4 (/7 e.MainName#3/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@7/4 (/7 e.MainName#3/5 )/8 t.acc#0/9 (/13 e.scanned#0/11 )/14 e.items#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.scanned#0 as range 11
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 9
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.scanned#0: 11
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & DoMapAccum@0/0 HalfReuse: (/4 HalfReuse: & NameNestedResultRec-Term@0/7 AsIs: e.MainName#3/5 AsIs: )/8 AsIs: t.acc#0/9 AsIs: (/13 AsIs: e.scanned#0/11 AsIs: )/14 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_NameNestedResultRecm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z7("DoMapAccum@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 136 elems
  refalrts::Iter context[136];
  refalrts::zeros( context, 136 );
  // </0 & DoMapAccum@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@8/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@8/4 (/7 e.new#8/15 )/8 t.new#5/9 (/13 e.new#9/17 )/14 t.new#6/21 e.new#7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new#8 as range 15
    // closed e.new#9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new#7 as range 19
    do {
      // </0 & DoMapAccum@8/4 (/7 e.new#13/23 )/8 s.new#10/9 (/13 e.new#14/25 )/14 (/21 e.new#11/29 )/22 e.new#12/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = 0;
      context[30] = 0;
      if( ! refalrts::brackets_term( context[29], context[30], context[21] ) )
        continue;
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new#13 as range 23
      // closed e.new#14 as range 25
      // closed e.new#11 as range 29
      // closed e.new#12 as range 27
      do {
        // </0 & DoMapAccum@8/4 (/7 e.new#19/31 )/8 s.new#15/9 (/13 e.new#20/33 )/14 (/21 s.new#16/39 e.new#17/35 )/22 e.new#18/37 >/1
        context[31] = context[23];
        context[32] = context[24];
        context[33] = context[25];
        context[34] = context[26];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[27];
        context[38] = context[28];
        // closed e.new#19 as range 31
        // closed e.new#20 as range 33
        // closed e.new#18 as range 37
        if( ! refalrts::svar_left( context[39], context[35], context[36] ) )
          continue;
        // closed e.new#17 as range 35
        do {
          // </0 & DoMapAccum@8/4 (/7 e.new#24/40 )/8 s.new#21/9 (/13 e.new#25/42 )/14 (/21 # Sentences/39 e.new#22/44 )/22 e.new#23/46 >/1
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[33];
          context[43] = context[34];
          context[44] = context[35];
          context[45] = context[36];
          context[46] = context[37];
          context[47] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[39] ) )
            continue;
          // closed e.new#24 as range 40
          // closed e.new#25 as range 42
          // closed e.new#22 as range 44
          // closed e.new#23 as range 46
          do {
            // </0 & DoMapAccum@8/4 (/7 e.MainName#3/48 )/8 s.BlockNumber#2/9 (/13 e.Scanned#1/50 )/14 (/21 # Sentences/39 (/58 (/62 e.4#0/60 )/63 e.7#0/56 (/70 e.8#0/68 )/71 (/66 e.6#0/64 )/67 )/59 )/22 e.Tail#1/54 >/1
            context[48] = context[40];
            context[49] = context[41];
            context[50] = context[42];
            context[51] = context[43];
            context[52] = context[44];
            context[53] = context[45];
            context[54] = context[46];
            context[55] = context[47];
            context[56] = 0;
            context[57] = 0;
            context[58] = refalrts::brackets_left( context[56], context[57], context[52], context[53] );
            if( ! context[58] )
              continue;
            refalrts::bracket_pointers(context[58], context[59]);
            context[60] = 0;
            context[61] = 0;
            context[62] = refalrts::brackets_left( context[60], context[61], context[56], context[57] );
            if( ! context[62] )
              continue;
            refalrts::bracket_pointers(context[62], context[63]);
            context[64] = 0;
            context[65] = 0;
            context[66] = refalrts::brackets_right( context[64], context[65], context[56], context[57] );
            if( ! context[66] )
              continue;
            refalrts::bracket_pointers(context[66], context[67]);
            context[68] = 0;
            context[69] = 0;
            context[70] = refalrts::brackets_right( context[68], context[69], context[56], context[57] );
            if( ! context[70] )
              continue;
            refalrts::bracket_pointers(context[70], context[71]);
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            // closed e.MainName#3 as range 48
            // closed e.Scanned#1 as range 50
            // closed e.4#0 as range 60
            // closed e.7#0 as range 56
            // closed e.8#0 as range 68
            // closed e.6#0 as range 64
            // closed e.Tail#1 as range 54
            //DEBUG: s.BlockNumber#2: 9
            //DEBUG: e.MainName#3: 48
            //DEBUG: e.Scanned#1: 50
            //DEBUG: e.4#0: 60
            //DEBUG: e.7#0: 56
            //DEBUG: e.8#0: 68
            //DEBUG: e.6#0: 64
            //DEBUG: e.Tail#1: 54

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/48 AsIs: )/8 } (/72 Tile{ AsIs: e.Scanned#1/50 } )/73 (/74 Tile{ AsIs: e.Tail#1/54 } )/75 </76 & Add/77 1/78 s.BlockNumber#2/9/79 >/80 Tile{ AsIs: (/70 } (/81 e.MainName#3/48/82 ':'/84 Tile{ HalfReuse: s.BlockNumber2 #9/14 HalfReuse: )/21 AsIs: # Sentences/39 AsIs: (/58 AsIs: (/62 AsIs: e.4#0/60 AsIs: )/63 } </85 & DelAccumulator/86 </87 & DoMapAccum/88 [*]/89 & NameNestedAssigns\1/90 (/91 e.MainName#3/48/92 ':'/94 Tile{ AsIs: s.BlockNumber#2/9 HalfReuse: )/13 } {*}/95 1/96 (/97 )/98 Tile{ AsIs: e.7#0/56 } >/99 >/100 (/101 </102 & DelAccumulator/103 </104 & DoMapAccum/105 (/106 & NameNestedResultRec-Term/107 e.MainName#3/48/108 ':'/110 s.BlockNumber#2/9/111 )/112 1/113 (/114 )/115 Tile{ AsIs: e.8#0/68 } >/116 >/117 )/118 (/119 </120 & NameNestedBlocks=1/121 </122 & DoMapAccum/123 [*]/124 & NameNestedBlocks=1\1/125 (/126 e.MainName#3/48/127 ':'/129 s.BlockNumber#2/9/130 )/131 {*}/132 1/133 Tile{ HalfReuse: (/71 HalfReuse: )/66 AsIs: e.6#0/64 HalfReuse: >/67 HalfReuse: >/59 AsIs: )/22 } )/134 )/135 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[72]);
            refalrts::alloc_close_bracket(vm, context[73]);
            refalrts::alloc_open_bracket(vm, context[74]);
            refalrts::alloc_close_bracket(vm, context[75]);
            refalrts::alloc_open_call(vm, context[76]);
            refalrts::alloc_name(vm, context[77], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[78], 1UL);
            refalrts::copy_stvar(vm, context[79], context[9]);
            refalrts::alloc_close_call(vm, context[80]);
            refalrts::alloc_open_bracket(vm, context[81]);
            refalrts::copy_evar(vm, context[82], context[83], context[48], context[49]);
            refalrts::alloc_char(vm, context[84], ':');
            refalrts::alloc_open_call(vm, context[85]);
            refalrts::alloc_name(vm, context[86], functions[efunc_DelAccumulator]);
            refalrts::alloc_open_call(vm, context[87]);
            refalrts::alloc_name(vm, context[88], functions[efunc_DoMapAccum]);
            refalrts::alloc_closure_head(vm, context[89]);
            refalrts::alloc_name(vm, context[90], functions[efunc_gen_NameNestedAssigns_L1]);
            refalrts::alloc_open_bracket(vm, context[91]);
            refalrts::copy_evar(vm, context[92], context[93], context[48], context[49]);
            refalrts::alloc_char(vm, context[94], ':');
            refalrts::alloc_unwrapped_closure(vm, context[95], context[89]);
            refalrts::alloc_number(vm, context[96], 1UL);
            refalrts::alloc_open_bracket(vm, context[97]);
            refalrts::alloc_close_bracket(vm, context[98]);
            refalrts::alloc_close_call(vm, context[99]);
            refalrts::alloc_close_call(vm, context[100]);
            refalrts::alloc_open_bracket(vm, context[101]);
            refalrts::alloc_open_call(vm, context[102]);
            refalrts::alloc_name(vm, context[103], functions[efunc_DelAccumulator]);
            refalrts::alloc_open_call(vm, context[104]);
            refalrts::alloc_name(vm, context[105], functions[efunc_DoMapAccum]);
            refalrts::alloc_open_bracket(vm, context[106]);
            refalrts::alloc_name(vm, context[107], functions[efunc_NameNestedResultRecm_Term]);
            refalrts::copy_evar(vm, context[108], context[109], context[48], context[49]);
            refalrts::alloc_char(vm, context[110], ':');
            refalrts::copy_stvar(vm, context[111], context[9]);
            refalrts::alloc_close_bracket(vm, context[112]);
            refalrts::alloc_number(vm, context[113], 1UL);
            refalrts::alloc_open_bracket(vm, context[114]);
            refalrts::alloc_close_bracket(vm, context[115]);
            refalrts::alloc_close_call(vm, context[116]);
            refalrts::alloc_close_call(vm, context[117]);
            refalrts::alloc_close_bracket(vm, context[118]);
            refalrts::alloc_open_bracket(vm, context[119]);
            refalrts::alloc_open_call(vm, context[120]);
            refalrts::alloc_name(vm, context[121], functions[efunc_gen_NameNestedBlocks_A1]);
            refalrts::alloc_open_call(vm, context[122]);
            refalrts::alloc_name(vm, context[123], functions[efunc_DoMapAccum]);
            refalrts::alloc_closure_head(vm, context[124]);
            refalrts::alloc_name(vm, context[125], functions[efunc_gen_NameNestedBlocks_A1L1]);
            refalrts::alloc_open_bracket(vm, context[126]);
            refalrts::copy_evar(vm, context[127], context[128], context[48], context[49]);
            refalrts::alloc_char(vm, context[129], ':');
            refalrts::copy_stvar(vm, context[130], context[9]);
            refalrts::alloc_close_bracket(vm, context[131]);
            refalrts::alloc_unwrapped_closure(vm, context[132], context[124]);
            refalrts::alloc_number(vm, context[133], 1UL);
            refalrts::alloc_close_bracket(vm, context[134]);
            refalrts::alloc_close_bracket(vm, context[135]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
            refalrts::reinit_svar( context[14], context[9] );
            refalrts::reinit_close_bracket(context[21]);
            refalrts::reinit_close_bracket(context[13]);
            refalrts::reinit_open_bracket(context[71]);
            refalrts::reinit_close_bracket(context[66]);
            refalrts::reinit_close_call(context[67]);
            refalrts::reinit_close_call(context[59]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[70], context[135] );
            refalrts::link_brackets( context[58], context[134] );
            refalrts::link_brackets( context[119], context[22] );
            refalrts::push_stack( vm, context[59] );
            refalrts::push_stack( vm, context[120] );
            refalrts::push_stack( vm, context[67] );
            refalrts::push_stack( vm, context[122] );
            refalrts::link_brackets( context[71], context[66] );
            refalrts::link_brackets( context[126], context[131] );
            refalrts::link_brackets( context[101], context[118] );
            refalrts::push_stack( vm, context[117] );
            refalrts::push_stack( vm, context[102] );
            refalrts::push_stack( vm, context[116] );
            refalrts::push_stack( vm, context[104] );
            refalrts::link_brackets( context[114], context[115] );
            refalrts::link_brackets( context[106], context[112] );
            refalrts::push_stack( vm, context[100] );
            refalrts::push_stack( vm, context[85] );
            refalrts::push_stack( vm, context[99] );
            refalrts::push_stack( vm, context[87] );
            refalrts::link_brackets( context[97], context[98] );
            refalrts::link_brackets( context[91], context[13] );
            refalrts::link_brackets( context[62], context[63] );
            refalrts::link_brackets( context[81], context[21] );
            refalrts::push_stack( vm, context[80] );
            refalrts::push_stack( vm, context[76] );
            refalrts::link_brackets( context[74], context[75] );
            refalrts::link_brackets( context[72], context[73] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[134], context[135] );
            res = refalrts::splice_evar( res, context[71], context[22] );
            res = refalrts::splice_evar( res, context[116], context[133] );
            res = refalrts::splice_evar( res, context[68], context[69] );
            res = refalrts::splice_evar( res, context[99], context[115] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_evar( res, context[95], context[98] );
            res = refalrts::splice_evar( res, context[9], context[13] );
            res = refalrts::splice_evar( res, context[85], context[94] );
            res = refalrts::splice_evar( res, context[14], context[63] );
            res = refalrts::splice_evar( res, context[81], context[84] );
            res = refalrts::splice_elem( res, context[70] );
            res = refalrts::splice_evar( res, context[75], context[80] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_evar( res, context[50], context[51] );
            res = refalrts::splice_elem( res, context[72] );
            refalrts::use( res );
            refalrts::wrap_closure( context[95] );
            refalrts::wrap_closure( context[132] );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@8/4 (/7 e.MainName#3/48 )/8 s.BlockNumber#2/9 (/13 e.Scanned#1/50 )/14 (/21 # Sentences/39 e.0#0/52 )/22 e.Tail#1/54 >/1
          context[48] = context[40];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          // closed e.MainName#3 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.0#0 as range 52
          // closed e.Tail#1 as range 54
          //DEBUG: s.BlockNumber#2: 9
          //DEBUG: e.MainName#3: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.0#0: 52
          //DEBUG: e.Tail#1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/48 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/50 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/54 } )/56 </57 & Add/58 1/59 Tile{ AsIs: s.BlockNumber#2/9 } >/60 (/61 (/62 e.MainName#3/48/63 ':'/65 s.BlockNumber#2/9/66 )/67 # Sentences/68 </69 & DelAccumulator/70 </71 & DoMapAccum/72 [*]/73 & NameNestedBody$2\1/74 (/75 e.MainName#3/48/76 ':'/78 s.BlockNumber#2/9/79 )/80 {*}/81 1/82 (/83 Tile{ HalfReuse: )/39 AsIs: e.0#0/52 HalfReuse: >/22 } >/84 )/85 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::alloc_open_call(vm, context[57]);
          refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[59], 1UL);
          refalrts::alloc_close_call(vm, context[60]);
          refalrts::alloc_open_bracket(vm, context[61]);
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::copy_evar(vm, context[63], context[64], context[48], context[49]);
          refalrts::alloc_char(vm, context[65], ':');
          refalrts::copy_stvar(vm, context[66], context[9]);
          refalrts::alloc_close_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_Sentences]);
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_name(vm, context[72], functions[efunc_DoMapAccum]);
          refalrts::alloc_closure_head(vm, context[73]);
          refalrts::alloc_name(vm, context[74], functions[efunc_gen_NameNestedBody_S2L1]);
          refalrts::alloc_open_bracket(vm, context[75]);
          refalrts::copy_evar(vm, context[76], context[77], context[48], context[49]);
          refalrts::alloc_char(vm, context[78], ':');
          refalrts::copy_stvar(vm, context[79], context[9]);
          refalrts::alloc_close_bracket(vm, context[80]);
          refalrts::alloc_unwrapped_closure(vm, context[81], context[73]);
          refalrts::alloc_number(vm, context[82], 1UL);
          refalrts::alloc_open_bracket(vm, context[83]);
          refalrts::alloc_close_call(vm, context[84]);
          refalrts::alloc_close_bracket(vm, context[85]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
          refalrts::reinit_close_bracket(context[39]);
          refalrts::reinit_close_call(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[61], context[85] );
          refalrts::push_stack( vm, context[84] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[71] );
          refalrts::link_brackets( context[83], context[39] );
          refalrts::link_brackets( context[75], context[80] );
          refalrts::link_brackets( context[62], context[67] );
          refalrts::push_stack( vm, context[60] );
          refalrts::push_stack( vm, context[57] );
          refalrts::link_brackets( context[21], context[56] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[84], context[85] );
          res = refalrts::splice_evar( res, context[39], context[22] );
          res = refalrts::splice_evar( res, context[60], context[83] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_evar( res, context[56], context[59] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[13], context[21] );
          refalrts::use( res );
          refalrts::wrap_closure( context[81] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@8/4 (/7 e.MainName#3/40 )/8 s.BlockNumber#2/9 (/13 e.Scanned#1/42 )/14 (/21 # NativeBody/39 t.0#0/48 e.1#0/44 )/22 e.Tail#1/46 >/1
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[33];
          context[43] = context[34];
          context[44] = context[35];
          context[45] = context[36];
          context[46] = context[37];
          context[47] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[39] ) )
            continue;
          // closed e.MainName#3 as range 40
          // closed e.Scanned#1 as range 42
          // closed e.Tail#1 as range 46
          context[49] = refalrts::tvar_left( context[48], context[44], context[45] );
          if( ! context[49] )
            continue;
          // closed e.1#0 as range 44
          //DEBUG: s.BlockNumber#2: 9
          //DEBUG: e.MainName#3: 40
          //DEBUG: e.Scanned#1: 42
          //DEBUG: e.Tail#1: 46
          //DEBUG: t.0#0: 48
          //DEBUG: e.1#0: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/40 AsIs: )/8 } (/50 Tile{ AsIs: e.Scanned#1/42 } )/51 (/52 Tile{ AsIs: e.Tail#1/46 } )/53 </54 & Add/55 1/56 Tile{ AsIs: s.BlockNumber#2/9 HalfReuse: >/13 } (/57 (/58 e.MainName#3/40/59 ':'/61 Tile{ HalfReuse: s.BlockNumber2 #9/14 HalfReuse: )/21 AsIs: # NativeBody/39 AsIs: t.0#0/48 AsIs: e.1#0/44 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_close_bracket(vm, context[53]);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[56], 1UL);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::alloc_open_bracket(vm, context[58]);
          refalrts::copy_evar(vm, context[59], context[60], context[40], context[41]);
          refalrts::alloc_char(vm, context[61], ':');
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_svar( context[14], context[9] );
          refalrts::reinit_close_bracket(context[21]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[57], context[22] );
          refalrts::link_brackets( context[58], context[21] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[54] );
          refalrts::link_brackets( context[52], context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[14], context[22] );
          res = refalrts::splice_evar( res, context[57], context[61] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          res = refalrts::splice_evar( res, context[53], context[56] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[50] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@8/4 (/7 e.MainName#3/40 )/8 s.BlockNumber#2/9 (/13 e.Scanned#1/42 )/14 (/21 # Metatable/39 e.0#0/44 )/22 e.Tail#1/46 >/1
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[39] ) )
          continue;
        // closed e.MainName#3 as range 40
        // closed e.Scanned#1 as range 42
        // closed e.0#0 as range 44
        // closed e.Tail#1 as range 46
        //DEBUG: s.BlockNumber#2: 9
        //DEBUG: e.MainName#3: 40
        //DEBUG: e.Scanned#1: 42
        //DEBUG: e.0#0: 44
        //DEBUG: e.Tail#1: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/40 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/42 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/46 } )/48 </49 & Add/50 1/51 Tile{ AsIs: s.BlockNumber#2/9 } >/52 (/53 (/54 e.MainName#3/40/55 ':'/57 s.BlockNumber#2/9/58 )/59 Tile{ AsIs: # Metatable/39 AsIs: e.0#0/44 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_char(vm, context[57], ':');
        refalrts::copy_stvar(vm, context[58], context[9]);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[53], context[22] );
        refalrts::link_brackets( context[54], context[59] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[21], context[48] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[39], context[22] );
        res = refalrts::splice_evar( res, context[52], context[59] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[48], context[51] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@8/4 (/7 e.MainName#3/31 )/8 s.BlockNumber#2/9 (/13 e.Scanned#1/33 )/14 (/21 e.#0/35 )/22 e.Tail#1/37 >/1
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[27];
      context[38] = context[28];
      // closed e.MainName#3 as range 31
      // closed e.Scanned#1 as range 33
      // closed e.#0 as range 35
      // closed e.Tail#1 as range 37
      //DEBUG: s.BlockNumber#2: 9
      //DEBUG: e.MainName#3: 31
      //DEBUG: e.Scanned#1: 33
      //DEBUG: e.#0: 35
      //DEBUG: e.Tail#1: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/31 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/33 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail#1/37 } )/39 </40 & Add/41 1/42 Tile{ AsIs: s.BlockNumber#2/9 } >/43 (/44 (/45 e.MainName#3/31/46 ':'/48 s.BlockNumber#2/9/49 Tile{ AsIs: )/22 } </50 & NameNestedBody*4/51 (/52 e.MainName#3/31/53 ':'/55 s.BlockNumber#2/9/56 )/57 Tile{ AsIs: e.#0/35 } >/58 )/59 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
      refalrts::alloc_char(vm, context[48], ':');
      refalrts::copy_stvar(vm, context[49], context[9]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_gen_NameNestedBody_D4]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::copy_evar(vm, context[53], context[54], context[31], context[32]);
      refalrts::alloc_char(vm, context[55], ':');
      refalrts::copy_stvar(vm, context[56], context[9]);
      refalrts::alloc_close_bracket(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[59] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[52], context[57] );
      refalrts::link_brackets( context[45], context[22] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[21], context[39] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[50], context[57] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[43], context[49] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[13], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@8/4 (/7 e.MainName#3/23 )/8 t.Acc#1/9 (/13 e.Scanned#1/25 )/14 t.Next#1/21 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.MainName#3 as range 23
    // closed e.Scanned#1 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.Acc#1: 9
    //DEBUG: t.Next#1: 21
    //DEBUG: e.MainName#3: 23
    //DEBUG: e.Scanned#1: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: (/7 AsIs: e.MainName#3/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail#1/27 } )/30 </31 & NameNestedBlocks=1\1*1/32 (/33 e.MainName#3/23/34 )/36 Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/21 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_NameNestedBlocks_A1L1D1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[36] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@8/4 (/7 e.MainName#3/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.MainName#3 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.MainName#3: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@8/4 (/7 e.MainName#3/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@8/4 (/7 e.MainName#3/5 )/8 t.acc#0/9 (/13 e.scanned#0/11 )/14 e.items#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.scanned#0 as range 11
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 9
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.scanned#0: 11
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & NameNestedBlocks=1\1@0/15 (/16 Tile{ AsIs: e.MainName#3/5 } )/17 Tile{ HalfReuse: {*}/8 AsIs: t.acc#0/9 AsIs: (/13 AsIs: e.scanned#0/11 AsIs: )/14 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_NameNestedBlocks_A1L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z8("DoMapAccum@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 101 elems
  refalrts::Iter context[101];
  refalrts::zeros( context, 101 );
  // </0 & DoMapAccum@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@9/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@9/4 (/7 e.new#8/15 )/8 t.new#5/9 (/13 e.new#9/17 )/14 t.new#6/21 e.new#7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new#8 as range 15
    // closed e.new#9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new#7 as range 19
    do {
      // </0 & DoMapAccum@9/4 (/7 e.MainName#1/23 )/8 s.SentenceNumber#2/9 (/13 e.Scanned#1/25 )/14 (/21 (/33 e.1#0/31 )/34 e.4#0/29 (/41 e.5#0/39 )/42 (/37 e.3#0/35 )/38 )/22 e.Tail#1/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = 0;
      context[30] = 0;
      if( ! refalrts::brackets_term( context[29], context[30], context[21] ) )
        continue;
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[29], context[30] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_right( context[39], context[40], context[29], context[30] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.MainName#1 as range 23
      // closed e.Scanned#1 as range 25
      // closed e.1#0 as range 31
      // closed e.4#0 as range 29
      // closed e.5#0 as range 39
      // closed e.3#0 as range 35
      // closed e.Tail#1 as range 27
      //DEBUG: s.SentenceNumber#2: 9
      //DEBUG: e.MainName#1: 23
      //DEBUG: e.Scanned#1: 25
      //DEBUG: e.1#0: 31
      //DEBUG: e.4#0: 29
      //DEBUG: e.5#0: 39
      //DEBUG: e.3#0: 35
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 AsIs: (/7 AsIs: e.MainName#1/23 AsIs: )/8 } (/43 Tile{ AsIs: e.Scanned#1/25 } Tile{ AsIs: )/38 HalfReuse: (/22 AsIs: e.Tail#1/27 HalfReuse: )/1 } </44 & Add/45 1/46 s.SentenceNumber#2/9/47 Tile{ HalfReuse: >/14 AsIs: (/21 AsIs: (/33 AsIs: e.1#0/31 AsIs: )/34 } </48 & DelAccumulator/49 </50 & DoMapAccum/51 [*]/52 & NameNestedAssigns\1/53 (/54 e.MainName#1/23/55 '$'/57 Tile{ AsIs: s.SentenceNumber#2/9 HalfReuse: )/13 } {*}/58 1/59 (/60 )/61 Tile{ AsIs: e.4#0/29 } >/62 >/63 (/64 </65 & DelAccumulator/66 </67 & DoMapAccum/68 (/69 & NameNestedResultRec-Term/70 e.MainName#1/23/71 '$'/73 s.SentenceNumber#2/9/74 )/75 1/76 (/77 Tile{ HalfReuse: )/41 AsIs: e.5#0/39 HalfReuse: >/42 HalfReuse: >/37 } )/78 (/79 </80 & NameNestedBlocks=1/81 </82 & DoMapAccum/83 [*]/84 & NameNestedBlocks=1\1/85 (/86 e.MainName#1/23/87 '$'/89 s.SentenceNumber#2/9/90 )/91 {*}/92 1/93 (/94 )/95 Tile{ AsIs: e.3#0/35 } >/96 >/97 )/98 )/99 >/100 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::copy_stvar(vm, context[47], context[9]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_DelAccumulator]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_DoMapAccum]);
      refalrts::alloc_closure_head(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_NameNestedAssigns_L1]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::copy_evar(vm, context[55], context[56], context[23], context[24]);
      refalrts::alloc_char(vm, context[57], '$');
      refalrts::alloc_unwrapped_closure(vm, context[58], context[52]);
      refalrts::alloc_number(vm, context[59], 1UL);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::alloc_open_call(vm, context[65]);
      refalrts::alloc_name(vm, context[66], functions[efunc_DelAccumulator]);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_DoMapAccum]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_name(vm, context[70], functions[efunc_NameNestedResultRecm_Term]);
      refalrts::copy_evar(vm, context[71], context[72], context[23], context[24]);
      refalrts::alloc_char(vm, context[73], '$');
      refalrts::copy_stvar(vm, context[74], context[9]);
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::alloc_number(vm, context[76], 1UL);
      refalrts::alloc_open_bracket(vm, context[77]);
      refalrts::alloc_close_bracket(vm, context[78]);
      refalrts::alloc_open_bracket(vm, context[79]);
      refalrts::alloc_open_call(vm, context[80]);
      refalrts::alloc_name(vm, context[81], functions[efunc_gen_NameNestedBlocks_A1]);
      refalrts::alloc_open_call(vm, context[82]);
      refalrts::alloc_name(vm, context[83], functions[efunc_DoMapAccum]);
      refalrts::alloc_closure_head(vm, context[84]);
      refalrts::alloc_name(vm, context[85], functions[efunc_gen_NameNestedBlocks_A1L1]);
      refalrts::alloc_open_bracket(vm, context[86]);
      refalrts::copy_evar(vm, context[87], context[88], context[23], context[24]);
      refalrts::alloc_char(vm, context[89], '$');
      refalrts::copy_stvar(vm, context[90], context[9]);
      refalrts::alloc_close_bracket(vm, context[91]);
      refalrts::alloc_unwrapped_closure(vm, context[92], context[84]);
      refalrts::alloc_number(vm, context[93], 1UL);
      refalrts::alloc_open_bracket(vm, context[94]);
      refalrts::alloc_close_bracket(vm, context[95]);
      refalrts::alloc_close_call(vm, context[96]);
      refalrts::alloc_close_call(vm, context[97]);
      refalrts::alloc_close_bracket(vm, context[98]);
      refalrts::alloc_close_bracket(vm, context[99]);
      refalrts::alloc_close_call(vm, context[100]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_close_bracket(context[41]);
      refalrts::reinit_close_call(context[42]);
      refalrts::reinit_close_call(context[37]);
      refalrts::push_stack( vm, context[100] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[99] );
      refalrts::link_brackets( context[79], context[98] );
      refalrts::push_stack( vm, context[97] );
      refalrts::push_stack( vm, context[80] );
      refalrts::push_stack( vm, context[96] );
      refalrts::push_stack( vm, context[82] );
      refalrts::link_brackets( context[94], context[95] );
      refalrts::link_brackets( context[86], context[91] );
      refalrts::link_brackets( context[64], context[78] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[67] );
      refalrts::link_brackets( context[77], context[41] );
      refalrts::link_brackets( context[69], context[75] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[60], context[61] );
      refalrts::link_brackets( context[54], context[13] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[22], context[1] );
      refalrts::link_brackets( context[43], context[38] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[96], context[100] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[78], context[95] );
      res = refalrts::splice_evar( res, context[41], context[37] );
      res = refalrts::splice_evar( res, context[62], context[77] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[58], context[61] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[48], context[57] );
      res = refalrts::splice_evar( res, context[14], context[34] );
      res = refalrts::splice_evar( res, context[44], context[47] );
      res = refalrts::splice_evar( res, context[38], context[1] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::use( res );
      refalrts::wrap_closure( context[58] );
      refalrts::wrap_closure( context[92] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@9/4 (/7 e.MainName#1/23 )/8 t.Acc#1/9 (/13 e.Scanned#1/25 )/14 t.Next#1/21 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.MainName#1 as range 23
    // closed e.Scanned#1 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.Acc#1: 9
    //DEBUG: t.Next#1: 21
    //DEBUG: e.MainName#1: 23
    //DEBUG: e.Scanned#1: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 AsIs: (/7 AsIs: e.MainName#1/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail#1/27 } )/30 </31 & NameNestedBody$2\1*1/32 (/33 e.MainName#1/23/34 )/36 Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/21 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_NameNestedBody_S2L1D1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[36] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@9/4 (/7 e.MainName#1/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.MainName#1 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.MainName#1: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@9/4 (/7 e.MainName#1/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@9/4 (/7 e.MainName#1/5 )/8 t.acc#0/9 (/13 e.scanned#0/11 )/14 e.items#0/2 >/1
  // closed e.MainName#1 as range 5
  // closed e.scanned#0 as range 11
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 9
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.scanned#0: 11
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & NameNestedBody$2\1@0/15 (/16 Tile{ AsIs: e.MainName#1/5 } )/17 Tile{ HalfReuse: {*}/8 AsIs: t.acc#0/9 AsIs: (/13 AsIs: e.scanned#0/11 AsIs: )/14 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_NameNestedBody_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z9("DoMapAccum@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z9);


static refalrts::FnResult func_gen_Map_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@13/4 t.Next#1/7 e.Tail#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail#1 as range 5
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemoveAssigns-Sentence/4 AsIs: t.Next#1/7 } >/9 </10 & Map@13/11 Tile{ AsIs: e.Tail#1/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z13]);
    refalrts::update_name(context[4], functions[efunc_RemoveAssignsm_Sentence]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@13/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@13/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@13/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemoveAssigns-Sentence@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z13("Map@13", COOKIE1_, COOKIE2_, func_gen_Map_Z13);


static refalrts::FnResult func_gen_Map_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Map@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@14/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@14/4 (/7 # Function/13 s.new#3/14 (/17 e.new#4/15 )/18 e.new#5/11 )/8 e.new#6/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.new#6 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      // closed e.new#4 as range 15
      // closed e.new#5 as range 11
      do {
        // </0 & Map@14/4 (/7 # Function/13 s.new#7/14 (/17 e.new#10/19 )/18 s.new#8/25 e.new#9/21 )/8 e.new#11/23 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[11];
        context[22] = context[12];
        context[23] = context[9];
        context[24] = context[10];
        // closed e.new#10 as range 19
        // closed e.new#11 as range 23
        if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
          continue;
        // closed e.new#9 as range 21
        do {
          // </0 & Map@14/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/26 )/18 # Sentences/25 e.#0/28 )/8 e.Tail#1/30 >/1
          context[26] = context[19];
          context[27] = context[20];
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[25] ) )
            continue;
          // closed e.3#0 as range 26
          // closed e.#0 as range 28
          // closed e.Tail#1 as range 30
          //DEBUG: s.ScopeClass#2: 14
          //DEBUG: e.3#0: 26
          //DEBUG: e.#0: 28
          //DEBUG: e.Tail#1: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/26 AsIs: )/18 AsIs: # Sentences/25 } Tile{ AsIs: </0 Reuse: & Map@13/4 } Tile{ AsIs: e.#0/28 } >/32 )/33 </34 Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_close_bracket(vm, context[33]);
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z13]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[34] );
          refalrts::link_brackets( context[7], context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[32], context[34] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@14/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/26 )/18 # NativeBody/25 t.0#0/32 e.0#0/28 )/8 e.Tail#1/30 >/1
          context[26] = context[19];
          context[27] = context[20];
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[25] ) )
            continue;
          // closed e.3#0 as range 26
          // closed e.Tail#1 as range 30
          context[33] = refalrts::tvar_left( context[32], context[28], context[29] );
          if( ! context[33] )
            continue;
          // closed e.0#0 as range 28
          //DEBUG: s.ScopeClass#2: 14
          //DEBUG: e.3#0: 26
          //DEBUG: e.Tail#1: 30
          //DEBUG: t.0#0: 32
          //DEBUG: e.0#0: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/26 AsIs: )/18 AsIs: # NativeBody/25 AsIs: t.0#0/32 AsIs: e.0#0/28 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.Tail#1/30 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@14/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/26 )/18 # Metatable/25 e.#0/28 )/8 e.Tail#1/30 >/1
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[25] ) )
          continue;
        // closed e.3#0 as range 26
        // closed e.#0 as range 28
        // closed e.Tail#1 as range 30
        //DEBUG: s.ScopeClass#2: 14
        //DEBUG: e.3#0: 26
        //DEBUG: e.#0: 28
        //DEBUG: e.Tail#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/26 AsIs: )/18 AsIs: # Metatable/25 AsIs: e.#0/28 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.Tail#1/30 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@14/4 (/7 # Function/13 s.ScopeClass#2/14 (/17 e.3#0/19 )/18 e.2#0/21 )/8 e.Tail#1/23 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[9];
      context[24] = context[10];
      // closed e.3#0 as range 19
      // closed e.2#0 as range 21
      // closed e.Tail#1 as range 23
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.3#0: 19
      //DEBUG: e.2#0: 21
      //DEBUG: e.Tail#1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass#2/14 AsIs: (/17 AsIs: e.3#0/19 AsIs: )/18 } Tile{ AsIs: </0 Reuse: & RemoveAssigns-Sentences*3/4 } Tile{ AsIs: e.2#0/21 } >/25 )/26 </27 Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail#1/23 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Sentences_D3]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[7], context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@14/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@14/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@14/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@14/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & Pass-RemoveBlocksAndAssigns\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z14("Map@14", COOKIE1_, COOKIE2_, func_gen_Map_Z14);


static refalrts::FnResult func_gen_Map_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Map@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@15/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@15/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@15/4 (/7 # Brackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & Map@15/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@15/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z15]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z15]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@15/4 (/7 # ADT-Brackets/13 (/20 e.2#0/18 )/21 e.1#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
        if( ! context[20] )
          continue;
        refalrts::bracket_pointers(context[20], context[21]);
        // closed e.2#0 as range 18
        // closed e.1#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.2#0: 18
        //DEBUG: e.1#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.2#0/18 AsIs: )/21 } Tile{ AsIs: </0 AsIs: & Map@15/4 } Tile{ AsIs: e.1#0/14 } >/22 )/23 </24 Tile{ HalfReuse: & Map@15/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@15/4 (/7 # CallBrackets/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@15/13 AsIs: e.0#0/14 HalfReuse: >/8 } )/18 </19 & Map@15/20 Tile{ AsIs: e.Tail#1/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z15]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z15]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@15/4 (/7 # Closure/13 (/20 e.new#6/18 )/21 e.new#7/14 )/8 e.new#8/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.new#6 as range 18
      // closed e.new#7 as range 14
      // closed e.new#8 as range 16
      do {
        // </0 & Map@15/4 (/7 # Closure/13 (/20 e.new#11/22 )/21 s.new#9/28 e.new#10/24 )/8 e.new#12/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[14];
        context[25] = context[15];
        context[26] = context[16];
        context[27] = context[17];
        // closed e.new#11 as range 22
        // closed e.new#12 as range 26
        if( ! refalrts::svar_left( context[28], context[24], context[25] ) )
          continue;
        // closed e.new#10 as range 24
        do {
          // </0 & Map@15/4 (/7 # Closure/13 (/20 e.2#0/29 )/21 # Sentences/28 e.#0/31 )/8 e.Tail#1/33 >/1
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[28] ) )
            continue;
          // closed e.2#0 as range 29
          // closed e.#0 as range 31
          // closed e.Tail#1 as range 33
          //DEBUG: e.2#0: 29
          //DEBUG: e.#0: 31
          //DEBUG: e.Tail#1: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: (/20 AsIs: e.2#0/29 AsIs: )/21 AsIs: # Sentences/28 } Tile{ AsIs: </0 Reuse: & Map@13/4 } Tile{ AsIs: e.#0/31 } >/35 )/36 </37 Tile{ HalfReuse: & Map@15/8 AsIs: e.Tail#1/33 AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_close_bracket(vm, context[36]);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z13]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z15]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[37] );
          refalrts::link_brackets( context[7], context[36] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[20], context[21] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[35], context[37] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@15/4 (/7 # Closure/13 (/20 e.2#0/29 )/21 # NativeBody/28 t.0#0/35 e.0#0/31 )/8 e.Tail#1/33 >/1
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          context[34] = context[27];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[28] ) )
            continue;
          // closed e.2#0 as range 29
          // closed e.Tail#1 as range 33
          context[36] = refalrts::tvar_left( context[35], context[31], context[32] );
          if( ! context[36] )
            continue;
          // closed e.0#0 as range 31
          //DEBUG: e.2#0: 29
          //DEBUG: e.Tail#1: 33
          //DEBUG: t.0#0: 35
          //DEBUG: e.0#0: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: (/20 AsIs: e.2#0/29 AsIs: )/21 AsIs: # NativeBody/28 AsIs: t.0#0/35 AsIs: e.0#0/31 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@15/4 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[20], context[21] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@15/4 (/7 # Closure/13 (/20 e.2#0/29 )/21 # Metatable/28 e.#0/31 )/8 e.Tail#1/33 >/1
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[28] ) )
          continue;
        // closed e.2#0 as range 29
        // closed e.#0 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: e.2#0: 29
        //DEBUG: e.#0: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: (/20 AsIs: e.2#0/29 AsIs: )/21 AsIs: # Metatable/28 AsIs: e.#0/31 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@15/4 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@15/4 (/7 # Closure/13 (/20 e.2#0/22 )/21 e.1#0/24 )/8 e.Tail#1/26 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[14];
      context[25] = context[15];
      context[26] = context[16];
      context[27] = context[17];
      // closed e.2#0 as range 22
      // closed e.1#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: e.2#0: 22
      //DEBUG: e.1#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: (/20 AsIs: e.2#0/22 AsIs: )/21 } Tile{ AsIs: </0 Reuse: & RemoveAssigns-Sentences*3/4 } Tile{ AsIs: e.1#0/24 } >/28 )/29 </30 Tile{ HalfReuse: & Map@15/8 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Sentences_D3]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[7], context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@15/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@15/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@15/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@15/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@15/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemoveAssigns-Result\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Result_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z15("Map@15", COOKIE1_, COOKIE2_, func_gen_Map_Z15);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Reduce@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@1/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@1/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Reduce@1/4 (/5 e.#0/13 )/6 (/9 (/19 e.2#0/17 )/20 e.1#0/15 )/10 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[9] ) )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.#0 as range 13
      // closed e.2#0 as range 17
      // closed e.1#0 as range 15
      // closed e.Tail#1 as range 11
      //DEBUG: e.#0: 13
      //DEBUG: e.2#0: 17
      //DEBUG: e.1#0: 15
      //DEBUG: e.Tail#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: (/5 } (/21 # CallBrackets/22 Tile{ HalfReuse: (/6 HalfReuse: # Closure/9 AsIs: (/19 AsIs: e.2#0/17 AsIs: )/20 AsIs: e.1#0/15 AsIs: )/10 } Tile{ AsIs: e.#0/13 } )/23 )/24 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_CallBrackets]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::reinit_open_bracket(context[6]);
      refalrts::reinit_ident(context[9], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[24] );
      refalrts::link_brackets( context[21], context[23] );
      refalrts::link_brackets( context[6], context[10] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[6], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1@1/14 (/15 Tile{ AsIs: e.Tail#1/11 } )/16 Tile{ AsIs: </0 Reuse: & RemoveAssigns-WindBlocks\1*1/4 AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_WindBlocks_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & RemoveAssigns-WindBlocks\1@0/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_WindBlocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_Map_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@16/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@16/4 (/7 # Condition/13 (/16 e.2#0/14 )/17 (/20 e.4#0/18 )/21 (/24 e.6#0/22 )/25 (/28 e.8#0/26 )/29 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Condition], context[11], context[12] );
      if( ! context[13] )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[11], context[12] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[11], context[12] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.2#0 as range 14
      // closed e.4#0 as range 18
      // closed e.6#0 as range 22
      // closed e.8#0 as range 26
      // closed e.Tail#1 as range 9
      //DEBUG: e.2#0: 14
      //DEBUG: e.4#0: 18
      //DEBUG: e.6#0: 22
      //DEBUG: e.8#0: 26
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </7 HalfReuse: & RemoveAssigns-Conditions\1=1/13 AsIs: (/16 AsIs: e.2#0/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.8#0/26 } Tile{ AsIs: )/21 } Tile{ AsIs: </0 Reuse: & Reduce@1/4 } (/30 Tile{ AsIs: e.4#0/18 } Tile{ HalfReuse: )/24 AsIs: e.6#0/22 HalfReuse: >/25 HalfReuse: >/28 } Tile{ HalfReuse: </29 HalfReuse: & Map@16/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_RemoveAssignsm_Conditions_L1A1]);
      refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
      refalrts::reinit_close_bracket(context[24]);
      refalrts::reinit_close_call(context[25]);
      refalrts::reinit_close_call(context[28]);
      refalrts::reinit_open_call(context[29]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[24] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[24], context[28] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@16/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RemoveAssigns-Conditions\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@16/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z16]);
    refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Conditions_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@16/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@16/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@16/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemoveAssigns-Conditions\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_Conditions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z16("Map@16", COOKIE1_, COOKIE2_, func_gen_Map_Z16);


static refalrts::FnResult func_gen_DoMapAccum_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 57 elems
  refalrts::Iter context[57];
  refalrts::zeros( context, 57 );
  // </0 & DoMapAccum@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@10/4 s.new#1/5 t.new#2/6 (/10 e.new#3/8 )/11 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new#3 as range 8
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@10/4 s.new#5/5 t.new#6/6 (/10 e.new#9/12 )/11 t.new#7/16 e.new#8/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new#9 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.new#8 as range 14
    do {
      // </0 & DoMapAccum@10/4 s.MarkupContext#1/5 (/6 (/28 e.6#0/26 )/29 (/32 e.8#0/30 )/33 )/7 (/10 e.Scanned#1/18 )/11 (/16 (/36 e.2#0/34 )/37 e.3#0/24 (/40 e.4#0/38 )/41 )/17 e.Tail#1/20 >/1
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[6] ) )
        continue;
      context[24] = 0;
      context[25] = 0;
      if( ! refalrts::brackets_term( context[24], context[25], context[16] ) )
        continue;
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[22], context[23] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[22], context[23] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[24], context[25] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_right( context[38], context[39], context[24], context[25] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.6#0 as range 26
      // closed e.8#0 as range 30
      // closed e.Scanned#1 as range 18
      // closed e.2#0 as range 34
      // closed e.3#0 as range 24
      // closed e.4#0 as range 38
      // closed e.Tail#1 as range 20
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.6#0: 26
      //DEBUG: e.8#0: 30
      //DEBUG: e.Scanned#1: 18
      //DEBUG: e.2#0: 34
      //DEBUG: e.3#0: 24
      //DEBUG: e.4#0: 38
      //DEBUG: e.Tail#1: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@10/33 HalfReuse: s.MarkupContext1 #5/7 AsIs: (/10 AsIs: e.Scanned#1/18 AsIs: )/11 AsIs: (/16 } Tile{ AsIs: e.Tail#1/20 } )/42 </43 Tile{ HalfReuse: & ExtractNested-Sentence=1@1/6 AsIs: (/28 AsIs: e.6#0/26 AsIs: )/29 AsIs: (/32 } e.2#0/34/44 Tile{ HalfReuse: )/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: (/40 AsIs: e.4#0/38 AsIs: )/41 HalfReuse: (/17 } Tile{ AsIs: e.3#0/24 } )/46 </47 & MapAccum@2/48 (/49 Tile{ AsIs: e.8#0/30 } )/50 </51 & Uniq/52 </53 Tile{ HalfReuse: & ExtractAllVars/36 AsIs: e.2#0/34 HalfReuse: >/37 } >/54 >/55 >/56 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[34], context[35]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_MapAccum_Z2]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_Uniq]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_name(context[33], functions[efunc_gen_DoMapAccum_S1A1Z10]);
      refalrts::reinit_svar( context[7], context[5] );
      refalrts::reinit_name(context[6], functions[efunc_gen_ExtractNestedm_Sentence_A1Z1]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_name(context[36], functions[efunc_ExtractAllVars]);
      refalrts::reinit_close_call(context[37]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[53] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::link_brackets( context[17], context[46] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[32], context[4] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[42] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[50], context[53] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[40], context[17] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[6], context[32] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[33], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@10/4 s.MarkupContext#1/5 t.Acc#1/6 (/10 e.Scanned#1/18 )/11 t.Next#1/16 e.Tail#1/20 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    // closed e.Scanned#1 as range 18
    // closed e.Tail#1 as range 20
    //DEBUG: t.Acc#1: 6
    //DEBUG: t.Next#1: 16
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Scanned#1: 18
    //DEBUG: e.Tail#1: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: (/10 AsIs: e.Scanned#1/18 AsIs: )/11 } (/22 Tile{ AsIs: e.Tail#1/20 } )/23 </24 & ExtractNested-Sentence*1/25 s.MarkupContext#1/5/26 Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: t.Next#1/16 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_ExtractNestedm_Sentence_D1]);
    refalrts::copy_stvar(vm, context[26], context[5]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[23], context[26] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@10/4 s.MarkupContext#1/5 t.Acc#1/6 (/10 e.Scanned#1/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 12
    //DEBUG: t.Acc#1: 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Scanned#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@10/4 s.MarkupContext#1/5 {REMOVED TILE} (/10 {REMOVED TILE} )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: e.Scanned#1/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@10/4 s.MarkupContext#1/5 t.acc#0/6 (/10 e.scanned#0/8 )/11 e.items#0/2 >/1
  // closed e.scanned#0 as range 8
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 6
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.scanned#0: 8
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } (/12 & ExtractNested-Sentence@0/13 Tile{ AsIs: s.MarkupContext#1/5 } )/14 Tile{ AsIs: t.acc#0/6 AsIs: (/10 AsIs: e.scanned#0/8 AsIs: )/11 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[12], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z10("DoMapAccum@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z10);


static refalrts::FnResult func_gen_Map_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & Map@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@17/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map@17/4 s.new#3/5 t.new#4/8 e.new#5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new#5 as range 6
    do {
      // </0 & Map@17/4 s.new#6/5 (/8 # Function/14 s.new#7/15 (/18 e.new#8/16 )/19 e.new#9/12 )/9 e.new#10/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      context[14] = refalrts::ident_left( identifiers[ident_Function], context[12], context[13] );
      if( ! context[14] )
        continue;
      // closed e.new#10 as range 10
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::brackets_left( context[16], context[17], context[12], context[13] );
      if( ! context[18] )
        continue;
      refalrts::bracket_pointers(context[18], context[19]);
      // closed e.new#8 as range 16
      // closed e.new#9 as range 12
      do {
        // </0 & Map@17/4 s.new#11/5 (/8 # Function/14 s.new#12/15 (/18 e.new#15/20 )/19 s.new#13/26 e.new#14/22 )/9 e.new#16/24 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[12];
        context[23] = context[13];
        context[24] = context[10];
        context[25] = context[11];
        // closed e.new#15 as range 20
        // closed e.new#16 as range 24
        if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
          continue;
        // closed e.new#14 as range 22
        do {
          // </0 & Map@17/4 s.MarkupContext#1/5 (/8 # Function/14 s.ScopeClass#2/15 (/18 e.3#0/27 )/19 # Sentences/26 e.#0/29 )/9 e.Tail#1/31 >/1
          context[27] = context[20];
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[26] ) )
            continue;
          // closed e.3#0 as range 27
          // closed e.#0 as range 29
          // closed e.Tail#1 as range 31
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: s.ScopeClass#2: 15
          //DEBUG: e.3#0: 27
          //DEBUG: e.#0: 29
          //DEBUG: e.Tail#1: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Pass-FlatNestedFuncs\1$1=1/14 AsIs: s.ScopeClass#2/15 AsIs: (/18 AsIs: e.3#0/27 AsIs: )/19 HalfReuse: </26 } & ExtractNested=1/33 </34 & ExtractNestedRec$1=1/35 Tile{ AsIs: </0 Reuse: & DoMapAccum@10/4 AsIs: s.MarkupContext#1/5 } (/36 (/37 )/38 (/39 )/40 )/41 (/42 )/43 Tile{ AsIs: e.#0/29 } >/44 >/45 >/46 >/47 </48 & Map@17/49 Tile{ HalfReuse: s.MarkupContext1 #5/9 AsIs: e.Tail#1/31 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractNested_A1]);
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::alloc_name(vm, context[35], functions[efunc_gen_ExtractNestedRec_S1A1]);
          refalrts::alloc_open_bracket(vm, context[36]);
          refalrts::alloc_open_bracket(vm, context[37]);
          refalrts::alloc_close_bracket(vm, context[38]);
          refalrts::alloc_open_bracket(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::alloc_open_bracket(vm, context[42]);
          refalrts::alloc_close_bracket(vm, context[43]);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_close_call(vm, context[45]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_open_call(vm, context[48]);
          refalrts::alloc_name(vm, context[49], functions[efunc_gen_Map_Z17]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[14], functions[efunc_gen_Passm_FlatNestedFuncs_L1S1A1]);
          refalrts::reinit_open_call(context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
          refalrts::reinit_svar( context[9], context[5] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::link_brackets( context[36], context[41] );
          refalrts::link_brackets( context[39], context[40] );
          refalrts::link_brackets( context[37], context[38] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[9];
          res = refalrts::splice_evar( res, context[44], context[49] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[36], context[43] );
          res = refalrts::splice_evar( res, context[0], context[5] );
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[8], context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@17/4 s.MarkupContext#1/5 (/8 # Function/14 s.ScopeClass#2/15 (/18 e.3#0/27 )/19 # NativeBody/26 t.0#0/33 e.0#0/29 )/9 e.Tail#1/31 >/1
          context[27] = context[20];
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[26] ) )
            continue;
          // closed e.3#0 as range 27
          // closed e.Tail#1 as range 31
          context[34] = refalrts::tvar_left( context[33], context[29], context[30] );
          if( ! context[34] )
            continue;
          // closed e.0#0 as range 29
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: s.ScopeClass#2: 15
          //DEBUG: e.3#0: 27
          //DEBUG: e.Tail#1: 31
          //DEBUG: t.0#0: 33
          //DEBUG: e.0#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Function/14 AsIs: s.ScopeClass#2/15 AsIs: (/18 AsIs: e.3#0/27 AsIs: )/19 AsIs: # NativeBody/26 AsIs: t.0#0/33 AsIs: e.0#0/29 AsIs: )/9 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[0], context[5] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@17/4 s.MarkupContext#1/5 (/8 # Function/14 s.ScopeClass#2/15 (/18 e.3#0/27 )/19 # Metatable/26 e.#0/29 )/9 e.Tail#1/31 >/1
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[26] ) )
          continue;
        // closed e.3#0 as range 27
        // closed e.#0 as range 29
        // closed e.Tail#1 as range 31
        //DEBUG: s.MarkupContext#1: 5
        //DEBUG: s.ScopeClass#2: 15
        //DEBUG: e.3#0: 27
        //DEBUG: e.#0: 29
        //DEBUG: e.Tail#1: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Function/14 AsIs: s.ScopeClass#2/15 AsIs: (/18 AsIs: e.3#0/27 AsIs: )/19 AsIs: # Metatable/26 AsIs: e.#0/29 AsIs: )/9 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@17/4 s.MarkupContext#1/5 (/8 # Function/14 s.ScopeClass#2/15 (/18 e.3#0/20 )/19 e.2#0/22 )/9 e.Tail#1/24 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[10];
      context[25] = context[11];
      // closed e.3#0 as range 20
      // closed e.2#0 as range 22
      // closed e.Tail#1 as range 24
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: s.ScopeClass#2: 15
      //DEBUG: e.3#0: 20
      //DEBUG: e.2#0: 22
      //DEBUG: e.Tail#1: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Pass-FlatNestedFuncs\1$1=1/14 AsIs: s.ScopeClass#2/15 AsIs: (/18 AsIs: e.3#0/20 AsIs: )/19 } </26 & ExtractNested=1/27 Tile{ AsIs: </0 Reuse: & ExtractNestedRec*3/4 AsIs: s.MarkupContext#1/5 } (/28 )/29 Tile{ AsIs: e.2#0/22 } >/30 >/31 >/32 </33 & Map@17/34 Tile{ HalfReuse: s.MarkupContext1 #5/9 AsIs: e.Tail#1/24 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_ExtractNested_A1]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z17]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Passm_FlatNestedFuncs_L1S1A1]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedRec_D3]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      res = refalrts::splice_evar( res, context[30], context[34] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[8], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@17/4 s.MarkupContext#1/5 t.Next#1/8 e.Tail#1/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail#1 as range 10
    //DEBUG: t.Next#1: 8
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Tail#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/8 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.Tail#1/10 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@17/4 s.MarkupContext#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.MarkupContext#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@17/4 s.MarkupContext#1/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@17/4 s.MarkupContext#1/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/6 & Pass-FlatNestedFuncs\1@0/7 Tile{ AsIs: s.MarkupContext#1/5 } {*}/8 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Passm_FlatNestedFuncs_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[8], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z17("Map@17", COOKIE1_, COOKIE2_, func_gen_Map_Z17);


static refalrts::FnResult func_gen_DoMapAccum_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & DoMapAccum@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@11/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 (/14 e.new#4/12 )/15 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new#4 as range 12
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum@11/4 s.new#6/5 (/8 e.new#10/16 )/9 t.new#7/10 (/14 e.new#11/18 )/15 t.new#8/22 e.new#9/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.new#10 as range 16
    // closed e.new#11 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    // closed e.new#9 as range 20
    do {
      // </0 & DoMapAccum@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/24 )/9 (/10 (/36 e.6#0/34 )/37 (/40 e.8#0/38 )/41 )/11 (/14 e.Scanned#1/26 )/15 (/22 (/44 e.2#0/42 )/45 e.3#0/32 (/48 e.4#0/46 )/49 )/23 e.Tail#1/28 >/1
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = 0;
      context[31] = 0;
      if( ! refalrts::brackets_term( context[30], context[31], context[10] ) )
        continue;
      context[32] = 0;
      context[33] = 0;
      if( ! refalrts::brackets_term( context[32], context[33], context[22] ) )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[30], context[31] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[30], context[31] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[32], context[33] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_right( context[46], context[47], context[32], context[33] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.ScopeVars#1 as range 24
      // closed e.6#0 as range 34
      // closed e.8#0 as range 38
      // closed e.Scanned#1 as range 26
      // closed e.2#0 as range 42
      // closed e.3#0 as range 32
      // closed e.4#0 as range 46
      // closed e.Tail#1 as range 28
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 24
      //DEBUG: e.6#0: 34
      //DEBUG: e.8#0: 38
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.2#0: 42
      //DEBUG: e.3#0: 32
      //DEBUG: e.4#0: 46
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/24 AsIs: )/9 AsIs: (/10 } Tile{ AsIs: e.Scanned#1/26 } Tile{ AsIs: )/15 } Tile{ AsIs: (/36 } Tile{ AsIs: e.Tail#1/28 } )/50 </51 & ExtractNested-Sentence=1/52 (/53 Tile{ AsIs: e.6#0/34 } Tile{ HalfReuse: )/22 AsIs: (/44 AsIs: e.2#0/42 AsIs: )/45 } s.MarkupContext#1/5/54 (/55 e.ScopeVars#1/24/56 )/58 Tile{ AsIs: (/48 AsIs: e.4#0/46 AsIs: )/49 HalfReuse: (/23 } Tile{ AsIs: e.3#0/32 } )/59 </60 & MapAccum@1/61 (/62 e.ScopeVars#1/24/63 Tile{ AsIs: )/37 AsIs: (/40 AsIs: e.8#0/38 AsIs: )/41 HalfReuse: </11 HalfReuse: & Uniq/14 } </65 & ExtractAllVars/66 e.2#0/42/67 >/69 >/70 >/71 >/72 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_gen_ExtractNestedm_Sentence_A1]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::copy_stvar(vm, context[54], context[5]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::copy_evar(vm, context[56], context[57], context[24], context[25]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[61], functions[efunc_gen_MapAccum_Z1]);
      refalrts::alloc_open_bracket(vm, context[62]);
      refalrts::copy_evar(vm, context[63], context[64], context[24], context[25]);
      refalrts::alloc_open_call(vm, context[65]);
      refalrts::alloc_name(vm, context[66], functions[efunc_ExtractAllVars]);
      refalrts::copy_evar(vm, context[67], context[68], context[42], context[43]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::alloc_close_call(vm, context[70]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::alloc_close_call(vm, context[72]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
      refalrts::reinit_close_bracket(context[22]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[14], functions[efunc_Uniq]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[72] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[65] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[62], context[37] );
      refalrts::link_brackets( context[23], context[59] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::link_brackets( context[55], context[58] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[53], context[22] );
      refalrts::link_brackets( context[36], context[50] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[65], context[72] );
      res = refalrts::splice_evar( res, context[37], context[14] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[59], context[62] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[48], context[23] );
      res = refalrts::splice_evar( res, context[54], context[58] );
      res = refalrts::splice_evar( res, context[22], context[45] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[50], context[53] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/24 )/9 t.Acc#1/10 (/14 e.Scanned#1/26 )/15 t.Next#1/22 e.Tail#1/28 >/1
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    // closed e.ScopeVars#1 as range 24
    // closed e.Scanned#1 as range 26
    // closed e.Tail#1 as range 28
    //DEBUG: t.Acc#1: 10
    //DEBUG: t.Next#1: 22
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 24
    //DEBUG: e.Scanned#1: 26
    //DEBUG: e.Tail#1: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/24 AsIs: )/9 } Tile{ AsIs: (/14 AsIs: e.Scanned#1/26 AsIs: )/15 } (/30 Tile{ AsIs: e.Tail#1/28 } )/31 </32 & ExtractNested-Sentence*1/33 s.MarkupContext#1/5/34 e.ScopeVars#1/24/35 Tile{ AsIs: t.Acc#1/10 } Tile{ AsIs: t.Next#1/22 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractNestedm_Sentence_D1]);
    refalrts::copy_stvar(vm, context[34], context[5]);
    refalrts::copy_evar(vm, context[35], context[36], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/16 )/9 t.Acc#1/10 (/14 e.Scanned#1/18 )/15 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 16
    // closed e.Scanned#1 as range 18
    //DEBUG: t.Acc#1: 10
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 16
    //DEBUG: e.Scanned#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/16 )/9 {REMOVED TILE} (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/10 } Tile{ AsIs: e.Scanned#1/18 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 t.acc#0/10 (/14 e.scanned#0/12 )/15 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.scanned#0 as range 12
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 10
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.scanned#0: 12
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } (/16 & ExtractNested-Sentence@0/17 Tile{ HalfReuse: s.MarkupContext1 #5/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 AsIs: t.acc#0/10 AsIs: (/14 AsIs: e.scanned#0/12 AsIs: )/15 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[16], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z11("DoMapAccum@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z11);


static refalrts::FnResult func_gen_DoMapAccum_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 141 elems
  refalrts::Iter context[141];
  refalrts::zeros( context, 141 );
  // </0 & DoMapAccum@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@12/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 t.new#4/14 (/18 e.new#5/16 )/19 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new#5 as range 16
  // closed e.new#6 as range 2
  do {
    // </0 & DoMapAccum@12/4 s.new#7/5 (/8 e.new#11/20 )/9 (/12 e.new#12/22 )/13 t.new#8/14 (/18 e.new#13/24 )/19 t.new#9/28 e.new#10/26 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.new#11 as range 20
    // closed e.new#12 as range 22
    // closed e.new#13 as range 24
    context[29] = refalrts::tvar_left( context[28], context[26], context[27] );
    if( ! context[29] )
      continue;
    // closed e.new#10 as range 26
    do {
      // </0 & DoMapAccum@12/4 s.new#14/5 (/8 e.new#19/30 )/9 (/12 e.new#20/32 )/13 (/14 (/42 e.new#15/40 )/43 (/46 e.new#16/44 )/47 )/15 (/18 e.new#21/34 )/19 t.new#17/28 e.new#18/36 >/1
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = 0;
      context[39] = 0;
      if( ! refalrts::brackets_term( context[38], context[39], context[14] ) )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_left( context[44], context[45], context[38], context[39] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new#19 as range 30
      // closed e.new#20 as range 32
      // closed e.new#15 as range 40
      // closed e.new#16 as range 44
      // closed e.new#21 as range 34
      // closed e.new#18 as range 36
      do {
        // </0 & DoMapAccum@12/4 s.new#22/5 (/8 e.new#28/48 )/9 (/12 e.new#29/50 )/13 (/14 (/42 e.new#23/52 )/43 (/46 e.new#24/54 )/47 )/15 (/18 e.new#30/56 )/19 (/28 s.new#25/62 e.new#26/60 )/29 e.new#27/58 >/1
        context[48] = context[30];
        context[49] = context[31];
        context[50] = context[32];
        context[51] = context[33];
        context[52] = context[40];
        context[53] = context[41];
        context[54] = context[44];
        context[55] = context[45];
        context[56] = context[34];
        context[57] = context[35];
        context[58] = context[36];
        context[59] = context[37];
        context[60] = 0;
        context[61] = 0;
        if( ! refalrts::brackets_term( context[60], context[61], context[28] ) )
          continue;
        // closed e.new#28 as range 48
        // closed e.new#29 as range 50
        // closed e.new#23 as range 52
        // closed e.new#24 as range 54
        // closed e.new#30 as range 56
        // closed e.new#27 as range 58
        if( ! refalrts::svar_left( context[62], context[60], context[61] ) )
          continue;
        // closed e.new#26 as range 60
        do {
          // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/63 )/9 (/12 e.LocalVars#3/65 )/13 (/14 (/42 e.2#0/67 )/43 (/46 e.4#0/69 )/47 )/15 (/18 e.Scanned#1/71 )/19 (/28 # TkVariable/62 s.Mode#1/77 e.6#0/73 )/29 e.Tail#1/75 >/1
          context[63] = context[48];
          context[64] = context[49];
          context[65] = context[50];
          context[66] = context[51];
          context[67] = context[52];
          context[68] = context[53];
          context[69] = context[54];
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[60];
          context[74] = context[61];
          context[75] = context[58];
          context[76] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[62] ) )
            continue;
          // closed e.ScopeVars#1 as range 63
          // closed e.LocalVars#3 as range 65
          // closed e.2#0 as range 67
          // closed e.4#0 as range 69
          // closed e.Scanned#1 as range 71
          // closed e.Tail#1 as range 75
          if( ! refalrts::svar_left( context[77], context[73], context[74] ) )
            continue;
          // closed e.6#0 as range 73
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: e.ScopeVars#1: 63
          //DEBUG: e.LocalVars#3: 65
          //DEBUG: e.2#0: 67
          //DEBUG: e.4#0: 69
          //DEBUG: e.Scanned#1: 71
          //DEBUG: e.Tail#1: 75
          //DEBUG: s.Mode#1: 77
          //DEBUG: e.6#0: 73

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/63 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/65 AsIs: )/13 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/71 } )/78 Tile{ AsIs: (/42 } Tile{ AsIs: e.Tail#1/75 } )/79 (/80 (/81 Tile{ AsIs: e.2#0/67 } )/82 </83 & CheckBorrowed/84 (/85 e.ScopeVars#1/63/86 Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/69 AsIs: )/47 HalfReuse: (/15 HalfReuse: s.Mode1 #77/18 } e.6#0/73/88 )/90 >/91 Tile{ AsIs: )/19 AsIs: (/28 AsIs: # TkVariable/62 AsIs: s.Mode#1/77 AsIs: e.6#0/73 AsIs: )/29 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[78]);
          refalrts::alloc_close_bracket(vm, context[79]);
          refalrts::alloc_open_bracket(vm, context[80]);
          refalrts::alloc_open_bracket(vm, context[81]);
          refalrts::alloc_close_bracket(vm, context[82]);
          refalrts::alloc_open_call(vm, context[83]);
          refalrts::alloc_name(vm, context[84], functions[efunc_CheckBorrowed]);
          refalrts::alloc_open_bracket(vm, context[85]);
          refalrts::copy_evar(vm, context[86], context[87], context[63], context[64]);
          refalrts::copy_evar(vm, context[88], context[89], context[73], context[74]);
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_close_call(vm, context[91]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
          refalrts::reinit_open_bracket(context[15]);
          refalrts::reinit_svar( context[18], context[77] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[80], context[19] );
          refalrts::push_stack( vm, context[91] );
          refalrts::push_stack( vm, context[83] );
          refalrts::link_brackets( context[15], context[90] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[85], context[43] );
          refalrts::link_brackets( context[81], context[82] );
          refalrts::link_brackets( context[42], context[79] );
          refalrts::link_brackets( context[14], context[78] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[19], context[29] );
          res = refalrts::splice_evar( res, context[90], context[91] );
          res = refalrts::splice_evar( res, context[88], context[89] );
          res = refalrts::splice_evar( res, context[43], context[18] );
          res = refalrts::splice_evar( res, context[86], context[87] );
          res = refalrts::splice_evar( res, context[82], context[85] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[79], context[81] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_elem( res, context[78] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/63 )/9 (/12 e.LocalVars#3/65 )/13 (/14 (/42 e.2#0/67 )/43 (/46 e.4#0/69 )/47 )/15 (/18 e.Scanned#1/71 )/19 (/28 # Brackets/62 e.5#0/73 )/29 e.Tail#1/75 >/1
          context[63] = context[48];
          context[64] = context[49];
          context[65] = context[50];
          context[66] = context[51];
          context[67] = context[52];
          context[68] = context[53];
          context[69] = context[54];
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[60];
          context[74] = context[61];
          context[75] = context[58];
          context[76] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[62] ) )
            continue;
          // closed e.ScopeVars#1 as range 63
          // closed e.LocalVars#3 as range 65
          // closed e.2#0 as range 67
          // closed e.4#0 as range 69
          // closed e.Scanned#1 as range 71
          // closed e.5#0 as range 73
          // closed e.Tail#1 as range 75
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: e.ScopeVars#1: 63
          //DEBUG: e.LocalVars#3: 65
          //DEBUG: e.2#0: 67
          //DEBUG: e.4#0: 69
          //DEBUG: e.Scanned#1: 71
          //DEBUG: e.5#0: 73
          //DEBUG: e.Tail#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </77 & DoMapAccum$1=1@12/78 s.MarkupContext#1/5/79 (/80 e.ScopeVars#1/63/81 )/83 (/84 e.LocalVars#3/65/85 Tile{ AsIs: )/19 AsIs: (/28 } Tile{ AsIs: e.Scanned#1/71 } )/87 (/88 Tile{ AsIs: e.Tail#1/75 } )/89 </90 & ExtractNested-Result-Term$2=1/91 (/92 Tile{ AsIs: e.2#0/67 } )/93 </94 & ExtractNested-Result=1/95 Tile{ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/63 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/65 AsIs: )/13 AsIs: (/14 AsIs: (/42 } Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/69 AsIs: )/47 AsIs: )/15 AsIs: (/18 } Tile{ HalfReuse: )/62 AsIs: e.5#0/73 HalfReuse: >/29 } >/96 >/97 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[77]);
          refalrts::alloc_name(vm, context[78], functions[efunc_gen_DoMapAccum_S1A1Z12]);
          refalrts::copy_stvar(vm, context[79], context[5]);
          refalrts::alloc_open_bracket(vm, context[80]);
          refalrts::copy_evar(vm, context[81], context[82], context[63], context[64]);
          refalrts::alloc_close_bracket(vm, context[83]);
          refalrts::alloc_open_bracket(vm, context[84]);
          refalrts::copy_evar(vm, context[85], context[86], context[65], context[66]);
          refalrts::alloc_close_bracket(vm, context[87]);
          refalrts::alloc_open_bracket(vm, context[88]);
          refalrts::alloc_close_bracket(vm, context[89]);
          refalrts::alloc_open_call(vm, context[90]);
          refalrts::alloc_name(vm, context[91], functions[efunc_gen_ExtractNestedm_Resultm_Term_S2A1]);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::alloc_close_bracket(vm, context[93]);
          refalrts::alloc_open_call(vm, context[94]);
          refalrts::alloc_name(vm, context[95], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[96]);
          refalrts::alloc_close_call(vm, context[97]);
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_close_call(context[29]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[90] );
          refalrts::push_stack( vm, context[96] );
          refalrts::push_stack( vm, context[94] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[18], context[62] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[92], context[93] );
          refalrts::link_brackets( context[88], context[89] );
          refalrts::link_brackets( context[28], context[87] );
          refalrts::link_brackets( context[84], context[19] );
          refalrts::link_brackets( context[80], context[83] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[96], context[97] );
          res = refalrts::splice_evar( res, context[62], context[29] );
          res = refalrts::splice_evar( res, context[43], context[18] );
          res = refalrts::splice_evar( res, context[0], context[42] );
          res = refalrts::splice_evar( res, context[93], context[95] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[89], context[92] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[19], context[28] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_evar( res, context[77], context[84] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/63 )/9 (/12 e.LocalVars#3/65 )/13 (/14 (/42 e.2#0/67 )/43 (/46 e.4#0/69 )/47 )/15 (/18 e.Scanned#1/71 )/19 (/28 # ADT-Brackets/62 (/79 e.7#0/77 )/80 e.6#0/73 )/29 e.Tail#1/75 >/1
          context[63] = context[48];
          context[64] = context[49];
          context[65] = context[50];
          context[66] = context[51];
          context[67] = context[52];
          context[68] = context[53];
          context[69] = context[54];
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[60];
          context[74] = context[61];
          context[75] = context[58];
          context[76] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[62] ) )
            continue;
          context[77] = 0;
          context[78] = 0;
          context[79] = refalrts::brackets_left( context[77], context[78], context[73], context[74] );
          if( ! context[79] )
            continue;
          refalrts::bracket_pointers(context[79], context[80]);
          // closed e.ScopeVars#1 as range 63
          // closed e.LocalVars#3 as range 65
          // closed e.2#0 as range 67
          // closed e.4#0 as range 69
          // closed e.Scanned#1 as range 71
          // closed e.7#0 as range 77
          // closed e.6#0 as range 73
          // closed e.Tail#1 as range 75
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: e.ScopeVars#1: 63
          //DEBUG: e.LocalVars#3: 65
          //DEBUG: e.2#0: 67
          //DEBUG: e.4#0: 69
          //DEBUG: e.Scanned#1: 71
          //DEBUG: e.7#0: 77
          //DEBUG: e.6#0: 73
          //DEBUG: e.Tail#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </81 & DoMapAccum$1=1@12/82 s.MarkupContext#1/5/83 (/84 e.ScopeVars#1/63/85 Tile{ AsIs: )/19 AsIs: (/28 } e.LocalVars#3/65/87 Tile{ AsIs: )/29 } (/89 Tile{ AsIs: e.Scanned#1/71 } )/90 (/91 Tile{ AsIs: e.Tail#1/75 } )/92 </93 & ExtractNested-Result-Term$3=1/94 (/95 Tile{ AsIs: e.2#0/67 } Tile{ HalfReuse: )/62 AsIs: (/79 AsIs: e.7#0/77 AsIs: )/80 } </96 & ExtractNested-Result=1/97 Tile{ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/63 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/65 AsIs: )/13 AsIs: (/14 AsIs: (/42 } Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/69 AsIs: )/47 AsIs: )/15 AsIs: (/18 } )/98 Tile{ AsIs: e.6#0/73 } >/99 >/100 >/101 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[81]);
          refalrts::alloc_name(vm, context[82], functions[efunc_gen_DoMapAccum_S1A1Z12]);
          refalrts::copy_stvar(vm, context[83], context[5]);
          refalrts::alloc_open_bracket(vm, context[84]);
          refalrts::copy_evar(vm, context[85], context[86], context[63], context[64]);
          refalrts::copy_evar(vm, context[87], context[88], context[65], context[66]);
          refalrts::alloc_open_bracket(vm, context[89]);
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_open_bracket(vm, context[91]);
          refalrts::alloc_close_bracket(vm, context[92]);
          refalrts::alloc_open_call(vm, context[93]);
          refalrts::alloc_name(vm, context[94], functions[efunc_gen_ExtractNestedm_Resultm_Term_S3A1]);
          refalrts::alloc_open_bracket(vm, context[95]);
          refalrts::alloc_open_call(vm, context[96]);
          refalrts::alloc_name(vm, context[97], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_bracket(vm, context[98]);
          refalrts::alloc_close_call(vm, context[99]);
          refalrts::alloc_close_call(vm, context[100]);
          refalrts::alloc_close_call(vm, context[101]);
          refalrts::reinit_close_bracket(context[62]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[101] );
          refalrts::push_stack( vm, context[93] );
          refalrts::push_stack( vm, context[100] );
          refalrts::push_stack( vm, context[96] );
          refalrts::push_stack( vm, context[99] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[18], context[98] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[79], context[80] );
          refalrts::link_brackets( context[95], context[62] );
          refalrts::link_brackets( context[91], context[92] );
          refalrts::link_brackets( context[89], context[90] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[84], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[99], context[101] );
          res = refalrts::splice_evar( res, context[73], context[74] );
          res = refalrts::splice_elem( res, context[98] );
          res = refalrts::splice_evar( res, context[43], context[18] );
          res = refalrts::splice_evar( res, context[0], context[42] );
          res = refalrts::splice_evar( res, context[96], context[97] );
          res = refalrts::splice_evar( res, context[62], context[80] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[92], context[95] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_evar( res, context[90], context[91] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[89] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[19], context[28] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_evar( res, context[81], context[84] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/63 )/9 (/12 e.LocalVars#3/65 )/13 (/14 (/42 e.2#0/67 )/43 (/46 e.4#0/69 )/47 )/15 (/18 e.Scanned#1/71 )/19 (/28 # CallBrackets/62 e.5#0/73 )/29 e.Tail#1/75 >/1
          context[63] = context[48];
          context[64] = context[49];
          context[65] = context[50];
          context[66] = context[51];
          context[67] = context[52];
          context[68] = context[53];
          context[69] = context[54];
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[60];
          context[74] = context[61];
          context[75] = context[58];
          context[76] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[62] ) )
            continue;
          // closed e.ScopeVars#1 as range 63
          // closed e.LocalVars#3 as range 65
          // closed e.2#0 as range 67
          // closed e.4#0 as range 69
          // closed e.Scanned#1 as range 71
          // closed e.5#0 as range 73
          // closed e.Tail#1 as range 75
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: e.ScopeVars#1: 63
          //DEBUG: e.LocalVars#3: 65
          //DEBUG: e.2#0: 67
          //DEBUG: e.4#0: 69
          //DEBUG: e.Scanned#1: 71
          //DEBUG: e.5#0: 73
          //DEBUG: e.Tail#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </77 & DoMapAccum$1=1@12/78 s.MarkupContext#1/5/79 (/80 e.ScopeVars#1/63/81 )/83 (/84 e.LocalVars#3/65/85 Tile{ AsIs: )/19 AsIs: (/28 } Tile{ AsIs: e.Scanned#1/71 } )/87 (/88 Tile{ AsIs: e.Tail#1/75 } )/89 </90 & ExtractNested-Result-Term$4=1/91 (/92 Tile{ AsIs: e.2#0/67 } )/93 </94 & ExtractNested-Result=1/95 Tile{ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/63 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/65 AsIs: )/13 AsIs: (/14 AsIs: (/42 } Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/69 AsIs: )/47 AsIs: )/15 AsIs: (/18 } Tile{ HalfReuse: )/62 AsIs: e.5#0/73 HalfReuse: >/29 } >/96 >/97 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[77]);
          refalrts::alloc_name(vm, context[78], functions[efunc_gen_DoMapAccum_S1A1Z12]);
          refalrts::copy_stvar(vm, context[79], context[5]);
          refalrts::alloc_open_bracket(vm, context[80]);
          refalrts::copy_evar(vm, context[81], context[82], context[63], context[64]);
          refalrts::alloc_close_bracket(vm, context[83]);
          refalrts::alloc_open_bracket(vm, context[84]);
          refalrts::copy_evar(vm, context[85], context[86], context[65], context[66]);
          refalrts::alloc_close_bracket(vm, context[87]);
          refalrts::alloc_open_bracket(vm, context[88]);
          refalrts::alloc_close_bracket(vm, context[89]);
          refalrts::alloc_open_call(vm, context[90]);
          refalrts::alloc_name(vm, context[91], functions[efunc_gen_ExtractNestedm_Resultm_Term_S4A1]);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::alloc_close_bracket(vm, context[93]);
          refalrts::alloc_open_call(vm, context[94]);
          refalrts::alloc_name(vm, context[95], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[96]);
          refalrts::alloc_close_call(vm, context[97]);
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_close_call(context[29]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[90] );
          refalrts::push_stack( vm, context[96] );
          refalrts::push_stack( vm, context[94] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[18], context[62] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[92], context[93] );
          refalrts::link_brackets( context[88], context[89] );
          refalrts::link_brackets( context[28], context[87] );
          refalrts::link_brackets( context[84], context[19] );
          refalrts::link_brackets( context[80], context[83] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[96], context[97] );
          res = refalrts::splice_evar( res, context[62], context[29] );
          res = refalrts::splice_evar( res, context[43], context[18] );
          res = refalrts::splice_evar( res, context[0], context[42] );
          res = refalrts::splice_evar( res, context[93], context[95] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[89], context[92] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[19], context[28] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_evar( res, context[77], context[84] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@12/4 s.new#31/5 (/8 e.new#37/63 )/9 (/12 e.new#38/65 )/13 (/14 (/42 e.new#32/67 )/43 (/46 e.new#33/69 )/47 )/15 (/18 e.new#39/71 )/19 (/28 # Closure/62 (/79 e.new#34/77 )/80 e.new#35/73 )/29 e.new#36/75 >/1
        context[63] = context[48];
        context[64] = context[49];
        context[65] = context[50];
        context[66] = context[51];
        context[67] = context[52];
        context[68] = context[53];
        context[69] = context[54];
        context[70] = context[55];
        context[71] = context[56];
        context[72] = context[57];
        context[73] = context[60];
        context[74] = context[61];
        context[75] = context[58];
        context[76] = context[59];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[62] ) )
          continue;
        context[77] = 0;
        context[78] = 0;
        context[79] = refalrts::brackets_left( context[77], context[78], context[73], context[74] );
        if( ! context[79] )
          continue;
        refalrts::bracket_pointers(context[79], context[80]);
        // closed e.new#37 as range 63
        // closed e.new#38 as range 65
        // closed e.new#32 as range 67
        // closed e.new#33 as range 69
        // closed e.new#39 as range 71
        // closed e.new#34 as range 77
        // closed e.new#35 as range 73
        // closed e.new#36 as range 75
        do {
          // </0 & DoMapAccum@12/4 s.new#40/5 (/8 e.new#47/81 )/9 (/12 e.new#48/83 )/13 (/14 (/42 e.new#41/85 )/43 (/46 e.new#42/87 )/47 )/15 (/18 e.new#49/89 )/19 (/28 # Closure/62 (/79 e.new#45/91 )/80 s.new#43/97 e.new#44/93 )/29 e.new#46/95 >/1
          context[81] = context[63];
          context[82] = context[64];
          context[83] = context[65];
          context[84] = context[66];
          context[85] = context[67];
          context[86] = context[68];
          context[87] = context[69];
          context[88] = context[70];
          context[89] = context[71];
          context[90] = context[72];
          context[91] = context[77];
          context[92] = context[78];
          context[93] = context[73];
          context[94] = context[74];
          context[95] = context[75];
          context[96] = context[76];
          // closed e.new#47 as range 81
          // closed e.new#48 as range 83
          // closed e.new#41 as range 85
          // closed e.new#42 as range 87
          // closed e.new#49 as range 89
          // closed e.new#45 as range 91
          // closed e.new#46 as range 95
          if( ! refalrts::svar_left( context[97], context[93], context[94] ) )
            continue;
          // closed e.new#44 as range 93
          do {
            // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/98 )/9 (/12 e.LocalVars#3/100 )/13 (/14 (/42 e.2#0/102 )/43 (/46 e.4#0/104 )/47 )/15 (/18 e.Scanned#1/106 )/19 (/28 # Closure/62 (/79 e.7#0/108 )/80 # Sentences/97 e.#0/110 )/29 e.Tail#1/112 >/1
            context[98] = context[81];
            context[99] = context[82];
            context[100] = context[83];
            context[101] = context[84];
            context[102] = context[85];
            context[103] = context[86];
            context[104] = context[87];
            context[105] = context[88];
            context[106] = context[89];
            context[107] = context[90];
            context[108] = context[91];
            context[109] = context[92];
            context[110] = context[93];
            context[111] = context[94];
            context[112] = context[95];
            context[113] = context[96];
            if( ! refalrts::ident_term( identifiers[ident_Sentences], context[97] ) )
              continue;
            // closed e.ScopeVars#1 as range 98
            // closed e.LocalVars#3 as range 100
            // closed e.2#0 as range 102
            // closed e.4#0 as range 104
            // closed e.Scanned#1 as range 106
            // closed e.7#0 as range 108
            // closed e.#0 as range 110
            // closed e.Tail#1 as range 112
            //DEBUG: s.MarkupContext#1: 5
            //DEBUG: e.ScopeVars#1: 98
            //DEBUG: e.LocalVars#3: 100
            //DEBUG: e.2#0: 102
            //DEBUG: e.4#0: 104
            //DEBUG: e.Scanned#1: 106
            //DEBUG: e.7#0: 108
            //DEBUG: e.#0: 110
            //DEBUG: e.Tail#1: 112

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/98 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/100 AsIs: )/13 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/106 } )/114 Tile{ AsIs: (/42 } Tile{ AsIs: e.Tail#1/112 } Tile{ AsIs: )/19 HalfReuse: </28 HalfReuse: & ExtractNested-Result-Term$5=1/62 AsIs: (/79 } Tile{ AsIs: e.2#0/102 } )/115 Tile{ AsIs: (/18 } Tile{ AsIs: e.7#0/108 } Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/104 AsIs: )/47 HalfReuse: (/15 } e.ScopeVars#1/98/116 )/118 s.MarkupContext#1/5/119 </120 & ExtractNestedRec$1=1/121 </122 & DoMapAccum@13/123 s.MarkupContext#1/5/124 (/125 e.ScopeVars#1/98/126 )/128 (/129 e.LocalVars#3/100/130 )/132 (/133 (/134 )/135 (/136 )/137 )/138 Tile{ HalfReuse: (/80 HalfReuse: )/97 AsIs: e.#0/110 HalfReuse: >/29 } >/139 >/140 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[114]);
            refalrts::alloc_close_bracket(vm, context[115]);
            refalrts::copy_evar(vm, context[116], context[117], context[98], context[99]);
            refalrts::alloc_close_bracket(vm, context[118]);
            refalrts::copy_stvar(vm, context[119], context[5]);
            refalrts::alloc_open_call(vm, context[120]);
            refalrts::alloc_name(vm, context[121], functions[efunc_gen_ExtractNestedRec_S1A1]);
            refalrts::alloc_open_call(vm, context[122]);
            refalrts::alloc_name(vm, context[123], functions[efunc_gen_DoMapAccum_Z13]);
            refalrts::copy_stvar(vm, context[124], context[5]);
            refalrts::alloc_open_bracket(vm, context[125]);
            refalrts::copy_evar(vm, context[126], context[127], context[98], context[99]);
            refalrts::alloc_close_bracket(vm, context[128]);
            refalrts::alloc_open_bracket(vm, context[129]);
            refalrts::copy_evar(vm, context[130], context[131], context[100], context[101]);
            refalrts::alloc_close_bracket(vm, context[132]);
            refalrts::alloc_open_bracket(vm, context[133]);
            refalrts::alloc_open_bracket(vm, context[134]);
            refalrts::alloc_close_bracket(vm, context[135]);
            refalrts::alloc_open_bracket(vm, context[136]);
            refalrts::alloc_close_bracket(vm, context[137]);
            refalrts::alloc_close_bracket(vm, context[138]);
            refalrts::alloc_close_call(vm, context[139]);
            refalrts::alloc_close_call(vm, context[140]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
            refalrts::reinit_open_call(context[28]);
            refalrts::reinit_name(context[62], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1]);
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_open_bracket(context[80]);
            refalrts::reinit_close_bracket(context[97]);
            refalrts::reinit_close_call(context[29]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[140] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[139] );
            refalrts::push_stack( vm, context[120] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[122] );
            refalrts::link_brackets( context[80], context[97] );
            refalrts::link_brackets( context[133], context[138] );
            refalrts::link_brackets( context[136], context[137] );
            refalrts::link_brackets( context[134], context[135] );
            refalrts::link_brackets( context[129], context[132] );
            refalrts::link_brackets( context[125], context[128] );
            refalrts::link_brackets( context[15], context[118] );
            refalrts::link_brackets( context[46], context[47] );
            refalrts::link_brackets( context[18], context[43] );
            refalrts::link_brackets( context[79], context[115] );
            refalrts::link_brackets( context[42], context[19] );
            refalrts::link_brackets( context[14], context[114] );
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[139], context[140] );
            res = refalrts::splice_evar( res, context[80], context[29] );
            res = refalrts::splice_evar( res, context[118], context[138] );
            res = refalrts::splice_evar( res, context[116], context[117] );
            res = refalrts::splice_evar( res, context[43], context[15] );
            res = refalrts::splice_evar( res, context[108], context[109] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[115] );
            res = refalrts::splice_evar( res, context[102], context[103] );
            res = refalrts::splice_evar( res, context[19], context[79] );
            res = refalrts::splice_evar( res, context[112], context[113] );
            res = refalrts::splice_elem( res, context[42] );
            res = refalrts::splice_elem( res, context[114] );
            res = refalrts::splice_evar( res, context[106], context[107] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/98 )/9 (/12 e.LocalVars#3/100 )/13 (/14 (/42 e.2#0/102 )/43 (/46 e.4#0/104 )/47 )/15 (/18 e.Scanned#1/106 )/19 (/28 # Closure/62 (/79 e.7#0/108 )/80 # NativeBody/97 t.0#0/114 e.0#0/110 )/29 e.Tail#1/112 >/1
            context[98] = context[81];
            context[99] = context[82];
            context[100] = context[83];
            context[101] = context[84];
            context[102] = context[85];
            context[103] = context[86];
            context[104] = context[87];
            context[105] = context[88];
            context[106] = context[89];
            context[107] = context[90];
            context[108] = context[91];
            context[109] = context[92];
            context[110] = context[93];
            context[111] = context[94];
            context[112] = context[95];
            context[113] = context[96];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[97] ) )
              continue;
            // closed e.ScopeVars#1 as range 98
            // closed e.LocalVars#3 as range 100
            // closed e.2#0 as range 102
            // closed e.4#0 as range 104
            // closed e.Scanned#1 as range 106
            // closed e.7#0 as range 108
            // closed e.Tail#1 as range 112
            context[115] = refalrts::tvar_left( context[114], context[110], context[111] );
            if( ! context[115] )
              continue;
            // closed e.0#0 as range 110
            //DEBUG: s.MarkupContext#1: 5
            //DEBUG: e.ScopeVars#1: 98
            //DEBUG: e.LocalVars#3: 100
            //DEBUG: e.2#0: 102
            //DEBUG: e.4#0: 104
            //DEBUG: e.Scanned#1: 106
            //DEBUG: e.7#0: 108
            //DEBUG: e.Tail#1: 112
            //DEBUG: t.0#0: 114
            //DEBUG: e.0#0: 110

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/98 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/100 AsIs: )/13 AsIs: (/14 AsIs: (/42 AsIs: e.2#0/102 HalfReuse: (/43 HalfReuse: # Function/46 } Tile{ Reuse: # GN-Local/62 AsIs: (/79 AsIs: e.7#0/108 AsIs: )/80 AsIs: # NativeBody/97 AsIs: t.0#0/114 AsIs: e.0#0/110 AsIs: )/29 } )/116 (/117 Tile{ AsIs: e.4#0/104 } Tile{ AsIs: )/47 AsIs: )/15 AsIs: (/18 AsIs: e.Scanned#1/106 HalfReuse: (/19 HalfReuse: # Symbol/28 } # Name/118 e.7#0/108/119 )/121 )/122 Tile{ AsIs: e.Tail#1/112 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[116]);
            refalrts::alloc_open_bracket(vm, context[117]);
            refalrts::alloc_ident(vm, context[118], identifiers[ident_Name]);
            refalrts::copy_evar(vm, context[119], context[120], context[108], context[109]);
            refalrts::alloc_close_bracket(vm, context[121]);
            refalrts::alloc_close_bracket(vm, context[122]);
            refalrts::reinit_open_bracket(context[43]);
            refalrts::reinit_ident(context[46], identifiers[ident_Function]);
            refalrts::update_ident(context[62], identifiers[ident_GNm_Local]);
            refalrts::reinit_open_bracket(context[19]);
            refalrts::reinit_ident(context[28], identifiers[ident_Symbol]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[18], context[122] );
            refalrts::link_brackets( context[19], context[121] );
            refalrts::link_brackets( context[14], context[15] );
            refalrts::link_brackets( context[117], context[47] );
            refalrts::link_brackets( context[42], context[116] );
            refalrts::link_brackets( context[43], context[29] );
            refalrts::link_brackets( context[79], context[80] );
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[112], context[113] );
            res = refalrts::splice_evar( res, context[118], context[122] );
            res = refalrts::splice_evar( res, context[47], context[28] );
            res = refalrts::splice_evar( res, context[104], context[105] );
            res = refalrts::splice_evar( res, context[116], context[117] );
            res = refalrts::splice_evar( res, context[62], context[29] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/98 )/9 (/12 e.LocalVars#3/100 )/13 (/14 (/42 e.2#0/102 )/43 (/46 e.4#0/104 )/47 )/15 (/18 e.Scanned#1/106 )/19 (/28 # Closure/62 (/79 e.7#0/108 )/80 # Metatable/97 e.#0/110 )/29 e.Tail#1/112 >/1
          context[98] = context[81];
          context[99] = context[82];
          context[100] = context[83];
          context[101] = context[84];
          context[102] = context[85];
          context[103] = context[86];
          context[104] = context[87];
          context[105] = context[88];
          context[106] = context[89];
          context[107] = context[90];
          context[108] = context[91];
          context[109] = context[92];
          context[110] = context[93];
          context[111] = context[94];
          context[112] = context[95];
          context[113] = context[96];
          if( ! refalrts::ident_term( identifiers[ident_Metatable], context[97] ) )
            continue;
          // closed e.ScopeVars#1 as range 98
          // closed e.LocalVars#3 as range 100
          // closed e.2#0 as range 102
          // closed e.4#0 as range 104
          // closed e.Scanned#1 as range 106
          // closed e.7#0 as range 108
          // closed e.#0 as range 110
          // closed e.Tail#1 as range 112
          //DEBUG: s.MarkupContext#1: 5
          //DEBUG: e.ScopeVars#1: 98
          //DEBUG: e.LocalVars#3: 100
          //DEBUG: e.2#0: 102
          //DEBUG: e.4#0: 104
          //DEBUG: e.Scanned#1: 106
          //DEBUG: e.7#0: 108
          //DEBUG: e.#0: 110
          //DEBUG: e.Tail#1: 112

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/98 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/100 AsIs: )/13 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/106 } Tile{ AsIs: )/43 } Tile{ AsIs: (/42 } Tile{ AsIs: e.Tail#1/112 } )/114 </115 & ExtractNested-Result-Term$5=2@1/116 (/117 Tile{ AsIs: e.2#0/102 } Tile{ AsIs: )/19 HalfReuse: </28 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1@1/62 AsIs: (/79 AsIs: e.7#0/108 AsIs: )/80 HalfReuse: (/97 AsIs: e.#0/110 AsIs: )/29 } Tile{ AsIs: (/46 AsIs: e.4#0/104 AsIs: )/47 HalfReuse: </15 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1:1*2/18 } (/118 e.7#0/108/119 )/121 # Metatable/122 e.#0/110/123 >/125 >/126 >/127 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[114]);
          refalrts::alloc_open_call(vm, context[115]);
          refalrts::alloc_name(vm, context[116], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z1]);
          refalrts::alloc_open_bracket(vm, context[117]);
          refalrts::alloc_open_bracket(vm, context[118]);
          refalrts::copy_evar(vm, context[119], context[120], context[108], context[109]);
          refalrts::alloc_close_bracket(vm, context[121]);
          refalrts::alloc_ident(vm, context[122], identifiers[ident_Metatable]);
          refalrts::copy_evar(vm, context[123], context[124], context[110], context[111]);
          refalrts::alloc_close_call(vm, context[125]);
          refalrts::alloc_close_call(vm, context[126]);
          refalrts::alloc_close_call(vm, context[127]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
          refalrts::reinit_open_call(context[28]);
          refalrts::reinit_name(context[62], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1]);
          refalrts::reinit_open_bracket(context[97]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[18], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[127] );
          refalrts::push_stack( vm, context[115] );
          refalrts::push_stack( vm, context[126] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[125] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[118], context[121] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[97], context[29] );
          refalrts::link_brackets( context[79], context[80] );
          refalrts::link_brackets( context[117], context[19] );
          refalrts::link_brackets( context[42], context[114] );
          refalrts::link_brackets( context[14], context[43] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[118], context[127] );
          res = refalrts::splice_evar( res, context[46], context[18] );
          res = refalrts::splice_evar( res, context[19], context[29] );
          res = refalrts::splice_evar( res, context[102], context[103] );
          res = refalrts::splice_evar( res, context[114], context[117] );
          res = refalrts::splice_evar( res, context[112], context[113] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[106], context[107] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/81 )/9 (/12 e.LocalVars#3/83 )/13 (/14 (/42 e.2#0/85 )/43 (/46 e.4#0/87 )/47 )/15 (/18 e.Scanned#1/89 )/19 (/28 # Closure/62 (/79 e.7#0/91 )/80 e.6#0/93 )/29 e.Tail#1/95 >/1
        context[81] = context[63];
        context[82] = context[64];
        context[83] = context[65];
        context[84] = context[66];
        context[85] = context[67];
        context[86] = context[68];
        context[87] = context[69];
        context[88] = context[70];
        context[89] = context[71];
        context[90] = context[72];
        context[91] = context[77];
        context[92] = context[78];
        context[93] = context[73];
        context[94] = context[74];
        context[95] = context[75];
        context[96] = context[76];
        // closed e.ScopeVars#1 as range 81
        // closed e.LocalVars#3 as range 83
        // closed e.2#0 as range 85
        // closed e.4#0 as range 87
        // closed e.Scanned#1 as range 89
        // closed e.7#0 as range 91
        // closed e.6#0 as range 93
        // closed e.Tail#1 as range 95
        //DEBUG: s.MarkupContext#1: 5
        //DEBUG: e.ScopeVars#1: 81
        //DEBUG: e.LocalVars#3: 83
        //DEBUG: e.2#0: 85
        //DEBUG: e.4#0: 87
        //DEBUG: e.Scanned#1: 89
        //DEBUG: e.7#0: 91
        //DEBUG: e.6#0: 93
        //DEBUG: e.Tail#1: 95

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/81 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/83 AsIs: )/13 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/89 } )/97 Tile{ AsIs: (/42 } Tile{ AsIs: e.Tail#1/95 } Tile{ AsIs: )/19 HalfReuse: </28 HalfReuse: & ExtractNested-Result-Term$5=1/62 AsIs: (/79 } Tile{ AsIs: e.2#0/85 } )/98 Tile{ AsIs: (/18 } Tile{ AsIs: e.7#0/91 } Tile{ AsIs: )/43 AsIs: (/46 AsIs: e.4#0/87 AsIs: )/47 HalfReuse: (/15 } e.ScopeVars#1/81/99 )/101 s.MarkupContext#1/5/102 </103 & ExtractNestedRec*3/104 s.MarkupContext#1/5/105 (/106 e.ScopeVars#1/81/107 e.LocalVars#3/83/109 Tile{ AsIs: )/80 AsIs: e.6#0/93 HalfReuse: >/29 } >/111 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[97]);
        refalrts::alloc_close_bracket(vm, context[98]);
        refalrts::copy_evar(vm, context[99], context[100], context[81], context[82]);
        refalrts::alloc_close_bracket(vm, context[101]);
        refalrts::copy_stvar(vm, context[102], context[5]);
        refalrts::alloc_open_call(vm, context[103]);
        refalrts::alloc_name(vm, context[104], functions[efunc_gen_ExtractNestedRec_D3]);
        refalrts::copy_stvar(vm, context[105], context[5]);
        refalrts::alloc_open_bracket(vm, context[106]);
        refalrts::copy_evar(vm, context[107], context[108], context[81], context[82]);
        refalrts::copy_evar(vm, context[109], context[110], context[83], context[84]);
        refalrts::alloc_close_call(vm, context[111]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
        refalrts::reinit_open_call(context[28]);
        refalrts::reinit_name(context[62], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1]);
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_close_call(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[111] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[103] );
        refalrts::link_brackets( context[106], context[80] );
        refalrts::link_brackets( context[15], context[101] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[18], context[43] );
        refalrts::link_brackets( context[79], context[98] );
        refalrts::link_brackets( context[42], context[19] );
        refalrts::link_brackets( context[14], context[97] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[111] );
        res = refalrts::splice_evar( res, context[80], context[29] );
        res = refalrts::splice_evar( res, context[109], context[110] );
        res = refalrts::splice_evar( res, context[107], context[108] );
        res = refalrts::splice_evar( res, context[101], context[106] );
        res = refalrts::splice_evar( res, context[99], context[100] );
        res = refalrts::splice_evar( res, context[43], context[15] );
        res = refalrts::splice_evar( res, context[91], context[92] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[98] );
        res = refalrts::splice_evar( res, context[85], context[86] );
        res = refalrts::splice_evar( res, context[19], context[79] );
        res = refalrts::splice_evar( res, context[95], context[96] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_elem( res, context[97] );
        res = refalrts::splice_evar( res, context[89], context[90] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/48 )/9 (/12 e.LocalVars#3/50 )/13 (/14 (/42 e.1#0/52 )/43 (/46 e.3#0/54 )/47 )/15 (/18 e.Scanned#1/56 )/19 t.Next#1/28 e.Tail#1/58 >/1
      context[48] = context[30];
      context[49] = context[31];
      context[50] = context[32];
      context[51] = context[33];
      context[52] = context[40];
      context[53] = context[41];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[34];
      context[57] = context[35];
      context[58] = context[36];
      context[59] = context[37];
      // closed e.ScopeVars#1 as range 48
      // closed e.LocalVars#3 as range 50
      // closed e.1#0 as range 52
      // closed e.3#0 as range 54
      // closed e.Scanned#1 as range 56
      // closed e.Tail#1 as range 58
      //DEBUG: t.Next#1: 28
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 48
      //DEBUG: e.LocalVars#3: 50
      //DEBUG: e.1#0: 52
      //DEBUG: e.3#0: 54
      //DEBUG: e.Scanned#1: 56
      //DEBUG: e.Tail#1: 58

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/48 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/50 AsIs: )/13 AsIs: (/14 AsIs: (/42 AsIs: e.1#0/52 AsIs: )/43 AsIs: (/46 AsIs: e.3#0/54 AsIs: )/47 AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/56 } Tile{ AsIs: t.Next#1/28 } Tile{ AsIs: )/19 } Tile{ AsIs: e.Tail#1/58 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[46], context[47] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/30 )/9 (/12 e.LocalVars#3/32 )/13 t.Acc#1/14 (/18 e.Scanned#1/34 )/19 t.Next#1/28 e.Tail#1/36 >/1
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    // closed e.ScopeVars#1 as range 30
    // closed e.LocalVars#3 as range 32
    // closed e.Scanned#1 as range 34
    // closed e.Tail#1 as range 36
    //DEBUG: t.Acc#1: 14
    //DEBUG: t.Next#1: 28
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 30
    //DEBUG: e.LocalVars#3: 32
    //DEBUG: e.Scanned#1: 34
    //DEBUG: e.Tail#1: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/30 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/32 AsIs: )/13 } Tile{ AsIs: (/18 AsIs: e.Scanned#1/34 AsIs: )/19 } (/38 Tile{ AsIs: e.Tail#1/36 } )/39 </40 & ExtractNested-Result-Term*6/41 s.MarkupContext#1/5/42 (/43 e.ScopeVars#1/30/44 )/46 (/47 e.LocalVars#3/32/48 )/50 Tile{ AsIs: t.Acc#1/14 } Tile{ AsIs: t.Next#1/28 } >/51 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_ExtractNestedm_Resultm_Term_D6]);
    refalrts::copy_stvar(vm, context[42], context[5]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[30], context[31]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_evar(vm, context[48], context[49], context[32], context[33]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[47], context[50] );
    refalrts::link_brackets( context[43], context[46] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[39], context[50] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/20 )/9 (/12 e.LocalVars#3/22 )/13 t.Acc#1/14 (/18 e.Scanned#1/24 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[16];
    context[25] = context[17];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 20
    // closed e.LocalVars#3 as range 22
    // closed e.Scanned#1 as range 24
    //DEBUG: t.Acc#1: 14
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 20
    //DEBUG: e.LocalVars#3: 22
    //DEBUG: e.Scanned#1: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/20 )/9 (/12 e.LocalVars#3/22 )/13 {REMOVED TILE} (/18 {REMOVED TILE} )/19 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/14 } Tile{ AsIs: e.Scanned#1/24 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#3/10 )/13 t.acc#0/14 (/18 e.scanned#0/16 )/19 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.LocalVars#3 as range 10
  // closed e.scanned#0 as range 16
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 14
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.LocalVars#3: 10
  //DEBUG: e.scanned#0: 16
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </20 & DoMapAccum@0/21 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/10 AsIs: )/13 } )/22 Tile{ AsIs: t.acc#0/14 AsIs: (/18 AsIs: e.scanned#0/16 AsIs: )/19 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[0], context[22] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z12("DoMapAccum@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z12);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & MapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MapAccum@1/4 (/7 e.new#1/5 )/8 t.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & MapAccum@1/4 (/7 e.ScopeVars#1/11 )/8 t.Acc#1/9 e.Tail#1/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.ScopeVars#1 as range 11
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@18/4 AsIs: (/7 AsIs: e.ScopeVars#1/11 AsIs: )/8 AsIs: t.Acc#1/9 } (/15 )/16 Tile{ AsIs: e.Tail#1/13 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@1/4 (/7 e.ScopeVars#1/5 )/8 t.accum#0/9 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 9
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & MapAccum@0/0 HalfReuse: (/4 HalfReuse: & UpdateBorrowedVars@0/7 AsIs: e.ScopeVars#1/5 AsIs: )/8 AsIs: t.accum#0/9 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_MapAccum_Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@18/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@18/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@18/4 (/7 e.Context#4/15 )/8 (/13 (/23 e.1#0/21 )/24 e.2#0/19 (/27 e.3#0/25 )/28 )/14 e.Tail#1/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.Context#4 as range 15
      // closed e.1#0 as range 21
      // closed e.2#0 as range 19
      // closed e.3#0 as range 25
      // closed e.Tail#1 as range 17
      //DEBUG: e.Context#4: 15
      //DEBUG: e.1#0: 21
      //DEBUG: e.2#0: 19
      //DEBUG: e.3#0: 25
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: (/23 } e.Context#4/15/29 Tile{ AsIs: e.1#0/21 } Tile{ AsIs: )/24 AsIs: e.2#0/19 AsIs: (/27 AsIs: e.3#0/25 AsIs: )/28 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@18/4 AsIs: (/7 AsIs: e.Context#4/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[15], context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[24], context[14] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@18/4 (/7 e.Context#4/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Context#4 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.Context#4: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2:1$2\1*1/4 AsIs: (/7 AsIs: e.Context#4/15 AsIs: )/8 AsIs: t.Next#1/13 } >/19 </20 & Map@18/21 (/22 e.Context#4/15/23 )/25 Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z18]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@18/4 (/7 e.Context#4/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Context#4 as range 9
    //DEBUG: e.Context#4: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@18/4 (/7 e.Context#4/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@18/4 (/7 e.Context#4/5 )/8 e.items#0/2 >/1
  // closed e.Context#4 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.Context#4: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ExtractNested-Result-Term$5=2:1$2\1@0/4 AsIs: (/7 AsIs: e.Context#4/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z18("Map@18", COOKIE1_, COOKIE2_, func_gen_Map_Z18);


static refalrts::FnResult func_gen_Reduce_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Reduce@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@2/4 (/7 e.new#1/5 )/8 t.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce@2/4 (/7 e.ScopeVars#1/11 )/8 t.Acc#1/9 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.ScopeVars#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.ScopeVars#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </17 & Reduce$1=1@2/18 (/19 e.ScopeVars#1/11/20 )/22 (/23 Tile{ AsIs: e.Tail#1/13 } )/24 Tile{ AsIs: </0 Reuse: & CheckBorrowed/4 AsIs: (/7 AsIs: e.ScopeVars#1/11 AsIs: )/8 AsIs: t.Acc#1/9 AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Reduce_S1A1Z2]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[11], context[12]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_CheckBorrowed]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[17], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@2/4 (/7 e.ScopeVars#1/11 )/8 t.Acc#1/9 >/1
    context[11] = context[5];
    context[12] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 11
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.ScopeVars#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@2/4 (/7 e.ScopeVars#1/11 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@2/4 (/7 e.ScopeVars#1/5 )/8 t.accum#0/9 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 9
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 AsIs: (/7 } & CheckBorrowed@0/11 (/12 Tile{ AsIs: e.ScopeVars#1/5 } )/13 Tile{ AsIs: )/8 AsIs: t.accum#0/9 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z2("Reduce@2", COOKIE1_, COOKIE2_, func_gen_Reduce_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 89 elems
  refalrts::Iter context[89];
  refalrts::zeros( context, 89 );
  // </0 & DoMapAccum@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@13/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 t.new#4/14 (/18 e.new#5/16 )/19 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new#5 as range 16
  // closed e.new#6 as range 2
  do {
    // </0 & DoMapAccum@13/4 s.new#7/5 (/8 e.new#11/20 )/9 (/12 e.new#12/22 )/13 t.new#8/14 (/18 e.new#13/24 )/19 t.new#9/28 e.new#10/26 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.new#11 as range 20
    // closed e.new#12 as range 22
    // closed e.new#13 as range 24
    context[29] = refalrts::tvar_left( context[28], context[26], context[27] );
    if( ! context[29] )
      continue;
    // closed e.new#10 as range 26
    do {
      // </0 & DoMapAccum@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/30 )/9 (/12 e.LocalVars#1/32 )/13 (/14 (/44 e.6#0/42 )/45 (/48 e.8#0/46 )/49 )/15 (/18 e.Scanned#1/34 )/19 (/28 (/52 e.2#0/50 )/53 e.3#0/40 (/56 e.4#0/54 )/57 )/29 e.Tail#1/36 >/1
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = 0;
      context[39] = 0;
      if( ! refalrts::brackets_term( context[38], context[39], context[14] ) )
        continue;
      context[40] = 0;
      context[41] = 0;
      if( ! refalrts::brackets_term( context[40], context[41], context[28] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_left( context[46], context[47], context[38], context[39] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      context[50] = 0;
      context[51] = 0;
      context[52] = refalrts::brackets_left( context[50], context[51], context[40], context[41] );
      if( ! context[52] )
        continue;
      refalrts::bracket_pointers(context[52], context[53]);
      context[54] = 0;
      context[55] = 0;
      context[56] = refalrts::brackets_right( context[54], context[55], context[40], context[41] );
      if( ! context[56] )
        continue;
      refalrts::bracket_pointers(context[56], context[57]);
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.ScopeVars#1 as range 30
      // closed e.LocalVars#1 as range 32
      // closed e.6#0 as range 42
      // closed e.8#0 as range 46
      // closed e.Scanned#1 as range 34
      // closed e.2#0 as range 50
      // closed e.3#0 as range 40
      // closed e.4#0 as range 54
      // closed e.Tail#1 as range 36
      //DEBUG: s.MarkupContext#1: 5
      //DEBUG: e.ScopeVars#1: 30
      //DEBUG: e.LocalVars#1: 32
      //DEBUG: e.6#0: 42
      //DEBUG: e.8#0: 46
      //DEBUG: e.Scanned#1: 34
      //DEBUG: e.2#0: 50
      //DEBUG: e.3#0: 40
      //DEBUG: e.4#0: 54
      //DEBUG: e.Tail#1: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/30 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/32 AsIs: )/13 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/34 } Tile{ AsIs: )/19 } Tile{ AsIs: (/44 } Tile{ AsIs: e.Tail#1/36 } )/58 </59 & ExtractNested-Sentence=1@2/60 (/61 Tile{ AsIs: e.6#0/42 } Tile{ HalfReuse: )/28 AsIs: (/52 AsIs: e.2#0/50 AsIs: )/53 } s.MarkupContext#1/5/62 (/63 e.ScopeVars#1/30/64 )/66 (/67 e.LocalVars#1/32/68 )/70 Tile{ AsIs: (/56 AsIs: e.4#0/54 AsIs: )/57 HalfReuse: (/29 } Tile{ AsIs: e.3#0/40 } )/71 </72 & MapAccum@3/73 (/74 e.ScopeVars#1/30/75 )/77 (/78 e.LocalVars#1/32/79 Tile{ AsIs: )/45 AsIs: (/48 AsIs: e.8#0/46 AsIs: )/49 HalfReuse: </15 HalfReuse: & Uniq/18 } </81 & ExtractAllVars/82 e.2#0/50/83 >/85 >/86 >/87 >/88 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_gen_ExtractNestedm_Sentence_A1Z2]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::copy_stvar(vm, context[62], context[5]);
      refalrts::alloc_open_bracket(vm, context[63]);
      refalrts::copy_evar(vm, context[64], context[65], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::copy_evar(vm, context[68], context[69], context[32], context[33]);
      refalrts::alloc_close_bracket(vm, context[70]);
      refalrts::alloc_close_bracket(vm, context[71]);
      refalrts::alloc_open_call(vm, context[72]);
      refalrts::alloc_name(vm, context[73], functions[efunc_gen_MapAccum_Z3]);
      refalrts::alloc_open_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_bracket(vm, context[78]);
      refalrts::copy_evar(vm, context[79], context[80], context[32], context[33]);
      refalrts::alloc_open_call(vm, context[81]);
      refalrts::alloc_name(vm, context[82], functions[efunc_ExtractAllVars]);
      refalrts::copy_evar(vm, context[83], context[84], context[50], context[51]);
      refalrts::alloc_close_call(vm, context[85]);
      refalrts::alloc_close_call(vm, context[86]);
      refalrts::alloc_close_call(vm, context[87]);
      refalrts::alloc_close_call(vm, context[88]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::reinit_open_bracket(context[29]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[18], functions[efunc_Uniq]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[88] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[87] );
      refalrts::push_stack( vm, context[72] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[85] );
      refalrts::push_stack( vm, context[81] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::link_brackets( context[78], context[45] );
      refalrts::link_brackets( context[74], context[77] );
      refalrts::link_brackets( context[29], context[71] );
      refalrts::link_brackets( context[56], context[57] );
      refalrts::link_brackets( context[67], context[70] );
      refalrts::link_brackets( context[63], context[66] );
      refalrts::link_brackets( context[52], context[53] );
      refalrts::link_brackets( context[61], context[28] );
      refalrts::link_brackets( context[44], context[58] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[81], context[88] );
      res = refalrts::splice_evar( res, context[45], context[18] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[71], context[78] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[56], context[29] );
      res = refalrts::splice_evar( res, context[62], context[70] );
      res = refalrts::splice_evar( res, context[28], context[53] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[58], context[61] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/30 )/9 (/12 e.LocalVars#1/32 )/13 t.Acc#1/14 (/18 e.Scanned#1/34 )/19 t.Next#1/28 e.Tail#1/36 >/1
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    // closed e.ScopeVars#1 as range 30
    // closed e.LocalVars#1 as range 32
    // closed e.Scanned#1 as range 34
    // closed e.Tail#1 as range 36
    //DEBUG: t.Acc#1: 14
    //DEBUG: t.Next#1: 28
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 30
    //DEBUG: e.LocalVars#1: 32
    //DEBUG: e.Scanned#1: 34
    //DEBUG: e.Tail#1: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/30 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/32 AsIs: )/13 } Tile{ AsIs: (/18 AsIs: e.Scanned#1/34 AsIs: )/19 } (/38 Tile{ AsIs: e.Tail#1/36 } )/39 </40 & ExtractNested-Sentence*1/41 s.MarkupContext#1/5/42 e.ScopeVars#1/30/43 e.LocalVars#1/32/45 Tile{ AsIs: t.Acc#1/14 } Tile{ AsIs: t.Next#1/28 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_ExtractNestedm_Sentence_D1]);
    refalrts::copy_stvar(vm, context[42], context[5]);
    refalrts::copy_evar(vm, context[43], context[44], context[30], context[31]);
    refalrts::copy_evar(vm, context[45], context[46], context[32], context[33]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/20 )/9 (/12 e.LocalVars#1/22 )/13 t.Acc#1/14 (/18 e.Scanned#1/24 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[16];
    context[25] = context[17];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 20
    // closed e.LocalVars#1 as range 22
    // closed e.Scanned#1 as range 24
    //DEBUG: t.Acc#1: 14
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 20
    //DEBUG: e.LocalVars#1: 22
    //DEBUG: e.Scanned#1: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/20 )/9 (/12 e.LocalVars#1/22 )/13 {REMOVED TILE} (/18 {REMOVED TILE} )/19 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/14 } Tile{ AsIs: e.Scanned#1/24 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#1/10 )/13 t.acc#0/14 (/18 e.scanned#0/16 )/19 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.LocalVars#1 as range 10
  // closed e.scanned#0 as range 16
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 14
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.LocalVars#1: 10
  //DEBUG: e.scanned#0: 16
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } Tile{ AsIs: (/8 } Tile{ HalfReuse: & ExtractNested-Sentence@0/12 } Tile{ AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.ScopeVars#1/6 } Tile{ AsIs: e.LocalVars#1/10 } Tile{ AsIs: )/13 AsIs: t.acc#0/14 AsIs: (/18 AsIs: e.scanned#0/16 AsIs: )/19 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_name(context[12], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z13("DoMapAccum@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z13);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ExtractNested-Result-Term$5=2:1$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=2:1$1=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=2:1$1=1@1/4 (/7 e.ClosureName0#1/17 )/8 (/11 e.#0/19 )/12 (/15 e.BorrowedVars0#1/21 )/16 e.DriveLabelOpt#4/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.ClosureName0#1 as range 17
    // closed e.#0 as range 19
    // closed e.BorrowedVars0#1 as range 21
    // closed e.DriveLabelOpt#4 as range 23
    //DEBUG: e.ClosureName0#1: 17
    //DEBUG: e.#0: 19
    //DEBUG: e.BorrowedVars0#1: 21
    //DEBUG: e.DriveLabelOpt#4: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/25 Tile{ HalfReuse: # Function/0 HalfReuse: # GN-Local/4 AsIs: (/7 AsIs: e.ClosureName0#1/17 AsIs: )/8 HalfReuse: # Metatable/11 AsIs: e.#0/19 AsIs: )/12 } Tile{ AsIs: e.DriveLabelOpt#4/23 } Tile{ AsIs: (/15 AsIs: e.BorrowedVars0#1/21 AsIs: )/16 } (/26 # Symbol/27 # Name/28 e.ClosureName0#1/17/29 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Name]);
    refalrts::copy_evar(vm, context[29], context[30], context[17], context[18]);
    refalrts::reinit_ident(context[0], identifiers[ident_Function]);
    refalrts::reinit_ident(context[4], identifiers[ident_GNm_Local]);
    refalrts::reinit_ident(context[11], identifiers[ident_Metatable]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[26], context[1] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[25], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=2:1$1=1@1/4 (/7 e.ClosureName0#1/5 )/8 (/11 e.#0/9 )/12 (/15 e.BorrowedVars0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.ClosureName0#1 as range 5
  // closed e.#0 as range 9
  // closed e.BorrowedVars0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.ClosureName0#1: 5
  //DEBUG: e.#0: 9
  //DEBUG: e.BorrowedVars0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2:1$1=1@0/4 AsIs: (/7 } Tile{ AsIs: e.ClosureName0#1/5 } )/17 Tile{ HalfReuse: (/8 HalfReuse: # Metatable/11 AsIs: e.#0/9 AsIs: )/12 AsIs: (/15 AsIs: e.BorrowedVars0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Metatable]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1("ExtractNested-Result-Term$5=2:1$1=1@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ExtractNested-Result-Term$5=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=2@1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=2@1/4 (/7 e.NestedFuncs0#1/9 )/8 t.Function#3/13 e.OptMarks#3/11 (/19 e.BorrowedVars#3/17 )/20 t.ClosureTerm#3/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.NestedFuncs0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    context[16] = refalrts::tvar_right( context[15], context[11], context[12] );
    if( ! context[16] )
      continue;
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.OptMarks#3 as range 11
    // closed e.BorrowedVars#3 as range 17
    //DEBUG: e.NestedFuncs0#1: 9
    //DEBUG: t.Function#3: 13
    //DEBUG: t.ClosureTerm#3: 15
    //DEBUG: e.OptMarks#3: 11
    //DEBUG: e.BorrowedVars#3: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.NestedFuncs0#1/9 } Tile{ AsIs: t.Function#3/13 } Tile{ AsIs: e.OptMarks#3/11 } Tile{ AsIs: )/8 } Tile{ AsIs: (/19 AsIs: e.BorrowedVars#3/17 AsIs: )/20 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.ClosureTerm#3/15 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=2@1/4 (/7 e.NestedFuncs0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.NestedFuncs0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.NestedFuncs0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2@0/4 AsIs: (/7 AsIs: e.NestedFuncs0#1/5 AsIs: )/8 } (/9 )/10 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2Z1("ExtractNested-Result-Term$5=2@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@14/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@14/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & Pass-CleanupRedudandExterns=3\1/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Passm_CleanupRedudandExterns_A3L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@14/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@14/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@14/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Pass-CleanupRedudandExterns=3\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z14("DoMapAccum@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@15/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@15/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & FilterDeclarations/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_FilterDeclarations]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@15/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@15/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@15/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FilterDeclarations@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FilterDeclarations_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z15("DoMapAccum@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z15);


static refalrts::FnResult func_gen_DoMapAccum_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & DoMapAccum@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@16/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@16/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@16/4 (/5 e.new#8/21 )/6 (/9 e.new#12/17 )/10 (/15 s.new#9/25 e.new#10/23 )/16 e.new#11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new#8 as range 21
      // closed e.new#12 as range 17
      // closed e.new#11 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new#10 as range 23
      do {
        // </0 & DoMapAccum@16/4 (/5 e.new#13/26 )/6 (/9 e.new#18/28 )/10 (/15 s.new#14/25 s.new#15/34 e.new#16/30 )/16 e.new#17/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        // closed e.new#13 as range 26
        // closed e.new#18 as range 28
        // closed e.new#17 as range 32
        if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
          continue;
        // closed e.new#16 as range 30
        do {
          // </0 & DoMapAccum@16/4 (/5 e.#0/35 )/6 (/9 e.Scanned#1/37 )/10 (/15 # Function/25 s.ScopeClass#2/34 (/45 e.4#0/43 )/46 e.3#0/39 )/16 e.Tail#1/41 >/1
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[33];
          if( ! refalrts::ident_term( identifiers[ident_Function], context[25] ) )
            continue;
          context[43] = 0;
          context[44] = 0;
          context[45] = refalrts::brackets_left( context[43], context[44], context[39], context[40] );
          if( ! context[45] )
            continue;
          refalrts::bracket_pointers(context[45], context[46]);
          // closed e.#0 as range 35
          // closed e.Scanned#1 as range 37
          // closed e.4#0 as range 43
          // closed e.3#0 as range 39
          // closed e.Tail#1 as range 41
          //DEBUG: s.ScopeClass#2: 34
          //DEBUG: e.#0: 35
          //DEBUG: e.Scanned#1: 37
          //DEBUG: e.4#0: 43
          //DEBUG: e.3#0: 39
          //DEBUG: e.Tail#1: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/35 HalfReuse: (/6 } e.4#0/43/47 )/49 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/15 AsIs: # Function/25 AsIs: s.ScopeClass#2/34 AsIs: (/45 AsIs: e.4#0/43 AsIs: )/46 AsIs: e.3#0/39 AsIs: )/16 } )/50 Tile{ AsIs: e.Tail#1/41 } Tile{ AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[47], context[48], context[43], context[44]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_close_bracket(vm, context[50]);
          refalrts::reinit_open_bracket(context[6]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[50] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[45], context[46] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@16/4 (/5 e.#0/35 )/6 (/9 e.Scanned#1/37 )/10 (/15 # Enum/25 s.ScopeClass#2/34 e.2#0/39 )/16 e.Tail#1/41 >/1
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[33];
          if( ! refalrts::ident_term( identifiers[ident_Enum], context[25] ) )
            continue;
          // closed e.#0 as range 35
          // closed e.Scanned#1 as range 37
          // closed e.2#0 as range 39
          // closed e.Tail#1 as range 41
          //DEBUG: s.ScopeClass#2: 34
          //DEBUG: e.#0: 35
          //DEBUG: e.Scanned#1: 37
          //DEBUG: e.2#0: 39
          //DEBUG: e.Tail#1: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/35 HalfReuse: (/6 } e.2#0/39/43 )/45 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/15 AsIs: # Enum/25 AsIs: s.ScopeClass#2/34 AsIs: e.2#0/39 AsIs: )/16 } )/46 Tile{ AsIs: e.Tail#1/41 } Tile{ AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::reinit_open_bracket(context[6]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[46] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[45] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@16/4 (/5 e.#0/35 )/6 (/9 e.Scanned#1/37 )/10 (/15 # Swap/25 s.ScopeClass#2/34 e.2#0/39 )/16 e.Tail#1/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_Swap], context[25] ) )
          continue;
        // closed e.#0 as range 35
        // closed e.Scanned#1 as range 37
        // closed e.2#0 as range 39
        // closed e.Tail#1 as range 41
        //DEBUG: s.ScopeClass#2: 34
        //DEBUG: e.#0: 35
        //DEBUG: e.Scanned#1: 37
        //DEBUG: e.2#0: 39
        //DEBUG: e.Tail#1: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/35 HalfReuse: (/6 } e.2#0/39/43 )/45 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/15 AsIs: # Swap/25 AsIs: s.ScopeClass#2/34 AsIs: e.2#0/39 AsIs: )/16 } )/46 Tile{ AsIs: e.Tail#1/41 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[46] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[45] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 # Inline/25 e.1#0/30 )/16 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Inline], context[25] ) )
          continue;
        // closed e.#0 as range 26
        // closed e.Scanned#1 as range 28
        // closed e.1#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.#0: 26
        //DEBUG: e.Scanned#1: 28
        //DEBUG: e.1#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/28 HalfReuse: (/10 HalfReuse: # Inline/15 } Tile{ AsIs: e.1#0/30 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_Inline]);
        refalrts::reinit_close_bracket(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[25] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 # Drive/25 e.1#0/30 )/16 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Drive], context[25] ) )
          continue;
        // closed e.#0 as range 26
        // closed e.Scanned#1 as range 28
        // closed e.1#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.#0: 26
        //DEBUG: e.Scanned#1: 28
        //DEBUG: e.1#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/28 HalfReuse: (/10 HalfReuse: # Drive/15 } Tile{ AsIs: e.1#0/30 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_Drive]);
        refalrts::reinit_close_bracket(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[25] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 # Intrinsic/25 e.1#0/30 )/16 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[25] ) )
          continue;
        // closed e.#0 as range 26
        // closed e.Scanned#1 as range 28
        // closed e.1#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.#0: 26
        //DEBUG: e.Scanned#1: 28
        //DEBUG: e.1#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/28 HalfReuse: (/10 HalfReuse: # Intrinsic/15 } Tile{ AsIs: e.1#0/30 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_Intrinsic]);
        refalrts::reinit_close_bracket(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[25] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 # Declaration/25 s.ScopeClass#2/34 e.2#0/30 )/16 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Declaration], context[25] ) )
          continue;
        // closed e.#0 as range 26
        // closed e.Scanned#1 as range 28
        // closed e.Tail#1 as range 32
        if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
          continue;
        // closed e.2#0 as range 30
        //DEBUG: e.#0: 26
        //DEBUG: e.Scanned#1: 28
        //DEBUG: e.Tail#1: 32
        //DEBUG: s.ScopeClass#2: 34
        //DEBUG: e.2#0: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.ScopeClass#2/34 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/28 HalfReuse: (/10 HalfReuse: # Declaration/15 HalfReuse: s.ScopeClass2 #34/25 } Tile{ AsIs: e.2#0/30 } )/35 Tile{ AsIs: )/16 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_Declaration]);
        refalrts::reinit_svar( context[25], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[35] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/26 )/6 (/9 e.Scanned#1/28 )/10 (/15 # Ident/25 e.1#0/30 )/16 e.Tail#1/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[25] ) )
          continue;
        // closed e.#0 as range 26
        // closed e.Scanned#1 as range 28
        // closed e.1#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.#0: 26
        //DEBUG: e.Scanned#1: 28
        //DEBUG: e.1#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/28 HalfReuse: (/10 HalfReuse: # Ident/15 } Tile{ AsIs: e.1#0/30 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_Ident]);
        refalrts::reinit_close_bracket(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[25] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@16/4 (/5 e.new#13/26 )/6 (/9 e.new#18/28 )/10 (/15 s.new#14/25 t.new#15/34 e.new#16/30 )/16 e.new#17/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[19];
      context[33] = context[20];
      // closed e.new#13 as range 26
      // closed e.new#18 as range 28
      // closed e.new#17 as range 32
      context[35] = refalrts::tvar_left( context[34], context[30], context[31] );
      if( ! context[35] )
        continue;
      // closed e.new#16 as range 30
      do {
        // </0 & DoMapAccum@16/4 (/5 e.#0/36 )/6 (/9 e.Scanned#1/38 )/10 (/15 # NativeBlock/25 t.0#0/34 e.2#0/40 )/16 e.Tail#1/42 >/1
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[28];
        context[39] = context[29];
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[25] ) )
          continue;
        // closed e.#0 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.2#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.0#0: 34
        //DEBUG: e.#0: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.2#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/36 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/38 HalfReuse: (/10 HalfReuse: # NativeBlock/15 } Tile{ AsIs: t.0#0/34 } Tile{ AsIs: e.2#0/40 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/16 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[15], identifiers[ident_NativeBlock]);
        refalrts::reinit_close_bracket(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[10], context[25] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@16/4 (/5 e.#0/36 )/6 (/9 e.Scanned#1/38 )/10 (/15 # Spec/25 t.0#0/34 t.1#0/44 e.3#0/40 )/16 e.Tail#1/42 >/1
      context[36] = context[26];
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_Spec], context[25] ) )
        continue;
      // closed e.#0 as range 36
      // closed e.Scanned#1 as range 38
      // closed e.Tail#1 as range 42
      context[45] = refalrts::tvar_left( context[44], context[40], context[41] );
      if( ! context[45] )
        continue;
      // closed e.3#0 as range 40
      //DEBUG: t.0#0: 34
      //DEBUG: e.#0: 36
      //DEBUG: e.Scanned#1: 38
      //DEBUG: e.Tail#1: 42
      //DEBUG: t.1#0: 44
      //DEBUG: e.3#0: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/5 AsIs: e.#0/36 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned#1/38 HalfReuse: (/10 HalfReuse: # Spec/15 } Tile{ AsIs: t.0#0/34 AsIs: t.1#0/44 AsIs: e.3#0/40 AsIs: )/16 } Tile{ HalfReuse: )/25 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[15], identifiers[ident_Spec]);
      refalrts::reinit_close_bracket(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[25] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[34], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@16/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & Pass-CleanupRedudandExterns=1\1*10/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Passm_CleanupRedudandExterns_A1L1D10]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@16/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@16/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@16/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Pass-CleanupRedudandExterns=1\1@0/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z16("DoMapAccum@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z16);


static refalrts::FnResult func_gen_Map_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Map@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@19/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@19/4 (/7 # Enum/13 s.ScopeClass#2/14 e.1#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Enum], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      // closed e.1#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.ScopeClass#2: 14
      //DEBUG: e.1#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Function/13 AsIs: s.ScopeClass#2/14 } Tile{ HalfReuse: (/4 } Tile{ AsIs: e.1#0/11 } )/15 # Sentences/16 )/17 Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@19/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[15]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_Sentences]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::update_ident(context[13], identifiers[ident_Function]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[17] );
      refalrts::link_brackets( context[4], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@19/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@19/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@19/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@19/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@19/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & Pass-UnfoldEnums\1@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_UnfoldEnums_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z19("Map@19", COOKIE1_, COOKIE2_, func_gen_Map_Z19);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@3/4 t.new#1/5 e.new#2/2 t.new#3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn#1/5 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    //DEBUG: t.X#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/9 AsIs: t.X#0/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.X#0: 7
    //DEBUG: e.X#0: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: e.X#0/9 } Tile{ AsIs: t.X#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn#0/5 e.X#0/2 t.X#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@4/4 t.new#1/5 e.new#2/2 t.new#3/9 t.new#4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn#1/5 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/11 AsIs: t.X#0/9 AsIs: t.X0#0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure#1/15 e.Bounded#1/13 )/6 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded#1 as range 13
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: e.X#0: 11
    //DEBUG: t.Closure#1: 15
    //DEBUG: e.Bounded#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure#1/15 } Tile{ AsIs: e.Bounded#1/13 } Tile{ AsIs: e.X#0/11 } Tile{ AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn#0/5 e.X#0/2 t.X#0/9 t.X0#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 9
  //DEBUG: t.X0#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_Fetch_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Fetch@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@5/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@5/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@7/4 } </8 & Pass-AttachEntries=1/9 </10 & DoMapAccum@1/11 (/12 )/13 (/14 )/15 Tile{ AsIs: e.Argument#1/6 } >/16 >/17 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_AttachEntries_A1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@5/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-AttachEntries@0/8 (/9 & Pass-RemoveRedundantDriveInlineIntrinsic@0/10 & Pass-EnumerateVariables@0/11 & Pass-NameNestedFuncs@0/12 & Pass-RemoveBlocksAndAssigns@0/13 (/14 & Pass-FlatNestedFuncs@0/15 Tile{ AsIs: s.MarkupContext#1/5 } )/16 & Pass-CleanupRedudandExterns@0/17 & Pass-UnfoldEnums@0/18 )/19 {*}/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_AttachEntries_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_unwrapped_closure(vm, context[20], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[19] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[20] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z5("Fetch@5", COOKIE1_, COOKIE2_, func_gen_Fetch_Z5);


static refalrts::FnResult func_gen_Fetch_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Fetch@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@6/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@6/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@8/4 } </8 & Pass-AttachEntries=1/9 </10 & DoMapAccum@1/11 (/12 )/13 (/14 )/15 Tile{ AsIs: e.Argument#1/6 } >/16 >/17 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_AttachEntries_A1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@6/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-AttachEntries@0/8 (/9 & Pass-RemoveRedundantDriveInlineIntrinsic@0/10 & Pass-EnumerateVariables@0/11 & Pass-NameNestedFuncs@0/12 & Pass-RemoveBlocksAndAssigns@0/13 (/14 & Pass-FlatNestedFuncs@0/15 s.MarkupContext#1/5/16 )/17 (/18 & Pass-UnCondition@0/19 Tile{ AsIs: s.MarkupContext#1/5 } )/20 & Pass-CleanupRedudandExterns@0/21 & Pass-UnfoldEnums@0/22 )/23 {*}/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_AttachEntries_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[16], context[5]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_unwrapped_closure(vm, context[24], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[23] );
  refalrts::link_brackets( context[18], context[20] );
  refalrts::link_brackets( context[14], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[24] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z6("Fetch@6", COOKIE1_, COOKIE2_, func_gen_Fetch_Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Pass-AttachEntries=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_AttachEntries_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Pass-RemoveRedundantDriveInlineIntrinsic=2\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Pass-RemoveRedundantDriveInlineIntrinsic=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & EnumerateVars-Expr\1@0/16 Tile{ HalfReuse: 0/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@17/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@17/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@17/4 (/5 e.#0/21 )/6 (/9 e.Scanned#1/17 )/10 (/15 # TkVariable/25 s.Mode#2/26 '_'/27 e.3#0/23 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_TkVariable], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e.#0 as range 21
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      context[27] = refalrts::char_left( '_', context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.3#0 as range 23
      //DEBUG: e.#0: 21
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.Mode#2: 26
      //DEBUG: e.3#0: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode#2/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoMapAccum$1=1@17/29 (/30 Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } )/31 Tile{ HalfReuse: </25 } & EnumerateVars-Expr\1$1=1/32 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e.#0/21 AsIs: )/6 HalfReuse: s.Mode2 #26/9 } Tile{ AsIs: '_'/27 AsIs: e.3#0/23 HalfReuse: 1/16 } >/33 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_S1A1Z17]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_EnumerateVarsm_Expr_L1S1A1]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_call(context[25]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::reinit_number(context[16], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[31] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[27], context[16] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@17/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & EnumerateVars-Expr\1@2*1/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_EnumerateVarsm_Expr_L1Z2D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@17/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@17/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@17/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & EnumerateVars-Expr\1@0/14 Tile{ HalfReuse: 1/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 1UL);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z17("DoMapAccum@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z17);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & EnumerateVars-Body$1\1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.new#7/17 )/8 (/11 e.new#8/19 )/12 (/15 e.new#9/21 )/16 (/27 e.new#5/25 )/28 e.new#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.new#7 as range 17
    // closed e.new#8 as range 19
    // closed e.new#9 as range 21
    // closed e.new#5 as range 25
    // closed e.new#6 as range 23
    do {
      // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/29 )/8 (/11 e.5#0/31 )/12 (/15 )/16 (/27 e.ScopeVars#3/33 )/28 e.Pattern#3/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[23];
      context[36] = context[24];
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.3#0 as range 29
      // closed e.5#0 as range 31
      // closed e.ScopeVars#3 as range 33
      // closed e.Pattern#3 as range 35
      //DEBUG: e.3#0: 29
      //DEBUG: e.5#0: 31
      //DEBUG: e.ScopeVars#3: 33
      //DEBUG: e.Pattern#3: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & EnumerateVars-Body$1\1=3/38 (/39 Tile{ AsIs: e.Pattern#3/35 } )/40 (/41 Tile{ HalfReuse: )/0 HalfReuse: 1/4 AsIs: (/7 AsIs: e.3#0/29 AsIs: )/8 HalfReuse: </11 } & DoMapAccum/42 [*]/43 Tile{ HalfReuse: & EnumerateVars-Expr\1/12 HalfReuse: 1/15 HalfReuse: {*}/16 AsIs: (/27 AsIs: e.ScopeVars#3/33 AsIs: )/28 } (/44 )/45 Tile{ AsIs: e.5#0/31 } >/46 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_EnumerateVarsm_Body_S1L1A3]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_DoMapAccum]);
      refalrts::alloc_closure_head(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
      refalrts::reinit_number(context[15], 1UL);
      refalrts::reinit_unwrapped_closure(context[16], context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[41], context[0] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[12], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      refalrts::use( res );
      refalrts::wrap_closure( context[16] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.new#12/29 )/8 (/11 e.new#13/31 )/12 (/15 (/41 s.new#14/55 (/53 e.new#15/51 )/54 (/49 e.new#16/47 )/50 (/45 e.new#17/43 )/46 )/42 e.new#18/33 )/16 (/27 e.new#11/35 )/28 e.new#10/37 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_right( context[51], context[52], context[39], context[40] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      // closed e.new#12 as range 29
      // closed e.new#13 as range 31
      // closed e.new#15 as range 51
      // closed e.new#16 as range 47
      // closed e.new#17 as range 43
      // closed e.new#18 as range 33
      // closed e.new#11 as range 35
      // closed e.new#10 as range 37
      if( ! refalrts::svar_left( context[55], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      do {
        // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 # Assign/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
        context[56] = context[29];
        context[57] = context[30];
        context[58] = context[31];
        context[59] = context[32];
        context[60] = context[51];
        context[61] = context[52];
        context[62] = context[47];
        context[63] = context[48];
        context[64] = context[43];
        context[65] = context[44];
        context[66] = context[33];
        context[67] = context[34];
        context[68] = context[35];
        context[69] = context[36];
        context[70] = context[37];
        context[71] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_Assign], context[55] ) )
          continue;
        // closed e.3#0 as range 56
        // closed e.5#0 as range 58
        // closed e.6#0 as range 60
        // closed e.8#0 as range 62
        // closed e.00#0 as range 64
        // closed e.#0 as range 66
        // closed e.ScopeVars#3 as range 68
        // closed e.Pattern#3 as range 70
        //DEBUG: e.3#0: 56
        //DEBUG: e.5#0: 58
        //DEBUG: e.6#0: 60
        //DEBUG: e.8#0: 62
        //DEBUG: e.00#0: 64
        //DEBUG: e.#0: 66
        //DEBUG: e.ScopeVars#3: 68
        //DEBUG: e.Pattern#3: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=2@9/41 HalfReuse: (/55 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.00#0/64 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.8#0/62 } )/74 </75 Tile{ HalfReuse: & DoMapAccum@17/16 AsIs: (/27 AsIs: e.ScopeVars#3/68 AsIs: )/28 } (/76 Tile{ HalfReuse: )/53 AsIs: e.6#0/60 HalfReuse: >/54 HalfReuse: >/49 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z9]);
        refalrts::reinit_open_bracket(context[55]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_name(context[16], functions[efunc_gen_DoMapAccum_Z17]);
        refalrts::reinit_close_bracket(context[53]);
        refalrts::reinit_close_call(context[54]);
        refalrts::reinit_close_call(context[49]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[75] );
        refalrts::link_brackets( context[76], context[53] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[42], context[74] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[55], context[50] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[73], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[49] );
        res = refalrts::splice_elem( res, context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[50], context[42] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[4], context[55] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[72], context[73] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 # Condition/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
        context[56] = context[29];
        context[57] = context[30];
        context[58] = context[31];
        context[59] = context[32];
        context[60] = context[51];
        context[61] = context[52];
        context[62] = context[47];
        context[63] = context[48];
        context[64] = context[43];
        context[65] = context[44];
        context[66] = context[33];
        context[67] = context[34];
        context[68] = context[35];
        context[69] = context[36];
        context[70] = context[37];
        context[71] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_Condition], context[55] ) )
          continue;
        // closed e.3#0 as range 56
        // closed e.5#0 as range 58
        // closed e.6#0 as range 60
        // closed e.8#0 as range 62
        // closed e.00#0 as range 64
        // closed e.#0 as range 66
        // closed e.ScopeVars#3 as range 68
        // closed e.Pattern#3 as range 70
        //DEBUG: e.3#0: 56
        //DEBUG: e.5#0: 58
        //DEBUG: e.6#0: 60
        //DEBUG: e.8#0: 62
        //DEBUG: e.00#0: 64
        //DEBUG: e.#0: 66
        //DEBUG: e.ScopeVars#3: 68
        //DEBUG: e.Pattern#3: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=2@10/41 HalfReuse: (/55 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.00#0/64 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.8#0/62 } )/74 </75 Tile{ HalfReuse: & DoMapAccum@17/16 AsIs: (/27 AsIs: e.ScopeVars#3/68 AsIs: )/28 } (/76 Tile{ HalfReuse: )/53 AsIs: e.6#0/60 HalfReuse: >/54 HalfReuse: >/49 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z10]);
        refalrts::reinit_open_bracket(context[55]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_name(context[16], functions[efunc_gen_DoMapAccum_Z17]);
        refalrts::reinit_close_bracket(context[53]);
        refalrts::reinit_close_call(context[54]);
        refalrts::reinit_close_call(context[49]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[75] );
        refalrts::link_brackets( context[76], context[53] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[42], context[74] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[55], context[50] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[73], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[49] );
        res = refalrts::splice_elem( res, context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[50], context[42] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[4], context[55] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[72], context[73] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 s.ChainType#1/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
      context[56] = context[29];
      context[57] = context[30];
      context[58] = context[31];
      context[59] = context[32];
      context[60] = context[51];
      context[61] = context[52];
      context[62] = context[47];
      context[63] = context[48];
      context[64] = context[43];
      context[65] = context[44];
      context[66] = context[33];
      context[67] = context[34];
      context[68] = context[35];
      context[69] = context[36];
      context[70] = context[37];
      context[71] = context[38];
      // closed e.3#0 as range 56
      // closed e.5#0 as range 58
      // closed e.6#0 as range 60
      // closed e.8#0 as range 62
      // closed e.00#0 as range 64
      // closed e.#0 as range 66
      // closed e.ScopeVars#3 as range 68
      // closed e.Pattern#3 as range 70
      //DEBUG: s.ChainType#1: 55
      //DEBUG: e.3#0: 56
      //DEBUG: e.5#0: 58
      //DEBUG: e.6#0: 60
      //DEBUG: e.8#0: 62
      //DEBUG: e.00#0: 64
      //DEBUG: e.#0: 66
      //DEBUG: e.ScopeVars#3: 68
      //DEBUG: e.Pattern#3: 70

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=1@3/41 AsIs: s.ChainType#1/55 AsIs: (/53 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.00#0/64 } Tile{ AsIs: )/54 AsIs: (/49 AsIs: e.8#0/62 AsIs: )/50 AsIs: (/45 } Tile{ AsIs: e.ScopeVars#3/68 } Tile{ AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.6#0/60 } Tile{ AsIs: )/28 } </74 & AssignOrCondition*2/75 s.ChainType#1/55/76 >/77 >/78 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
      refalrts::alloc_open_bracket(vm, context[73]);
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_AssignOrCondition_D2]);
      refalrts::copy_stvar(vm, context[76], context[55]);
      refalrts::alloc_close_call(vm, context[77]);
      refalrts::alloc_close_call(vm, context[78]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z3]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[77] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[42], context[28] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::link_brackets( context[27], context[54] );
      refalrts::link_brackets( context[53], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[73], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[74], context[78] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[46], context[42] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[54], context[45] );
      res = refalrts::splice_evar( res, context[64], context[65] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_evar( res, context[4], context[53] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/29 )/8 (/11 e.5#0/31 )/12 (/15 e.4#0/33 )/16 (/27 e.ScopeVars#3/35 )/28 e.Pattern#3/37 >/1
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[23];
    context[38] = context[24];
    // closed e.3#0 as range 29
    // closed e.5#0 as range 31
    // closed e.4#0 as range 33
    // closed e.ScopeVars#3 as range 35
    // closed e.Pattern#3 as range 37
    //DEBUG: e.3#0: 29
    //DEBUG: e.5#0: 31
    //DEBUG: e.4#0: 33
    //DEBUG: e.ScopeVars#3: 35
    //DEBUG: e.Pattern#3: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/39 (/40 Tile{ AsIs: e.Pattern#3/37 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/29 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/31 AsIs: )/12 HalfReuse: </15 } & EnumerateVars-Assignments@0/41 (/42 )/43 Tile{ HalfReuse: 1/16 AsIs: (/27 AsIs: e.ScopeVars#3/35 AsIs: )/28 } Tile{ AsIs: e.4#0/33 } >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_EnumerateVarsm_Assignments_Z0]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_number(context[16], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[40], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Body$1\1=1@1/4 (/7 e.3#0/5 )/8 (/11 e.5#0/9 )/12 (/15 e.4#0/13 )/16 e.dyn#0/2 >/1
  // closed e.3#0 as range 5
  // closed e.5#0 as range 9
  // closed e.4#0 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.3#0: 5
  //DEBUG: e.5#0: 9
  //DEBUG: e.4#0: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1=1@0/4 AsIs: (/7 AsIs: e.3#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/9 AsIs: )/12 HalfReuse: 1/15 } (/17 Tile{ AsIs: e.4#0/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1Z0]);
  refalrts::reinit_number(context[15], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A1Z1("EnumerateVars-Body$1\\1=1@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum$1=1@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@5/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 s.Depth#4/5 (/8 e.Scanned0#1/14 )/9 (/12 e.Tail0#1/16 )/13 t.Acc#2/20 e.StepScanned#2/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Scanned0#1 as range 14
    // closed e.Tail0#1 as range 16
    context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
    if( ! context[21] )
      continue;
    // closed e.StepScanned#2 as range 18
    //DEBUG: s.Depth#4: 5
    //DEBUG: e.Scanned0#1: 14
    //DEBUG: e.Tail0#1: 16
    //DEBUG: t.Acc#2: 20
    //DEBUG: e.StepScanned#2: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#4/5 } Tile{ AsIs: t.Acc#2/20 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Scanned0#1/14 } Tile{ AsIs: e.StepScanned#2/18 } Tile{ AsIs: )/13 } Tile{ AsIs: e.Tail0#1/16 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 s.Depth#4/5 (/8 e.Scanned0#1/6 )/9 (/12 e.Tail0#1/10 )/13 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 6
  // closed e.Tail0#1 as range 10
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth#4: 5
  //DEBUG: e.Scanned0#1: 6
  //DEBUG: e.Tail0#1: 10
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } [*]/14 & EnumerateVars-Expr\1@0/15 Tile{ AsIs: s.Depth#4/5 } {*}/16 Tile{ AsIs: (/8 AsIs: e.Scanned0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Tail0#1/10 AsIs: )/13 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[16], context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[16] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@3/4 (/7 e.Assignments0#1/18 )/8 (/11 e.Pattern0#1/20 )/12 (/15 e.Blocks0#1/22 )/16 s.Depth0#1/17 (/28 e.ScopeVars#3/26 )/29 e.Result#3/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Assignments0#1 as range 18
    // closed e.Pattern0#1 as range 20
    // closed e.Blocks0#1 as range 22
    // closed e.ScopeVars#3 as range 26
    // closed e.Result#3 as range 24
    //DEBUG: s.Depth0#1: 17
    //DEBUG: e.Assignments0#1: 18
    //DEBUG: e.Pattern0#1: 20
    //DEBUG: e.Blocks0#1: 22
    //DEBUG: e.ScopeVars#3: 26
    //DEBUG: e.Result#3: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@3/4 AsIs: (/7 } Tile{ AsIs: e.Result#3/24 } )/30 (/31 Tile{ AsIs: e.Assignments0#1/18 } Tile{ AsIs: )/29 } (/32 Tile{ AsIs: e.ScopeVars#3/26 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/20 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/22 AsIs: )/16 } </33 & Add/34 1/35 Tile{ AsIs: s.Depth0#1/17 HalfReuse: >/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z3]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[32], context[8] );
    refalrts::link_brackets( context[31], context[29] );
    refalrts::link_brackets( context[7], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[28] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@3/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 s.Depth0#1/17 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#1: 17
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=2@0/19 (/20 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 AsIs: s.Depth0#1/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[20], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[18], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z3("EnumerateVars-Assignments$2=2@3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@4/4 (/7 e.Assignments0#1/18 )/8 (/11 e.Pattern0#1/20 )/12 (/15 e.Blocks0#1/22 )/16 s.Depth0#1/17 (/28 e.ScopeVars#3/26 )/29 e.Result#3/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Assignments0#1 as range 18
    // closed e.Pattern0#1 as range 20
    // closed e.Blocks0#1 as range 22
    // closed e.ScopeVars#3 as range 26
    // closed e.Result#3 as range 24
    //DEBUG: s.Depth0#1: 17
    //DEBUG: e.Assignments0#1: 18
    //DEBUG: e.Pattern0#1: 20
    //DEBUG: e.Blocks0#1: 22
    //DEBUG: e.ScopeVars#3: 26
    //DEBUG: e.Result#3: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@4/4 AsIs: (/7 } Tile{ AsIs: e.Result#3/24 } )/30 (/31 Tile{ AsIs: e.Assignments0#1/18 } Tile{ AsIs: )/29 } (/32 Tile{ AsIs: e.ScopeVars#3/26 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/20 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/22 AsIs: )/16 } </33 & Add/34 1/35 Tile{ AsIs: s.Depth0#1/17 HalfReuse: >/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z4]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[32], context[8] );
    refalrts::link_brackets( context[31], context[29] );
    refalrts::link_brackets( context[7], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[28] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@4/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 s.Depth0#1/17 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#1: 17
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=2@0/19 (/20 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 AsIs: s.Depth0#1/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[20], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[18], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z4("EnumerateVars-Assignments$2=2@4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & EnumerateVars-Assignments$2=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=1@1/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 s.new#5/18 (/21 e.new#6/19 )/22 (/25 e.new#7/23 )/26 e.new#8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new#6 as range 19
  // closed e.new#7 as range 23
  // closed e.new#8 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=1@1/4 s.ChainType0#1/5 (/8 e.Assignments0#1/27 )/9 (/12 e.Pattern0#1/29 )/13 (/16 e.Blocks0#1/31 )/17 s.Depth0#1/18 (/21 e.ScopeVars#3/33 )/22 (/25 e.Result0#1/35 )/26 >/1
    context[27] = context[6];
    context[28] = context[7];
    context[29] = context[10];
    context[30] = context[11];
    context[31] = context[14];
    context[32] = context[15];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Assignments0#1 as range 27
    // closed e.Pattern0#1 as range 29
    // closed e.Blocks0#1 as range 31
    // closed e.ScopeVars#3 as range 33
    // closed e.Result0#1 as range 35
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: s.Depth0#1: 18
    //DEBUG: e.Assignments0#1: 27
    //DEBUG: e.Pattern0#1: 29
    //DEBUG: e.Blocks0#1: 31
    //DEBUG: e.ScopeVars#3: 33
    //DEBUG: e.Result0#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@7/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/27 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/29 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/31 AsIs: )/17 AsIs: s.Depth0#1/18 HalfReuse: </21 } & DoMapAccum@5/37 s.Depth0#1/18/38 (/39 Tile{ AsIs: e.ScopeVars#3/33 } )/40 Tile{ HalfReuse: (/22 HalfReuse: )/25 AsIs: e.Result0#1/35 HalfReuse: >/26 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[38], context[18]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z7]);
    refalrts::reinit_open_call(context[21]);
    refalrts::reinit_open_bracket(context[22]);
    refalrts::reinit_close_bracket(context[25]);
    refalrts::reinit_close_call(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=1@1/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 s.Depth0#1/18 (/21 e.ScopeVars#3/19 )/22 (/25 e.Result0#1/23 )/26 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.ScopeVars#3 as range 19
  // closed e.Result0#1 as range 23
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: s.Depth0#1: 18
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.ScopeVars#3: 19
  //DEBUG: e.Result0#1: 23
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </27 & EnumerateVars-Assignments$2=1@0/28 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 AsIs: s.Depth0#1/18 AsIs: (/21 AsIs: e.ScopeVars#3/19 AsIs: )/22 AsIs: (/25 AsIs: e.Result0#1/23 AsIs: )/26 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A1Z1("EnumerateVars-Assignments$2=1@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A1Z1);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & EnumerateVars-Assignments$2=2@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@5/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 s.new#9/34 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  if( ! refalrts::svar_left( context[34], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#10 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@5/4 (/7 e.RAssignments0#1/35 )/8 s.ChainType0#1/9 (/12 e.Result0#3/37 )/13 (/16 e.Blocks#5/39 )/17 (/20 e.Pattern#6/41 )/21 (/24 e.Assignments0#1/43 )/25 (/28 e.Pattern0#1/45 )/29 (/32 e.Blocks0#1/47 )/33 s.Depth#4/34 (/53 e.ScopeVars#3/51 )/54 e.Result#3/49 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[10];
    context[38] = context[11];
    context[39] = context[14];
    context[40] = context[15];
    context[41] = context[18];
    context[42] = context[19];
    context[43] = context[22];
    context[44] = context[23];
    context[45] = context[26];
    context[46] = context[27];
    context[47] = context[30];
    context[48] = context[31];
    context[49] = context[2];
    context[50] = context[3];
    context[51] = 0;
    context[52] = 0;
    context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
    if( ! context[53] )
      continue;
    refalrts::bracket_pointers(context[53], context[54]);
    // closed e.RAssignments0#1 as range 35
    // closed e.Result0#3 as range 37
    // closed e.Blocks#5 as range 39
    // closed e.Pattern#6 as range 41
    // closed e.Assignments0#1 as range 43
    // closed e.Pattern0#1 as range 45
    // closed e.Blocks0#1 as range 47
    // closed e.ScopeVars#3 as range 51
    // closed e.Result#3 as range 49
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth#4: 34
    //DEBUG: e.RAssignments0#1: 35
    //DEBUG: e.Result0#3: 37
    //DEBUG: e.Blocks#5: 39
    //DEBUG: e.Pattern#6: 41
    //DEBUG: e.Assignments0#1: 43
    //DEBUG: e.Pattern0#1: 45
    //DEBUG: e.Blocks0#1: 47
    //DEBUG: e.ScopeVars#3: 51
    //DEBUG: e.Result#3: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@5/4 AsIs: (/7 AsIs: e.RAssignments0#1/35 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/37 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/39 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/41 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Result#3/49 } )/55 (/56 Tile{ AsIs: e.Assignments0#1/43 } Tile{ AsIs: )/54 } (/57 Tile{ AsIs: e.ScopeVars#3/51 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Pattern0#1/45 AsIs: )/29 AsIs: (/32 AsIs: e.Blocks0#1/47 AsIs: )/33 } </58 & Add/59 1/60 Tile{ AsIs: s.Depth#4/34 HalfReuse: >/53 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_open_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[60], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z5]);
    refalrts::reinit_close_call(context[53]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[57], context[25] );
    refalrts::link_brackets( context[56], context[54] );
    refalrts::link_brackets( context[24], context[55] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[53] );
    res = refalrts::splice_evar( res, context[58], context[60] );
    res = refalrts::splice_evar( res, context[25], context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@5/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Assignments0#1/22 )/25 (/28 e.Pattern0#1/26 )/29 (/32 e.Blocks0#1/30 )/33 s.Depth#4/34 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Assignments0#1 as range 22
  // closed e.Pattern0#1 as range 26
  // closed e.Blocks0#1 as range 30
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth#4: 34
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Assignments0#1: 22
  //DEBUG: e.Pattern0#1: 26
  //DEBUG: e.Blocks0#1: 30
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/18 AsIs: )/21 HalfReuse: )/24 } )/35 # Assign/36 (/37 Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Pattern0#1/26 AsIs: )/29 AsIs: (/32 AsIs: e.Blocks0#1/30 AsIs: )/33 AsIs: s.Depth#4/34 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_Assign]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[37], context[25] );
  refalrts::link_brackets( context[7], context[35] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[25];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z5("EnumerateVars-Assignments$2=2@5", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & EnumerateVars-Assignments$2=2@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@6/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 s.new#9/34 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  if( ! refalrts::svar_left( context[34], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#10 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@6/4 (/7 e.RAssignments0#1/35 )/8 s.ChainType0#1/9 (/12 e.Result0#3/37 )/13 (/16 e.Blocks#5/39 )/17 (/20 e.Pattern#6/41 )/21 (/24 e.Assignments0#1/43 )/25 (/28 e.Pattern0#1/45 )/29 (/32 e.Blocks0#1/47 )/33 s.Depth#4/34 (/53 e.ScopeVars#3/51 )/54 e.Result#3/49 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[10];
    context[38] = context[11];
    context[39] = context[14];
    context[40] = context[15];
    context[41] = context[18];
    context[42] = context[19];
    context[43] = context[22];
    context[44] = context[23];
    context[45] = context[26];
    context[46] = context[27];
    context[47] = context[30];
    context[48] = context[31];
    context[49] = context[2];
    context[50] = context[3];
    context[51] = 0;
    context[52] = 0;
    context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
    if( ! context[53] )
      continue;
    refalrts::bracket_pointers(context[53], context[54]);
    // closed e.RAssignments0#1 as range 35
    // closed e.Result0#3 as range 37
    // closed e.Blocks#5 as range 39
    // closed e.Pattern#6 as range 41
    // closed e.Assignments0#1 as range 43
    // closed e.Pattern0#1 as range 45
    // closed e.Blocks0#1 as range 47
    // closed e.ScopeVars#3 as range 51
    // closed e.Result#3 as range 49
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth#4: 34
    //DEBUG: e.RAssignments0#1: 35
    //DEBUG: e.Result0#3: 37
    //DEBUG: e.Blocks#5: 39
    //DEBUG: e.Pattern#6: 41
    //DEBUG: e.Assignments0#1: 43
    //DEBUG: e.Pattern0#1: 45
    //DEBUG: e.Blocks0#1: 47
    //DEBUG: e.ScopeVars#3: 51
    //DEBUG: e.Result#3: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@6/4 AsIs: (/7 AsIs: e.RAssignments0#1/35 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/37 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/39 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/41 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Result#3/49 } )/55 (/56 Tile{ AsIs: e.Assignments0#1/43 } Tile{ AsIs: )/54 } (/57 Tile{ AsIs: e.ScopeVars#3/51 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Pattern0#1/45 AsIs: )/29 AsIs: (/32 AsIs: e.Blocks0#1/47 AsIs: )/33 } </58 & Add/59 1/60 Tile{ AsIs: s.Depth#4/34 HalfReuse: >/53 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_open_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[60], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z6]);
    refalrts::reinit_close_call(context[53]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[57], context[25] );
    refalrts::link_brackets( context[56], context[54] );
    refalrts::link_brackets( context[24], context[55] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[53] );
    res = refalrts::splice_evar( res, context[58], context[60] );
    res = refalrts::splice_evar( res, context[25], context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@6/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Assignments0#1/22 )/25 (/28 e.Pattern0#1/26 )/29 (/32 e.Blocks0#1/30 )/33 s.Depth#4/34 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Assignments0#1 as range 22
  // closed e.Pattern0#1 as range 26
  // closed e.Blocks0#1 as range 30
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth#4: 34
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Assignments0#1: 22
  //DEBUG: e.Pattern0#1: 26
  //DEBUG: e.Blocks0#1: 30
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/18 AsIs: )/21 HalfReuse: )/24 } )/35 # Condition/36 (/37 Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Pattern0#1/26 AsIs: )/29 AsIs: (/32 AsIs: e.Blocks0#1/30 AsIs: )/33 AsIs: s.Depth#4/34 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_Condition]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[37], context[25] );
  refalrts::link_brackets( context[7], context[35] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[25];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z6("EnumerateVars-Assignments$2=2@6", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z6);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & EnumerateVars-Assignments$2=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=1@2/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 (/25 e.new#7/23 )/26 (/29 e.new#8/27 )/30 (/33 e.new#9/31 )/34 s.new#10/35 (/38 e.new#11/36 )/39 (/42 e.new#12/40 )/43 e.new#13/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new#7 as range 23
  // closed e.new#8 as range 27
  // closed e.new#9 as range 31
  if( ! refalrts::svar_left( context[35], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  context[40] = 0;
  context[41] = 0;
  context[42] = refalrts::brackets_left( context[40], context[41], context[2], context[3] );
  if( ! context[42] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[42], context[43]);
  // closed e.new#11 as range 36
  // closed e.new#12 as range 40
  // closed e.new#13 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=1@2/4 (/7 e.RAssignments0#1/44 )/8 s.ChainType1#1/9 (/12 e.Result#3/46 )/13 (/16 e.Blocks#5/48 )/17 (/20 e.Pattern#6/50 )/21 s.ChainType0#1/22 (/25 e.Assignments0#1/52 )/26 (/29 e.Pattern0#1/54 )/30 (/33 e.Blocks0#1/56 )/34 s.Depth#4/35 (/38 e.ScopeVars#6/58 )/39 (/42 e.Result0#1/60 )/43 >/1
    context[44] = context[5];
    context[45] = context[6];
    context[46] = context[10];
    context[47] = context[11];
    context[48] = context[14];
    context[49] = context[15];
    context[50] = context[18];
    context[51] = context[19];
    context[52] = context[23];
    context[53] = context[24];
    context[54] = context[27];
    context[55] = context[28];
    context[56] = context[31];
    context[57] = context[32];
    context[58] = context[36];
    context[59] = context[37];
    context[60] = context[40];
    context[61] = context[41];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.RAssignments0#1 as range 44
    // closed e.Result#3 as range 46
    // closed e.Blocks#5 as range 48
    // closed e.Pattern#6 as range 50
    // closed e.Assignments0#1 as range 52
    // closed e.Pattern0#1 as range 54
    // closed e.Blocks0#1 as range 56
    // closed e.ScopeVars#6 as range 58
    // closed e.Result0#1 as range 60
    //DEBUG: s.ChainType1#1: 9
    //DEBUG: s.ChainType0#1: 22
    //DEBUG: s.Depth#4: 35
    //DEBUG: e.RAssignments0#1: 44
    //DEBUG: e.Result#3: 46
    //DEBUG: e.Blocks#5: 48
    //DEBUG: e.Pattern#6: 50
    //DEBUG: e.Assignments0#1: 52
    //DEBUG: e.Pattern0#1: 54
    //DEBUG: e.Blocks0#1: 56
    //DEBUG: e.ScopeVars#6: 58
    //DEBUG: e.Result0#1: 60

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@8/4 AsIs: (/7 AsIs: e.RAssignments0#1/44 AsIs: )/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result#3/46 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/48 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/50 AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Assignments0#1/52 AsIs: )/26 AsIs: (/29 AsIs: e.Pattern0#1/54 AsIs: )/30 AsIs: (/33 AsIs: e.Blocks0#1/56 AsIs: )/34 AsIs: s.Depth#4/35 HalfReuse: </38 } & DoMapAccum@5/62 s.Depth#4/35/63 (/64 Tile{ AsIs: e.ScopeVars#6/58 } )/65 Tile{ HalfReuse: (/39 HalfReuse: )/42 AsIs: e.Result0#1/60 HalfReuse: >/43 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[62], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[63], context[35]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z8]);
    refalrts::reinit_open_call(context[38]);
    refalrts::reinit_open_bracket(context[39]);
    refalrts::reinit_close_bracket(context[42]);
    refalrts::reinit_close_call(context[43]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[64], context[65] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[39];
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[62], context[64] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=1@2/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType1#1/9 (/12 e.Result#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 s.ChainType0#1/22 (/25 e.Assignments0#1/23 )/26 (/29 e.Pattern0#1/27 )/30 (/33 e.Blocks0#1/31 )/34 s.Depth#4/35 (/38 e.ScopeVars#6/36 )/39 (/42 e.Result0#1/40 )/43 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Assignments0#1 as range 23
  // closed e.Pattern0#1 as range 27
  // closed e.Blocks0#1 as range 31
  // closed e.ScopeVars#6 as range 36
  // closed e.Result0#1 as range 40
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType1#1: 9
  //DEBUG: s.ChainType0#1: 22
  //DEBUG: s.Depth#4: 35
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Assignments0#1: 23
  //DEBUG: e.Pattern0#1: 27
  //DEBUG: e.Blocks0#1: 31
  //DEBUG: e.ScopeVars#6: 36
  //DEBUG: e.Result0#1: 40
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=1@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/44 )/45 Tile{ AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Assignments0#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.Pattern0#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.Blocks0#1/31 AsIs: )/34 AsIs: s.Depth#4/35 AsIs: (/38 AsIs: e.ScopeVars#6/36 AsIs: )/39 AsIs: (/42 AsIs: e.Result0#1/40 AsIs: )/43 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::alloc_close_bracket(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::link_brackets( context[8], context[45] );
  refalrts::link_brackets( context[20], context[44] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[44], context[45] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A1Z2("EnumerateVars-Assignments$2=1@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A1Z2);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & EnumerateVars-Assignments$2=3@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@1/4 (/7 e.RAssignments0#1/29 )/8 (/11 e.Result0#3/31 )/12 (/15 e.Assignments0#1/33 )/16 (/19 e.ScopeVars0#3/35 )/20 (/23 e.Pattern0#1/37 )/24 (/27 e.Blocks0#1/39 )/28 s.Depth#4/43 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.RAssignments0#1 as range 29
    // closed e.Result0#3 as range 31
    // closed e.Assignments0#1 as range 33
    // closed e.ScopeVars0#3 as range 35
    // closed e.Pattern0#1 as range 37
    // closed e.Blocks0#1 as range 39
    if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
      continue;
    if( ! refalrts::empty_seq( context[41], context[42] ) )
      continue;
    //DEBUG: e.RAssignments0#1: 29
    //DEBUG: e.Result0#3: 31
    //DEBUG: e.Assignments0#1: 33
    //DEBUG: e.ScopeVars0#3: 35
    //DEBUG: e.Pattern0#1: 37
    //DEBUG: e.Blocks0#1: 39
    //DEBUG: s.Depth#4: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@1/4 AsIs: (/7 AsIs: e.RAssignments0#1/29 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Result0#3/31 } )/44 Tile{ HalfReuse: s.Depth4 #43/12 AsIs: (/15 AsIs: e.Assignments0#1/33 AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars0#3/35 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0#1/37 AsIs: )/24 HalfReuse: </27 } Tile{ HalfReuse: & Map@11/28 AsIs: s.Depth#4/43 } (/45 e.ScopeVars0#3/35/46 )/48 Tile{ AsIs: e.Blocks0#1/39 } >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z1]);
    refalrts::reinit_svar( context[12], context[43] );
    refalrts::reinit_open_call(context[27]);
    refalrts::reinit_name(context[28], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[45], context[48] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[44] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[45], context[48] );
    res = refalrts::splice_evar( res, context[28], context[43] );
    res = refalrts::splice_evar( res, context[12], context[27] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@1/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 (/15 e.Assignments0#1/13 )/16 (/19 e.ScopeVars0#3/17 )/20 (/23 e.Pattern0#1/21 )/24 (/27 e.Blocks0#1/25 )/28 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.ScopeVars0#3 as range 17
  // closed e.Pattern0#1 as range 21
  // closed e.Blocks0#1 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.ScopeVars0#3: 17
  //DEBUG: e.Pattern0#1: 21
  //DEBUG: e.Blocks0#1: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/29 Tile{ HalfReuse: # Assign/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Assignments0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars0#3/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0#1/21 AsIs: )/24 AsIs: (/27 AsIs: e.Blocks0#1/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z1("EnumerateVars-Assignments$2=3@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z1);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & EnumerateVars-Assignments$2=3@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@2/4 (/7 e.RAssignments0#1/29 )/8 (/11 e.Result0#3/31 )/12 (/15 e.Assignments0#1/33 )/16 (/19 e.ScopeVars0#3/35 )/20 (/23 e.Pattern0#1/37 )/24 (/27 e.Blocks0#1/39 )/28 s.Depth#4/43 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.RAssignments0#1 as range 29
    // closed e.Result0#3 as range 31
    // closed e.Assignments0#1 as range 33
    // closed e.ScopeVars0#3 as range 35
    // closed e.Pattern0#1 as range 37
    // closed e.Blocks0#1 as range 39
    if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
      continue;
    if( ! refalrts::empty_seq( context[41], context[42] ) )
      continue;
    //DEBUG: e.RAssignments0#1: 29
    //DEBUG: e.Result0#3: 31
    //DEBUG: e.Assignments0#1: 33
    //DEBUG: e.ScopeVars0#3: 35
    //DEBUG: e.Pattern0#1: 37
    //DEBUG: e.Blocks0#1: 39
    //DEBUG: s.Depth#4: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/29 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Result0#3/31 } )/44 Tile{ HalfReuse: s.Depth4 #43/12 AsIs: (/15 AsIs: e.Assignments0#1/33 AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars0#3/35 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0#1/37 AsIs: )/24 HalfReuse: </27 } Tile{ HalfReuse: & Map@11/28 AsIs: s.Depth#4/43 } (/45 e.ScopeVars0#3/35/46 )/48 Tile{ AsIs: e.Blocks0#1/39 } >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z2]);
    refalrts::reinit_svar( context[12], context[43] );
    refalrts::reinit_open_call(context[27]);
    refalrts::reinit_name(context[28], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[45], context[48] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[44] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[45], context[48] );
    res = refalrts::splice_evar( res, context[28], context[43] );
    res = refalrts::splice_evar( res, context[12], context[27] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@2/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 (/15 e.Assignments0#1/13 )/16 (/19 e.ScopeVars0#3/17 )/20 (/23 e.Pattern0#1/21 )/24 (/27 e.Blocks0#1/25 )/28 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.ScopeVars0#3 as range 17
  // closed e.Pattern0#1 as range 21
  // closed e.Blocks0#1 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.ScopeVars0#3: 17
  //DEBUG: e.Pattern0#1: 21
  //DEBUG: e.Blocks0#1: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/29 Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Assignments0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars0#3/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0#1/21 AsIs: )/24 AsIs: (/27 AsIs: e.Blocks0#1/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z2("EnumerateVars-Assignments$2=3@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@6/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@6/4 (/7 e.MainName#3/17 )/8 (/11 e.Scanned0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 e.StepScanned#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.MainName#3 as range 17
    // closed e.Scanned0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned#2 as range 23
    //DEBUG: e.MainName#3: 17
    //DEBUG: e.Scanned0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25
    //DEBUG: e.StepScanned#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: (/7 AsIs: e.MainName#3/17 AsIs: )/8 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0#1/19 } Tile{ AsIs: e.StepScanned#2/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@6/4 (/7 e.MainName#3/5 )/8 (/11 e.Scanned0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.Scanned0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.Scanned0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & NameNestedAssigns\1@0/17 (/18 Tile{ AsIs: e.MainName#3/5 } )/19 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_NameNestedAssigns_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z6("DoMapAccum$1=1@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@7/4 (/7 e.MainName#3/17 )/8 (/11 e.Scanned0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 e.StepScanned#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.MainName#3 as range 17
    // closed e.Scanned0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned#2 as range 23
    //DEBUG: e.MainName#3: 17
    //DEBUG: e.Scanned0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25
    //DEBUG: e.StepScanned#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.MainName#3/17 AsIs: )/8 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0#1/19 } Tile{ AsIs: e.StepScanned#2/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@7/4 (/7 e.MainName#3/5 )/8 (/11 e.Scanned0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.Scanned0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.Scanned0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 HalfReuse: (/4 HalfReuse: & NameNestedResultRec-Term@0/7 AsIs: e.MainName#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Scanned0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_NameNestedResultRecm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z7("DoMapAccum$1=1@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@8/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@8/4 (/7 e.MainName#3/17 )/8 (/11 e.Scanned0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 e.StepScanned#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.MainName#3 as range 17
    // closed e.Scanned0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned#2 as range 23
    //DEBUG: e.MainName#3: 17
    //DEBUG: e.Scanned0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25
    //DEBUG: e.StepScanned#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: (/7 AsIs: e.MainName#3/17 AsIs: )/8 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0#1/19 } Tile{ AsIs: e.StepScanned#2/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@8/4 (/7 e.MainName#3/5 )/8 (/11 e.Scanned0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.MainName#3 as range 5
  // closed e.Scanned0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.MainName#3: 5
  //DEBUG: e.Scanned0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & NameNestedBlocks=1\1@0/17 (/18 Tile{ AsIs: e.MainName#3/5 } )/19 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_NameNestedBlocks_A1L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z8("DoMapAccum$1=1@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z8);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@9/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@9/4 (/7 e.MainName#1/17 )/8 (/11 e.Scanned0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 e.StepScanned#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.MainName#1 as range 17
    // closed e.Scanned0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned#2 as range 23
    //DEBUG: e.MainName#1: 17
    //DEBUG: e.Scanned0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25
    //DEBUG: e.StepScanned#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.MainName#1/17 AsIs: )/8 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0#1/19 } Tile{ AsIs: e.StepScanned#2/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@9/4 (/7 e.MainName#1/5 )/8 (/11 e.Scanned0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.MainName#1 as range 5
  // closed e.Scanned0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.MainName#1: 5
  //DEBUG: e.Scanned0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & NameNestedBody$2\1@0/17 (/18 Tile{ AsIs: e.MainName#1/5 } )/19 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_NameNestedBody_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z9("DoMapAccum$1=1@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z9);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@1/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & RemoveAssigns-WindBlocks\1@0/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveAssignsm_WindBlocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_MapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MapAccum@2/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & MapAccum@2/4 t.Acc#1/5 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Tail#1 as range 7
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@19/4 AsIs: t.Acc#1/5 } (/9 )/10 Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@2/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & MapAccum@0/8 (/9 Tile{ HalfReuse: & UpdateBorrowedVars@0/0 HalfReuse: )/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_MapAccum_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[9], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z2("MapAccum@2", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z2);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & ExtractNested-Sentence=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Sentence=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & ExtractNested-Sentence=1@1/4 (/7 e.6#0/22 )/8 (/11 e.2#0/24 )/12 s.MarkupContext0#1/13 (/16 e.4#0/26 )/17 (/20 e.3#0/28 )/21 (/34 e.BorrowedVars#2/32 )/35 e.LocalVars#2/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    // closed e.6#0 as range 22
    // closed e.2#0 as range 24
    // closed e.4#0 as range 26
    // closed e.3#0 as range 28
    // closed e.BorrowedVars#2 as range 32
    // closed e.LocalVars#2 as range 30
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.6#0: 22
    //DEBUG: e.2#0: 24
    //DEBUG: e.4#0: 26
    //DEBUG: e.3#0: 28
    //DEBUG: e.BorrowedVars#2: 32
    //DEBUG: e.LocalVars#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=2@1/4 AsIs: (/7 AsIs: e.6#0/22 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/24 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 AsIs: e.4#0/26 AsIs: )/17 HalfReuse: </20 } & ExtractNested-Conditions@1/36 Tile{ HalfReuse: s.MarkupContext01 #13/21 AsIs: (/34 AsIs: e.BorrowedVars#2/32 AsIs: )/35 } (/37 Tile{ AsIs: e.LocalVars#2/30 } )/38 Tile{ AsIs: e.3#0/28 } >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_ExtractNestedm_Conditions_Z1]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A2Z1]);
    refalrts::reinit_open_call(context[20]);
    refalrts::reinit_svar( context[21], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[35] );
    res = refalrts::splice_elem( res, context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Sentence=1@1/4 (/7 e.6#0/5 )/8 (/11 e.2#0/9 )/12 s.MarkupContext0#1/13 (/16 e.4#0/14 )/17 (/20 e.3#0/18 )/21 e.dyn#0/2 >/1
  // closed e.6#0 as range 5
  // closed e.2#0 as range 9
  // closed e.4#0 as range 14
  // closed e.3#0 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.6#0: 5
  //DEBUG: e.2#0: 9
  //DEBUG: e.4#0: 14
  //DEBUG: e.3#0: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=1@0/4 AsIs: (/7 AsIs: e.6#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } )/22 (/23 Tile{ AsIs: e.4#0/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.3#0/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[23], context[17] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A1Z1("ExtractNested-Sentence=1@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum$1=1@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@10/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@10/4 s.MarkupContext#1/5 (/8 e.Scanned0#1/14 )/9 (/12 e.Tail0#1/16 )/13 t.Acc#2/20 e.StepScanned#2/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Scanned0#1 as range 14
    // closed e.Tail0#1 as range 16
    context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
    if( ! context[21] )
      continue;
    // closed e.StepScanned#2 as range 18
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Scanned0#1: 14
    //DEBUG: e.Tail0#1: 16
    //DEBUG: t.Acc#2: 20
    //DEBUG: e.StepScanned#2: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@10/4 AsIs: s.MarkupContext#1/5 } Tile{ AsIs: t.Acc#2/20 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Scanned0#1/14 } Tile{ AsIs: e.StepScanned#2/18 } Tile{ AsIs: )/13 } Tile{ AsIs: e.Tail0#1/16 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@10/4 s.MarkupContext#1/5 (/8 e.Scanned0#1/6 )/9 (/12 e.Tail0#1/10 )/13 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 6
  // closed e.Tail0#1 as range 10
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.Scanned0#1: 6
  //DEBUG: e.Tail0#1: 10
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } (/14 & ExtractNested-Sentence@0/15 Tile{ AsIs: s.MarkupContext#1/5 } )/16 Tile{ AsIs: (/8 AsIs: e.Scanned0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Tail0#1/10 AsIs: )/13 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z10("DoMapAccum$1=1@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoMapAccum$1=1@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@11/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum$1=1@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/18 )/9 (/12 e.Scanned0#1/20 )/13 (/16 e.Tail0#1/22 )/17 t.Acc#2/26 e.StepScanned#2/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.ScopeVars#1 as range 18
    // closed e.Scanned0#1 as range 20
    // closed e.Tail0#1 as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    // closed e.StepScanned#2 as range 24
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 18
    //DEBUG: e.Scanned0#1: 20
    //DEBUG: e.Tail0#1: 22
    //DEBUG: t.Acc#2: 26
    //DEBUG: e.StepScanned#2: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/18 AsIs: )/9 } Tile{ AsIs: t.Acc#2/26 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Scanned0#1/20 } Tile{ AsIs: e.StepScanned#2/24 } Tile{ AsIs: )/17 } Tile{ AsIs: e.Tail0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@11/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.Scanned0#1/10 )/13 (/16 e.Tail0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.Scanned0#1 as range 10
  // closed e.Tail0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.Scanned0#1: 10
  //DEBUG: e.Tail0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } (/18 & ExtractNested-Sentence@0/19 Tile{ HalfReuse: s.MarkupContext1 #5/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Scanned0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0#1/14 AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[18], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z11("DoMapAccum$1=1@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z11);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoMapAccum$1=1@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@12/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & DoMapAccum$1=1@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/22 )/9 (/12 e.LocalVars#3/24 )/13 (/16 e.Scanned0#1/26 )/17 (/20 e.Tail0#1/28 )/21 t.Acc#2/32 e.StepScanned#2/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.ScopeVars#1 as range 22
    // closed e.LocalVars#3 as range 24
    // closed e.Scanned0#1 as range 26
    // closed e.Tail0#1 as range 28
    context[33] = refalrts::tvar_left( context[32], context[30], context[31] );
    if( ! context[33] )
      continue;
    // closed e.StepScanned#2 as range 30
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 22
    //DEBUG: e.LocalVars#3: 24
    //DEBUG: e.Scanned0#1: 26
    //DEBUG: e.Tail0#1: 28
    //DEBUG: t.Acc#2: 32
    //DEBUG: e.StepScanned#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/22 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#3/24 AsIs: )/13 } Tile{ AsIs: t.Acc#2/32 } Tile{ AsIs: (/20 } Tile{ AsIs: e.Scanned0#1/26 } Tile{ AsIs: e.StepScanned#2/30 } Tile{ AsIs: )/21 } Tile{ AsIs: e.Tail0#1/28 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@12/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#3/10 )/13 (/16 e.Scanned0#1/14 )/17 (/20 e.Tail0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.LocalVars#3 as range 10
  // closed e.Scanned0#1 as range 14
  // closed e.Tail0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.LocalVars#3: 10
  //DEBUG: e.Scanned0#1: 14
  //DEBUG: e.Tail0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & DoMapAccum$1=1@0/23 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/6 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.LocalVars#3/10 } )/24 Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Scanned0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[0], context[13] );
  refalrts::link_brackets( context[12], context[24] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z12("DoMapAccum$1=1@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z12);


static refalrts::FnResult func_gen_DoMapAccum_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & DoMapAccum@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@18/4 (/7 e.new#1/5 )/8 t.new#2/9 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@18/4 (/7 e.ScopeVars#1/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 t.Next#1/21 e.Tail#1/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.ScopeVars#1 as range 15
    // closed e.Scanned#1 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.ScopeVars#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: t.Next#1: 21
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@18/4 AsIs: (/7 AsIs: e.ScopeVars#1/15 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned#1/17 AsIs: )/14 } (/23 Tile{ AsIs: e.Tail#1/19 } )/24 </25 & UpdateBorrowedVars/26 e.ScopeVars#1/15/27 Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/21 } >/29 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_UpdateBorrowedVars]);
    refalrts::copy_evar(vm, context[27], context[28], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@18/4 (/7 e.ScopeVars#1/15 )/8 t.Acc#1/9 (/13 e.Scanned#1/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.ScopeVars#1: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@18/4 (/7 e.ScopeVars#1/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@18/4 (/7 e.ScopeVars#1/5 )/8 t.acc#0/9 (/13 e.scanned#0/11 )/14 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.scanned#0 as range 11
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 9
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.scanned#0: 11
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & DoMapAccum@0/0 HalfReuse: (/4 HalfReuse: & UpdateBorrowedVars@0/7 AsIs: e.ScopeVars#1/5 AsIs: )/8 AsIs: t.acc#0/9 AsIs: (/13 AsIs: e.scanned#0/11 AsIs: )/14 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z18("DoMapAccum@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z18);


static refalrts::FnResult func_gen_Reduce_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Reduce$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce$1=1@2/4 (/7 e.ScopeVars#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.ScopeVars#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    //DEBUG: e.ScopeVars#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 AsIs: (/7 AsIs: e.ScopeVars#1/13 AsIs: )/8 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@2/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 AsIs: (/7 } & CheckBorrowed@0/13 (/14 Tile{ AsIs: e.ScopeVars#1/5 } )/15 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z2("Reduce$1=1@2", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z2);


static refalrts::FnResult func_gen_MapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & MapAccum@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MapAccum@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & MapAccum@3/4 (/7 e.ScopeVars#1/15 )/8 (/11 e.LocalVars#1/17 )/12 t.Acc#1/13 e.Tail#1/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.ScopeVars#1 as range 15
    // closed e.LocalVars#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.ScopeVars#1: 15
    //DEBUG: e.LocalVars#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@20/4 AsIs: (/7 AsIs: e.ScopeVars#1/15 AsIs: )/8 AsIs: (/11 AsIs: e.LocalVars#1/17 AsIs: )/12 AsIs: t.Acc#1/13 } (/21 )/22 Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@3/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.LocalVars#1/9 )/12 t.accum#0/13 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.LocalVars#1 as range 9
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 13
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.LocalVars#1: 9
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MapAccum@0/4 AsIs: (/7 } Tile{ HalfReuse: & UpdateBorrowedVars@0/11 } Tile{ AsIs: e.ScopeVars#1/5 } Tile{ AsIs: e.LocalVars#1/9 } Tile{ AsIs: )/12 AsIs: t.accum#0/13 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_MapAccum_Z0]);
  refalrts::reinit_name(context[11], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z3("MapAccum@3", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z3);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & ExtractNested-Sentence=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Sentence=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & ExtractNested-Sentence=1@2/4 (/7 e.6#0/30 )/8 (/11 e.2#0/32 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/34 )/17 (/20 e.LocalVars#1/36 )/21 (/24 e.4#0/38 )/25 (/28 e.3#0/40 )/29 (/46 e.BorrowedVars#2/44 )/47 e.LocalVars#2/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    // closed e.6#0 as range 30
    // closed e.2#0 as range 32
    // closed e.ScopeVars0#1 as range 34
    // closed e.LocalVars#1 as range 36
    // closed e.4#0 as range 38
    // closed e.3#0 as range 40
    // closed e.BorrowedVars#2 as range 44
    // closed e.LocalVars#2 as range 42
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.6#0: 30
    //DEBUG: e.2#0: 32
    //DEBUG: e.ScopeVars0#1: 34
    //DEBUG: e.LocalVars#1: 36
    //DEBUG: e.4#0: 38
    //DEBUG: e.3#0: 40
    //DEBUG: e.BorrowedVars#2: 44
    //DEBUG: e.LocalVars#2: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=2@2/4 AsIs: (/7 AsIs: e.6#0/30 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/32 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 AsIs: e.ScopeVars0#1/34 AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#1/36 AsIs: )/21 AsIs: (/24 AsIs: e.4#0/38 AsIs: )/25 HalfReuse: </28 } & ExtractNested-Conditions@2/48 Tile{ HalfReuse: s.MarkupContext01 #13/29 AsIs: (/46 AsIs: e.BorrowedVars#2/44 AsIs: )/47 } (/49 e.ScopeVars0#1/34/50 )/52 (/53 e.LocalVars#1/36/54 )/56 (/57 Tile{ AsIs: e.LocalVars#2/42 } )/58 Tile{ AsIs: e.3#0/40 } >/59 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_gen_ExtractNestedm_Conditions_Z2]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[34], context[35]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A2Z2]);
    refalrts::reinit_open_call(context[28]);
    refalrts::reinit_svar( context[29], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[57], context[58] );
    refalrts::link_brackets( context[53], context[56] );
    refalrts::link_brackets( context[49], context[52] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[59] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[49], context[57] );
    res = refalrts::splice_evar( res, context[29], context[47] );
    res = refalrts::splice_elem( res, context[48] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Sentence=1@2/4 (/7 e.6#0/5 )/8 (/11 e.2#0/9 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/14 )/17 (/20 e.LocalVars#1/18 )/21 (/24 e.4#0/22 )/25 (/28 e.3#0/26 )/29 e.dyn#0/2 >/1
  // closed e.6#0 as range 5
  // closed e.2#0 as range 9
  // closed e.ScopeVars0#1 as range 14
  // closed e.LocalVars#1 as range 18
  // closed e.4#0 as range 22
  // closed e.3#0 as range 26
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.6#0: 5
  //DEBUG: e.2#0: 9
  //DEBUG: e.ScopeVars0#1: 14
  //DEBUG: e.LocalVars#1: 18
  //DEBUG: e.4#0: 22
  //DEBUG: e.3#0: 26
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/17 (/20 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=1@0/4 AsIs: (/7 AsIs: e.6#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } Tile{ AsIs: e.ScopeVars0#1/14 } Tile{ AsIs: e.LocalVars#1/18 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.4#0/22 AsIs: )/25 AsIs: (/28 AsIs: e.3#0/26 AsIs: )/29 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[16], context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, context[16], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A1Z2("ExtractNested-Sentence=1@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoMapAccum$1=1@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@13/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & DoMapAccum$1=1@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/22 )/9 (/12 e.LocalVars#1/24 )/13 (/16 e.Scanned0#1/26 )/17 (/20 e.Tail0#1/28 )/21 t.Acc#2/32 e.StepScanned#2/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.ScopeVars#1 as range 22
    // closed e.LocalVars#1 as range 24
    // closed e.Scanned0#1 as range 26
    // closed e.Tail0#1 as range 28
    context[33] = refalrts::tvar_left( context[32], context[30], context[31] );
    if( ! context[33] )
      continue;
    // closed e.StepScanned#2 as range 30
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.ScopeVars#1: 22
    //DEBUG: e.LocalVars#1: 24
    //DEBUG: e.Scanned0#1: 26
    //DEBUG: e.Tail0#1: 28
    //DEBUG: t.Acc#2: 32
    //DEBUG: e.StepScanned#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@13/4 AsIs: s.MarkupContext#1/5 AsIs: (/8 AsIs: e.ScopeVars#1/22 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#1/24 AsIs: )/13 } Tile{ AsIs: t.Acc#2/32 } Tile{ AsIs: (/20 } Tile{ AsIs: e.Scanned0#1/26 } Tile{ AsIs: e.StepScanned#2/30 } Tile{ AsIs: )/21 } Tile{ AsIs: e.Tail0#1/28 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@13/4 s.MarkupContext#1/5 (/8 e.ScopeVars#1/6 )/9 (/12 e.LocalVars#1/10 )/13 (/16 e.Scanned0#1/14 )/17 (/20 e.Tail0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 6
  // closed e.LocalVars#1 as range 10
  // closed e.Scanned0#1 as range 14
  // closed e.Tail0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.ScopeVars#1: 6
  //DEBUG: e.LocalVars#1: 10
  //DEBUG: e.Scanned0#1: 14
  //DEBUG: e.Tail0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } Tile{ AsIs: (/8 } Tile{ HalfReuse: & ExtractNested-Sentence@0/12 } Tile{ AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.ScopeVars#1/6 } Tile{ AsIs: e.LocalVars#1/10 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Scanned0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_name(context[12], functions[efunc_gen_ExtractNestedm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z13("DoMapAccum$1=1@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z13);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@14/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@14/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Pass-CleanupRedudandExterns=3\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z14("DoMapAccum$1=1@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z14);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@15/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@15/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FilterDeclarations@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FilterDeclarations_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z15("DoMapAccum$1=1@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z15);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@16/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Pass-CleanupRedudandExterns=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Passm_CleanupRedudandExterns_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z16("DoMapAccum$1=1@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z16);


static refalrts::FnResult func_gen_Map_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Map@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@20/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@20/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@20/4 (/7 e.ScopeVars#2/15 )/8 (/13 (/23 e.1#0/21 )/24 e.4#0/19 (/31 e.5#0/29 )/32 (/27 e.3#0/25 )/28 )/14 e.Tail#1/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.ScopeVars#2 as range 15
      // closed e.1#0 as range 21
      // closed e.4#0 as range 19
      // closed e.5#0 as range 29
      // closed e.3#0 as range 25
      // closed e.Tail#1 as range 17
      //DEBUG: e.ScopeVars#2: 15
      //DEBUG: e.1#0: 21
      //DEBUG: e.4#0: 19
      //DEBUG: e.5#0: 29
      //DEBUG: e.3#0: 25
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </33 & EnumerateVars-Body$1\1=1@1/34 (/35 Tile{ AsIs: e.3#0/25 } )/36 Tile{ AsIs: (/31 AsIs: e.5#0/29 AsIs: )/32 AsIs: (/27 } Tile{ AsIs: e.4#0/19 } Tile{ AsIs: )/28 } Tile{ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 AsIs: (/13 HalfReuse: )/23 AsIs: e.1#0/21 HalfReuse: >/24 } >/37 </38 & Map@20/39 (/40 e.ScopeVars#2/15/41 Tile{ AsIs: )/14 AsIs: e.Tail#1/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1Z1]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z20]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::copy_evar(vm, context[41], context[42], context[15], context[16]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_close_call(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[40], context[14] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[23] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[37], context[40] );
      res = refalrts::splice_evar( res, context[0], context[24] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[31], context[27] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@20/4 (/7 e.ScopeVars#2/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars#2 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.ScopeVars#2: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & EnumerateVars-Body$1\1*1/20 1/21 (/22 e.ScopeVars#2/15/23 )/25 Tile{ AsIs: t.Next#1/13 } >/26 Tile{ AsIs: </0 AsIs: & Map@20/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Body_S1L1D1]);
    refalrts::alloc_number(vm, context[21], 1UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@20/4 (/7 e.ScopeVars#2/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#2 as range 9
    //DEBUG: e.ScopeVars#2: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@20/4 (/7 e.ScopeVars#2/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@20/4 (/7 e.ScopeVars#2/5 )/8 e.items#0/2 >/1
  // closed e.ScopeVars#2 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.ScopeVars#2: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 Tile{ HalfReuse: & EnumerateVars-Body$1\1@0/0 HalfReuse: 1/4 AsIs: (/7 AsIs: e.ScopeVars#2/5 AsIs: )/8 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Body_S1L1Z0]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z20("Map@20", COOKIE1_, COOKIE2_, func_gen_Map_Z20);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@17/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & EnumerateVars-Expr\1@0/16 Tile{ HalfReuse: 1/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 1UL);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z17("DoMapAccum$1=1@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z17);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & EnumerateVars-Assignments$2=3@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@3/4 (/7 e.Result0#3/25 )/8 (/11 e.Assignments0#1/27 )/12 (/15 e.ScopeVars0#3/29 )/16 (/19 e.Pattern0#1/31 )/20 (/23 e.Blocks0#1/33 )/24 s.Depth#4/37 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.Result0#3 as range 25
    // closed e.Assignments0#1 as range 27
    // closed e.ScopeVars0#3 as range 29
    // closed e.Pattern0#1 as range 31
    // closed e.Blocks0#1 as range 33
    if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[35], context[36] ) )
      continue;
    //DEBUG: e.Result0#3: 25
    //DEBUG: e.Assignments0#1: 27
    //DEBUG: e.ScopeVars0#3: 29
    //DEBUG: e.Pattern0#1: 31
    //DEBUG: e.Blocks0#1: 33
    //DEBUG: s.Depth#4: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@3/4 AsIs: (/7 } Tile{ AsIs: e.Result0#3/25 } )/38 Tile{ HalfReuse: s.Depth4 #37/8 AsIs: (/11 AsIs: e.Assignments0#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/29 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/31 AsIs: )/20 HalfReuse: </23 } Tile{ HalfReuse: & Map@11/24 AsIs: s.Depth#4/37 } (/39 e.ScopeVars0#3/29/40 )/42 Tile{ AsIs: e.Blocks0#1/33 } >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z3]);
    refalrts::reinit_svar( context[8], context[37] );
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_name(context[24], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[24], context[37] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@3/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 (/23 e.Blocks0#1/21 )/24 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.Blocks0#1 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.Blocks0#1: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & EnumerateVars-Assignments$2=3@0/26 (/27 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.Blocks0#1/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[27], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z3("EnumerateVars-Assignments$2=3@3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & EnumerateVars-Assignments$2=3@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@4/4 (/7 e.Result0#3/25 )/8 (/11 e.Assignments0#1/27 )/12 (/15 e.ScopeVars0#3/29 )/16 (/19 e.Pattern0#1/31 )/20 (/23 e.Blocks0#1/33 )/24 s.Depth#4/37 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.Result0#3 as range 25
    // closed e.Assignments0#1 as range 27
    // closed e.ScopeVars0#3 as range 29
    // closed e.Pattern0#1 as range 31
    // closed e.Blocks0#1 as range 33
    if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[35], context[36] ) )
      continue;
    //DEBUG: e.Result0#3: 25
    //DEBUG: e.Assignments0#1: 27
    //DEBUG: e.ScopeVars0#3: 29
    //DEBUG: e.Pattern0#1: 31
    //DEBUG: e.Blocks0#1: 33
    //DEBUG: s.Depth#4: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@4/4 AsIs: (/7 } Tile{ AsIs: e.Result0#3/25 } )/38 Tile{ HalfReuse: s.Depth4 #37/8 AsIs: (/11 AsIs: e.Assignments0#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/29 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/31 AsIs: )/20 HalfReuse: </23 } Tile{ HalfReuse: & Map@11/24 AsIs: s.Depth#4/37 } (/39 e.ScopeVars0#3/29/40 )/42 Tile{ AsIs: e.Blocks0#1/33 } >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z4]);
    refalrts::reinit_svar( context[8], context[37] );
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_name(context[24], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[24], context[37] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@4/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 (/23 e.Blocks0#1/21 )/24 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.Blocks0#1 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.Blocks0#1: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & EnumerateVars-Assignments$2=3@0/26 (/27 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: (/23 AsIs: e.Blocks0#1/21 AsIs: )/24 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[27], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z4("EnumerateVars-Assignments$2=3@4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & EnumerateVars-Assignments$2=2@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@7/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 s.new#5/18 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@7/4 s.ChainType0#1/5 (/8 e.Assignments0#1/19 )/9 (/12 e.Pattern0#1/21 )/13 (/16 e.Blocks0#1/23 )/17 s.Depth0#1/18 (/29 e.ScopeVars#3/27 )/30 e.Result#3/25 >/1
    context[19] = context[6];
    context[20] = context[7];
    context[21] = context[10];
    context[22] = context[11];
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.Assignments0#1 as range 19
    // closed e.Pattern0#1 as range 21
    // closed e.Blocks0#1 as range 23
    // closed e.ScopeVars#3 as range 27
    // closed e.Result#3 as range 25
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: s.Depth0#1: 18
    //DEBUG: e.Assignments0#1: 19
    //DEBUG: e.Pattern0#1: 21
    //DEBUG: e.Blocks0#1: 23
    //DEBUG: e.ScopeVars#3: 27
    //DEBUG: e.Result#3: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@7/4 AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result#3/25 } )/31 (/32 Tile{ AsIs: e.Assignments0#1/19 } Tile{ AsIs: )/30 } (/33 Tile{ AsIs: e.ScopeVars#3/27 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/21 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/23 AsIs: )/17 } </34 & Add/35 1/36 Tile{ AsIs: s.Depth0#1/18 HalfReuse: >/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z7]);
    refalrts::reinit_close_call(context[29]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[33], context[9] );
    refalrts::link_brackets( context[32], context[30] );
    refalrts::link_brackets( context[8], context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[29] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[9], context[17] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@7/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 s.Depth0#1/18 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: s.Depth0#1: 18
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & EnumerateVars-Assignments$2=2@0/20 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 AsIs: s.Depth0#1/18 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z7("EnumerateVars-Assignments$2=2@7", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z7);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  // </0 & EnumerateVars-Assignments$2=3@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@5/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 (/36 e.new#9/34 )/37 (/40 e.new#10/38 )/41 e.new#11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 34
  // closed e.new#10 as range 38
  // closed e.new#11 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@5/4 (/7 e.RAssignments0#1/42 )/8 s.ChainType0#1/9 (/12 e.Result0#3/44 )/13 (/16 e.Blocks#5/46 )/17 (/20 e.Pattern#6/48 )/21 (/24 e.Result1#3/50 )/25 (/28 e.Assignments0#1/52 )/29 (/32 e.ScopeVars0#3/54 )/33 (/36 e.Pattern0#1/56 )/37 (/40 e.Blocks0#1/58 )/41 s.Depth#4/62 >/1
    context[42] = context[5];
    context[43] = context[6];
    context[44] = context[10];
    context[45] = context[11];
    context[46] = context[14];
    context[47] = context[15];
    context[48] = context[18];
    context[49] = context[19];
    context[50] = context[22];
    context[51] = context[23];
    context[52] = context[26];
    context[53] = context[27];
    context[54] = context[30];
    context[55] = context[31];
    context[56] = context[34];
    context[57] = context[35];
    context[58] = context[38];
    context[59] = context[39];
    context[60] = context[2];
    context[61] = context[3];
    // closed e.RAssignments0#1 as range 42
    // closed e.Result0#3 as range 44
    // closed e.Blocks#5 as range 46
    // closed e.Pattern#6 as range 48
    // closed e.Result1#3 as range 50
    // closed e.Assignments0#1 as range 52
    // closed e.ScopeVars0#3 as range 54
    // closed e.Pattern0#1 as range 56
    // closed e.Blocks0#1 as range 58
    if( ! refalrts::svar_left( context[62], context[60], context[61] ) )
      continue;
    if( ! refalrts::empty_seq( context[60], context[61] ) )
      continue;
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: e.RAssignments0#1: 42
    //DEBUG: e.Result0#3: 44
    //DEBUG: e.Blocks#5: 46
    //DEBUG: e.Pattern#6: 48
    //DEBUG: e.Result1#3: 50
    //DEBUG: e.Assignments0#1: 52
    //DEBUG: e.ScopeVars0#3: 54
    //DEBUG: e.Pattern0#1: 56
    //DEBUG: e.Blocks0#1: 58
    //DEBUG: s.Depth#4: 62

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@5/4 AsIs: (/7 AsIs: e.RAssignments0#1/42 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/44 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/46 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/48 AsIs: )/21 AsIs: (/24 AsIs: e.Result1#3/50 AsIs: )/25 HalfReuse: s.Depth4 #62/28 } (/63 Tile{ AsIs: e.Assignments0#1/52 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.ScopeVars0#3/54 AsIs: )/33 AsIs: (/36 AsIs: e.Pattern0#1/56 AsIs: )/37 HalfReuse: </40 } Tile{ HalfReuse: & Map@11/41 AsIs: s.Depth#4/62 } (/64 e.ScopeVars0#3/54/65 )/67 Tile{ AsIs: e.Blocks0#1/58 } >/68 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::copy_evar(vm, context[65], context[66], context[54], context[55]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_close_call(vm, context[68]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z5]);
    refalrts::reinit_svar( context[28], context[62] );
    refalrts::reinit_open_call(context[40]);
    refalrts::reinit_name(context[41], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[68] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[64], context[67] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[63], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[68] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[64], context[67] );
    res = refalrts::splice_evar( res, context[41], context[62] );
    res = refalrts::splice_evar( res, context[29], context[40] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[63] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@5/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Result1#3/22 )/25 (/28 e.Assignments0#1/26 )/29 (/32 e.ScopeVars0#3/30 )/33 (/36 e.Pattern0#1/34 )/37 (/40 e.Blocks0#1/38 )/41 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Assignments0#1 as range 26
  // closed e.ScopeVars0#3 as range 30
  // closed e.Pattern0#1 as range 34
  // closed e.Blocks0#1 as range 38
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Assignments0#1: 26
  //DEBUG: e.ScopeVars0#3: 30
  //DEBUG: e.Pattern0#1: 34
  //DEBUG: e.Blocks0#1: 38
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/42 )/43 )/44 Tile{ HalfReuse: # Assign/21 AsIs: (/24 AsIs: e.Result1#3/22 AsIs: )/25 AsIs: (/28 AsIs: e.Assignments0#1/26 AsIs: )/29 AsIs: (/32 AsIs: e.ScopeVars0#3/30 AsIs: )/33 AsIs: (/36 AsIs: e.Pattern0#1/34 AsIs: )/37 AsIs: (/40 AsIs: e.Blocks0#1/38 AsIs: )/41 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[21], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[44] );
  refalrts::link_brackets( context[8], context[43] );
  refalrts::link_brackets( context[20], context[42] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[42], context[44] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z5("EnumerateVars-Assignments$2=3@5", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  // </0 & EnumerateVars-Assignments$2=3@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@6/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 (/36 e.new#9/34 )/37 (/40 e.new#10/38 )/41 e.new#11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 34
  // closed e.new#10 as range 38
  // closed e.new#11 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@6/4 (/7 e.RAssignments0#1/42 )/8 s.ChainType0#1/9 (/12 e.Result0#3/44 )/13 (/16 e.Blocks#5/46 )/17 (/20 e.Pattern#6/48 )/21 (/24 e.Result1#3/50 )/25 (/28 e.Assignments0#1/52 )/29 (/32 e.ScopeVars0#3/54 )/33 (/36 e.Pattern0#1/56 )/37 (/40 e.Blocks0#1/58 )/41 s.Depth#4/62 >/1
    context[42] = context[5];
    context[43] = context[6];
    context[44] = context[10];
    context[45] = context[11];
    context[46] = context[14];
    context[47] = context[15];
    context[48] = context[18];
    context[49] = context[19];
    context[50] = context[22];
    context[51] = context[23];
    context[52] = context[26];
    context[53] = context[27];
    context[54] = context[30];
    context[55] = context[31];
    context[56] = context[34];
    context[57] = context[35];
    context[58] = context[38];
    context[59] = context[39];
    context[60] = context[2];
    context[61] = context[3];
    // closed e.RAssignments0#1 as range 42
    // closed e.Result0#3 as range 44
    // closed e.Blocks#5 as range 46
    // closed e.Pattern#6 as range 48
    // closed e.Result1#3 as range 50
    // closed e.Assignments0#1 as range 52
    // closed e.ScopeVars0#3 as range 54
    // closed e.Pattern0#1 as range 56
    // closed e.Blocks0#1 as range 58
    if( ! refalrts::svar_left( context[62], context[60], context[61] ) )
      continue;
    if( ! refalrts::empty_seq( context[60], context[61] ) )
      continue;
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: e.RAssignments0#1: 42
    //DEBUG: e.Result0#3: 44
    //DEBUG: e.Blocks#5: 46
    //DEBUG: e.Pattern#6: 48
    //DEBUG: e.Result1#3: 50
    //DEBUG: e.Assignments0#1: 52
    //DEBUG: e.ScopeVars0#3: 54
    //DEBUG: e.Pattern0#1: 56
    //DEBUG: e.Blocks0#1: 58
    //DEBUG: s.Depth#4: 62

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@6/4 AsIs: (/7 AsIs: e.RAssignments0#1/42 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/44 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/46 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/48 AsIs: )/21 AsIs: (/24 AsIs: e.Result1#3/50 AsIs: )/25 HalfReuse: s.Depth4 #62/28 } (/63 Tile{ AsIs: e.Assignments0#1/52 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.ScopeVars0#3/54 AsIs: )/33 AsIs: (/36 AsIs: e.Pattern0#1/56 AsIs: )/37 HalfReuse: </40 } Tile{ HalfReuse: & Map@11/41 AsIs: s.Depth#4/62 } (/64 e.ScopeVars0#3/54/65 )/67 Tile{ AsIs: e.Blocks0#1/58 } >/68 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::copy_evar(vm, context[65], context[66], context[54], context[55]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_close_call(vm, context[68]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z6]);
    refalrts::reinit_svar( context[28], context[62] );
    refalrts::reinit_open_call(context[40]);
    refalrts::reinit_name(context[41], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[68] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[64], context[67] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[63], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[68] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[64], context[67] );
    res = refalrts::splice_evar( res, context[41], context[62] );
    res = refalrts::splice_evar( res, context[29], context[40] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[63] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@6/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Result1#3/22 )/25 (/28 e.Assignments0#1/26 )/29 (/32 e.ScopeVars0#3/30 )/33 (/36 e.Pattern0#1/34 )/37 (/40 e.Blocks0#1/38 )/41 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Assignments0#1 as range 26
  // closed e.ScopeVars0#3 as range 30
  // closed e.Pattern0#1 as range 34
  // closed e.Blocks0#1 as range 38
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Assignments0#1: 26
  //DEBUG: e.ScopeVars0#3: 30
  //DEBUG: e.Pattern0#1: 34
  //DEBUG: e.Blocks0#1: 38
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/42 )/43 )/44 Tile{ HalfReuse: # Condition/21 AsIs: (/24 AsIs: e.Result1#3/22 AsIs: )/25 AsIs: (/28 AsIs: e.Assignments0#1/26 AsIs: )/29 AsIs: (/32 AsIs: e.ScopeVars0#3/30 AsIs: )/33 AsIs: (/36 AsIs: e.Pattern0#1/34 AsIs: )/37 AsIs: (/40 AsIs: e.Blocks0#1/38 AsIs: )/41 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[21], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[44] );
  refalrts::link_brackets( context[8], context[43] );
  refalrts::link_brackets( context[20], context[42] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[42], context[44] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z6("EnumerateVars-Assignments$2=3@6", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z6);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & EnumerateVars-Assignments$2=2@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@8/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 (/25 e.new#7/23 )/26 (/29 e.new#8/27 )/30 (/33 e.new#9/31 )/34 s.new#10/35 e.new#11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new#7 as range 23
  // closed e.new#8 as range 27
  // closed e.new#9 as range 31
  if( ! refalrts::svar_left( context[35], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#11 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@8/4 (/7 e.RAssignments0#1/36 )/8 s.ChainType1#1/9 (/12 e.Result0#3/38 )/13 (/16 e.Blocks#5/40 )/17 (/20 e.Pattern#6/42 )/21 s.ChainType0#1/22 (/25 e.Assignments0#1/44 )/26 (/29 e.Pattern0#1/46 )/30 (/33 e.Blocks0#1/48 )/34 s.Depth#4/35 (/54 e.ScopeVars#3/52 )/55 e.Result#3/50 >/1
    context[36] = context[5];
    context[37] = context[6];
    context[38] = context[10];
    context[39] = context[11];
    context[40] = context[14];
    context[41] = context[15];
    context[42] = context[18];
    context[43] = context[19];
    context[44] = context[23];
    context[45] = context[24];
    context[46] = context[27];
    context[47] = context[28];
    context[48] = context[31];
    context[49] = context[32];
    context[50] = context[2];
    context[51] = context[3];
    context[52] = 0;
    context[53] = 0;
    context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
    if( ! context[54] )
      continue;
    refalrts::bracket_pointers(context[54], context[55]);
    // closed e.RAssignments0#1 as range 36
    // closed e.Result0#3 as range 38
    // closed e.Blocks#5 as range 40
    // closed e.Pattern#6 as range 42
    // closed e.Assignments0#1 as range 44
    // closed e.Pattern0#1 as range 46
    // closed e.Blocks0#1 as range 48
    // closed e.ScopeVars#3 as range 52
    // closed e.Result#3 as range 50
    //DEBUG: s.ChainType1#1: 9
    //DEBUG: s.ChainType0#1: 22
    //DEBUG: s.Depth#4: 35
    //DEBUG: e.RAssignments0#1: 36
    //DEBUG: e.Result0#3: 38
    //DEBUG: e.Blocks#5: 40
    //DEBUG: e.Pattern#6: 42
    //DEBUG: e.Assignments0#1: 44
    //DEBUG: e.Pattern0#1: 46
    //DEBUG: e.Blocks0#1: 48
    //DEBUG: e.ScopeVars#3: 52
    //DEBUG: e.Result#3: 50

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@8/4 AsIs: (/7 AsIs: e.RAssignments0#1/36 AsIs: )/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/38 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/40 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/42 AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 } Tile{ AsIs: e.Result#3/50 } )/56 (/57 Tile{ AsIs: e.Assignments0#1/44 } Tile{ AsIs: )/55 } (/58 Tile{ AsIs: e.ScopeVars#3/52 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.Pattern0#1/46 AsIs: )/30 AsIs: (/33 AsIs: e.Blocks0#1/48 AsIs: )/34 } </59 & Add/60 1/61 Tile{ AsIs: s.Depth#4/35 HalfReuse: >/54 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_open_call(vm, context[59]);
    refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[61], 1UL);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z8]);
    refalrts::reinit_close_call(context[54]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[59] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[58], context[26] );
    refalrts::link_brackets( context[57], context[55] );
    refalrts::link_brackets( context[25], context[56] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[54] );
    res = refalrts::splice_evar( res, context[59], context[61] );
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@8/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType1#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 s.ChainType0#1/22 (/25 e.Assignments0#1/23 )/26 (/29 e.Pattern0#1/27 )/30 (/33 e.Blocks0#1/31 )/34 s.Depth#4/35 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Assignments0#1 as range 23
  // closed e.Pattern0#1 as range 27
  // closed e.Blocks0#1 as range 31
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType1#1: 9
  //DEBUG: s.ChainType0#1: 22
  //DEBUG: s.Depth#4: 35
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Assignments0#1: 23
  //DEBUG: e.Pattern0#1: 27
  //DEBUG: e.Blocks0#1: 31
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/18 AsIs: )/21 } )/36 )/37 Tile{ AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Assignments0#1/23 AsIs: )/26 AsIs: (/29 AsIs: e.Pattern0#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.Blocks0#1/31 AsIs: )/34 AsIs: s.Depth#4/35 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[7], context[37] );
  refalrts::link_brackets( context[8], context[36] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[36], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z8("EnumerateVars-Assignments$2=2@8", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z8);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & EnumerateVars-Assignments$2=4@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@1/4 (/7 e.RAssignments0#1/26 )/8 (/11 e.Result0#3/28 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/30 )/17 (/20 e.ScopeVars0#3/32 )/21 (/24 e.Pattern0#1/34 )/25 e.Blocks#5/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.RAssignments0#1 as range 26
    // closed e.Result0#3 as range 28
    // closed e.Assignments0#1 as range 30
    // closed e.ScopeVars0#3 as range 32
    // closed e.Pattern0#1 as range 34
    // closed e.Blocks#5 as range 36
    //DEBUG: s.Depth0#4: 13
    //DEBUG: e.RAssignments0#1: 26
    //DEBUG: e.Result0#3: 28
    //DEBUG: e.Assignments0#1: 30
    //DEBUG: e.ScopeVars0#3: 32
    //DEBUG: e.Pattern0#1: 34
    //DEBUG: e.Blocks#5: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@1/4 AsIs: (/7 AsIs: e.RAssignments0#1/26 AsIs: )/8 AsIs: (/11 AsIs: e.Result0#3/28 AsIs: )/12 } (/38 Tile{ AsIs: e.Blocks#5/36 } )/39 Tile{ AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/30 AsIs: )/17 HalfReuse: </20 } & DoMapAccum@5/40 s.Depth0#4/13/41 (/42 Tile{ AsIs: e.ScopeVars0#3/32 } Tile{ AsIs: )/21 AsIs: (/24 } Tile{ AsIs: )/25 } Tile{ AsIs: e.Pattern0#1/34 } >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[41], context[13]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z1]);
    refalrts::reinit_open_call(context[20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[42], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@1/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/14 )/17 (/20 e.ScopeVars0#3/18 )/21 (/24 e.Pattern0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Assignments0#1 as range 14
  // closed e.ScopeVars0#3 as range 18
  // closed e.Pattern0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 13
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.ScopeVars0#3: 18
  //DEBUG: e.Pattern0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/26 Tile{ HalfReuse: # Assign/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.ScopeVars0#3/18 AsIs: )/21 AsIs: (/24 AsIs: e.Pattern0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z1("EnumerateVars-Assignments$2=4@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z1);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & EnumerateVars-Assignments$2=4@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@2/4 (/7 e.RAssignments0#1/26 )/8 (/11 e.Result0#3/28 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/30 )/17 (/20 e.ScopeVars0#3/32 )/21 (/24 e.Pattern0#1/34 )/25 e.Blocks#5/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.RAssignments0#1 as range 26
    // closed e.Result0#3 as range 28
    // closed e.Assignments0#1 as range 30
    // closed e.ScopeVars0#3 as range 32
    // closed e.Pattern0#1 as range 34
    // closed e.Blocks#5 as range 36
    //DEBUG: s.Depth0#4: 13
    //DEBUG: e.RAssignments0#1: 26
    //DEBUG: e.Result0#3: 28
    //DEBUG: e.Assignments0#1: 30
    //DEBUG: e.ScopeVars0#3: 32
    //DEBUG: e.Pattern0#1: 34
    //DEBUG: e.Blocks#5: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/26 AsIs: )/8 AsIs: (/11 AsIs: e.Result0#3/28 AsIs: )/12 } (/38 Tile{ AsIs: e.Blocks#5/36 } )/39 Tile{ AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/30 AsIs: )/17 HalfReuse: </20 } & DoMapAccum@5/40 s.Depth0#4/13/41 (/42 Tile{ AsIs: e.ScopeVars0#3/32 } Tile{ AsIs: )/21 AsIs: (/24 } Tile{ AsIs: )/25 } Tile{ AsIs: e.Pattern0#1/34 } >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[41], context[13]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z2]);
    refalrts::reinit_open_call(context[20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[42], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@2/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/14 )/17 (/20 e.ScopeVars0#3/18 )/21 (/24 e.Pattern0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Assignments0#1 as range 14
  // closed e.ScopeVars0#3 as range 18
  // closed e.Pattern0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 13
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.ScopeVars0#3: 18
  //DEBUG: e.Pattern0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/26 Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.ScopeVars0#3/18 AsIs: )/21 AsIs: (/24 AsIs: e.Pattern0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z2("EnumerateVars-Assignments$2=4@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@19/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@19/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 t.Next#1/15 e.Tail#1/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned#1 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 13
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@19/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail#1/13 } )/18 </19 & UpdateBorrowedVars/20 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_UpdateBorrowedVars]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@19/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@19/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@19/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 (/13 Tile{ HalfReuse: & UpdateBorrowedVars@0/0 HalfReuse: )/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[13], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z19("DoMapAccum@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z19);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & ExtractNested-Conditions@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions@1/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & ExtractNested-Conditions@1/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/14 )/9 (/12 e.LocalVars#2/16 )/13 (/22 # Condition/24 (/27 e.ConditionName#1/25 )/28 (/31 e.Result#1/29 )/32 (/35 e.Pattern#1/33 )/36 )/23 e.Conditions#1/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = refalrts::ident_left( identifiers[ident_Condition], context[20], context[21] );
    if( ! context[24] )
      continue;
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[20], context[21] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_left( context[29], context[30], context[20], context[21] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    context[33] = 0;
    context[34] = 0;
    context[35] = refalrts::brackets_left( context[33], context[34], context[20], context[21] );
    if( ! context[35] )
      continue;
    refalrts::bracket_pointers(context[35], context[36]);
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    // closed e.BorrowedVars#2 as range 14
    // closed e.LocalVars#2 as range 16
    // closed e.ConditionName#1 as range 25
    // closed e.Result#1 as range 29
    // closed e.Pattern#1 as range 33
    // closed e.Conditions#1 as range 18
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.BorrowedVars#2: 14
    //DEBUG: e.LocalVars#2: 16
    //DEBUG: e.ConditionName#1: 25
    //DEBUG: e.Result#1: 29
    //DEBUG: e.Pattern#1: 33
    //DEBUG: e.Conditions#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=1@1/4 } (/37 Tile{ AsIs: e.ConditionName#1/25 } Tile{ AsIs: )/32 AsIs: (/35 AsIs: e.Pattern#1/33 AsIs: )/36 HalfReuse: s.MarkupContext01 #5/23 } (/38 Tile{ AsIs: e.Conditions#1/18 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#2/16 AsIs: )/13 HalfReuse: </22 HalfReuse: & ExtractNested-Result=1/24 HalfReuse: </27 } & DoMapAccum@21/39 Tile{ AsIs: s.MarkupContext0#1/5 AsIs: (/8 } e.LocalVars#2/16/40 Tile{ AsIs: )/28 AsIs: (/31 } (/42 )/43 (/44 Tile{ AsIs: e.BorrowedVars#2/14 } )/45 )/46 (/47 )/48 Tile{ AsIs: e.Result#1/29 } >/49 >/50 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::copy_evar(vm, context[40], context[41], context[16], context[17]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A1Z1]);
    refalrts::reinit_svar( context[23], context[5] );
    refalrts::reinit_open_call(context[22]);
    refalrts::reinit_name(context[24], functions[efunc_gen_ExtractNestedm_Result_A1]);
    refalrts::reinit_open_call(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::link_brackets( context[31], context[46] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[8], context[28] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[38], context[9] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[37], context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[45], context[48] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[5], context[8] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[9], context[27] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[32], context[23] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ExtractNested-Conditions@1/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/14 )/9 (/12 e.LocalVars#2/16 )/13 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.BorrowedVars#2 as range 14
    // closed e.LocalVars#2 as range 16
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.BorrowedVars#2: 14
    //DEBUG: e.LocalVars#2: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext0#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: (/8 AsIs: e.BorrowedVars#2/14 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars#2/16 AsIs: )/13 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[13] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions@1/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/6 )/9 (/12 e.LocalVars#2/10 )/13 e.dyn#3/2 >/1
  // closed e.BorrowedVars#2 as range 6
  // closed e.LocalVars#2 as range 10
  // closed e.dyn#3 as range 2
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.BorrowedVars#2: 6
  //DEBUG: e.LocalVars#2: 10
  //DEBUG: e.dyn#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.BorrowedVars#2/6 AsIs: )/9 AsIs: (/12 } )/14 (/15 Tile{ AsIs: e.LocalVars#2/10 } Tile{ AsIs: )/13 AsIs: e.dyn#3/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[13] );
  refalrts::link_brackets( context[12], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_Z1("ExtractNested-Conditions@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_Z1);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & ExtractNested-Sentence=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Sentence=2@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & ExtractNested-Sentence=2@1/4 (/7 e.6#0/18 )/8 (/11 e.2#0/20 )/12 s.MarkupContext0#1/13 (/16 e.4#0/22 )/17 (/28 e.ConditionsNestedFuncs#3/26 )/29 (/32 e.BorrowedVars#3/30 )/33 (/36 e.LocalVars#3/34 )/37 e.Conditions#3/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[24], context[25] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[24], context[25] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    // closed e.6#0 as range 18
    // closed e.2#0 as range 20
    // closed e.4#0 as range 22
    // closed e.ConditionsNestedFuncs#3 as range 26
    // closed e.BorrowedVars#3 as range 30
    // closed e.LocalVars#3 as range 34
    // closed e.Conditions#3 as range 24
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.6#0: 18
    //DEBUG: e.2#0: 20
    //DEBUG: e.4#0: 22
    //DEBUG: e.ConditionsNestedFuncs#3: 26
    //DEBUG: e.BorrowedVars#3: 30
    //DEBUG: e.LocalVars#3: 34
    //DEBUG: e.Conditions#3: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=3/4 AsIs: (/7 AsIs: e.6#0/18 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ConditionsNestedFuncs#3/26 } )/38 (/39 Tile{ AsIs: e.2#0/20 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Conditions#3/24 } Tile{ AsIs: )/37 } </40 & ExtractNested-Result=1/41 </42 Tile{ HalfReuse: & DoMapAccum@21/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } Tile{ AsIs: e.LocalVars#3/34 } )/43 (/44 (/45 Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.BorrowedVars#3/30 AsIs: )/33 HalfReuse: )/36 } (/46 )/47 Tile{ AsIs: e.4#0/22 } >/48 >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_ExtractNestedm_Result_A1]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A3]);
    refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::reinit_close_bracket(context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[44], context[36] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[45], context[29] );
    refalrts::link_brackets( context[16], context[43] );
    refalrts::link_brackets( context[28], context[37] );
    refalrts::link_brackets( context[39], context[17] );
    refalrts::link_brackets( context[11], context[38] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[29], context[36] );
    res = refalrts::splice_evar( res, context[43], context[45] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[17], context[28] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Sentence=2@1/4 (/7 e.6#0/5 )/8 (/11 e.2#0/9 )/12 s.MarkupContext0#1/13 (/16 e.4#0/14 )/17 e.dyn#0/2 >/1
  // closed e.6#0 as range 5
  // closed e.2#0 as range 9
  // closed e.4#0 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.6#0: 5
  //DEBUG: e.2#0: 9
  //DEBUG: e.4#0: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=2@0/4 AsIs: (/7 AsIs: e.6#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } )/18 (/19 Tile{ AsIs: e.4#0/14 } Tile{ AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[17] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A2Z1("ExtractNested-Sentence=2@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@18/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@18/4 (/7 e.ScopeVars#1/17 )/8 (/11 e.Scanned0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 e.StepScanned#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.ScopeVars#1 as range 17
    // closed e.Scanned0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned#2 as range 23
    //DEBUG: e.ScopeVars#1: 17
    //DEBUG: e.Scanned0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25
    //DEBUG: e.StepScanned#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@18/4 AsIs: (/7 AsIs: e.ScopeVars#1/17 AsIs: )/8 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0#1/19 } Tile{ AsIs: e.StepScanned#2/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@18/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.Scanned0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.Scanned0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.Scanned0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 HalfReuse: (/4 HalfReuse: & UpdateBorrowedVars@0/7 AsIs: e.ScopeVars#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Scanned0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z18("DoMapAccum$1=1@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z18);


static refalrts::FnResult func_gen_DoMapAccum_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoMapAccum@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@20/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 (/17 e.new#4/15 )/18 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#4 as range 15
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum@20/4 (/7 e.ScopeVars#1/19 )/8 (/11 e.LocalVars#1/21 )/12 t.Acc#1/13 (/17 e.Scanned#1/23 )/18 t.Next#1/27 e.Tail#1/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.ScopeVars#1 as range 19
    // closed e.LocalVars#1 as range 21
    // closed e.Scanned#1 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.Tail#1 as range 25
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.ScopeVars#1: 19
    //DEBUG: e.LocalVars#1: 21
    //DEBUG: e.Scanned#1: 23
    //DEBUG: t.Next#1: 27
    //DEBUG: e.Tail#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@20/4 AsIs: (/7 AsIs: e.ScopeVars#1/19 AsIs: )/8 AsIs: (/11 AsIs: e.LocalVars#1/21 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned#1/23 AsIs: )/18 } (/29 Tile{ AsIs: e.Tail#1/25 } )/30 </31 & UpdateBorrowedVars/32 e.ScopeVars#1/19/33 e.LocalVars#1/21/35 Tile{ AsIs: t.Acc#1/13 } Tile{ AsIs: t.Next#1/27 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_UpdateBorrowedVars]);
    refalrts::copy_evar(vm, context[33], context[34], context[19], context[20]);
    refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@20/4 (/7 e.ScopeVars#1/19 )/8 (/11 e.LocalVars#1/21 )/12 t.Acc#1/13 (/17 e.Scanned#1/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#1 as range 19
    // closed e.LocalVars#1 as range 21
    // closed e.Scanned#1 as range 23
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.ScopeVars#1: 19
    //DEBUG: e.LocalVars#1: 21
    //DEBUG: e.Scanned#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@20/4 (/7 e.ScopeVars#1/19 )/8 (/11 e.LocalVars#1/21 )/12 {REMOVED TILE} (/17 {REMOVED TILE} )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/13 } Tile{ AsIs: e.Scanned#1/23 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@20/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.LocalVars#1/9 )/12 t.acc#0/13 (/17 e.scanned#0/15 )/18 e.items#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.LocalVars#1 as range 9
  // closed e.scanned#0 as range 15
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 13
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.LocalVars#1: 9
  //DEBUG: e.scanned#0: 15
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 AsIs: (/7 } Tile{ HalfReuse: & UpdateBorrowedVars@0/11 } Tile{ AsIs: e.ScopeVars#1/5 } Tile{ AsIs: e.LocalVars#1/9 } Tile{ AsIs: )/12 AsIs: t.acc#0/13 AsIs: (/17 AsIs: e.scanned#0/15 AsIs: )/18 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_name(context[11], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z20("DoMapAccum@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z20);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & ExtractNested-Conditions@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions@2/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & ExtractNested-Conditions@2/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/22 )/9 (/12 e.ScopeVars0#1/24 )/13 (/16 e.LocalVars0#1/26 )/17 (/20 e.LocalVars#2/28 )/21 (/34 # Condition/36 (/39 e.ConditionName#1/37 )/40 (/43 e.Result#1/41 )/44 (/47 e.Pattern#1/45 )/48 )/35 e.Conditions#1/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    context[36] = refalrts::ident_left( identifiers[ident_Condition], context[32], context[33] );
    if( ! context[36] )
      continue;
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[32], context[33] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    context[41] = 0;
    context[42] = 0;
    context[43] = refalrts::brackets_left( context[41], context[42], context[32], context[33] );
    if( ! context[43] )
      continue;
    refalrts::bracket_pointers(context[43], context[44]);
    context[45] = 0;
    context[46] = 0;
    context[47] = refalrts::brackets_left( context[45], context[46], context[32], context[33] );
    if( ! context[47] )
      continue;
    refalrts::bracket_pointers(context[47], context[48]);
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.BorrowedVars#2 as range 22
    // closed e.ScopeVars0#1 as range 24
    // closed e.LocalVars0#1 as range 26
    // closed e.LocalVars#2 as range 28
    // closed e.ConditionName#1 as range 37
    // closed e.Result#1 as range 41
    // closed e.Pattern#1 as range 45
    // closed e.Conditions#1 as range 30
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.BorrowedVars#2: 22
    //DEBUG: e.ScopeVars0#1: 24
    //DEBUG: e.LocalVars0#1: 26
    //DEBUG: e.LocalVars#2: 28
    //DEBUG: e.ConditionName#1: 37
    //DEBUG: e.Result#1: 41
    //DEBUG: e.Pattern#1: 45
    //DEBUG: e.Conditions#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext0#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=1@2/4 } Tile{ AsIs: (/8 } Tile{ AsIs: e.ConditionName#1/37 } Tile{ AsIs: )/44 AsIs: (/47 AsIs: e.Pattern#1/45 AsIs: )/48 HalfReuse: s.MarkupContext01 #5/35 } (/49 e.ScopeVars0#1/24/50 )/52 (/53 e.LocalVars0#1/26/54 Tile{ AsIs: )/40 AsIs: (/43 } Tile{ AsIs: e.Conditions#1/30 } )/56 (/57 e.LocalVars#2/28/58 )/60 </61 & ExtractNested-Result=1/62 </63 & DoMapAccum@22/64 Tile{ HalfReuse: s.MarkupContext01 #5/9 AsIs: (/12 AsIs: e.ScopeVars0#1/24 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars0#1/26 AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#2/28 AsIs: )/21 AsIs: (/34 HalfReuse: (/36 HalfReuse: )/39 } (/65 Tile{ AsIs: e.BorrowedVars#2/22 } )/66 )/67 (/68 )/69 Tile{ AsIs: e.Result#1/41 } >/70 >/71 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[24], context[25]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[26], context[27]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[28], context[29]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_call(vm, context[61]);
    refalrts::alloc_name(vm, context[62], functions[efunc_gen_ExtractNestedm_Result_A1]);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[64], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::alloc_close_bracket(vm, context[66]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_open_bracket(vm, context[68]);
    refalrts::alloc_close_bracket(vm, context[69]);
    refalrts::alloc_close_call(vm, context[70]);
    refalrts::alloc_close_call(vm, context[71]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A1Z2]);
    refalrts::reinit_svar( context[35], context[5] );
    refalrts::reinit_svar( context[9], context[5] );
    refalrts::reinit_open_bracket(context[36]);
    refalrts::reinit_close_bracket(context[39]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[71] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[70] );
    refalrts::push_stack( vm, context[63] );
    refalrts::link_brackets( context[68], context[69] );
    refalrts::link_brackets( context[34], context[67] );
    refalrts::link_brackets( context[65], context[66] );
    refalrts::link_brackets( context[36], context[39] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[43], context[56] );
    refalrts::link_brackets( context[53], context[40] );
    refalrts::link_brackets( context[49], context[52] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::link_brackets( context[8], context[44] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[66], context[69] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[9], context[39] );
    res = refalrts::splice_evar( res, context[56], context[64] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[40], context[43] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[49], context[53] );
    res = refalrts::splice_evar( res, context[44], context[35] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ExtractNested-Conditions@2/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/22 )/9 (/12 e.ScopeVars0#1/24 )/13 (/16 e.LocalVars0#1/26 )/17 (/20 e.LocalVars#2/28 )/21 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.BorrowedVars#2 as range 22
    // closed e.ScopeVars0#1 as range 24
    // closed e.LocalVars0#1 as range 26
    // closed e.LocalVars#2 as range 28
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.BorrowedVars#2: 22
    //DEBUG: e.ScopeVars0#1: 24
    //DEBUG: e.LocalVars0#1: 26
    //DEBUG: e.LocalVars#2: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & ExtractNested-Conditions@2/4 s.MarkupContext0#1/5 (/8 {REMOVED TILE} )/9 (/12 e.ScopeVars0#1/24 {REMOVED TILE} e.LocalVars0#1/26 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.BorrowedVars#2/22 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#2/28 AsIs: )/21 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[0], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions@2/4 s.MarkupContext0#1/5 (/8 e.BorrowedVars#2/6 )/9 (/12 e.ScopeVars0#1/10 )/13 (/16 e.LocalVars0#1/14 )/17 (/20 e.LocalVars#2/18 )/21 e.dyn#3/2 >/1
  // closed e.BorrowedVars#2 as range 6
  // closed e.ScopeVars0#1 as range 10
  // closed e.LocalVars0#1 as range 14
  // closed e.LocalVars#2 as range 18
  // closed e.dyn#3 as range 2
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.BorrowedVars#2: 6
  //DEBUG: e.ScopeVars0#1: 10
  //DEBUG: e.LocalVars0#1: 14
  //DEBUG: e.LocalVars#2: 18
  //DEBUG: e.dyn#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/13 (/16 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.BorrowedVars#2/6 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.ScopeVars0#1/10 } Tile{ AsIs: e.LocalVars0#1/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#2/18 AsIs: )/21 AsIs: e.dyn#3/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[12], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_Z2("ExtractNested-Conditions@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_Z2);


static refalrts::FnResult func_gen_ExtractNestedm_Sentence_A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & ExtractNested-Sentence=2@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Sentence=2@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & ExtractNested-Sentence=2@2/4 (/7 e.6#0/26 )/8 (/11 e.2#0/28 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/30 )/17 (/20 e.LocalVars#1/32 )/21 (/24 e.4#0/34 )/25 (/40 e.ConditionsNestedFuncs#3/38 )/41 (/44 e.BorrowedVars#3/42 )/45 (/48 e.LocalVars#3/46 )/49 e.Conditions#3/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    context[38] = 0;
    context[39] = 0;
    context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
    if( ! context[40] )
      continue;
    refalrts::bracket_pointers(context[40], context[41]);
    context[42] = 0;
    context[43] = 0;
    context[44] = refalrts::brackets_left( context[42], context[43], context[36], context[37] );
    if( ! context[44] )
      continue;
    refalrts::bracket_pointers(context[44], context[45]);
    context[46] = 0;
    context[47] = 0;
    context[48] = refalrts::brackets_left( context[46], context[47], context[36], context[37] );
    if( ! context[48] )
      continue;
    refalrts::bracket_pointers(context[48], context[49]);
    // closed e.6#0 as range 26
    // closed e.2#0 as range 28
    // closed e.ScopeVars0#1 as range 30
    // closed e.LocalVars#1 as range 32
    // closed e.4#0 as range 34
    // closed e.ConditionsNestedFuncs#3 as range 38
    // closed e.BorrowedVars#3 as range 42
    // closed e.LocalVars#3 as range 46
    // closed e.Conditions#3 as range 36
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.6#0: 26
    //DEBUG: e.2#0: 28
    //DEBUG: e.ScopeVars0#1: 30
    //DEBUG: e.LocalVars#1: 32
    //DEBUG: e.4#0: 34
    //DEBUG: e.ConditionsNestedFuncs#3: 38
    //DEBUG: e.BorrowedVars#3: 42
    //DEBUG: e.LocalVars#3: 46
    //DEBUG: e.Conditions#3: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=3/4 AsIs: (/7 AsIs: e.6#0/26 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ConditionsNestedFuncs#3/38 } Tile{ AsIs: )/25 AsIs: (/40 } Tile{ AsIs: e.2#0/28 } )/50 (/51 Tile{ AsIs: e.Conditions#3/36 } Tile{ AsIs: )/49 } </52 & ExtractNested-Result=1/53 </54 Tile{ HalfReuse: & DoMapAccum@22/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 AsIs: e.ScopeVars0#1/30 AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#1/32 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.LocalVars#3/46 } )/55 (/56 (/57 Tile{ AsIs: )/41 AsIs: (/44 AsIs: e.BorrowedVars#3/42 AsIs: )/45 HalfReuse: )/48 } (/58 )/59 Tile{ AsIs: e.4#0/34 } >/60 >/61 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_ExtractNestedm_Result_A1]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_open_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_close_bracket(vm, context[59]);
    refalrts::alloc_close_call(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A3]);
    refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::reinit_close_bracket(context[48]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[54] );
    refalrts::link_brackets( context[58], context[59] );
    refalrts::link_brackets( context[56], context[48] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[57], context[41] );
    refalrts::link_brackets( context[24], context[55] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[51], context[49] );
    refalrts::link_brackets( context[40], context[50] );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[41], context[48] );
    res = refalrts::splice_evar( res, context[55], context[57] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    res = refalrts::splice_evar( res, context[52], context[54] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[25], context[40] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Sentence=2@2/4 (/7 e.6#0/5 )/8 (/11 e.2#0/9 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/14 )/17 (/20 e.LocalVars#1/18 )/21 (/24 e.4#0/22 )/25 e.dyn#0/2 >/1
  // closed e.6#0 as range 5
  // closed e.2#0 as range 9
  // closed e.ScopeVars0#1 as range 14
  // closed e.LocalVars#1 as range 18
  // closed e.4#0 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.6#0: 5
  //DEBUG: e.2#0: 9
  //DEBUG: e.ScopeVars0#1: 14
  //DEBUG: e.LocalVars#1: 18
  //DEBUG: e.4#0: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/17 (/20 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Sentence=2@0/4 AsIs: (/7 AsIs: e.6#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.2#0/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } Tile{ AsIs: e.ScopeVars0#1/14 } Tile{ AsIs: e.LocalVars#1/18 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.4#0/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Sentence_A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[16], context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, context[16], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Sentence_A2Z2("ExtractNested-Sentence=2@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Sentence_A2Z2);


static refalrts::FnResult func_gen_Fetch_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Fetch@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@7/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@7/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@9/4 } </8 & Pass-RemoveRedundantDriveInlineIntrinsic=1/9 </10 & DoMapAccum@3/11 (/12 )/13 (/14 )/15 Tile{ AsIs: e.Argument#1/6 } >/16 >/17 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@7/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-RemoveRedundantDriveInlineIntrinsic@0/8 (/9 & Pass-EnumerateVariables@0/10 & Pass-NameNestedFuncs@0/11 & Pass-RemoveBlocksAndAssigns@0/12 (/13 & Pass-FlatNestedFuncs@0/14 Tile{ AsIs: s.MarkupContext#1/5 } )/15 & Pass-CleanupRedudandExterns@0/16 & Pass-UnfoldEnums@0/17 )/18 {*}/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_unwrapped_closure(vm, context[19], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[18] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[19] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[19] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z7("Fetch@7", COOKIE1_, COOKIE2_, func_gen_Fetch_Z7);


static refalrts::FnResult func_gen_Fetch_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Fetch@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@8/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@8/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@10/4 } </8 & Pass-RemoveRedundantDriveInlineIntrinsic=1/9 </10 & DoMapAccum@3/11 (/12 )/13 (/14 )/15 Tile{ AsIs: e.Argument#1/6 } >/16 >/17 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_A1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@8/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-RemoveRedundantDriveInlineIntrinsic@0/8 (/9 & Pass-EnumerateVariables@0/10 & Pass-NameNestedFuncs@0/11 & Pass-RemoveBlocksAndAssigns@0/12 (/13 & Pass-FlatNestedFuncs@0/14 s.MarkupContext#1/5/15 )/16 (/17 & Pass-UnCondition@0/18 Tile{ AsIs: s.MarkupContext#1/5 } )/19 & Pass-CleanupRedudandExterns@0/20 & Pass-UnfoldEnums@0/21 )/22 {*}/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_RemoveRedundantDriveInlineIntrinsic_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[15], context[5]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_unwrapped_closure(vm, context[23], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[22] );
  refalrts::link_brackets( context[17], context[19] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[23] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z8("Fetch@8", COOKIE1_, COOKIE2_, func_gen_Fetch_Z8);


static refalrts::FnResult func_gen_Map_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & Map@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@21/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@21/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@21/4 (/7 e.ScopeVars#2/15 )/8 (/13 (/23 e.1#0/21 )/24 e.4#0/19 (/31 e.5#0/29 )/32 (/27 e.3#0/25 )/28 )/14 e.Tail#1/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.ScopeVars#2 as range 15
      // closed e.1#0 as range 21
      // closed e.4#0 as range 19
      // closed e.5#0 as range 29
      // closed e.3#0 as range 25
      // closed e.Tail#1 as range 17
      //DEBUG: e.ScopeVars#2: 15
      //DEBUG: e.1#0: 21
      //DEBUG: e.4#0: 19
      //DEBUG: e.5#0: 29
      //DEBUG: e.3#0: 25
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </33 & EnumerateVars-Body$1\1=1@2/34 (/35 Tile{ AsIs: e.3#0/25 } )/36 Tile{ AsIs: (/31 AsIs: e.5#0/29 AsIs: )/32 AsIs: (/27 } Tile{ AsIs: e.4#0/19 } Tile{ AsIs: )/28 } </37 & DoMapAccum@23/38 [*]/39 & EnumerateVars-Expr\1/40 Tile{ HalfReuse: 2/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 AsIs: (/13 HalfReuse: )/23 AsIs: e.1#0/21 HalfReuse: >/24 } >/41 </42 & Map@21/43 (/44 e.ScopeVars#2/15/45 Tile{ AsIs: )/14 AsIs: e.Tail#1/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1Z2]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoMapAccum_Z23]);
      refalrts::alloc_closure_head(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z21]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[15], context[16]);
      refalrts::reinit_number(context[0], 2UL);
      refalrts::reinit_unwrapped_closure(context[4], context[39]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_close_call(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[44], context[14] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[13], context[23] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_evar( res, context[0], context[24] );
      res = refalrts::splice_evar( res, context[37], context[40] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[31], context[27] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::use( res );
      refalrts::wrap_closure( context[4] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@21/4 (/7 e.ScopeVars#2/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars#2 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.ScopeVars#2: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & EnumerateVars-Body$1\1*1/20 2/21 (/22 e.ScopeVars#2/15/23 )/25 Tile{ AsIs: t.Next#1/13 } >/26 Tile{ AsIs: </0 AsIs: & Map@21/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Body_S1L1D1]);
    refalrts::alloc_number(vm, context[21], 2UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@21/4 (/7 e.ScopeVars#2/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#2 as range 9
    //DEBUG: e.ScopeVars#2: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@21/4 (/7 e.ScopeVars#2/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@21/4 (/7 e.ScopeVars#2/5 )/8 e.items#0/2 >/1
  // closed e.ScopeVars#2 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.ScopeVars#2: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 Tile{ HalfReuse: & EnumerateVars-Body$1\1@0/0 HalfReuse: 2/4 AsIs: (/7 AsIs: e.ScopeVars#2/5 AsIs: )/8 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Body_S1L1Z0]);
  refalrts::reinit_number(context[4], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z21("Map@21", COOKIE1_, COOKIE2_, func_gen_Map_Z21);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@9/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@9/4 (/7 e.Assignments0#1/17 )/8 (/11 e.Pattern0#1/19 )/12 (/15 e.Blocks0#1/21 )/16 (/27 e.ScopeVars#3/25 )/28 e.Result#3/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Assignments0#1 as range 17
    // closed e.Pattern0#1 as range 19
    // closed e.Blocks0#1 as range 21
    // closed e.ScopeVars#3 as range 25
    // closed e.Result#3 as range 23
    //DEBUG: e.Assignments0#1: 17
    //DEBUG: e.Pattern0#1: 19
    //DEBUG: e.Blocks0#1: 21
    //DEBUG: e.ScopeVars#3: 25
    //DEBUG: e.Result#3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Assignments$2=4@7/29 (/30 Tile{ AsIs: e.Result#3/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Assignments0#1/17 AsIs: )/8 AsIs: (/11 } e.ScopeVars#3/25/31 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern0#1/19 } )/33 </34 Tile{ HalfReuse: & Map@22/16 AsIs: (/27 AsIs: e.ScopeVars#3/25 AsIs: )/28 } Tile{ AsIs: e.Blocks0#1/21 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z7]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Map_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@9/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=2@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 } 1/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_number(vm, context[20], 1UL);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z9("EnumerateVars-Assignments$2=2@9", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z9);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@10/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@10/4 (/7 e.Assignments0#1/17 )/8 (/11 e.Pattern0#1/19 )/12 (/15 e.Blocks0#1/21 )/16 (/27 e.ScopeVars#3/25 )/28 e.Result#3/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Assignments0#1 as range 17
    // closed e.Pattern0#1 as range 19
    // closed e.Blocks0#1 as range 21
    // closed e.ScopeVars#3 as range 25
    // closed e.Result#3 as range 23
    //DEBUG: e.Assignments0#1: 17
    //DEBUG: e.Pattern0#1: 19
    //DEBUG: e.Blocks0#1: 21
    //DEBUG: e.ScopeVars#3: 25
    //DEBUG: e.Result#3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Assignments$2=4@8/29 (/30 Tile{ AsIs: e.Result#3/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Assignments0#1/17 AsIs: )/8 AsIs: (/11 } e.ScopeVars#3/25/31 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern0#1/19 } )/33 </34 Tile{ HalfReuse: & Map@22/16 AsIs: (/27 AsIs: e.ScopeVars#3/25 AsIs: )/28 } Tile{ AsIs: e.Blocks0#1/21 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z8]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Map_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@10/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=2@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 } 1/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_number(vm, context[20], 1UL);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z10("EnumerateVars-Assignments$2=2@10", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z10);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & EnumerateVars-Assignments$2=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=1@3/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=1@3/4 s.ChainType0#1/5 (/8 e.Assignments0#1/26 )/9 (/12 e.Pattern0#1/28 )/13 (/16 e.Blocks0#1/30 )/17 (/20 e.ScopeVars#3/32 )/21 (/24 e.Result0#1/34 )/25 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Assignments0#1 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks0#1 as range 30
    // closed e.ScopeVars#3 as range 32
    // closed e.Result0#1 as range 34
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Assignments0#1: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks0#1: 30
    //DEBUG: e.ScopeVars#3: 32
    //DEBUG: e.Result0#1: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@11/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/26 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/28 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/30 AsIs: )/17 HalfReuse: </20 } & DoMapAccum@17/36 (/37 Tile{ AsIs: e.ScopeVars#3/32 } )/38 Tile{ HalfReuse: (/21 HalfReuse: )/24 AsIs: e.Result0#1/34 HalfReuse: >/25 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z11]);
    refalrts::reinit_open_call(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_close_bracket(context[24]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=1@3/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 (/20 e.ScopeVars#3/18 )/21 (/24 e.Result0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.ScopeVars#3 as range 18
  // closed e.Result0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.ScopeVars#3: 18
  //DEBUG: e.Result0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 & EnumerateVars-Assignments$2=1@0/27 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 HalfReuse: 1/20 } (/28 Tile{ AsIs: e.ScopeVars#3/18 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.Result0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_number(context[20], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[28], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[20] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A1Z3("EnumerateVars-Assignments$2=1@3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A1Z3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & EnumerateVars-Assignments$2=4@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@3/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@3/4 (/7 e.Result0#3/22 )/8 s.Depth0#4/9 (/12 e.Assignments0#1/24 )/13 (/16 e.ScopeVars0#3/26 )/17 (/20 e.Pattern0#1/28 )/21 e.Blocks#5/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Result0#3 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.ScopeVars0#3 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks#5 as range 30
    //DEBUG: s.Depth0#4: 9
    //DEBUG: e.Result0#3: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.ScopeVars0#3: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks#5: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@3/4 AsIs: (/7 AsIs: e.Result0#3/22 AsIs: )/8 } (/32 Tile{ AsIs: e.Blocks#5/30 } )/33 Tile{ AsIs: s.Depth0#4/9 AsIs: (/12 AsIs: e.Assignments0#1/24 AsIs: )/13 HalfReuse: </16 } & DoMapAccum@5/34 s.Depth0#4/9/35 (/36 Tile{ AsIs: e.ScopeVars0#3/26 } Tile{ AsIs: )/17 AsIs: (/20 } Tile{ AsIs: )/21 } Tile{ AsIs: e.Pattern0#1/28 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[35], context[9]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z3]);
    refalrts::reinit_open_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[36], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@3/4 (/7 e.Result0#3/5 )/8 s.Depth0#4/9 (/12 e.Assignments0#1/10 )/13 (/16 e.ScopeVars0#3/14 )/17 (/20 e.Pattern0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 10
  // closed e.ScopeVars0#3 as range 14
  // closed e.Pattern0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 9
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 10
  //DEBUG: e.ScopeVars0#3: 14
  //DEBUG: e.Pattern0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & EnumerateVars-Assignments$2=4@0/23 (/24 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: s.Depth0#4/9 AsIs: (/12 AsIs: e.Assignments0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[24], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[22], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z3("EnumerateVars-Assignments$2=4@3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & EnumerateVars-Assignments$2=4@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@4/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@4/4 (/7 e.Result0#3/22 )/8 s.Depth0#4/9 (/12 e.Assignments0#1/24 )/13 (/16 e.ScopeVars0#3/26 )/17 (/20 e.Pattern0#1/28 )/21 e.Blocks#5/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Result0#3 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.ScopeVars0#3 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks#5 as range 30
    //DEBUG: s.Depth0#4: 9
    //DEBUG: e.Result0#3: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.ScopeVars0#3: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks#5: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@4/4 AsIs: (/7 AsIs: e.Result0#3/22 AsIs: )/8 } (/32 Tile{ AsIs: e.Blocks#5/30 } )/33 Tile{ AsIs: s.Depth0#4/9 AsIs: (/12 AsIs: e.Assignments0#1/24 AsIs: )/13 HalfReuse: </16 } & DoMapAccum@5/34 s.Depth0#4/9/35 (/36 Tile{ AsIs: e.ScopeVars0#3/26 } Tile{ AsIs: )/17 AsIs: (/20 } Tile{ AsIs: )/21 } Tile{ AsIs: e.Pattern0#1/28 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[35], context[9]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[36], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@4/4 (/7 e.Result0#3/5 )/8 s.Depth0#4/9 (/12 e.Assignments0#1/10 )/13 (/16 e.ScopeVars0#3/14 )/17 (/20 e.Pattern0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 10
  // closed e.ScopeVars0#3 as range 14
  // closed e.Pattern0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 9
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 10
  //DEBUG: e.ScopeVars0#3: 14
  //DEBUG: e.Pattern0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & EnumerateVars-Assignments$2=4@0/23 (/24 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: s.Depth0#4/9 AsIs: (/12 AsIs: e.Assignments0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[24], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[22], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z4("EnumerateVars-Assignments$2=4@4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & EnumerateVars-Assignments$2=3@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@7/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@7/4 s.ChainType0#1/5 (/8 e.Result0#3/26 )/9 (/12 e.Assignments0#1/28 )/13 (/16 e.ScopeVars0#3/30 )/17 (/20 e.Pattern0#1/32 )/21 (/24 e.Blocks0#1/34 )/25 s.Depth#4/38 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.Result0#3 as range 26
    // closed e.Assignments0#1 as range 28
    // closed e.ScopeVars0#3 as range 30
    // closed e.Pattern0#1 as range 32
    // closed e.Blocks0#1 as range 34
    if( ! refalrts::svar_left( context[38], context[36], context[37] ) )
      continue;
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Result0#3: 26
    //DEBUG: e.Assignments0#1: 28
    //DEBUG: e.ScopeVars0#3: 30
    //DEBUG: e.Pattern0#1: 32
    //DEBUG: e.Blocks0#1: 34
    //DEBUG: s.Depth#4: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@9/4 AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result0#3/26 } )/39 Tile{ HalfReuse: s.Depth4 #38/9 AsIs: (/12 AsIs: e.Assignments0#1/28 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/30 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/32 AsIs: )/21 HalfReuse: </24 } Tile{ HalfReuse: & Map@11/25 AsIs: s.Depth#4/38 } (/40 e.ScopeVars0#3/30/41 )/43 Tile{ AsIs: e.Blocks0#1/34 } >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_evar(vm, context[41], context[42], context[30], context[31]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z9]);
    refalrts::reinit_svar( context[9], context[38] );
    refalrts::reinit_open_call(context[24]);
    refalrts::reinit_name(context[25], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[40], context[43] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[39] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[40], context[43] );
    res = refalrts::splice_evar( res, context[25], context[38] );
    res = refalrts::splice_evar( res, context[9], context[24] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@7/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Assignments0#1/10 )/13 (/16 e.ScopeVars0#3/14 )/17 (/20 e.Pattern0#1/18 )/21 (/24 e.Blocks0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Assignments0#1 as range 10
  // closed e.ScopeVars0#3 as range 14
  // closed e.Pattern0#1 as range 18
  // closed e.Blocks0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Assignments0#1: 10
  //DEBUG: e.ScopeVars0#3: 14
  //DEBUG: e.Pattern0#1: 18
  //DEBUG: e.Blocks0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 & EnumerateVars-Assignments$2=3@0/27 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/6 AsIs: )/9 AsIs: (/12 AsIs: e.Assignments0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Blocks0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z7("EnumerateVars-Assignments$2=3@7", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z7);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & EnumerateVars-Assignments$2=4@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@5/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 s.new#7/26 (/29 e.new#8/27 )/30 (/33 e.new#9/31 )/34 (/37 e.new#10/35 )/38 e.new#11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.new#8 as range 27
  // closed e.new#9 as range 31
  // closed e.new#10 as range 35
  // closed e.new#11 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@5/4 (/7 e.RAssignments0#1/39 )/8 s.ChainType0#1/9 (/12 e.Result0#3/41 )/13 (/16 e.Blocks0#5/43 )/17 (/20 e.Pattern#6/45 )/21 (/24 e.Result1#3/47 )/25 s.Depth0#4/26 (/29 e.Assignments0#1/49 )/30 (/33 e.ScopeVars0#3/51 )/34 (/37 e.Pattern0#1/53 )/38 e.Blocks#5/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[10];
    context[42] = context[11];
    context[43] = context[14];
    context[44] = context[15];
    context[45] = context[18];
    context[46] = context[19];
    context[47] = context[22];
    context[48] = context[23];
    context[49] = context[27];
    context[50] = context[28];
    context[51] = context[31];
    context[52] = context[32];
    context[53] = context[35];
    context[54] = context[36];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.RAssignments0#1 as range 39
    // closed e.Result0#3 as range 41
    // closed e.Blocks0#5 as range 43
    // closed e.Pattern#6 as range 45
    // closed e.Result1#3 as range 47
    // closed e.Assignments0#1 as range 49
    // closed e.ScopeVars0#3 as range 51
    // closed e.Pattern0#1 as range 53
    // closed e.Blocks#5 as range 55
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth0#4: 26
    //DEBUG: e.RAssignments0#1: 39
    //DEBUG: e.Result0#3: 41
    //DEBUG: e.Blocks0#5: 43
    //DEBUG: e.Pattern#6: 45
    //DEBUG: e.Result1#3: 47
    //DEBUG: e.Assignments0#1: 49
    //DEBUG: e.ScopeVars0#3: 51
    //DEBUG: e.Pattern0#1: 53
    //DEBUG: e.Blocks#5: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@5/4 AsIs: (/7 AsIs: e.RAssignments0#1/39 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/41 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/43 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/45 AsIs: )/21 AsIs: (/24 AsIs: e.Result1#3/47 AsIs: )/25 } (/57 Tile{ AsIs: e.Blocks#5/55 } )/58 Tile{ AsIs: s.Depth0#4/26 AsIs: (/29 AsIs: e.Assignments0#1/49 AsIs: )/30 HalfReuse: </33 } & DoMapAccum@5/59 s.Depth0#4/26/60 (/61 Tile{ AsIs: e.ScopeVars0#3/51 } Tile{ AsIs: )/34 AsIs: (/37 } Tile{ AsIs: )/38 } Tile{ AsIs: e.Pattern0#1/53 } >/62 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[60], context[26]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z5]);
    refalrts::reinit_open_call(context[33]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[61], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[57], context[58] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[62] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[59], context[61] );
    res = refalrts::splice_evar( res, context[26], context[33] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[57] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@5/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks0#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Result1#3/22 )/25 s.Depth0#4/26 (/29 e.Assignments0#1/27 )/30 (/33 e.ScopeVars0#3/31 )/34 (/37 e.Pattern0#1/35 )/38 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks0#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Assignments0#1 as range 27
  // closed e.ScopeVars0#3 as range 31
  // closed e.Pattern0#1 as range 35
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth0#4: 26
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks0#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Assignments0#1: 27
  //DEBUG: e.ScopeVars0#3: 31
  //DEBUG: e.Pattern0#1: 35
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/39 )/40 )/41 Tile{ HalfReuse: # Assign/21 AsIs: (/24 AsIs: e.Result1#3/22 AsIs: )/25 AsIs: s.Depth0#4/26 AsIs: (/29 AsIs: e.Assignments0#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.ScopeVars0#3/31 AsIs: )/34 AsIs: (/37 AsIs: e.Pattern0#1/35 AsIs: )/38 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[21], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[41] );
  refalrts::link_brackets( context[8], context[40] );
  refalrts::link_brackets( context[20], context[39] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[39], context[41] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z5("EnumerateVars-Assignments$2=4@5", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & EnumerateVars-Assignments$2=4@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@6/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 s.new#7/26 (/29 e.new#8/27 )/30 (/33 e.new#9/31 )/34 (/37 e.new#10/35 )/38 e.new#11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.new#8 as range 27
  // closed e.new#9 as range 31
  // closed e.new#10 as range 35
  // closed e.new#11 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@6/4 (/7 e.RAssignments0#1/39 )/8 s.ChainType0#1/9 (/12 e.Result0#3/41 )/13 (/16 e.Blocks0#5/43 )/17 (/20 e.Pattern#6/45 )/21 (/24 e.Result1#3/47 )/25 s.Depth0#4/26 (/29 e.Assignments0#1/49 )/30 (/33 e.ScopeVars0#3/51 )/34 (/37 e.Pattern0#1/53 )/38 e.Blocks#5/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[10];
    context[42] = context[11];
    context[43] = context[14];
    context[44] = context[15];
    context[45] = context[18];
    context[46] = context[19];
    context[47] = context[22];
    context[48] = context[23];
    context[49] = context[27];
    context[50] = context[28];
    context[51] = context[31];
    context[52] = context[32];
    context[53] = context[35];
    context[54] = context[36];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.RAssignments0#1 as range 39
    // closed e.Result0#3 as range 41
    // closed e.Blocks0#5 as range 43
    // closed e.Pattern#6 as range 45
    // closed e.Result1#3 as range 47
    // closed e.Assignments0#1 as range 49
    // closed e.ScopeVars0#3 as range 51
    // closed e.Pattern0#1 as range 53
    // closed e.Blocks#5 as range 55
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth0#4: 26
    //DEBUG: e.RAssignments0#1: 39
    //DEBUG: e.Result0#3: 41
    //DEBUG: e.Blocks0#5: 43
    //DEBUG: e.Pattern#6: 45
    //DEBUG: e.Result1#3: 47
    //DEBUG: e.Assignments0#1: 49
    //DEBUG: e.ScopeVars0#3: 51
    //DEBUG: e.Pattern0#1: 53
    //DEBUG: e.Blocks#5: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@6/4 AsIs: (/7 AsIs: e.RAssignments0#1/39 AsIs: )/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/41 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/43 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/45 AsIs: )/21 AsIs: (/24 AsIs: e.Result1#3/47 AsIs: )/25 } (/57 Tile{ AsIs: e.Blocks#5/55 } )/58 Tile{ AsIs: s.Depth0#4/26 AsIs: (/29 AsIs: e.Assignments0#1/49 AsIs: )/30 HalfReuse: </33 } & DoMapAccum@5/59 s.Depth0#4/26/60 (/61 Tile{ AsIs: e.ScopeVars0#3/51 } Tile{ AsIs: )/34 AsIs: (/37 } Tile{ AsIs: )/38 } Tile{ AsIs: e.Pattern0#1/53 } >/62 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[60], context[26]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z6]);
    refalrts::reinit_open_call(context[33]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[61], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[57], context[58] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[62] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[59], context[61] );
    res = refalrts::splice_evar( res, context[26], context[33] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[57] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@6/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks0#5/14 )/17 (/20 e.Pattern#6/18 )/21 (/24 e.Result1#3/22 )/25 s.Depth0#4/26 (/29 e.Assignments0#1/27 )/30 (/33 e.ScopeVars0#3/31 )/34 (/37 e.Pattern0#1/35 )/38 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks0#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Assignments0#1 as range 27
  // closed e.ScopeVars0#3 as range 31
  // closed e.Pattern0#1 as range 35
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth0#4: 26
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks0#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Assignments0#1: 27
  //DEBUG: e.ScopeVars0#3: 31
  //DEBUG: e.Pattern0#1: 35
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/39 )/40 )/41 Tile{ HalfReuse: # Condition/21 AsIs: (/24 AsIs: e.Result1#3/22 AsIs: )/25 AsIs: s.Depth0#4/26 AsIs: (/29 AsIs: e.Assignments0#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.ScopeVars0#3/31 AsIs: )/34 AsIs: (/37 AsIs: e.Pattern0#1/35 AsIs: )/38 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[21], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[41] );
  refalrts::link_brackets( context[8], context[40] );
  refalrts::link_brackets( context[20], context[39] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[39], context[41] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z6("EnumerateVars-Assignments$2=4@6", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z6);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A3Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & EnumerateVars-Assignments$2=3@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=3@8/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 (/25 e.new#7/23 )/26 (/29 e.new#8/27 )/30 (/33 e.new#9/31 )/34 (/37 e.new#10/35 )/38 (/41 e.new#11/39 )/42 e.new#12/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  // closed e.new#7 as range 23
  // closed e.new#8 as range 27
  // closed e.new#9 as range 31
  // closed e.new#10 as range 35
  // closed e.new#11 as range 39
  // closed e.new#12 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=3@8/4 (/7 e.RAssignments0#1/43 )/8 s.ChainType1#1/9 (/12 e.Result0#3/45 )/13 (/16 e.Blocks#5/47 )/17 (/20 e.Pattern#6/49 )/21 s.ChainType0#1/22 (/25 e.Result1#3/51 )/26 (/29 e.Assignments0#1/53 )/30 (/33 e.ScopeVars0#3/55 )/34 (/37 e.Pattern0#1/57 )/38 (/41 e.Blocks0#1/59 )/42 s.Depth#4/63 >/1
    context[43] = context[5];
    context[44] = context[6];
    context[45] = context[10];
    context[46] = context[11];
    context[47] = context[14];
    context[48] = context[15];
    context[49] = context[18];
    context[50] = context[19];
    context[51] = context[23];
    context[52] = context[24];
    context[53] = context[27];
    context[54] = context[28];
    context[55] = context[31];
    context[56] = context[32];
    context[57] = context[35];
    context[58] = context[36];
    context[59] = context[39];
    context[60] = context[40];
    context[61] = context[2];
    context[62] = context[3];
    // closed e.RAssignments0#1 as range 43
    // closed e.Result0#3 as range 45
    // closed e.Blocks#5 as range 47
    // closed e.Pattern#6 as range 49
    // closed e.Result1#3 as range 51
    // closed e.Assignments0#1 as range 53
    // closed e.ScopeVars0#3 as range 55
    // closed e.Pattern0#1 as range 57
    // closed e.Blocks0#1 as range 59
    if( ! refalrts::svar_left( context[63], context[61], context[62] ) )
      continue;
    if( ! refalrts::empty_seq( context[61], context[62] ) )
      continue;
    //DEBUG: s.ChainType1#1: 9
    //DEBUG: s.ChainType0#1: 22
    //DEBUG: e.RAssignments0#1: 43
    //DEBUG: e.Result0#3: 45
    //DEBUG: e.Blocks#5: 47
    //DEBUG: e.Pattern#6: 49
    //DEBUG: e.Result1#3: 51
    //DEBUG: e.Assignments0#1: 53
    //DEBUG: e.ScopeVars0#3: 55
    //DEBUG: e.Pattern0#1: 57
    //DEBUG: e.Blocks0#1: 59
    //DEBUG: s.Depth#4: 63

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@10/4 AsIs: (/7 AsIs: e.RAssignments0#1/43 AsIs: )/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/45 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/47 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/49 AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Result1#3/51 AsIs: )/26 HalfReuse: s.Depth4 #63/29 } (/64 Tile{ AsIs: e.Assignments0#1/53 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.ScopeVars0#3/55 AsIs: )/34 AsIs: (/37 AsIs: e.Pattern0#1/57 AsIs: )/38 HalfReuse: </41 } Tile{ HalfReuse: & Map@11/42 AsIs: s.Depth#4/63 } (/65 e.ScopeVars0#3/55/66 )/68 Tile{ AsIs: e.Blocks0#1/59 } >/69 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[55], context[56]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z10]);
    refalrts::reinit_svar( context[29], context[63] );
    refalrts::reinit_open_call(context[41]);
    refalrts::reinit_name(context[42], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[65], context[68] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[64], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[69] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[65], context[68] );
    res = refalrts::splice_evar( res, context[42], context[63] );
    res = refalrts::splice_evar( res, context[30], context[41] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[64] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=3@8/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType1#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks#5/14 )/17 (/20 e.Pattern#6/18 )/21 s.ChainType0#1/22 (/25 e.Result1#3/23 )/26 (/29 e.Assignments0#1/27 )/30 (/33 e.ScopeVars0#3/31 )/34 (/37 e.Pattern0#1/35 )/38 (/41 e.Blocks0#1/39 )/42 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 23
  // closed e.Assignments0#1 as range 27
  // closed e.ScopeVars0#3 as range 31
  // closed e.Pattern0#1 as range 35
  // closed e.Blocks0#1 as range 39
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType1#1: 9
  //DEBUG: s.ChainType0#1: 22
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 23
  //DEBUG: e.Assignments0#1: 27
  //DEBUG: e.ScopeVars0#3: 31
  //DEBUG: e.Pattern0#1: 35
  //DEBUG: e.Blocks0#1: 39
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=3@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/43 )/44 Tile{ AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Result1#3/23 AsIs: )/26 AsIs: (/29 AsIs: e.Assignments0#1/27 AsIs: )/30 AsIs: (/33 AsIs: e.ScopeVars0#3/31 AsIs: )/34 AsIs: (/37 AsIs: e.Pattern0#1/35 AsIs: )/38 AsIs: (/41 AsIs: e.Blocks0#1/39 AsIs: )/42 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A3Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::link_brackets( context[8], context[44] );
  refalrts::link_brackets( context[20], context[43] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[43], context[44] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A3Z8("EnumerateVars-Assignments$2=3@8", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A3Z8);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & EnumerateVars-Assignments$2=5@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@1/4 (/7 e.RAssignments0#1/22 )/8 (/11 e.Result0#3/24 )/12 (/15 e.Blocks0#5/26 )/16 s.Depth0#4/17 (/20 e.Assignments0#1/28 )/21 (/34 e.ScopeVars#6/32 )/35 e.Pattern#6/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    // closed e.RAssignments0#1 as range 22
    // closed e.Result0#3 as range 24
    // closed e.Blocks0#5 as range 26
    // closed e.Assignments0#1 as range 28
    // closed e.ScopeVars#6 as range 32
    // closed e.Pattern#6 as range 30
    //DEBUG: s.Depth0#4: 17
    //DEBUG: e.RAssignments0#1: 22
    //DEBUG: e.Result0#3: 24
    //DEBUG: e.Blocks0#5: 26
    //DEBUG: e.Assignments0#1: 28
    //DEBUG: e.ScopeVars#6: 32
    //DEBUG: e.Pattern#6: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth0#4/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/22 } Tile{ AsIs: (/20 } Tile{ HalfReuse: # Assign/8 AsIs: (/11 AsIs: e.Result0#3/24 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#5/26 AsIs: )/16 } (/36 Tile{ AsIs: e.Pattern#6/30 } )/37 )/38 )/39 Tile{ HalfReuse: s.Depth04 #17/21 AsIs: (/34 AsIs: e.ScopeVars#6/32 AsIs: )/35 } Tile{ AsIs: e.Assignments0#1/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::reinit_ident(context[8], identifiers[ident_Assign]);
    refalrts::reinit_svar( context[21], context[17] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[7], context[39] );
    refalrts::link_brackets( context[20], context[38] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[21], context[35] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@1/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 (/15 e.Blocks0#5/13 )/16 s.Depth0#4/17 (/20 e.Assignments0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Blocks0#5 as range 13
  // closed e.Assignments0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 17
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Blocks0#5: 13
  //DEBUG: e.Assignments0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/22 Tile{ HalfReuse: # Assign/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#5/13 AsIs: )/16 AsIs: s.Depth0#4/17 AsIs: (/20 AsIs: e.Assignments0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z1("EnumerateVars-Assignments$2=5@1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z1);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & EnumerateVars-Assignments$2=5@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@2/4 (/7 e.RAssignments0#1/22 )/8 (/11 e.Result0#3/24 )/12 (/15 e.Blocks0#5/26 )/16 s.Depth0#4/17 (/20 e.Assignments0#1/28 )/21 (/34 e.ScopeVars#6/32 )/35 e.Pattern#6/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    // closed e.RAssignments0#1 as range 22
    // closed e.Result0#3 as range 24
    // closed e.Blocks0#5 as range 26
    // closed e.Assignments0#1 as range 28
    // closed e.ScopeVars#6 as range 32
    // closed e.Pattern#6 as range 30
    //DEBUG: s.Depth0#4: 17
    //DEBUG: e.RAssignments0#1: 22
    //DEBUG: e.Result0#3: 24
    //DEBUG: e.Blocks0#5: 26
    //DEBUG: e.Assignments0#1: 28
    //DEBUG: e.ScopeVars#6: 32
    //DEBUG: e.Pattern#6: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth0#4/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/22 } Tile{ AsIs: (/20 } Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.Result0#3/24 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#5/26 AsIs: )/16 } (/36 Tile{ AsIs: e.Pattern#6/30 } )/37 )/38 )/39 Tile{ HalfReuse: s.Depth04 #17/21 AsIs: (/34 AsIs: e.ScopeVars#6/32 AsIs: )/35 } Tile{ AsIs: e.Assignments0#1/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
    refalrts::reinit_svar( context[21], context[17] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[7], context[39] );
    refalrts::link_brackets( context[20], context[38] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[21], context[35] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@2/4 (/7 e.RAssignments0#1/5 )/8 (/11 e.Result0#3/9 )/12 (/15 e.Blocks0#5/13 )/16 s.Depth0#4/17 (/20 e.Assignments0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 9
  // closed e.Blocks0#5 as range 13
  // closed e.Assignments0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 17
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 9
  //DEBUG: e.Blocks0#5: 13
  //DEBUG: e.Assignments0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@0/4 AsIs: (/7 } Tile{ AsIs: e.RAssignments0#1/5 } )/22 Tile{ HalfReuse: # Condition/8 AsIs: (/11 AsIs: e.Result0#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#5/13 AsIs: )/16 AsIs: s.Depth0#4/17 AsIs: (/20 AsIs: e.Assignments0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z2("EnumerateVars-Assignments$2=5@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@19/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@19/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 (/15 Tile{ HalfReuse: & UpdateBorrowedVars@0/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z19("DoMapAccum$1=1@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z19);


static refalrts::FnResult func_gen_DoMapAccum_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 117 elems
  refalrts::Iter context[117];
  refalrts::zeros( context, 117 );
  // </0 & DoMapAccum@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@21/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 (/14 e.new#4/12 )/15 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new#4 as range 12
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum@21/4 s.new#6/5 (/8 e.new#10/16 )/9 t.new#7/10 (/14 e.new#11/18 )/15 t.new#8/22 e.new#9/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.new#10 as range 16
    // closed e.new#11 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    // closed e.new#9 as range 20
    do {
      // </0 & DoMapAccum@21/4 s.new#12/5 (/8 e.new#17/24 )/9 (/10 (/34 e.new#13/32 )/35 (/38 e.new#14/36 )/39 )/11 (/14 e.new#18/26 )/15 t.new#15/22 e.new#16/28 >/1
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = 0;
      context[31] = 0;
      if( ! refalrts::brackets_term( context[30], context[31], context[10] ) )
        continue;
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[30], context[31] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.new#17 as range 24
      // closed e.new#13 as range 32
      // closed e.new#14 as range 36
      // closed e.new#18 as range 26
      // closed e.new#16 as range 28
      do {
        // </0 & DoMapAccum@21/4 s.new#19/5 (/8 e.new#25/40 )/9 (/10 (/34 e.new#20/42 )/35 (/38 e.new#21/44 )/39 )/11 (/14 e.new#26/46 )/15 (/22 s.new#22/52 e.new#23/50 )/23 e.new#24/48 >/1
        context[40] = context[24];
        context[41] = context[25];
        context[42] = context[32];
        context[43] = context[33];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[26];
        context[47] = context[27];
        context[48] = context[28];
        context[49] = context[29];
        context[50] = 0;
        context[51] = 0;
        if( ! refalrts::brackets_term( context[50], context[51], context[22] ) )
          continue;
        // closed e.new#25 as range 40
        // closed e.new#20 as range 42
        // closed e.new#21 as range 44
        // closed e.new#26 as range 46
        // closed e.new#24 as range 48
        if( ! refalrts::svar_left( context[52], context[50], context[51] ) )
          continue;
        // closed e.new#23 as range 50
        do {
          // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/53 )/9 (/10 (/34 e.2#0/55 )/35 (/38 e.4#0/57 )/39 )/11 (/14 e.Scanned#1/59 )/15 (/22 # TkVariable/52 s.Mode#1/65 e.6#0/61 )/23 e.Tail#1/63 >/1
          context[53] = context[40];
          context[54] = context[41];
          context[55] = context[42];
          context[56] = context[43];
          context[57] = context[44];
          context[58] = context[45];
          context[59] = context[46];
          context[60] = context[47];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[48];
          context[64] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[52] ) )
            continue;
          // closed e.LocalVars#2 as range 53
          // closed e.2#0 as range 55
          // closed e.4#0 as range 57
          // closed e.Scanned#1 as range 59
          // closed e.Tail#1 as range 63
          if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
            continue;
          // closed e.6#0 as range 61
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.LocalVars#2: 53
          //DEBUG: e.2#0: 55
          //DEBUG: e.4#0: 57
          //DEBUG: e.Scanned#1: 59
          //DEBUG: e.Tail#1: 63
          //DEBUG: s.Mode#1: 65
          //DEBUG: e.6#0: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/53 AsIs: )/9 AsIs: (/10 } Tile{ AsIs: e.Scanned#1/59 } )/66 Tile{ AsIs: (/34 } Tile{ AsIs: e.Tail#1/63 } )/67 (/68 (/69 Tile{ AsIs: e.2#0/55 } )/70 </71 & CheckBorrowed/72 (/73 Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/57 AsIs: )/39 HalfReuse: (/11 HalfReuse: s.Mode1 #65/14 } e.6#0/61/74 )/76 >/77 Tile{ AsIs: )/15 AsIs: (/22 AsIs: # TkVariable/52 AsIs: s.Mode#1/65 AsIs: e.6#0/61 AsIs: )/23 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_close_bracket(vm, context[67]);
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::alloc_close_bracket(vm, context[70]);
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_name(vm, context[72], functions[efunc_CheckBorrowed]);
          refalrts::alloc_open_bracket(vm, context[73]);
          refalrts::copy_evar(vm, context[74], context[75], context[61], context[62]);
          refalrts::alloc_close_bracket(vm, context[76]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_svar( context[14], context[65] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::link_brackets( context[68], context[15] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[71] );
          refalrts::link_brackets( context[11], context[76] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::link_brackets( context[73], context[35] );
          refalrts::link_brackets( context[69], context[70] );
          refalrts::link_brackets( context[34], context[67] );
          refalrts::link_brackets( context[10], context[66] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[15], context[23] );
          res = refalrts::splice_evar( res, context[76], context[77] );
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[35], context[14] );
          res = refalrts::splice_evar( res, context[70], context[73] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[67], context[69] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_elem( res, context[66] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/53 )/9 (/10 (/34 e.2#0/55 )/35 (/38 e.4#0/57 )/39 )/11 (/14 e.Scanned#1/59 )/15 (/22 # Brackets/52 e.5#0/61 )/23 e.Tail#1/63 >/1
          context[53] = context[40];
          context[54] = context[41];
          context[55] = context[42];
          context[56] = context[43];
          context[57] = context[44];
          context[58] = context[45];
          context[59] = context[46];
          context[60] = context[47];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[48];
          context[64] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[52] ) )
            continue;
          // closed e.LocalVars#2 as range 53
          // closed e.2#0 as range 55
          // closed e.4#0 as range 57
          // closed e.Scanned#1 as range 59
          // closed e.5#0 as range 61
          // closed e.Tail#1 as range 63
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.LocalVars#2: 53
          //DEBUG: e.2#0: 55
          //DEBUG: e.4#0: 57
          //DEBUG: e.Scanned#1: 59
          //DEBUG: e.5#0: 61
          //DEBUG: e.Tail#1: 63

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </65 & DoMapAccum$1=1@21/66 s.MarkupContext0#1/5/67 (/68 e.LocalVars#2/53/69 Tile{ AsIs: )/15 AsIs: (/22 } Tile{ AsIs: e.Scanned#1/59 } )/71 (/72 Tile{ AsIs: e.Tail#1/63 } )/73 </74 & ExtractNested-Result-Term$2=1/75 (/76 Tile{ AsIs: e.2#0/55 } )/77 </78 & ExtractNested-Result=1/79 Tile{ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/53 AsIs: )/9 AsIs: (/10 AsIs: (/34 } Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/57 AsIs: )/39 AsIs: )/11 AsIs: (/14 } Tile{ HalfReuse: )/52 AsIs: e.5#0/61 HalfReuse: >/23 } >/80 >/81 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[65]);
          refalrts::alloc_name(vm, context[66], functions[efunc_gen_DoMapAccum_S1A1Z21]);
          refalrts::copy_stvar(vm, context[67], context[5]);
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::copy_evar(vm, context[69], context[70], context[53], context[54]);
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_bracket(vm, context[72]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_gen_ExtractNestedm_Resultm_Term_S2A1]);
          refalrts::alloc_open_bracket(vm, context[76]);
          refalrts::alloc_close_bracket(vm, context[77]);
          refalrts::alloc_open_call(vm, context[78]);
          refalrts::alloc_name(vm, context[79], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[80]);
          refalrts::alloc_close_call(vm, context[81]);
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_close_call(context[23]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[80] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[14], context[52] );
          refalrts::link_brackets( context[10], context[11] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::link_brackets( context[34], context[35] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[76], context[77] );
          refalrts::link_brackets( context[72], context[73] );
          refalrts::link_brackets( context[22], context[71] );
          refalrts::link_brackets( context[68], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[80], context[81] );
          res = refalrts::splice_evar( res, context[52], context[23] );
          res = refalrts::splice_evar( res, context[35], context[14] );
          res = refalrts::splice_evar( res, context[0], context[34] );
          res = refalrts::splice_evar( res, context[77], context[79] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[73], context[76] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[15], context[22] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[65], context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/53 )/9 (/10 (/34 e.2#0/55 )/35 (/38 e.4#0/57 )/39 )/11 (/14 e.Scanned#1/59 )/15 (/22 # ADT-Brackets/52 (/67 e.7#0/65 )/68 e.6#0/61 )/23 e.Tail#1/63 >/1
          context[53] = context[40];
          context[54] = context[41];
          context[55] = context[42];
          context[56] = context[43];
          context[57] = context[44];
          context[58] = context[45];
          context[59] = context[46];
          context[60] = context[47];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[48];
          context[64] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[52] ) )
            continue;
          context[65] = 0;
          context[66] = 0;
          context[67] = refalrts::brackets_left( context[65], context[66], context[61], context[62] );
          if( ! context[67] )
            continue;
          refalrts::bracket_pointers(context[67], context[68]);
          // closed e.LocalVars#2 as range 53
          // closed e.2#0 as range 55
          // closed e.4#0 as range 57
          // closed e.Scanned#1 as range 59
          // closed e.7#0 as range 65
          // closed e.6#0 as range 61
          // closed e.Tail#1 as range 63
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.LocalVars#2: 53
          //DEBUG: e.2#0: 55
          //DEBUG: e.4#0: 57
          //DEBUG: e.Scanned#1: 59
          //DEBUG: e.7#0: 65
          //DEBUG: e.6#0: 61
          //DEBUG: e.Tail#1: 63

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </69 & DoMapAccum$1=1@21/70 s.MarkupContext0#1/5/71 (/72 e.LocalVars#2/53/73 Tile{ AsIs: )/15 AsIs: (/22 } Tile{ AsIs: e.Scanned#1/59 } Tile{ AsIs: )/23 } (/75 Tile{ AsIs: e.Tail#1/63 } )/76 </77 & ExtractNested-Result-Term$3=1/78 (/79 Tile{ AsIs: e.2#0/55 } Tile{ HalfReuse: )/52 AsIs: (/67 AsIs: e.7#0/65 AsIs: )/68 } </80 & ExtractNested-Result=1/81 Tile{ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/53 AsIs: )/9 AsIs: (/10 AsIs: (/34 } Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/57 AsIs: )/39 AsIs: )/11 AsIs: (/14 } )/82 Tile{ AsIs: e.6#0/61 } >/83 >/84 >/85 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_gen_DoMapAccum_S1A1Z21]);
          refalrts::copy_stvar(vm, context[71], context[5]);
          refalrts::alloc_open_bracket(vm, context[72]);
          refalrts::copy_evar(vm, context[73], context[74], context[53], context[54]);
          refalrts::alloc_open_bracket(vm, context[75]);
          refalrts::alloc_close_bracket(vm, context[76]);
          refalrts::alloc_open_call(vm, context[77]);
          refalrts::alloc_name(vm, context[78], functions[efunc_gen_ExtractNestedm_Resultm_Term_S3A1]);
          refalrts::alloc_open_bracket(vm, context[79]);
          refalrts::alloc_open_call(vm, context[80]);
          refalrts::alloc_name(vm, context[81], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_bracket(vm, context[82]);
          refalrts::alloc_close_call(vm, context[83]);
          refalrts::alloc_close_call(vm, context[84]);
          refalrts::alloc_close_call(vm, context[85]);
          refalrts::reinit_close_bracket(context[52]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[85] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[84] );
          refalrts::push_stack( vm, context[80] );
          refalrts::push_stack( vm, context[83] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[14], context[82] );
          refalrts::link_brackets( context[10], context[11] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::link_brackets( context[34], context[35] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[67], context[68] );
          refalrts::link_brackets( context[79], context[52] );
          refalrts::link_brackets( context[75], context[76] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::link_brackets( context[72], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[83], context[85] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_elem( res, context[82] );
          res = refalrts::splice_evar( res, context[35], context[14] );
          res = refalrts::splice_evar( res, context[0], context[34] );
          res = refalrts::splice_evar( res, context[80], context[81] );
          res = refalrts::splice_evar( res, context[52], context[68] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[76], context[79] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[75] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[15], context[22] );
          res = refalrts::splice_evar( res, context[73], context[74] );
          res = refalrts::splice_evar( res, context[69], context[72] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/53 )/9 (/10 (/34 e.2#0/55 )/35 (/38 e.4#0/57 )/39 )/11 (/14 e.Scanned#1/59 )/15 (/22 # CallBrackets/52 e.5#0/61 )/23 e.Tail#1/63 >/1
          context[53] = context[40];
          context[54] = context[41];
          context[55] = context[42];
          context[56] = context[43];
          context[57] = context[44];
          context[58] = context[45];
          context[59] = context[46];
          context[60] = context[47];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[48];
          context[64] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[52] ) )
            continue;
          // closed e.LocalVars#2 as range 53
          // closed e.2#0 as range 55
          // closed e.4#0 as range 57
          // closed e.Scanned#1 as range 59
          // closed e.5#0 as range 61
          // closed e.Tail#1 as range 63
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.LocalVars#2: 53
          //DEBUG: e.2#0: 55
          //DEBUG: e.4#0: 57
          //DEBUG: e.Scanned#1: 59
          //DEBUG: e.5#0: 61
          //DEBUG: e.Tail#1: 63

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </65 & DoMapAccum$1=1@21/66 s.MarkupContext0#1/5/67 (/68 e.LocalVars#2/53/69 Tile{ AsIs: )/15 AsIs: (/22 } Tile{ AsIs: e.Scanned#1/59 } )/71 (/72 Tile{ AsIs: e.Tail#1/63 } )/73 </74 & ExtractNested-Result-Term$4=1/75 (/76 Tile{ AsIs: e.2#0/55 } )/77 </78 & ExtractNested-Result=1/79 Tile{ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/53 AsIs: )/9 AsIs: (/10 AsIs: (/34 } Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/57 AsIs: )/39 AsIs: )/11 AsIs: (/14 } Tile{ HalfReuse: )/52 AsIs: e.5#0/61 HalfReuse: >/23 } >/80 >/81 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[65]);
          refalrts::alloc_name(vm, context[66], functions[efunc_gen_DoMapAccum_S1A1Z21]);
          refalrts::copy_stvar(vm, context[67], context[5]);
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::copy_evar(vm, context[69], context[70], context[53], context[54]);
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_bracket(vm, context[72]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_gen_ExtractNestedm_Resultm_Term_S4A1]);
          refalrts::alloc_open_bracket(vm, context[76]);
          refalrts::alloc_close_bracket(vm, context[77]);
          refalrts::alloc_open_call(vm, context[78]);
          refalrts::alloc_name(vm, context[79], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[80]);
          refalrts::alloc_close_call(vm, context[81]);
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_close_call(context[23]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[80] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[14], context[52] );
          refalrts::link_brackets( context[10], context[11] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::link_brackets( context[34], context[35] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[76], context[77] );
          refalrts::link_brackets( context[72], context[73] );
          refalrts::link_brackets( context[22], context[71] );
          refalrts::link_brackets( context[68], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[80], context[81] );
          res = refalrts::splice_evar( res, context[52], context[23] );
          res = refalrts::splice_evar( res, context[35], context[14] );
          res = refalrts::splice_evar( res, context[0], context[34] );
          res = refalrts::splice_evar( res, context[77], context[79] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[73], context[76] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[15], context[22] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[65], context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@21/4 s.new#27/5 (/8 e.new#33/53 )/9 (/10 (/34 e.new#28/55 )/35 (/38 e.new#29/57 )/39 )/11 (/14 e.new#34/59 )/15 (/22 # Closure/52 (/67 e.new#30/65 )/68 e.new#31/61 )/23 e.new#32/63 >/1
        context[53] = context[40];
        context[54] = context[41];
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[44];
        context[58] = context[45];
        context[59] = context[46];
        context[60] = context[47];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[48];
        context[64] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[52] ) )
          continue;
        context[65] = 0;
        context[66] = 0;
        context[67] = refalrts::brackets_left( context[65], context[66], context[61], context[62] );
        if( ! context[67] )
          continue;
        refalrts::bracket_pointers(context[67], context[68]);
        // closed e.new#33 as range 53
        // closed e.new#28 as range 55
        // closed e.new#29 as range 57
        // closed e.new#34 as range 59
        // closed e.new#30 as range 65
        // closed e.new#31 as range 61
        // closed e.new#32 as range 63
        do {
          // </0 & DoMapAccum@21/4 s.new#35/5 (/8 e.new#42/69 )/9 (/10 (/34 e.new#36/71 )/35 (/38 e.new#37/73 )/39 )/11 (/14 e.new#43/75 )/15 (/22 # Closure/52 (/67 e.new#40/77 )/68 s.new#38/83 e.new#39/79 )/23 e.new#41/81 >/1
          context[69] = context[53];
          context[70] = context[54];
          context[71] = context[55];
          context[72] = context[56];
          context[73] = context[57];
          context[74] = context[58];
          context[75] = context[59];
          context[76] = context[60];
          context[77] = context[65];
          context[78] = context[66];
          context[79] = context[61];
          context[80] = context[62];
          context[81] = context[63];
          context[82] = context[64];
          // closed e.new#42 as range 69
          // closed e.new#36 as range 71
          // closed e.new#37 as range 73
          // closed e.new#43 as range 75
          // closed e.new#40 as range 77
          // closed e.new#41 as range 81
          if( ! refalrts::svar_left( context[83], context[79], context[80] ) )
            continue;
          // closed e.new#39 as range 79
          do {
            // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/84 )/9 (/10 (/34 e.2#0/86 )/35 (/38 e.4#0/88 )/39 )/11 (/14 e.Scanned#1/90 )/15 (/22 # Closure/52 (/67 e.7#0/92 )/68 # Sentences/83 e.#0/94 )/23 e.Tail#1/96 >/1
            context[84] = context[69];
            context[85] = context[70];
            context[86] = context[71];
            context[87] = context[72];
            context[88] = context[73];
            context[89] = context[74];
            context[90] = context[75];
            context[91] = context[76];
            context[92] = context[77];
            context[93] = context[78];
            context[94] = context[79];
            context[95] = context[80];
            context[96] = context[81];
            context[97] = context[82];
            if( ! refalrts::ident_term( identifiers[ident_Sentences], context[83] ) )
              continue;
            // closed e.LocalVars#2 as range 84
            // closed e.2#0 as range 86
            // closed e.4#0 as range 88
            // closed e.Scanned#1 as range 90
            // closed e.7#0 as range 92
            // closed e.#0 as range 94
            // closed e.Tail#1 as range 96
            //DEBUG: s.MarkupContext0#1: 5
            //DEBUG: e.LocalVars#2: 84
            //DEBUG: e.2#0: 86
            //DEBUG: e.4#0: 88
            //DEBUG: e.Scanned#1: 90
            //DEBUG: e.7#0: 92
            //DEBUG: e.#0: 94
            //DEBUG: e.Tail#1: 96

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/84 AsIs: )/9 AsIs: (/10 } Tile{ AsIs: e.Scanned#1/90 } )/98 Tile{ AsIs: (/34 } Tile{ AsIs: e.Tail#1/96 } Tile{ AsIs: )/15 HalfReuse: </22 HalfReuse: & ExtractNested-Result-Term$5=1@1/52 AsIs: (/67 } Tile{ AsIs: e.2#0/86 } )/99 (/100 Tile{ AsIs: e.7#0/92 } Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/88 AsIs: )/39 HalfReuse: s.MarkupContext01 #5/11 HalfReuse: </14 } & ExtractNestedRec$1=1/101 </102 & DoMapAccum@11/103 s.MarkupContext0#1/5/104 (/105 e.LocalVars#2/84/106 )/108 (/109 (/110 )/111 (/112 )/113 )/114 Tile{ HalfReuse: (/68 HalfReuse: )/83 AsIs: e.#0/94 HalfReuse: >/23 } >/115 >/116 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[98]);
            refalrts::alloc_close_bracket(vm, context[99]);
            refalrts::alloc_open_bracket(vm, context[100]);
            refalrts::alloc_name(vm, context[101], functions[efunc_gen_ExtractNestedRec_S1A1]);
            refalrts::alloc_open_call(vm, context[102]);
            refalrts::alloc_name(vm, context[103], functions[efunc_gen_DoMapAccum_Z11]);
            refalrts::copy_stvar(vm, context[104], context[5]);
            refalrts::alloc_open_bracket(vm, context[105]);
            refalrts::copy_evar(vm, context[106], context[107], context[84], context[85]);
            refalrts::alloc_close_bracket(vm, context[108]);
            refalrts::alloc_open_bracket(vm, context[109]);
            refalrts::alloc_open_bracket(vm, context[110]);
            refalrts::alloc_close_bracket(vm, context[111]);
            refalrts::alloc_open_bracket(vm, context[112]);
            refalrts::alloc_close_bracket(vm, context[113]);
            refalrts::alloc_close_bracket(vm, context[114]);
            refalrts::alloc_close_call(vm, context[115]);
            refalrts::alloc_close_call(vm, context[116]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
            refalrts::reinit_open_call(context[22]);
            refalrts::reinit_name(context[52], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z1]);
            refalrts::reinit_svar( context[11], context[5] );
            refalrts::reinit_open_call(context[14]);
            refalrts::reinit_open_bracket(context[68]);
            refalrts::reinit_close_bracket(context[83]);
            refalrts::reinit_close_call(context[23]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[116] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[115] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[102] );
            refalrts::link_brackets( context[68], context[83] );
            refalrts::link_brackets( context[109], context[114] );
            refalrts::link_brackets( context[112], context[113] );
            refalrts::link_brackets( context[110], context[111] );
            refalrts::link_brackets( context[105], context[108] );
            refalrts::link_brackets( context[38], context[39] );
            refalrts::link_brackets( context[100], context[35] );
            refalrts::link_brackets( context[67], context[99] );
            refalrts::link_brackets( context[34], context[15] );
            refalrts::link_brackets( context[10], context[98] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[115], context[116] );
            res = refalrts::splice_evar( res, context[68], context[23] );
            res = refalrts::splice_evar( res, context[101], context[114] );
            res = refalrts::splice_evar( res, context[35], context[14] );
            res = refalrts::splice_evar( res, context[92], context[93] );
            res = refalrts::splice_evar( res, context[99], context[100] );
            res = refalrts::splice_evar( res, context[86], context[87] );
            res = refalrts::splice_evar( res, context[15], context[67] );
            res = refalrts::splice_evar( res, context[96], context[97] );
            res = refalrts::splice_elem( res, context[34] );
            res = refalrts::splice_elem( res, context[98] );
            res = refalrts::splice_evar( res, context[90], context[91] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/84 )/9 (/10 (/34 e.2#0/86 )/35 (/38 e.4#0/88 )/39 )/11 (/14 e.Scanned#1/90 )/15 (/22 # Closure/52 (/67 e.7#0/92 )/68 # NativeBody/83 t.0#0/98 e.0#0/94 )/23 e.Tail#1/96 >/1
            context[84] = context[69];
            context[85] = context[70];
            context[86] = context[71];
            context[87] = context[72];
            context[88] = context[73];
            context[89] = context[74];
            context[90] = context[75];
            context[91] = context[76];
            context[92] = context[77];
            context[93] = context[78];
            context[94] = context[79];
            context[95] = context[80];
            context[96] = context[81];
            context[97] = context[82];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[83] ) )
              continue;
            // closed e.LocalVars#2 as range 84
            // closed e.2#0 as range 86
            // closed e.4#0 as range 88
            // closed e.Scanned#1 as range 90
            // closed e.7#0 as range 92
            // closed e.Tail#1 as range 96
            context[99] = refalrts::tvar_left( context[98], context[94], context[95] );
            if( ! context[99] )
              continue;
            // closed e.0#0 as range 94
            //DEBUG: s.MarkupContext0#1: 5
            //DEBUG: e.LocalVars#2: 84
            //DEBUG: e.2#0: 86
            //DEBUG: e.4#0: 88
            //DEBUG: e.Scanned#1: 90
            //DEBUG: e.7#0: 92
            //DEBUG: e.Tail#1: 96
            //DEBUG: t.0#0: 98
            //DEBUG: e.0#0: 94

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/84 AsIs: )/9 AsIs: (/10 AsIs: (/34 AsIs: e.2#0/86 HalfReuse: (/35 HalfReuse: # Function/38 } Tile{ Reuse: # GN-Local/52 AsIs: (/67 AsIs: e.7#0/92 AsIs: )/68 AsIs: # NativeBody/83 AsIs: t.0#0/98 AsIs: e.0#0/94 AsIs: )/23 } )/100 (/101 Tile{ AsIs: e.4#0/88 } Tile{ AsIs: )/39 AsIs: )/11 AsIs: (/14 AsIs: e.Scanned#1/90 HalfReuse: (/15 HalfReuse: # Symbol/22 } # Name/102 e.7#0/92/103 )/105 )/106 Tile{ AsIs: e.Tail#1/96 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[100]);
            refalrts::alloc_open_bracket(vm, context[101]);
            refalrts::alloc_ident(vm, context[102], identifiers[ident_Name]);
            refalrts::copy_evar(vm, context[103], context[104], context[92], context[93]);
            refalrts::alloc_close_bracket(vm, context[105]);
            refalrts::alloc_close_bracket(vm, context[106]);
            refalrts::reinit_open_bracket(context[35]);
            refalrts::reinit_ident(context[38], identifiers[ident_Function]);
            refalrts::update_ident(context[52], identifiers[ident_GNm_Local]);
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[22], identifiers[ident_Symbol]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[106] );
            refalrts::link_brackets( context[15], context[105] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::link_brackets( context[101], context[39] );
            refalrts::link_brackets( context[34], context[100] );
            refalrts::link_brackets( context[35], context[23] );
            refalrts::link_brackets( context[67], context[68] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[96], context[97] );
            res = refalrts::splice_evar( res, context[102], context[106] );
            res = refalrts::splice_evar( res, context[39], context[22] );
            res = refalrts::splice_evar( res, context[88], context[89] );
            res = refalrts::splice_evar( res, context[100], context[101] );
            res = refalrts::splice_evar( res, context[52], context[23] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/84 )/9 (/10 (/34 e.2#0/86 )/35 (/38 e.4#0/88 )/39 )/11 (/14 e.Scanned#1/90 )/15 (/22 # Closure/52 (/67 e.7#0/92 )/68 # Metatable/83 e.#0/94 )/23 e.Tail#1/96 >/1
          context[84] = context[69];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[72];
          context[88] = context[73];
          context[89] = context[74];
          context[90] = context[75];
          context[91] = context[76];
          context[92] = context[77];
          context[93] = context[78];
          context[94] = context[79];
          context[95] = context[80];
          context[96] = context[81];
          context[97] = context[82];
          if( ! refalrts::ident_term( identifiers[ident_Metatable], context[83] ) )
            continue;
          // closed e.LocalVars#2 as range 84
          // closed e.2#0 as range 86
          // closed e.4#0 as range 88
          // closed e.Scanned#1 as range 90
          // closed e.7#0 as range 92
          // closed e.#0 as range 94
          // closed e.Tail#1 as range 96
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.LocalVars#2: 84
          //DEBUG: e.2#0: 86
          //DEBUG: e.4#0: 88
          //DEBUG: e.Scanned#1: 90
          //DEBUG: e.7#0: 92
          //DEBUG: e.#0: 94
          //DEBUG: e.Tail#1: 96

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/84 AsIs: )/9 AsIs: (/10 } Tile{ AsIs: e.Scanned#1/90 } Tile{ AsIs: )/35 } Tile{ AsIs: (/34 } Tile{ AsIs: e.Tail#1/96 } )/98 </99 & ExtractNested-Result-Term$5=2@1/100 (/101 Tile{ AsIs: e.2#0/86 } Tile{ AsIs: )/15 HalfReuse: </22 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1@1/52 AsIs: (/67 AsIs: e.7#0/92 AsIs: )/68 HalfReuse: (/83 AsIs: e.#0/94 AsIs: )/23 } Tile{ AsIs: (/38 AsIs: e.4#0/88 AsIs: )/39 HalfReuse: </11 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1:1*2/14 } (/102 e.7#0/92/103 )/105 # Metatable/106 e.#0/94/107 >/109 >/110 >/111 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[98]);
          refalrts::alloc_open_call(vm, context[99]);
          refalrts::alloc_name(vm, context[100], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z1]);
          refalrts::alloc_open_bracket(vm, context[101]);
          refalrts::alloc_open_bracket(vm, context[102]);
          refalrts::copy_evar(vm, context[103], context[104], context[92], context[93]);
          refalrts::alloc_close_bracket(vm, context[105]);
          refalrts::alloc_ident(vm, context[106], identifiers[ident_Metatable]);
          refalrts::copy_evar(vm, context[107], context[108], context[94], context[95]);
          refalrts::alloc_close_call(vm, context[109]);
          refalrts::alloc_close_call(vm, context[110]);
          refalrts::alloc_close_call(vm, context[111]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
          refalrts::reinit_open_call(context[22]);
          refalrts::reinit_name(context[52], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1]);
          refalrts::reinit_open_bracket(context[83]);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[111] );
          refalrts::push_stack( vm, context[99] );
          refalrts::push_stack( vm, context[110] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[109] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[102], context[105] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::link_brackets( context[83], context[23] );
          refalrts::link_brackets( context[67], context[68] );
          refalrts::link_brackets( context[101], context[15] );
          refalrts::link_brackets( context[34], context[98] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[102], context[111] );
          res = refalrts::splice_evar( res, context[38], context[14] );
          res = refalrts::splice_evar( res, context[15], context[23] );
          res = refalrts::splice_evar( res, context[86], context[87] );
          res = refalrts::splice_evar( res, context[98], context[101] );
          res = refalrts::splice_evar( res, context[96], context[97] );
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[90], context[91] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/69 )/9 (/10 (/34 e.2#0/71 )/35 (/38 e.4#0/73 )/39 )/11 (/14 e.Scanned#1/75 )/15 (/22 # Closure/52 (/67 e.7#0/77 )/68 e.6#0/79 )/23 e.Tail#1/81 >/1
        context[69] = context[53];
        context[70] = context[54];
        context[71] = context[55];
        context[72] = context[56];
        context[73] = context[57];
        context[74] = context[58];
        context[75] = context[59];
        context[76] = context[60];
        context[77] = context[65];
        context[78] = context[66];
        context[79] = context[61];
        context[80] = context[62];
        context[81] = context[63];
        context[82] = context[64];
        // closed e.LocalVars#2 as range 69
        // closed e.2#0 as range 71
        // closed e.4#0 as range 73
        // closed e.Scanned#1 as range 75
        // closed e.7#0 as range 77
        // closed e.6#0 as range 79
        // closed e.Tail#1 as range 81
        //DEBUG: s.MarkupContext0#1: 5
        //DEBUG: e.LocalVars#2: 69
        //DEBUG: e.2#0: 71
        //DEBUG: e.4#0: 73
        //DEBUG: e.Scanned#1: 75
        //DEBUG: e.7#0: 77
        //DEBUG: e.6#0: 79
        //DEBUG: e.Tail#1: 81

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/69 AsIs: )/9 AsIs: (/10 } Tile{ AsIs: e.Scanned#1/75 } )/83 Tile{ AsIs: (/34 } Tile{ AsIs: e.Tail#1/81 } Tile{ AsIs: )/15 HalfReuse: </22 HalfReuse: & ExtractNested-Result-Term$5=1@1/52 AsIs: (/67 } Tile{ AsIs: e.2#0/71 } )/84 (/85 Tile{ AsIs: e.7#0/77 } Tile{ AsIs: )/35 AsIs: (/38 AsIs: e.4#0/73 AsIs: )/39 HalfReuse: s.MarkupContext01 #5/11 HalfReuse: </14 } & ExtractNestedRec*3/86 s.MarkupContext0#1/5/87 (/88 e.LocalVars#2/69/89 Tile{ AsIs: )/68 AsIs: e.6#0/79 HalfReuse: >/23 } >/91 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[83]);
        refalrts::alloc_close_bracket(vm, context[84]);
        refalrts::alloc_open_bracket(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_gen_ExtractNestedRec_D3]);
        refalrts::copy_stvar(vm, context[87], context[5]);
        refalrts::alloc_open_bracket(vm, context[88]);
        refalrts::copy_evar(vm, context[89], context[90], context[69], context[70]);
        refalrts::alloc_close_call(vm, context[91]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
        refalrts::reinit_open_call(context[22]);
        refalrts::reinit_name(context[52], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z1]);
        refalrts::reinit_svar( context[11], context[5] );
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_close_call(context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[91] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[88], context[68] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[85], context[35] );
        refalrts::link_brackets( context[67], context[84] );
        refalrts::link_brackets( context[34], context[15] );
        refalrts::link_brackets( context[10], context[83] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[91] );
        res = refalrts::splice_evar( res, context[68], context[23] );
        res = refalrts::splice_evar( res, context[89], context[90] );
        res = refalrts::splice_evar( res, context[86], context[88] );
        res = refalrts::splice_evar( res, context[35], context[14] );
        res = refalrts::splice_evar( res, context[77], context[78] );
        res = refalrts::splice_evar( res, context[84], context[85] );
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[15], context[67] );
        res = refalrts::splice_evar( res, context[81], context[82] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_elem( res, context[83] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/40 )/9 (/10 (/34 e.1#0/42 )/35 (/38 e.3#0/44 )/39 )/11 (/14 e.Scanned#1/46 )/15 t.Next#1/22 e.Tail#1/48 >/1
      context[40] = context[24];
      context[41] = context[25];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[26];
      context[47] = context[27];
      context[48] = context[28];
      context[49] = context[29];
      // closed e.LocalVars#2 as range 40
      // closed e.1#0 as range 42
      // closed e.3#0 as range 44
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.Next#1: 22
      //DEBUG: s.MarkupContext0#1: 5
      //DEBUG: e.LocalVars#2: 40
      //DEBUG: e.1#0: 42
      //DEBUG: e.3#0: 44
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/40 AsIs: )/9 AsIs: (/10 AsIs: (/34 AsIs: e.1#0/42 AsIs: )/35 AsIs: (/38 AsIs: e.3#0/44 AsIs: )/39 AsIs: )/11 AsIs: (/14 } Tile{ AsIs: e.Scanned#1/46 } Tile{ AsIs: t.Next#1/22 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/24 )/9 t.Acc#1/10 (/14 e.Scanned#1/26 )/15 t.Next#1/22 e.Tail#1/28 >/1
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    // closed e.LocalVars#2 as range 24
    // closed e.Scanned#1 as range 26
    // closed e.Tail#1 as range 28
    //DEBUG: t.Acc#1: 10
    //DEBUG: t.Next#1: 22
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.LocalVars#2: 24
    //DEBUG: e.Scanned#1: 26
    //DEBUG: e.Tail#1: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/24 AsIs: )/9 } Tile{ AsIs: (/14 AsIs: e.Scanned#1/26 AsIs: )/15 } (/30 Tile{ AsIs: e.Tail#1/28 } )/31 </32 & ExtractNested-Result-Term*6/33 s.MarkupContext0#1/5/34 (/35 )/36 (/37 e.LocalVars#2/24/38 )/40 Tile{ AsIs: t.Acc#1/10 } Tile{ AsIs: t.Next#1/22 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractNestedm_Resultm_Term_D6]);
    refalrts::copy_stvar(vm, context[34], context[5]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[24], context[25]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[31], context[40] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/16 )/9 t.Acc#1/10 (/14 e.Scanned#1/18 )/15 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.LocalVars#2 as range 16
    // closed e.Scanned#1 as range 18
    //DEBUG: t.Acc#1: 10
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.LocalVars#2: 16
    //DEBUG: e.Scanned#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/16 )/9 {REMOVED TILE} (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/10 } Tile{ AsIs: e.Scanned#1/18 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/6 )/9 t.acc#0/10 (/14 e.scanned#0/12 )/15 e.items#0/2 >/1
  // closed e.LocalVars#2 as range 6
  // closed e.scanned#0 as range 12
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 10
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.LocalVars#2: 6
  //DEBUG: e.scanned#0: 12
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </16 & DoMapAccum@0/17 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 } )/18 (/19 Tile{ AsIs: e.LocalVars#2/6 } )/20 Tile{ AsIs: )/9 AsIs: t.acc#0/10 AsIs: (/14 AsIs: e.scanned#0/12 AsIs: )/15 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[0], context[9] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[8], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z21("DoMapAccum@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z21);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & ExtractNested-Conditions$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=1@1/4 (/7 e.ConditionName0#1/22 )/8 (/11 e.Pattern0#1/24 )/12 s.MarkupContext0#1/13 (/16 e.Conditions0#1/26 )/17 (/20 e.LocalVars#2/28 )/21 (/34 e.ResultNestedFuncs#2/32 )/35 (/38 e.BorrowedVars#2/36 )/39 e.Result#2/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[30], context[31] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    // closed e.ConditionName0#1 as range 22
    // closed e.Pattern0#1 as range 24
    // closed e.Conditions0#1 as range 26
    // closed e.LocalVars#2 as range 28
    // closed e.ResultNestedFuncs#2 as range 32
    // closed e.BorrowedVars#2 as range 36
    // closed e.Result#2 as range 30
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.ConditionName0#1: 22
    //DEBUG: e.Pattern0#1: 24
    //DEBUG: e.Conditions0#1: 26
    //DEBUG: e.LocalVars#2: 28
    //DEBUG: e.ResultNestedFuncs#2: 32
    //DEBUG: e.BorrowedVars#2: 36
    //DEBUG: e.Result#2: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=2@1/4 AsIs: (/7 } Tile{ AsIs: e.ResultNestedFuncs#2/32 } )/40 (/41 Tile{ AsIs: e.ConditionName0#1/22 } )/42 (/43 Tile{ AsIs: e.Result#2/30 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/24 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 AsIs: e.Conditions0#1/26 AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#2/28 AsIs: )/21 HalfReuse: </34 } Tile{ HalfReuse: & MapAccum@2/35 AsIs: (/38 AsIs: e.BorrowedVars#2/36 AsIs: )/39 } </44 & Uniq/45 </46 & ExtractAllVars/47 e.Pattern0#1/24/48 >/50 >/51 >/52 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_Uniq]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_ExtractAllVars]);
    refalrts::copy_evar(vm, context[48], context[49], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A2Z1]);
    refalrts::reinit_open_call(context[34]);
    refalrts::reinit_name(context[35], functions[efunc_gen_MapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[43], context[8] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[44], context[52] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    res = refalrts::splice_evar( res, context[8], context[34] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=1@1/4 (/7 e.ConditionName0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 s.MarkupContext0#1/13 (/16 e.Conditions0#1/14 )/17 (/20 e.LocalVars#2/18 )/21 e.dyn#0/2 >/1
  // closed e.ConditionName0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Conditions0#1 as range 14
  // closed e.LocalVars#2 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.ConditionName0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Conditions0#1: 14
  //DEBUG: e.LocalVars#2: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=1@0/4 AsIs: (/7 AsIs: e.ConditionName0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } )/22 (/23 Tile{ AsIs: e.Conditions0#1/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars#2/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[23], context[17] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A1Z1("ExtractNested-Conditions$1=1@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum$1=1@20/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@20/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum$1=1@20/4 (/7 e.ScopeVars#1/21 )/8 (/11 e.LocalVars#1/23 )/12 (/15 e.Scanned0#1/25 )/16 (/19 e.Tail0#1/27 )/20 t.Acc#2/31 e.StepScanned#2/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.ScopeVars#1 as range 21
    // closed e.LocalVars#1 as range 23
    // closed e.Scanned0#1 as range 25
    // closed e.Tail0#1 as range 27
    context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
    if( ! context[32] )
      continue;
    // closed e.StepScanned#2 as range 29
    //DEBUG: e.ScopeVars#1: 21
    //DEBUG: e.LocalVars#1: 23
    //DEBUG: e.Scanned0#1: 25
    //DEBUG: e.Tail0#1: 27
    //DEBUG: t.Acc#2: 31
    //DEBUG: e.StepScanned#2: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@20/4 AsIs: (/7 AsIs: e.ScopeVars#1/21 AsIs: )/8 AsIs: (/11 AsIs: e.LocalVars#1/23 AsIs: )/12 } Tile{ AsIs: t.Acc#2/31 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Scanned0#1/25 } Tile{ AsIs: e.StepScanned#2/29 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Tail0#1/27 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@20/4 (/7 e.ScopeVars#1/5 )/8 (/11 e.LocalVars#1/9 )/12 (/15 e.Scanned0#1/13 )/16 (/19 e.Tail0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.ScopeVars#1 as range 5
  // closed e.LocalVars#1 as range 9
  // closed e.Scanned0#1 as range 13
  // closed e.Tail0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.ScopeVars#1: 5
  //DEBUG: e.LocalVars#1: 9
  //DEBUG: e.Scanned0#1: 13
  //DEBUG: e.Tail0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 AsIs: (/7 } Tile{ HalfReuse: & UpdateBorrowedVars@0/11 } Tile{ AsIs: e.ScopeVars#1/5 } Tile{ AsIs: e.LocalVars#1/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Scanned0#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Tail0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_name(context[11], functions[efunc_gen_UpdateBorrowedVars_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z20("DoMapAccum$1=1@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z20);


static refalrts::FnResult func_gen_DoMapAccum_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 161 elems
  refalrts::Iter context[161];
  refalrts::zeros( context, 161 );
  // </0 & DoMapAccum@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@22/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 t.new#5/18 (/22 e.new#6/20 )/23 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new#6 as range 20
  // closed e.new#7 as range 2
  do {
    // </0 & DoMapAccum@22/4 s.new#8/5 (/8 e.new#12/24 )/9 (/12 e.new#13/26 )/13 (/16 e.new#14/28 )/17 t.new#9/18 (/22 e.new#15/30 )/23 t.new#10/34 e.new#11/32 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[10];
    context[27] = context[11];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.new#12 as range 24
    // closed e.new#13 as range 26
    // closed e.new#14 as range 28
    // closed e.new#15 as range 30
    context[35] = refalrts::tvar_left( context[34], context[32], context[33] );
    if( ! context[35] )
      continue;
    // closed e.new#11 as range 32
    do {
      // </0 & DoMapAccum@22/4 s.new#16/5 (/8 e.new#21/36 )/9 (/12 e.new#22/38 )/13 (/16 e.new#23/40 )/17 (/18 (/50 e.new#17/48 )/51 (/54 e.new#18/52 )/55 )/19 (/22 e.new#24/42 )/23 t.new#19/34 e.new#20/44 >/1
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = 0;
      context[47] = 0;
      if( ! refalrts::brackets_term( context[46], context[47], context[18] ) )
        continue;
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[46], context[47] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      if( ! refalrts::empty_seq( context[46], context[47] ) )
        continue;
      // closed e.new#21 as range 36
      // closed e.new#22 as range 38
      // closed e.new#23 as range 40
      // closed e.new#17 as range 48
      // closed e.new#18 as range 52
      // closed e.new#24 as range 42
      // closed e.new#20 as range 44
      do {
        // </0 & DoMapAccum@22/4 s.new#25/5 (/8 e.new#31/56 )/9 (/12 e.new#32/58 )/13 (/16 e.new#33/60 )/17 (/18 (/50 e.new#26/62 )/51 (/54 e.new#27/64 )/55 )/19 (/22 e.new#34/66 )/23 (/34 s.new#28/72 e.new#29/70 )/35 e.new#30/68 >/1
        context[56] = context[36];
        context[57] = context[37];
        context[58] = context[38];
        context[59] = context[39];
        context[60] = context[40];
        context[61] = context[41];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[52];
        context[65] = context[53];
        context[66] = context[42];
        context[67] = context[43];
        context[68] = context[44];
        context[69] = context[45];
        context[70] = 0;
        context[71] = 0;
        if( ! refalrts::brackets_term( context[70], context[71], context[34] ) )
          continue;
        // closed e.new#31 as range 56
        // closed e.new#32 as range 58
        // closed e.new#33 as range 60
        // closed e.new#26 as range 62
        // closed e.new#27 as range 64
        // closed e.new#34 as range 66
        // closed e.new#30 as range 68
        if( ! refalrts::svar_left( context[72], context[70], context[71] ) )
          continue;
        // closed e.new#29 as range 70
        do {
          // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/73 )/9 (/12 e.LocalVars0#1/75 )/13 (/16 e.LocalVars#2/77 )/17 (/18 (/50 e.2#0/79 )/51 (/54 e.4#0/81 )/55 )/19 (/22 e.Scanned#1/83 )/23 (/34 # TkVariable/72 s.Mode#1/89 e.6#0/85 )/35 e.Tail#1/87 >/1
          context[73] = context[56];
          context[74] = context[57];
          context[75] = context[58];
          context[76] = context[59];
          context[77] = context[60];
          context[78] = context[61];
          context[79] = context[62];
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[68];
          context[88] = context[69];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[72] ) )
            continue;
          // closed e.ScopeVars0#1 as range 73
          // closed e.LocalVars0#1 as range 75
          // closed e.LocalVars#2 as range 77
          // closed e.2#0 as range 79
          // closed e.4#0 as range 81
          // closed e.Scanned#1 as range 83
          // closed e.Tail#1 as range 87
          if( ! refalrts::svar_left( context[89], context[85], context[86] ) )
            continue;
          // closed e.6#0 as range 85
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.ScopeVars0#1: 73
          //DEBUG: e.LocalVars0#1: 75
          //DEBUG: e.LocalVars#2: 77
          //DEBUG: e.2#0: 79
          //DEBUG: e.4#0: 81
          //DEBUG: e.Scanned#1: 83
          //DEBUG: e.Tail#1: 87
          //DEBUG: s.Mode#1: 89
          //DEBUG: e.6#0: 85

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/73 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/75 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/77 AsIs: )/17 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/83 } )/90 Tile{ AsIs: (/50 } Tile{ AsIs: e.Tail#1/87 } )/91 (/92 (/93 Tile{ AsIs: e.2#0/79 } )/94 </95 & CheckBorrowed/96 (/97 e.ScopeVars0#1/73/98 e.LocalVars0#1/75/100 Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/81 AsIs: )/55 HalfReuse: (/19 HalfReuse: s.Mode1 #89/22 } e.6#0/85/102 )/104 >/105 Tile{ AsIs: )/23 AsIs: (/34 AsIs: # TkVariable/72 AsIs: s.Mode#1/89 AsIs: e.6#0/85 AsIs: )/35 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_close_bracket(vm, context[91]);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::alloc_open_bracket(vm, context[93]);
          refalrts::alloc_close_bracket(vm, context[94]);
          refalrts::alloc_open_call(vm, context[95]);
          refalrts::alloc_name(vm, context[96], functions[efunc_CheckBorrowed]);
          refalrts::alloc_open_bracket(vm, context[97]);
          refalrts::copy_evar(vm, context[98], context[99], context[73], context[74]);
          refalrts::copy_evar(vm, context[100], context[101], context[75], context[76]);
          refalrts::copy_evar(vm, context[102], context[103], context[85], context[86]);
          refalrts::alloc_close_bracket(vm, context[104]);
          refalrts::alloc_close_call(vm, context[105]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
          refalrts::reinit_open_bracket(context[19]);
          refalrts::reinit_svar( context[22], context[89] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[34], context[35] );
          refalrts::link_brackets( context[92], context[23] );
          refalrts::push_stack( vm, context[105] );
          refalrts::push_stack( vm, context[95] );
          refalrts::link_brackets( context[19], context[104] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[97], context[51] );
          refalrts::link_brackets( context[93], context[94] );
          refalrts::link_brackets( context[50], context[91] );
          refalrts::link_brackets( context[18], context[90] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[23], context[35] );
          res = refalrts::splice_evar( res, context[104], context[105] );
          res = refalrts::splice_evar( res, context[102], context[103] );
          res = refalrts::splice_evar( res, context[51], context[22] );
          res = refalrts::splice_evar( res, context[100], context[101] );
          res = refalrts::splice_evar( res, context[98], context[99] );
          res = refalrts::splice_evar( res, context[94], context[97] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[91], context[93] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[90] );
          res = refalrts::splice_evar( res, context[83], context[84] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/73 )/9 (/12 e.LocalVars0#1/75 )/13 (/16 e.LocalVars#2/77 )/17 (/18 (/50 e.2#0/79 )/51 (/54 e.4#0/81 )/55 )/19 (/22 e.Scanned#1/83 )/23 (/34 # Brackets/72 e.5#0/85 )/35 e.Tail#1/87 >/1
          context[73] = context[56];
          context[74] = context[57];
          context[75] = context[58];
          context[76] = context[59];
          context[77] = context[60];
          context[78] = context[61];
          context[79] = context[62];
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[68];
          context[88] = context[69];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[72] ) )
            continue;
          // closed e.ScopeVars0#1 as range 73
          // closed e.LocalVars0#1 as range 75
          // closed e.LocalVars#2 as range 77
          // closed e.2#0 as range 79
          // closed e.4#0 as range 81
          // closed e.Scanned#1 as range 83
          // closed e.5#0 as range 85
          // closed e.Tail#1 as range 87
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.ScopeVars0#1: 73
          //DEBUG: e.LocalVars0#1: 75
          //DEBUG: e.LocalVars#2: 77
          //DEBUG: e.2#0: 79
          //DEBUG: e.4#0: 81
          //DEBUG: e.Scanned#1: 83
          //DEBUG: e.5#0: 85
          //DEBUG: e.Tail#1: 87

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </89 & DoMapAccum$1=1@22/90 s.MarkupContext0#1/5/91 (/92 e.ScopeVars0#1/73/93 )/95 (/96 e.LocalVars0#1/75/97 Tile{ AsIs: )/23 AsIs: (/34 } e.LocalVars#2/77/99 )/101 (/102 Tile{ AsIs: e.Scanned#1/83 } )/103 (/104 Tile{ AsIs: e.Tail#1/87 } )/105 </106 & ExtractNested-Result-Term$2=1/107 (/108 Tile{ AsIs: e.2#0/79 } )/109 </110 & ExtractNested-Result=1/111 Tile{ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/73 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/75 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/77 AsIs: )/17 AsIs: (/18 AsIs: (/50 } Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/81 AsIs: )/55 AsIs: )/19 AsIs: (/22 } Tile{ HalfReuse: )/72 AsIs: e.5#0/85 HalfReuse: >/35 } >/112 >/113 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[89]);
          refalrts::alloc_name(vm, context[90], functions[efunc_gen_DoMapAccum_S1A1Z22]);
          refalrts::copy_stvar(vm, context[91], context[5]);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::copy_evar(vm, context[93], context[94], context[73], context[74]);
          refalrts::alloc_close_bracket(vm, context[95]);
          refalrts::alloc_open_bracket(vm, context[96]);
          refalrts::copy_evar(vm, context[97], context[98], context[75], context[76]);
          refalrts::copy_evar(vm, context[99], context[100], context[77], context[78]);
          refalrts::alloc_close_bracket(vm, context[101]);
          refalrts::alloc_open_bracket(vm, context[102]);
          refalrts::alloc_close_bracket(vm, context[103]);
          refalrts::alloc_open_bracket(vm, context[104]);
          refalrts::alloc_close_bracket(vm, context[105]);
          refalrts::alloc_open_call(vm, context[106]);
          refalrts::alloc_name(vm, context[107], functions[efunc_gen_ExtractNestedm_Resultm_Term_S2A1]);
          refalrts::alloc_open_bracket(vm, context[108]);
          refalrts::alloc_close_bracket(vm, context[109]);
          refalrts::alloc_open_call(vm, context[110]);
          refalrts::alloc_name(vm, context[111], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[112]);
          refalrts::alloc_close_call(vm, context[113]);
          refalrts::reinit_close_bracket(context[72]);
          refalrts::reinit_close_call(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[89] );
          refalrts::push_stack( vm, context[113] );
          refalrts::push_stack( vm, context[106] );
          refalrts::push_stack( vm, context[112] );
          refalrts::push_stack( vm, context[110] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[22], context[72] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[108], context[109] );
          refalrts::link_brackets( context[104], context[105] );
          refalrts::link_brackets( context[102], context[103] );
          refalrts::link_brackets( context[34], context[101] );
          refalrts::link_brackets( context[96], context[23] );
          refalrts::link_brackets( context[92], context[95] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[112], context[113] );
          res = refalrts::splice_evar( res, context[72], context[35] );
          res = refalrts::splice_evar( res, context[51], context[22] );
          res = refalrts::splice_evar( res, context[0], context[50] );
          res = refalrts::splice_evar( res, context[109], context[111] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[105], context[108] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[103], context[104] );
          res = refalrts::splice_evar( res, context[83], context[84] );
          res = refalrts::splice_evar( res, context[101], context[102] );
          res = refalrts::splice_evar( res, context[99], context[100] );
          res = refalrts::splice_evar( res, context[23], context[34] );
          res = refalrts::splice_evar( res, context[97], context[98] );
          res = refalrts::splice_evar( res, context[89], context[96] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/73 )/9 (/12 e.LocalVars0#1/75 )/13 (/16 e.LocalVars#2/77 )/17 (/18 (/50 e.2#0/79 )/51 (/54 e.4#0/81 )/55 )/19 (/22 e.Scanned#1/83 )/23 (/34 # ADT-Brackets/72 (/91 e.7#0/89 )/92 e.6#0/85 )/35 e.Tail#1/87 >/1
          context[73] = context[56];
          context[74] = context[57];
          context[75] = context[58];
          context[76] = context[59];
          context[77] = context[60];
          context[78] = context[61];
          context[79] = context[62];
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[68];
          context[88] = context[69];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[72] ) )
            continue;
          context[89] = 0;
          context[90] = 0;
          context[91] = refalrts::brackets_left( context[89], context[90], context[85], context[86] );
          if( ! context[91] )
            continue;
          refalrts::bracket_pointers(context[91], context[92]);
          // closed e.ScopeVars0#1 as range 73
          // closed e.LocalVars0#1 as range 75
          // closed e.LocalVars#2 as range 77
          // closed e.2#0 as range 79
          // closed e.4#0 as range 81
          // closed e.Scanned#1 as range 83
          // closed e.7#0 as range 89
          // closed e.6#0 as range 85
          // closed e.Tail#1 as range 87
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.ScopeVars0#1: 73
          //DEBUG: e.LocalVars0#1: 75
          //DEBUG: e.LocalVars#2: 77
          //DEBUG: e.2#0: 79
          //DEBUG: e.4#0: 81
          //DEBUG: e.Scanned#1: 83
          //DEBUG: e.7#0: 89
          //DEBUG: e.6#0: 85
          //DEBUG: e.Tail#1: 87

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </93 & DoMapAccum$1=1@22/94 s.MarkupContext0#1/5/95 (/96 e.ScopeVars0#1/73/97 )/99 (/100 e.LocalVars0#1/75/101 Tile{ AsIs: )/35 } (/103 e.LocalVars#2/77/104 Tile{ AsIs: )/23 AsIs: (/34 } Tile{ AsIs: e.Scanned#1/83 } )/106 (/107 Tile{ AsIs: e.Tail#1/87 } )/108 </109 & ExtractNested-Result-Term$3=1/110 (/111 Tile{ AsIs: e.2#0/79 } Tile{ HalfReuse: )/72 AsIs: (/91 AsIs: e.7#0/89 AsIs: )/92 } </112 & ExtractNested-Result=1/113 Tile{ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/73 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/75 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/77 AsIs: )/17 AsIs: (/18 AsIs: (/50 } Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/81 AsIs: )/55 AsIs: )/19 AsIs: (/22 } )/114 Tile{ AsIs: e.6#0/85 } >/115 >/116 >/117 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[93]);
          refalrts::alloc_name(vm, context[94], functions[efunc_gen_DoMapAccum_S1A1Z22]);
          refalrts::copy_stvar(vm, context[95], context[5]);
          refalrts::alloc_open_bracket(vm, context[96]);
          refalrts::copy_evar(vm, context[97], context[98], context[73], context[74]);
          refalrts::alloc_close_bracket(vm, context[99]);
          refalrts::alloc_open_bracket(vm, context[100]);
          refalrts::copy_evar(vm, context[101], context[102], context[75], context[76]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[77], context[78]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_open_bracket(vm, context[107]);
          refalrts::alloc_close_bracket(vm, context[108]);
          refalrts::alloc_open_call(vm, context[109]);
          refalrts::alloc_name(vm, context[110], functions[efunc_gen_ExtractNestedm_Resultm_Term_S3A1]);
          refalrts::alloc_open_bracket(vm, context[111]);
          refalrts::alloc_open_call(vm, context[112]);
          refalrts::alloc_name(vm, context[113], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_bracket(vm, context[114]);
          refalrts::alloc_close_call(vm, context[115]);
          refalrts::alloc_close_call(vm, context[116]);
          refalrts::alloc_close_call(vm, context[117]);
          refalrts::reinit_close_bracket(context[72]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[93] );
          refalrts::push_stack( vm, context[117] );
          refalrts::push_stack( vm, context[109] );
          refalrts::push_stack( vm, context[116] );
          refalrts::push_stack( vm, context[112] );
          refalrts::push_stack( vm, context[115] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[22], context[114] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[91], context[92] );
          refalrts::link_brackets( context[111], context[72] );
          refalrts::link_brackets( context[107], context[108] );
          refalrts::link_brackets( context[34], context[106] );
          refalrts::link_brackets( context[103], context[23] );
          refalrts::link_brackets( context[100], context[35] );
          refalrts::link_brackets( context[96], context[99] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[115], context[117] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_elem( res, context[114] );
          res = refalrts::splice_evar( res, context[51], context[22] );
          res = refalrts::splice_evar( res, context[0], context[50] );
          res = refalrts::splice_evar( res, context[112], context[113] );
          res = refalrts::splice_evar( res, context[72], context[92] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[108], context[111] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[106], context[107] );
          res = refalrts::splice_evar( res, context[83], context[84] );
          res = refalrts::splice_evar( res, context[23], context[34] );
          res = refalrts::splice_evar( res, context[104], context[105] );
          res = refalrts::splice_elem( res, context[103] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[101], context[102] );
          res = refalrts::splice_evar( res, context[93], context[100] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/73 )/9 (/12 e.LocalVars0#1/75 )/13 (/16 e.LocalVars#2/77 )/17 (/18 (/50 e.2#0/79 )/51 (/54 e.4#0/81 )/55 )/19 (/22 e.Scanned#1/83 )/23 (/34 # CallBrackets/72 e.5#0/85 )/35 e.Tail#1/87 >/1
          context[73] = context[56];
          context[74] = context[57];
          context[75] = context[58];
          context[76] = context[59];
          context[77] = context[60];
          context[78] = context[61];
          context[79] = context[62];
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[68];
          context[88] = context[69];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[72] ) )
            continue;
          // closed e.ScopeVars0#1 as range 73
          // closed e.LocalVars0#1 as range 75
          // closed e.LocalVars#2 as range 77
          // closed e.2#0 as range 79
          // closed e.4#0 as range 81
          // closed e.Scanned#1 as range 83
          // closed e.5#0 as range 85
          // closed e.Tail#1 as range 87
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.ScopeVars0#1: 73
          //DEBUG: e.LocalVars0#1: 75
          //DEBUG: e.LocalVars#2: 77
          //DEBUG: e.2#0: 79
          //DEBUG: e.4#0: 81
          //DEBUG: e.Scanned#1: 83
          //DEBUG: e.5#0: 85
          //DEBUG: e.Tail#1: 87

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </89 & DoMapAccum$1=1@22/90 s.MarkupContext0#1/5/91 (/92 e.ScopeVars0#1/73/93 )/95 (/96 e.LocalVars0#1/75/97 Tile{ AsIs: )/23 AsIs: (/34 } e.LocalVars#2/77/99 )/101 (/102 Tile{ AsIs: e.Scanned#1/83 } )/103 (/104 Tile{ AsIs: e.Tail#1/87 } )/105 </106 & ExtractNested-Result-Term$4=1/107 (/108 Tile{ AsIs: e.2#0/79 } )/109 </110 & ExtractNested-Result=1/111 Tile{ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/73 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/75 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/77 AsIs: )/17 AsIs: (/18 AsIs: (/50 } Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/81 AsIs: )/55 AsIs: )/19 AsIs: (/22 } Tile{ HalfReuse: )/72 AsIs: e.5#0/85 HalfReuse: >/35 } >/112 >/113 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[89]);
          refalrts::alloc_name(vm, context[90], functions[efunc_gen_DoMapAccum_S1A1Z22]);
          refalrts::copy_stvar(vm, context[91], context[5]);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::copy_evar(vm, context[93], context[94], context[73], context[74]);
          refalrts::alloc_close_bracket(vm, context[95]);
          refalrts::alloc_open_bracket(vm, context[96]);
          refalrts::copy_evar(vm, context[97], context[98], context[75], context[76]);
          refalrts::copy_evar(vm, context[99], context[100], context[77], context[78]);
          refalrts::alloc_close_bracket(vm, context[101]);
          refalrts::alloc_open_bracket(vm, context[102]);
          refalrts::alloc_close_bracket(vm, context[103]);
          refalrts::alloc_open_bracket(vm, context[104]);
          refalrts::alloc_close_bracket(vm, context[105]);
          refalrts::alloc_open_call(vm, context[106]);
          refalrts::alloc_name(vm, context[107], functions[efunc_gen_ExtractNestedm_Resultm_Term_S4A1]);
          refalrts::alloc_open_bracket(vm, context[108]);
          refalrts::alloc_close_bracket(vm, context[109]);
          refalrts::alloc_open_call(vm, context[110]);
          refalrts::alloc_name(vm, context[111], functions[efunc_gen_ExtractNestedm_Result_A1]);
          refalrts::alloc_close_call(vm, context[112]);
          refalrts::alloc_close_call(vm, context[113]);
          refalrts::reinit_close_bracket(context[72]);
          refalrts::reinit_close_call(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[89] );
          refalrts::push_stack( vm, context[113] );
          refalrts::push_stack( vm, context[106] );
          refalrts::push_stack( vm, context[112] );
          refalrts::push_stack( vm, context[110] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[22], context[72] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::link_brackets( context[108], context[109] );
          refalrts::link_brackets( context[104], context[105] );
          refalrts::link_brackets( context[102], context[103] );
          refalrts::link_brackets( context[34], context[101] );
          refalrts::link_brackets( context[96], context[23] );
          refalrts::link_brackets( context[92], context[95] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[112], context[113] );
          res = refalrts::splice_evar( res, context[72], context[35] );
          res = refalrts::splice_evar( res, context[51], context[22] );
          res = refalrts::splice_evar( res, context[0], context[50] );
          res = refalrts::splice_evar( res, context[109], context[111] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[105], context[108] );
          res = refalrts::splice_evar( res, context[87], context[88] );
          res = refalrts::splice_evar( res, context[103], context[104] );
          res = refalrts::splice_evar( res, context[83], context[84] );
          res = refalrts::splice_evar( res, context[101], context[102] );
          res = refalrts::splice_evar( res, context[99], context[100] );
          res = refalrts::splice_evar( res, context[23], context[34] );
          res = refalrts::splice_evar( res, context[97], context[98] );
          res = refalrts::splice_evar( res, context[89], context[96] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@22/4 s.new#35/5 (/8 e.new#41/73 )/9 (/12 e.new#42/75 )/13 (/16 e.new#43/77 )/17 (/18 (/50 e.new#36/79 )/51 (/54 e.new#37/81 )/55 )/19 (/22 e.new#44/83 )/23 (/34 # Closure/72 (/91 e.new#38/89 )/92 e.new#39/85 )/35 e.new#40/87 >/1
        context[73] = context[56];
        context[74] = context[57];
        context[75] = context[58];
        context[76] = context[59];
        context[77] = context[60];
        context[78] = context[61];
        context[79] = context[62];
        context[80] = context[63];
        context[81] = context[64];
        context[82] = context[65];
        context[83] = context[66];
        context[84] = context[67];
        context[85] = context[70];
        context[86] = context[71];
        context[87] = context[68];
        context[88] = context[69];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[72] ) )
          continue;
        context[89] = 0;
        context[90] = 0;
        context[91] = refalrts::brackets_left( context[89], context[90], context[85], context[86] );
        if( ! context[91] )
          continue;
        refalrts::bracket_pointers(context[91], context[92]);
        // closed e.new#41 as range 73
        // closed e.new#42 as range 75
        // closed e.new#43 as range 77
        // closed e.new#36 as range 79
        // closed e.new#37 as range 81
        // closed e.new#44 as range 83
        // closed e.new#38 as range 89
        // closed e.new#39 as range 85
        // closed e.new#40 as range 87
        do {
          // </0 & DoMapAccum@22/4 s.new#45/5 (/8 e.new#52/93 )/9 (/12 e.new#53/95 )/13 (/16 e.new#54/97 )/17 (/18 (/50 e.new#46/99 )/51 (/54 e.new#47/101 )/55 )/19 (/22 e.new#55/103 )/23 (/34 # Closure/72 (/91 e.new#50/105 )/92 s.new#48/111 e.new#49/107 )/35 e.new#51/109 >/1
          context[93] = context[73];
          context[94] = context[74];
          context[95] = context[75];
          context[96] = context[76];
          context[97] = context[77];
          context[98] = context[78];
          context[99] = context[79];
          context[100] = context[80];
          context[101] = context[81];
          context[102] = context[82];
          context[103] = context[83];
          context[104] = context[84];
          context[105] = context[89];
          context[106] = context[90];
          context[107] = context[85];
          context[108] = context[86];
          context[109] = context[87];
          context[110] = context[88];
          // closed e.new#52 as range 93
          // closed e.new#53 as range 95
          // closed e.new#54 as range 97
          // closed e.new#46 as range 99
          // closed e.new#47 as range 101
          // closed e.new#55 as range 103
          // closed e.new#50 as range 105
          // closed e.new#51 as range 109
          if( ! refalrts::svar_left( context[111], context[107], context[108] ) )
            continue;
          // closed e.new#49 as range 107
          do {
            // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/112 )/9 (/12 e.LocalVars0#1/114 )/13 (/16 e.LocalVars#2/116 )/17 (/18 (/50 e.2#0/118 )/51 (/54 e.4#0/120 )/55 )/19 (/22 e.Scanned#1/122 )/23 (/34 # Closure/72 (/91 e.7#0/124 )/92 # Sentences/111 e.#0/126 )/35 e.Tail#1/128 >/1
            context[112] = context[93];
            context[113] = context[94];
            context[114] = context[95];
            context[115] = context[96];
            context[116] = context[97];
            context[117] = context[98];
            context[118] = context[99];
            context[119] = context[100];
            context[120] = context[101];
            context[121] = context[102];
            context[122] = context[103];
            context[123] = context[104];
            context[124] = context[105];
            context[125] = context[106];
            context[126] = context[107];
            context[127] = context[108];
            context[128] = context[109];
            context[129] = context[110];
            if( ! refalrts::ident_term( identifiers[ident_Sentences], context[111] ) )
              continue;
            // closed e.ScopeVars0#1 as range 112
            // closed e.LocalVars0#1 as range 114
            // closed e.LocalVars#2 as range 116
            // closed e.2#0 as range 118
            // closed e.4#0 as range 120
            // closed e.Scanned#1 as range 122
            // closed e.7#0 as range 124
            // closed e.#0 as range 126
            // closed e.Tail#1 as range 128
            //DEBUG: s.MarkupContext0#1: 5
            //DEBUG: e.ScopeVars0#1: 112
            //DEBUG: e.LocalVars0#1: 114
            //DEBUG: e.LocalVars#2: 116
            //DEBUG: e.2#0: 118
            //DEBUG: e.4#0: 120
            //DEBUG: e.Scanned#1: 122
            //DEBUG: e.7#0: 124
            //DEBUG: e.#0: 126
            //DEBUG: e.Tail#1: 128

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/112 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/114 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/116 AsIs: )/17 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/122 } )/130 Tile{ AsIs: (/50 } Tile{ AsIs: e.Tail#1/128 } Tile{ AsIs: )/23 HalfReuse: </34 HalfReuse: & ExtractNested-Result-Term$5=1@2/72 AsIs: (/91 } Tile{ AsIs: e.2#0/118 } )/131 Tile{ AsIs: (/22 } Tile{ AsIs: e.7#0/124 } Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/120 AsIs: )/55 HalfReuse: (/19 } e.ScopeVars0#1/112/132 )/134 (/135 e.LocalVars0#1/114/136 )/138 s.MarkupContext0#1/5/139 </140 & ExtractNestedRec$1=1/141 </142 & DoMapAccum@11/143 s.MarkupContext0#1/5/144 (/145 e.ScopeVars0#1/112/146 e.LocalVars0#1/114/148 e.LocalVars#2/116/150 )/152 (/153 (/154 )/155 (/156 )/157 )/158 Tile{ HalfReuse: (/92 HalfReuse: )/111 AsIs: e.#0/126 HalfReuse: >/35 } >/159 >/160 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[130]);
            refalrts::alloc_close_bracket(vm, context[131]);
            refalrts::copy_evar(vm, context[132], context[133], context[112], context[113]);
            refalrts::alloc_close_bracket(vm, context[134]);
            refalrts::alloc_open_bracket(vm, context[135]);
            refalrts::copy_evar(vm, context[136], context[137], context[114], context[115]);
            refalrts::alloc_close_bracket(vm, context[138]);
            refalrts::copy_stvar(vm, context[139], context[5]);
            refalrts::alloc_open_call(vm, context[140]);
            refalrts::alloc_name(vm, context[141], functions[efunc_gen_ExtractNestedRec_S1A1]);
            refalrts::alloc_open_call(vm, context[142]);
            refalrts::alloc_name(vm, context[143], functions[efunc_gen_DoMapAccum_Z11]);
            refalrts::copy_stvar(vm, context[144], context[5]);
            refalrts::alloc_open_bracket(vm, context[145]);
            refalrts::copy_evar(vm, context[146], context[147], context[112], context[113]);
            refalrts::copy_evar(vm, context[148], context[149], context[114], context[115]);
            refalrts::copy_evar(vm, context[150], context[151], context[116], context[117]);
            refalrts::alloc_close_bracket(vm, context[152]);
            refalrts::alloc_open_bracket(vm, context[153]);
            refalrts::alloc_open_bracket(vm, context[154]);
            refalrts::alloc_close_bracket(vm, context[155]);
            refalrts::alloc_open_bracket(vm, context[156]);
            refalrts::alloc_close_bracket(vm, context[157]);
            refalrts::alloc_close_bracket(vm, context[158]);
            refalrts::alloc_close_call(vm, context[159]);
            refalrts::alloc_close_call(vm, context[160]);
            refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
            refalrts::reinit_open_call(context[34]);
            refalrts::reinit_name(context[72], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z2]);
            refalrts::reinit_open_bracket(context[19]);
            refalrts::reinit_open_bracket(context[92]);
            refalrts::reinit_close_bracket(context[111]);
            refalrts::reinit_close_call(context[35]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[160] );
            refalrts::push_stack( vm, context[34] );
            refalrts::push_stack( vm, context[159] );
            refalrts::push_stack( vm, context[140] );
            refalrts::push_stack( vm, context[35] );
            refalrts::push_stack( vm, context[142] );
            refalrts::link_brackets( context[92], context[111] );
            refalrts::link_brackets( context[153], context[158] );
            refalrts::link_brackets( context[156], context[157] );
            refalrts::link_brackets( context[154], context[155] );
            refalrts::link_brackets( context[145], context[152] );
            refalrts::link_brackets( context[135], context[138] );
            refalrts::link_brackets( context[19], context[134] );
            refalrts::link_brackets( context[54], context[55] );
            refalrts::link_brackets( context[22], context[51] );
            refalrts::link_brackets( context[91], context[131] );
            refalrts::link_brackets( context[50], context[23] );
            refalrts::link_brackets( context[18], context[130] );
            refalrts::link_brackets( context[16], context[17] );
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[159], context[160] );
            res = refalrts::splice_evar( res, context[92], context[35] );
            res = refalrts::splice_evar( res, context[134], context[158] );
            res = refalrts::splice_evar( res, context[132], context[133] );
            res = refalrts::splice_evar( res, context[51], context[19] );
            res = refalrts::splice_evar( res, context[124], context[125] );
            res = refalrts::splice_elem( res, context[22] );
            res = refalrts::splice_elem( res, context[131] );
            res = refalrts::splice_evar( res, context[118], context[119] );
            res = refalrts::splice_evar( res, context[23], context[91] );
            res = refalrts::splice_evar( res, context[128], context[129] );
            res = refalrts::splice_elem( res, context[50] );
            res = refalrts::splice_elem( res, context[130] );
            res = refalrts::splice_evar( res, context[122], context[123] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/112 )/9 (/12 e.LocalVars0#1/114 )/13 (/16 e.LocalVars#2/116 )/17 (/18 (/50 e.2#0/118 )/51 (/54 e.4#0/120 )/55 )/19 (/22 e.Scanned#1/122 )/23 (/34 # Closure/72 (/91 e.7#0/124 )/92 # NativeBody/111 t.0#0/130 e.0#0/126 )/35 e.Tail#1/128 >/1
            context[112] = context[93];
            context[113] = context[94];
            context[114] = context[95];
            context[115] = context[96];
            context[116] = context[97];
            context[117] = context[98];
            context[118] = context[99];
            context[119] = context[100];
            context[120] = context[101];
            context[121] = context[102];
            context[122] = context[103];
            context[123] = context[104];
            context[124] = context[105];
            context[125] = context[106];
            context[126] = context[107];
            context[127] = context[108];
            context[128] = context[109];
            context[129] = context[110];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[111] ) )
              continue;
            // closed e.ScopeVars0#1 as range 112
            // closed e.LocalVars0#1 as range 114
            // closed e.LocalVars#2 as range 116
            // closed e.2#0 as range 118
            // closed e.4#0 as range 120
            // closed e.Scanned#1 as range 122
            // closed e.7#0 as range 124
            // closed e.Tail#1 as range 128
            context[131] = refalrts::tvar_left( context[130], context[126], context[127] );
            if( ! context[131] )
              continue;
            // closed e.0#0 as range 126
            //DEBUG: s.MarkupContext0#1: 5
            //DEBUG: e.ScopeVars0#1: 112
            //DEBUG: e.LocalVars0#1: 114
            //DEBUG: e.LocalVars#2: 116
            //DEBUG: e.2#0: 118
            //DEBUG: e.4#0: 120
            //DEBUG: e.Scanned#1: 122
            //DEBUG: e.7#0: 124
            //DEBUG: e.Tail#1: 128
            //DEBUG: t.0#0: 130
            //DEBUG: e.0#0: 126

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/112 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/114 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/116 AsIs: )/17 AsIs: (/18 AsIs: (/50 AsIs: e.2#0/118 HalfReuse: (/51 HalfReuse: # Function/54 } Tile{ Reuse: # GN-Local/72 AsIs: (/91 AsIs: e.7#0/124 AsIs: )/92 AsIs: # NativeBody/111 AsIs: t.0#0/130 AsIs: e.0#0/126 AsIs: )/35 } )/132 (/133 Tile{ AsIs: e.4#0/120 } Tile{ AsIs: )/55 AsIs: )/19 AsIs: (/22 AsIs: e.Scanned#1/122 HalfReuse: (/23 HalfReuse: # Symbol/34 } # Name/134 e.7#0/124/135 )/137 )/138 Tile{ AsIs: e.Tail#1/128 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[132]);
            refalrts::alloc_open_bracket(vm, context[133]);
            refalrts::alloc_ident(vm, context[134], identifiers[ident_Name]);
            refalrts::copy_evar(vm, context[135], context[136], context[124], context[125]);
            refalrts::alloc_close_bracket(vm, context[137]);
            refalrts::alloc_close_bracket(vm, context[138]);
            refalrts::reinit_open_bracket(context[51]);
            refalrts::reinit_ident(context[54], identifiers[ident_Function]);
            refalrts::update_ident(context[72], identifiers[ident_GNm_Local]);
            refalrts::reinit_open_bracket(context[23]);
            refalrts::reinit_ident(context[34], identifiers[ident_Symbol]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[22], context[138] );
            refalrts::link_brackets( context[23], context[137] );
            refalrts::link_brackets( context[18], context[19] );
            refalrts::link_brackets( context[133], context[55] );
            refalrts::link_brackets( context[50], context[132] );
            refalrts::link_brackets( context[51], context[35] );
            refalrts::link_brackets( context[91], context[92] );
            refalrts::link_brackets( context[16], context[17] );
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[128], context[129] );
            res = refalrts::splice_evar( res, context[134], context[138] );
            res = refalrts::splice_evar( res, context[55], context[34] );
            res = refalrts::splice_evar( res, context[120], context[121] );
            res = refalrts::splice_evar( res, context[132], context[133] );
            res = refalrts::splice_evar( res, context[72], context[35] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/112 )/9 (/12 e.LocalVars0#1/114 )/13 (/16 e.LocalVars#2/116 )/17 (/18 (/50 e.2#0/118 )/51 (/54 e.4#0/120 )/55 )/19 (/22 e.Scanned#1/122 )/23 (/34 # Closure/72 (/91 e.7#0/124 )/92 # Metatable/111 e.#0/126 )/35 e.Tail#1/128 >/1
          context[112] = context[93];
          context[113] = context[94];
          context[114] = context[95];
          context[115] = context[96];
          context[116] = context[97];
          context[117] = context[98];
          context[118] = context[99];
          context[119] = context[100];
          context[120] = context[101];
          context[121] = context[102];
          context[122] = context[103];
          context[123] = context[104];
          context[124] = context[105];
          context[125] = context[106];
          context[126] = context[107];
          context[127] = context[108];
          context[128] = context[109];
          context[129] = context[110];
          if( ! refalrts::ident_term( identifiers[ident_Metatable], context[111] ) )
            continue;
          // closed e.ScopeVars0#1 as range 112
          // closed e.LocalVars0#1 as range 114
          // closed e.LocalVars#2 as range 116
          // closed e.2#0 as range 118
          // closed e.4#0 as range 120
          // closed e.Scanned#1 as range 122
          // closed e.7#0 as range 124
          // closed e.#0 as range 126
          // closed e.Tail#1 as range 128
          //DEBUG: s.MarkupContext0#1: 5
          //DEBUG: e.ScopeVars0#1: 112
          //DEBUG: e.LocalVars0#1: 114
          //DEBUG: e.LocalVars#2: 116
          //DEBUG: e.2#0: 118
          //DEBUG: e.4#0: 120
          //DEBUG: e.Scanned#1: 122
          //DEBUG: e.7#0: 124
          //DEBUG: e.#0: 126
          //DEBUG: e.Tail#1: 128

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/112 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/114 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/116 AsIs: )/17 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/122 } Tile{ AsIs: )/51 } Tile{ AsIs: (/50 } Tile{ AsIs: e.Tail#1/128 } )/130 </131 & ExtractNested-Result-Term$5=2@1/132 (/133 Tile{ AsIs: e.2#0/118 } Tile{ AsIs: )/23 HalfReuse: </34 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1@1/72 AsIs: (/91 AsIs: e.7#0/124 AsIs: )/92 HalfReuse: (/111 AsIs: e.#0/126 AsIs: )/35 } Tile{ AsIs: (/54 AsIs: e.4#0/120 AsIs: )/55 HalfReuse: </19 HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1:1*2/22 } (/134 e.7#0/124/135 )/137 # Metatable/138 e.#0/126/139 >/141 >/142 >/143 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[130]);
          refalrts::alloc_open_call(vm, context[131]);
          refalrts::alloc_name(vm, context[132], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2Z1]);
          refalrts::alloc_open_bracket(vm, context[133]);
          refalrts::alloc_open_bracket(vm, context[134]);
          refalrts::copy_evar(vm, context[135], context[136], context[124], context[125]);
          refalrts::alloc_close_bracket(vm, context[137]);
          refalrts::alloc_ident(vm, context[138], identifiers[ident_Metatable]);
          refalrts::copy_evar(vm, context[139], context[140], context[126], context[127]);
          refalrts::alloc_close_call(vm, context[141]);
          refalrts::alloc_close_call(vm, context[142]);
          refalrts::alloc_close_call(vm, context[143]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
          refalrts::reinit_open_call(context[34]);
          refalrts::reinit_name(context[72], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1Z1]);
          refalrts::reinit_open_bracket(context[111]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[22], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[143] );
          refalrts::push_stack( vm, context[131] );
          refalrts::push_stack( vm, context[142] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[141] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[134], context[137] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[111], context[35] );
          refalrts::link_brackets( context[91], context[92] );
          refalrts::link_brackets( context[133], context[23] );
          refalrts::link_brackets( context[50], context[130] );
          refalrts::link_brackets( context[18], context[51] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[134], context[143] );
          res = refalrts::splice_evar( res, context[54], context[22] );
          res = refalrts::splice_evar( res, context[23], context[35] );
          res = refalrts::splice_evar( res, context[118], context[119] );
          res = refalrts::splice_evar( res, context[130], context[133] );
          res = refalrts::splice_evar( res, context[128], context[129] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[122], context[123] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/93 )/9 (/12 e.LocalVars0#1/95 )/13 (/16 e.LocalVars#2/97 )/17 (/18 (/50 e.2#0/99 )/51 (/54 e.4#0/101 )/55 )/19 (/22 e.Scanned#1/103 )/23 (/34 # Closure/72 (/91 e.7#0/105 )/92 e.6#0/107 )/35 e.Tail#1/109 >/1
        context[93] = context[73];
        context[94] = context[74];
        context[95] = context[75];
        context[96] = context[76];
        context[97] = context[77];
        context[98] = context[78];
        context[99] = context[79];
        context[100] = context[80];
        context[101] = context[81];
        context[102] = context[82];
        context[103] = context[83];
        context[104] = context[84];
        context[105] = context[89];
        context[106] = context[90];
        context[107] = context[85];
        context[108] = context[86];
        context[109] = context[87];
        context[110] = context[88];
        // closed e.ScopeVars0#1 as range 93
        // closed e.LocalVars0#1 as range 95
        // closed e.LocalVars#2 as range 97
        // closed e.2#0 as range 99
        // closed e.4#0 as range 101
        // closed e.Scanned#1 as range 103
        // closed e.7#0 as range 105
        // closed e.6#0 as range 107
        // closed e.Tail#1 as range 109
        //DEBUG: s.MarkupContext0#1: 5
        //DEBUG: e.ScopeVars0#1: 93
        //DEBUG: e.LocalVars0#1: 95
        //DEBUG: e.LocalVars#2: 97
        //DEBUG: e.2#0: 99
        //DEBUG: e.4#0: 101
        //DEBUG: e.Scanned#1: 103
        //DEBUG: e.7#0: 105
        //DEBUG: e.6#0: 107
        //DEBUG: e.Tail#1: 109

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/93 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/95 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/97 AsIs: )/17 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/103 } )/111 Tile{ AsIs: (/50 } Tile{ AsIs: e.Tail#1/109 } Tile{ AsIs: )/23 HalfReuse: </34 HalfReuse: & ExtractNested-Result-Term$5=1@2/72 AsIs: (/91 } Tile{ AsIs: e.2#0/99 } )/112 Tile{ AsIs: (/22 } Tile{ AsIs: e.7#0/105 } Tile{ AsIs: )/51 AsIs: (/54 AsIs: e.4#0/101 AsIs: )/55 HalfReuse: (/19 } e.ScopeVars0#1/93/113 )/115 (/116 e.LocalVars0#1/95/117 )/119 s.MarkupContext0#1/5/120 </121 & ExtractNestedRec*3/122 s.MarkupContext0#1/5/123 (/124 e.ScopeVars0#1/93/125 e.LocalVars0#1/95/127 e.LocalVars#2/97/129 Tile{ AsIs: )/92 AsIs: e.6#0/107 HalfReuse: >/35 } >/131 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[111]);
        refalrts::alloc_close_bracket(vm, context[112]);
        refalrts::copy_evar(vm, context[113], context[114], context[93], context[94]);
        refalrts::alloc_close_bracket(vm, context[115]);
        refalrts::alloc_open_bracket(vm, context[116]);
        refalrts::copy_evar(vm, context[117], context[118], context[95], context[96]);
        refalrts::alloc_close_bracket(vm, context[119]);
        refalrts::copy_stvar(vm, context[120], context[5]);
        refalrts::alloc_open_call(vm, context[121]);
        refalrts::alloc_name(vm, context[122], functions[efunc_gen_ExtractNestedRec_D3]);
        refalrts::copy_stvar(vm, context[123], context[5]);
        refalrts::alloc_open_bracket(vm, context[124]);
        refalrts::copy_evar(vm, context[125], context[126], context[93], context[94]);
        refalrts::copy_evar(vm, context[127], context[128], context[95], context[96]);
        refalrts::copy_evar(vm, context[129], context[130], context[97], context[98]);
        refalrts::alloc_close_call(vm, context[131]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
        refalrts::reinit_open_call(context[34]);
        refalrts::reinit_name(context[72], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z2]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::reinit_close_call(context[35]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[131] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[121] );
        refalrts::link_brackets( context[124], context[92] );
        refalrts::link_brackets( context[116], context[119] );
        refalrts::link_brackets( context[19], context[115] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::link_brackets( context[22], context[51] );
        refalrts::link_brackets( context[91], context[112] );
        refalrts::link_brackets( context[50], context[23] );
        refalrts::link_brackets( context[18], context[111] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[131] );
        res = refalrts::splice_evar( res, context[92], context[35] );
        res = refalrts::splice_evar( res, context[129], context[130] );
        res = refalrts::splice_evar( res, context[127], context[128] );
        res = refalrts::splice_evar( res, context[125], context[126] );
        res = refalrts::splice_evar( res, context[115], context[124] );
        res = refalrts::splice_evar( res, context[113], context[114] );
        res = refalrts::splice_evar( res, context[51], context[19] );
        res = refalrts::splice_evar( res, context[105], context[106] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_elem( res, context[112] );
        res = refalrts::splice_evar( res, context[99], context[100] );
        res = refalrts::splice_evar( res, context[23], context[91] );
        res = refalrts::splice_evar( res, context[109], context[110] );
        res = refalrts::splice_elem( res, context[50] );
        res = refalrts::splice_elem( res, context[111] );
        res = refalrts::splice_evar( res, context[103], context[104] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/56 )/9 (/12 e.LocalVars0#1/58 )/13 (/16 e.LocalVars#2/60 )/17 (/18 (/50 e.1#0/62 )/51 (/54 e.3#0/64 )/55 )/19 (/22 e.Scanned#1/66 )/23 t.Next#1/34 e.Tail#1/68 >/1
      context[56] = context[36];
      context[57] = context[37];
      context[58] = context[38];
      context[59] = context[39];
      context[60] = context[40];
      context[61] = context[41];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[52];
      context[65] = context[53];
      context[66] = context[42];
      context[67] = context[43];
      context[68] = context[44];
      context[69] = context[45];
      // closed e.ScopeVars0#1 as range 56
      // closed e.LocalVars0#1 as range 58
      // closed e.LocalVars#2 as range 60
      // closed e.1#0 as range 62
      // closed e.3#0 as range 64
      // closed e.Scanned#1 as range 66
      // closed e.Tail#1 as range 68
      //DEBUG: t.Next#1: 34
      //DEBUG: s.MarkupContext0#1: 5
      //DEBUG: e.ScopeVars0#1: 56
      //DEBUG: e.LocalVars0#1: 58
      //DEBUG: e.LocalVars#2: 60
      //DEBUG: e.1#0: 62
      //DEBUG: e.3#0: 64
      //DEBUG: e.Scanned#1: 66
      //DEBUG: e.Tail#1: 68

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/56 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/58 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/60 AsIs: )/17 AsIs: (/18 AsIs: (/50 AsIs: e.1#0/62 AsIs: )/51 AsIs: (/54 AsIs: e.3#0/64 AsIs: )/55 AsIs: )/19 AsIs: (/22 } Tile{ AsIs: e.Scanned#1/66 } Tile{ AsIs: t.Next#1/34 } Tile{ AsIs: )/23 } Tile{ AsIs: e.Tail#1/68 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[54], context[55] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/36 )/9 (/12 e.LocalVars0#1/38 )/13 (/16 e.LocalVars#2/40 )/17 t.Acc#1/18 (/22 e.Scanned#1/42 )/23 t.Next#1/34 e.Tail#1/44 >/1
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    // closed e.ScopeVars0#1 as range 36
    // closed e.LocalVars0#1 as range 38
    // closed e.LocalVars#2 as range 40
    // closed e.Scanned#1 as range 42
    // closed e.Tail#1 as range 44
    //DEBUG: t.Acc#1: 18
    //DEBUG: t.Next#1: 34
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.ScopeVars0#1: 36
    //DEBUG: e.LocalVars0#1: 38
    //DEBUG: e.LocalVars#2: 40
    //DEBUG: e.Scanned#1: 42
    //DEBUG: e.Tail#1: 44

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/36 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/38 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/40 AsIs: )/17 } Tile{ AsIs: (/22 AsIs: e.Scanned#1/42 AsIs: )/23 } (/46 Tile{ AsIs: e.Tail#1/44 } )/47 </48 & ExtractNested-Result-Term*6/49 s.MarkupContext0#1/5/50 (/51 e.ScopeVars0#1/36/52 e.LocalVars0#1/38/54 )/56 (/57 e.LocalVars#2/40/58 )/60 Tile{ AsIs: t.Acc#1/18 } Tile{ AsIs: t.Next#1/34 } >/61 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_ExtractNestedm_Resultm_Term_D6]);
    refalrts::copy_stvar(vm, context[50], context[5]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::copy_evar(vm, context[52], context[53], context[36], context[37]);
    refalrts::copy_evar(vm, context[54], context[55], context[38], context[39]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[40], context[41]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[51], context[56] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[61] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[47], context[60] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/24 )/9 (/12 e.LocalVars0#1/26 )/13 (/16 e.LocalVars#2/28 )/17 t.Acc#1/18 (/22 e.Scanned#1/30 )/23 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[10];
    context[27] = context[11];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[20];
    context[31] = context[21];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars0#1 as range 24
    // closed e.LocalVars0#1 as range 26
    // closed e.LocalVars#2 as range 28
    // closed e.Scanned#1 as range 30
    //DEBUG: t.Acc#1: 18
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.ScopeVars0#1: 24
    //DEBUG: e.LocalVars0#1: 26
    //DEBUG: e.LocalVars#2: 28
    //DEBUG: e.Scanned#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/24 )/9 (/12 e.LocalVars0#1/26 )/13 (/16 e.LocalVars#2/28 )/17 {REMOVED TILE} (/22 {REMOVED TILE} )/23 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/18 } Tile{ AsIs: e.Scanned#1/30 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/6 )/9 (/12 e.LocalVars0#1/10 )/13 (/16 e.LocalVars#2/14 )/17 t.acc#0/18 (/22 e.scanned#0/20 )/23 e.items#0/2 >/1
  // closed e.ScopeVars0#1 as range 6
  // closed e.LocalVars0#1 as range 10
  // closed e.LocalVars#2 as range 14
  // closed e.scanned#0 as range 20
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 18
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.ScopeVars0#1: 6
  //DEBUG: e.LocalVars0#1: 10
  //DEBUG: e.LocalVars#2: 14
  //DEBUG: e.scanned#0: 20
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 } & DoMapAccum@0/24 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 } Tile{ AsIs: e.ScopeVars0#1/6 } Tile{ AsIs: e.LocalVars0#1/10 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.LocalVars#2/14 } Tile{ AsIs: )/9 } Tile{ AsIs: )/17 AsIs: t.acc#0/18 AsIs: (/22 AsIs: e.scanned#0/20 AsIs: )/23 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[0], context[17] );
  refalrts::link_brackets( context[16], context[9] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z22("DoMapAccum@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z22);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & ExtractNested-Conditions$1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=1@2/4 (/7 e.ConditionName0#1/30 )/8 (/11 e.Pattern0#1/32 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/34 )/17 (/20 e.LocalVars0#1/36 )/21 (/24 e.Conditions0#1/38 )/25 (/28 e.LocalVars#2/40 )/29 (/46 e.ResultNestedFuncs#2/44 )/47 (/50 e.BorrowedVars#2/48 )/51 e.Result#2/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    context[48] = 0;
    context[49] = 0;
    context[50] = refalrts::brackets_left( context[48], context[49], context[42], context[43] );
    if( ! context[50] )
      continue;
    refalrts::bracket_pointers(context[50], context[51]);
    // closed e.ConditionName0#1 as range 30
    // closed e.Pattern0#1 as range 32
    // closed e.ScopeVars0#1 as range 34
    // closed e.LocalVars0#1 as range 36
    // closed e.Conditions0#1 as range 38
    // closed e.LocalVars#2 as range 40
    // closed e.ResultNestedFuncs#2 as range 44
    // closed e.BorrowedVars#2 as range 48
    // closed e.Result#2 as range 42
    //DEBUG: s.MarkupContext0#1: 13
    //DEBUG: e.ConditionName0#1: 30
    //DEBUG: e.Pattern0#1: 32
    //DEBUG: e.ScopeVars0#1: 34
    //DEBUG: e.LocalVars0#1: 36
    //DEBUG: e.Conditions0#1: 38
    //DEBUG: e.LocalVars#2: 40
    //DEBUG: e.ResultNestedFuncs#2: 44
    //DEBUG: e.BorrowedVars#2: 48
    //DEBUG: e.Result#2: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=2@2/4 AsIs: (/7 } Tile{ AsIs: e.ResultNestedFuncs#2/44 } )/52 (/53 Tile{ AsIs: e.ConditionName0#1/30 } )/54 (/55 Tile{ AsIs: e.Result#2/42 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/32 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 AsIs: e.ScopeVars0#1/34 AsIs: )/17 AsIs: (/20 AsIs: e.LocalVars0#1/36 AsIs: )/21 AsIs: (/24 AsIs: e.Conditions0#1/38 AsIs: )/25 AsIs: (/28 AsIs: e.LocalVars#2/40 AsIs: )/29 HalfReuse: </46 } & MapAccum@3/56 (/57 e.ScopeVars0#1/34/58 )/60 (/61 e.LocalVars0#1/36/62 Tile{ AsIs: )/47 AsIs: (/50 AsIs: e.BorrowedVars#2/48 AsIs: )/51 } </64 & Uniq/65 </66 & ExtractAllVars/67 e.Pattern0#1/32/68 >/70 >/71 >/72 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_gen_MapAccum_Z3]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[34], context[35]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[36], context[37]);
    refalrts::alloc_open_call(vm, context[64]);
    refalrts::alloc_name(vm, context[65], functions[efunc_Uniq]);
    refalrts::alloc_open_call(vm, context[66]);
    refalrts::alloc_name(vm, context[67], functions[efunc_ExtractAllVars]);
    refalrts::copy_evar(vm, context[68], context[69], context[32], context[33]);
    refalrts::alloc_close_call(vm, context[70]);
    refalrts::alloc_close_call(vm, context[71]);
    refalrts::alloc_close_call(vm, context[72]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A2Z2]);
    refalrts::reinit_open_call(context[46]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[72] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[71] );
    refalrts::push_stack( vm, context[64] );
    refalrts::push_stack( vm, context[70] );
    refalrts::push_stack( vm, context[66] );
    refalrts::link_brackets( context[50], context[51] );
    refalrts::link_brackets( context[61], context[47] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[55], context[8] );
    refalrts::link_brackets( context[53], context[54] );
    refalrts::link_brackets( context[7], context[52] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[64], context[72] );
    res = refalrts::splice_evar( res, context[47], context[51] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[56], context[61] );
    res = refalrts::splice_evar( res, context[8], context[46] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=1@2/4 (/7 e.ConditionName0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 s.MarkupContext0#1/13 (/16 e.ScopeVars0#1/14 )/17 (/20 e.LocalVars0#1/18 )/21 (/24 e.Conditions0#1/22 )/25 (/28 e.LocalVars#2/26 )/29 e.dyn#0/2 >/1
  // closed e.ConditionName0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.ScopeVars0#1 as range 14
  // closed e.LocalVars0#1 as range 18
  // closed e.Conditions0#1 as range 22
  // closed e.LocalVars#2 as range 26
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 13
  //DEBUG: e.ConditionName0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.ScopeVars0#1: 14
  //DEBUG: e.LocalVars0#1: 18
  //DEBUG: e.Conditions0#1: 22
  //DEBUG: e.LocalVars#2: 26
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/17 (/20 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=1@0/4 AsIs: (/7 AsIs: e.ConditionName0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: s.MarkupContext0#1/13 AsIs: (/16 } Tile{ AsIs: e.ScopeVars0#1/14 } Tile{ AsIs: e.LocalVars0#1/18 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.Conditions0#1/22 AsIs: )/25 AsIs: (/28 AsIs: e.LocalVars#2/26 AsIs: )/29 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[16], context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, context[16], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A1Z2("ExtractNested-Conditions$1=1@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoMapAccum@23/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@23/4 s.new#1/5 t.new#2/6 (/10 e.new#3/8 )/11 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new#3 as range 8
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum@23/4 s.X#0/5 t.Acc#1/6 (/10 e.Scanned#1/12 )/11 t.Next#1/16 e.Tail#1/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Scanned#1 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.Tail#1 as range 14
    //DEBUG: t.Acc#1: 6
    //DEBUG: s.X#0: 5
    //DEBUG: e.Scanned#1: 12
    //DEBUG: t.Next#1: 16
    //DEBUG: e.Tail#1: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@23/4 AsIs: s.X#0/5 } Tile{ AsIs: (/10 AsIs: e.Scanned#1/12 AsIs: )/11 } (/18 Tile{ AsIs: e.Tail#1/14 } )/19 </20 & __Meta_Mu/21 s.X#0/5/22 Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: t.Next#1/16 } & $table/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_u_u_Metau_Mu]);
    refalrts::copy_stvar(vm, context[22], context[5]);
    refalrts::alloc_name(vm, context[23], functions[efunc_d_table]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@23/4 s.X#0/5 t.Acc#1/6 (/10 e.Scanned#1/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 12
    //DEBUG: t.Acc#1: 6
    //DEBUG: s.X#0: 5
    //DEBUG: e.Scanned#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@23/4 s.X#0/5 {REMOVED TILE} (/10 {REMOVED TILE} )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/6 } Tile{ AsIs: e.Scanned#1/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@23/4 s.X#0/5 t.acc#0/6 (/10 e.scanned#0/8 )/11 e.items#0/2 >/1
  // closed e.scanned#0 as range 8
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 6
  //DEBUG: s.X#0: 5
  //DEBUG: e.scanned#0: 8
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 AsIs: s.X#0/5 AsIs: t.acc#0/6 AsIs: (/10 AsIs: e.scanned#0/8 AsIs: )/11 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z23("DoMapAccum@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z23);


static refalrts::FnResult func_gen_EnumerateVarsm_Body_S1L1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & EnumerateVars-Body$1\1=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.new#7/17 )/8 (/11 e.new#8/19 )/12 (/15 e.new#9/21 )/16 (/27 e.new#5/25 )/28 e.new#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.new#7 as range 17
    // closed e.new#8 as range 19
    // closed e.new#9 as range 21
    // closed e.new#5 as range 25
    // closed e.new#6 as range 23
    do {
      // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/29 )/8 (/11 e.5#0/31 )/12 (/15 )/16 (/27 e.ScopeVars#3/33 )/28 e.Pattern#3/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[23];
      context[36] = context[24];
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.3#0 as range 29
      // closed e.5#0 as range 31
      // closed e.ScopeVars#3 as range 33
      // closed e.Pattern#3 as range 35
      //DEBUG: e.3#0: 29
      //DEBUG: e.5#0: 31
      //DEBUG: e.ScopeVars#3: 33
      //DEBUG: e.Pattern#3: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & EnumerateVars-Body$1\1=3/38 (/39 Tile{ AsIs: e.Pattern#3/35 } )/40 (/41 Tile{ HalfReuse: )/0 HalfReuse: 2/4 AsIs: (/7 AsIs: e.3#0/29 AsIs: )/8 HalfReuse: </11 } & DoMapAccum/42 [*]/43 Tile{ HalfReuse: & EnumerateVars-Expr\1/12 HalfReuse: 2/15 HalfReuse: {*}/16 AsIs: (/27 AsIs: e.ScopeVars#3/33 AsIs: )/28 } (/44 )/45 Tile{ AsIs: e.5#0/31 } >/46 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_EnumerateVarsm_Body_S1L1A3]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_DoMapAccum]);
      refalrts::alloc_closure_head(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_number(context[4], 2UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
      refalrts::reinit_number(context[15], 2UL);
      refalrts::reinit_unwrapped_closure(context[16], context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[41], context[0] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[12], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      refalrts::use( res );
      refalrts::wrap_closure( context[16] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.new#12/29 )/8 (/11 e.new#13/31 )/12 (/15 (/41 s.new#14/55 (/53 e.new#15/51 )/54 (/49 e.new#16/47 )/50 (/45 e.new#17/43 )/46 )/42 e.new#18/33 )/16 (/27 e.new#11/35 )/28 e.new#10/37 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_right( context[51], context[52], context[39], context[40] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      // closed e.new#12 as range 29
      // closed e.new#13 as range 31
      // closed e.new#15 as range 51
      // closed e.new#16 as range 47
      // closed e.new#17 as range 43
      // closed e.new#18 as range 33
      // closed e.new#11 as range 35
      // closed e.new#10 as range 37
      if( ! refalrts::svar_left( context[55], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      do {
        // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 # Assign/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
        context[56] = context[29];
        context[57] = context[30];
        context[58] = context[31];
        context[59] = context[32];
        context[60] = context[51];
        context[61] = context[52];
        context[62] = context[47];
        context[63] = context[48];
        context[64] = context[43];
        context[65] = context[44];
        context[66] = context[33];
        context[67] = context[34];
        context[68] = context[35];
        context[69] = context[36];
        context[70] = context[37];
        context[71] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_Assign], context[55] ) )
          continue;
        // closed e.3#0 as range 56
        // closed e.5#0 as range 58
        // closed e.6#0 as range 60
        // closed e.8#0 as range 62
        // closed e.00#0 as range 64
        // closed e.#0 as range 66
        // closed e.ScopeVars#3 as range 68
        // closed e.Pattern#3 as range 70
        //DEBUG: e.3#0: 56
        //DEBUG: e.5#0: 58
        //DEBUG: e.6#0: 60
        //DEBUG: e.8#0: 62
        //DEBUG: e.00#0: 64
        //DEBUG: e.#0: 66
        //DEBUG: e.ScopeVars#3: 68
        //DEBUG: e.Pattern#3: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=2@12/41 HalfReuse: (/55 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.00#0/64 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.8#0/62 } )/74 </75 Tile{ HalfReuse: & DoMapAccum@24/16 AsIs: (/27 AsIs: e.ScopeVars#3/68 AsIs: )/28 } (/76 Tile{ HalfReuse: )/53 AsIs: e.6#0/60 HalfReuse: >/54 HalfReuse: >/49 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z12]);
        refalrts::reinit_open_bracket(context[55]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_name(context[16], functions[efunc_gen_DoMapAccum_Z24]);
        refalrts::reinit_close_bracket(context[53]);
        refalrts::reinit_close_call(context[54]);
        refalrts::reinit_close_call(context[49]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[75] );
        refalrts::link_brackets( context[76], context[53] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[42], context[74] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[55], context[50] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[73], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[49] );
        res = refalrts::splice_elem( res, context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[50], context[42] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[4], context[55] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[72], context[73] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 # Condition/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
        context[56] = context[29];
        context[57] = context[30];
        context[58] = context[31];
        context[59] = context[32];
        context[60] = context[51];
        context[61] = context[52];
        context[62] = context[47];
        context[63] = context[48];
        context[64] = context[43];
        context[65] = context[44];
        context[66] = context[33];
        context[67] = context[34];
        context[68] = context[35];
        context[69] = context[36];
        context[70] = context[37];
        context[71] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_Condition], context[55] ) )
          continue;
        // closed e.3#0 as range 56
        // closed e.5#0 as range 58
        // closed e.6#0 as range 60
        // closed e.8#0 as range 62
        // closed e.00#0 as range 64
        // closed e.#0 as range 66
        // closed e.ScopeVars#3 as range 68
        // closed e.Pattern#3 as range 70
        //DEBUG: e.3#0: 56
        //DEBUG: e.5#0: 58
        //DEBUG: e.6#0: 60
        //DEBUG: e.8#0: 62
        //DEBUG: e.00#0: 64
        //DEBUG: e.#0: 66
        //DEBUG: e.ScopeVars#3: 68
        //DEBUG: e.Pattern#3: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=2@13/41 HalfReuse: (/55 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/50 AsIs: (/45 AsIs: e.00#0/64 AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.8#0/62 } )/74 </75 Tile{ HalfReuse: & DoMapAccum@24/16 AsIs: (/27 AsIs: e.ScopeVars#3/68 AsIs: )/28 } (/76 Tile{ HalfReuse: )/53 AsIs: e.6#0/60 HalfReuse: >/54 HalfReuse: >/49 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z13]);
        refalrts::reinit_open_bracket(context[55]);
        refalrts::reinit_open_bracket(context[42]);
        refalrts::reinit_name(context[16], functions[efunc_gen_DoMapAccum_Z24]);
        refalrts::reinit_close_bracket(context[53]);
        refalrts::reinit_close_call(context[54]);
        refalrts::reinit_close_call(context[49]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[75] );
        refalrts::link_brackets( context[76], context[53] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[42], context[74] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[55], context[50] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[73], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[49] );
        res = refalrts::splice_elem( res, context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[50], context[42] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[4], context[55] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[72], context[73] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/56 )/8 (/11 e.5#0/58 )/12 (/15 (/41 s.ChainType#1/55 (/53 e.6#0/60 )/54 (/49 e.8#0/62 )/50 (/45 e.00#0/64 )/46 )/42 e.#0/66 )/16 (/27 e.ScopeVars#3/68 )/28 e.Pattern#3/70 >/1
      context[56] = context[29];
      context[57] = context[30];
      context[58] = context[31];
      context[59] = context[32];
      context[60] = context[51];
      context[61] = context[52];
      context[62] = context[47];
      context[63] = context[48];
      context[64] = context[43];
      context[65] = context[44];
      context[66] = context[33];
      context[67] = context[34];
      context[68] = context[35];
      context[69] = context[36];
      context[70] = context[37];
      context[71] = context[38];
      // closed e.3#0 as range 56
      // closed e.5#0 as range 58
      // closed e.6#0 as range 60
      // closed e.8#0 as range 62
      // closed e.00#0 as range 64
      // closed e.#0 as range 66
      // closed e.ScopeVars#3 as range 68
      // closed e.Pattern#3 as range 70
      //DEBUG: s.ChainType#1: 55
      //DEBUG: e.3#0: 56
      //DEBUG: e.5#0: 58
      //DEBUG: e.6#0: 60
      //DEBUG: e.8#0: 62
      //DEBUG: e.00#0: 64
      //DEBUG: e.#0: 66
      //DEBUG: e.ScopeVars#3: 68
      //DEBUG: e.Pattern#3: 70

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/72 (/73 Tile{ AsIs: e.Pattern#3/70 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/56 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/58 AsIs: )/12 HalfReuse: </15 HalfReuse: & EnumerateVars-Assignments$2=1@4/41 AsIs: s.ChainType#1/55 AsIs: (/53 } Tile{ AsIs: e.#0/66 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.00#0/64 } Tile{ AsIs: )/54 AsIs: (/49 AsIs: e.8#0/62 AsIs: )/50 AsIs: (/45 } Tile{ AsIs: e.ScopeVars#3/68 } Tile{ AsIs: )/46 HalfReuse: (/42 } Tile{ AsIs: e.6#0/60 } Tile{ AsIs: )/28 } </74 & AssignOrCondition*2/75 s.ChainType#1/55/76 >/77 >/78 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[72], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
      refalrts::alloc_open_bracket(vm, context[73]);
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_AssignOrCondition_D2]);
      refalrts::copy_stvar(vm, context[76], context[55]);
      refalrts::alloc_close_call(vm, context[77]);
      refalrts::alloc_close_call(vm, context[78]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[41], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z4]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[77] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[42], context[28] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::link_brackets( context[27], context[54] );
      refalrts::link_brackets( context[53], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[73], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[74], context[78] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[46], context[42] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[54], context[45] );
      res = refalrts::splice_evar( res, context[64], context[65] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_evar( res, context[4], context[53] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/29 )/8 (/11 e.5#0/31 )/12 (/15 e.4#0/33 )/16 (/27 e.ScopeVars#3/35 )/28 e.Pattern#3/37 >/1
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[23];
    context[38] = context[24];
    // closed e.3#0 as range 29
    // closed e.5#0 as range 31
    // closed e.4#0 as range 33
    // closed e.ScopeVars#3 as range 35
    // closed e.Pattern#3 as range 37
    //DEBUG: e.3#0: 29
    //DEBUG: e.5#0: 31
    //DEBUG: e.4#0: 33
    //DEBUG: e.ScopeVars#3: 35
    //DEBUG: e.Pattern#3: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Body$1\1=2/39 (/40 Tile{ AsIs: e.Pattern#3/37 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3#0/29 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/31 AsIs: )/12 HalfReuse: </15 } & EnumerateVars-Assignments@0/41 (/42 )/43 Tile{ HalfReuse: 2/16 AsIs: (/27 AsIs: e.ScopeVars#3/35 AsIs: )/28 } Tile{ AsIs: e.4#0/33 } >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_EnumerateVarsm_Body_S1L1A2]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_EnumerateVarsm_Assignments_Z0]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_number(context[16], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[40], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Body$1\1=1@2/4 (/7 e.3#0/5 )/8 (/11 e.5#0/9 )/12 (/15 e.4#0/13 )/16 e.dyn#0/2 >/1
  // closed e.3#0 as range 5
  // closed e.5#0 as range 9
  // closed e.4#0 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.3#0: 5
  //DEBUG: e.5#0: 9
  //DEBUG: e.4#0: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Body$1\1=1@0/4 AsIs: (/7 AsIs: e.3#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.5#0/9 AsIs: )/12 HalfReuse: 2/15 } (/17 Tile{ AsIs: e.4#0/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1Z0]);
  refalrts::reinit_number(context[15], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Body_S1L1A1Z2("EnumerateVars-Body$1\\1=1@2", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Body_S1L1A1Z2);


static refalrts::FnResult func_gen_Map_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & Map@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@22/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@22/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@22/4 (/7 e.new#8/15 )/8 (/13 e.new#6/19 )/14 e.new#7/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new#8 as range 15
      // closed e.new#6 as range 19
      // closed e.new#7 as range 17
      do {
        // </0 & Map@22/4 (/7 e.new#12/21 )/8 (/13 s.new#9/27 e.new#10/23 )/14 e.new#11/25 >/1
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[17];
        context[26] = context[18];
        // closed e.new#12 as range 21
        // closed e.new#11 as range 25
        if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
          continue;
        // closed e.new#10 as range 23
        do {
          // </0 & Map@22/4 (/7 e.ScopeVars#3/28 )/8 (/13 # Sentences/27 e.0#0/30 )/14 e.Tail#1/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[27] ) )
            continue;
          // closed e.ScopeVars#3 as range 28
          // closed e.0#0 as range 30
          // closed e.Tail#1 as range 32
          //DEBUG: e.ScopeVars#3: 28
          //DEBUG: e.0#0: 30
          //DEBUG: e.Tail#1: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Sentences/27 } </34 & Map@21/35 (/36 e.ScopeVars#3/28/37 Tile{ AsIs: )/14 } Tile{ AsIs: e.0#0/30 } >/39 )/40 Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z21]);
          refalrts::alloc_open_bracket(vm, context[36]);
          refalrts::copy_evar(vm, context[37], context[38], context[28], context[29]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[34] );
          refalrts::link_brackets( context[36], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[34], context[36] );
          res = refalrts::splice_evar( res, context[13], context[27] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@22/4 (/7 e.ScopeVars#3/28 )/8 (/13 # NativeBody/27 t.0#0/34 e.1#0/30 )/14 e.Tail#1/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[27] ) )
            continue;
          // closed e.ScopeVars#3 as range 28
          // closed e.Tail#1 as range 32
          context[35] = refalrts::tvar_left( context[34], context[30], context[31] );
          if( ! context[35] )
            continue;
          // closed e.1#0 as range 30
          //DEBUG: e.ScopeVars#3: 28
          //DEBUG: e.Tail#1: 32
          //DEBUG: t.0#0: 34
          //DEBUG: e.1#0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # NativeBody/27 AsIs: t.0#0/34 AsIs: e.1#0/30 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@22/4 (/7 e.ScopeVars#3/28 )/8 (/13 # Metatable/27 e.0#0/30 )/14 e.Tail#1/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[27] ) )
          continue;
        // closed e.ScopeVars#3 as range 28
        // closed e.0#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.ScopeVars#3: 28
        //DEBUG: e.0#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Metatable/27 AsIs: e.0#0/30 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@22/4 (/7 e.ScopeVars#3/21 )/8 (/13 e.#0/23 )/14 e.Tail#1/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[17];
      context[26] = context[18];
      // closed e.ScopeVars#3 as range 21
      // closed e.#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: e.ScopeVars#3: 21
      //DEBUG: e.#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/27 </28 & EnumerateVars-Body*3/29 2/30 (/31 e.ScopeVars#3/21/32 Tile{ HalfReuse: )/13 AsIs: e.#0/23 HalfReuse: >/14 } )/34 Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.ScopeVars#3/21 AsIs: )/8 } Tile{ AsIs: e.Tail#1/25 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::alloc_number(vm, context[30], 2UL);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[34] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[31], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[27], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@22/4 (/7 e.ScopeVars#3/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars#3 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.ScopeVars#3: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & EnumerateVars-Blocks\1*1/20 2/21 (/22 e.ScopeVars#3/15/23 )/25 Tile{ AsIs: t.Next#1/13 } >/26 Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.ScopeVars#3/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Blocks_L1D1]);
    refalrts::alloc_number(vm, context[21], 2UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@22/4 (/7 e.ScopeVars#3/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#3 as range 9
    //DEBUG: e.ScopeVars#3: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@22/4 (/7 e.ScopeVars#3/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@22/4 (/7 e.ScopeVars#3/5 )/8 e.items#0/2 >/1
  // closed e.ScopeVars#3 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.ScopeVars#3: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 Tile{ HalfReuse: & EnumerateVars-Blocks\1@0/0 HalfReuse: 2/4 AsIs: (/7 AsIs: e.ScopeVars#3/5 AsIs: )/8 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Blocks_L1Z0]);
  refalrts::reinit_number(context[4], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z22("Map@22", COOKIE1_, COOKIE2_, func_gen_Map_Z22);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=4@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@7/4 (/7 e.Result0#3/21 )/8 (/11 e.Assignments0#1/23 )/12 (/15 e.ScopeVars0#3/25 )/16 (/19 e.Pattern0#1/27 )/20 e.Blocks#5/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Result0#3 as range 21
    // closed e.Assignments0#1 as range 23
    // closed e.ScopeVars0#3 as range 25
    // closed e.Pattern0#1 as range 27
    // closed e.Blocks#5 as range 29
    //DEBUG: e.Result0#3: 21
    //DEBUG: e.Assignments0#1: 23
    //DEBUG: e.ScopeVars0#3: 25
    //DEBUG: e.Pattern0#1: 27
    //DEBUG: e.Blocks#5: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@7/4 AsIs: (/7 AsIs: e.Result0#3/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Blocks#5/29 } )/31 (/32 Tile{ AsIs: e.Assignments0#1/23 } Tile{ AsIs: )/20 } </33 Tile{ HalfReuse: & DoMapAccum@24/12 AsIs: (/15 AsIs: e.ScopeVars0#3/25 AsIs: )/16 AsIs: (/19 } )/34 Tile{ AsIs: e.Pattern0#1/27 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z7]);
    refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[19], context[34] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[20] );
    refalrts::link_brackets( context[11], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@7/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } )/21 # Assign/22 (/23 Tile{ AsIs: e.Result0#3/5 } )/24 Tile{ HalfReuse: 2/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Assign]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[8], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z7("EnumerateVars-Assignments$2=4@7", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z7);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=4@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@8/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@8/4 (/7 e.Result0#3/21 )/8 (/11 e.Assignments0#1/23 )/12 (/15 e.ScopeVars0#3/25 )/16 (/19 e.Pattern0#1/27 )/20 e.Blocks#5/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Result0#3 as range 21
    // closed e.Assignments0#1 as range 23
    // closed e.ScopeVars0#3 as range 25
    // closed e.Pattern0#1 as range 27
    // closed e.Blocks#5 as range 29
    //DEBUG: e.Result0#3: 21
    //DEBUG: e.Assignments0#1: 23
    //DEBUG: e.ScopeVars0#3: 25
    //DEBUG: e.Pattern0#1: 27
    //DEBUG: e.Blocks#5: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@8/4 AsIs: (/7 AsIs: e.Result0#3/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Blocks#5/29 } )/31 (/32 Tile{ AsIs: e.Assignments0#1/23 } Tile{ AsIs: )/20 } </33 Tile{ HalfReuse: & DoMapAccum@24/12 AsIs: (/15 AsIs: e.ScopeVars0#3/25 AsIs: )/16 AsIs: (/19 } )/34 Tile{ AsIs: e.Pattern0#1/27 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z8]);
    refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[19], context[34] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[20] );
    refalrts::link_brackets( context[11], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@8/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } )/21 # Condition/22 (/23 Tile{ AsIs: e.Result0#3/5 } )/24 Tile{ HalfReuse: 2/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Condition]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[8], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z8("EnumerateVars-Assignments$2=4@8", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z8);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & EnumerateVars-Assignments$2=2@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@11/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@11/4 s.ChainType0#1/5 (/8 e.Assignments0#1/18 )/9 (/12 e.Pattern0#1/20 )/13 (/16 e.Blocks0#1/22 )/17 (/28 e.ScopeVars#3/26 )/29 e.Result#3/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Assignments0#1 as range 18
    // closed e.Pattern0#1 as range 20
    // closed e.Blocks0#1 as range 22
    // closed e.ScopeVars#3 as range 26
    // closed e.Result#3 as range 24
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Assignments0#1: 18
    //DEBUG: e.Pattern0#1: 20
    //DEBUG: e.Blocks0#1: 22
    //DEBUG: e.ScopeVars#3: 26
    //DEBUG: e.Result#3: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@11/4 AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result#3/24 } )/30 (/31 Tile{ AsIs: e.Assignments0#1/18 } )/32 (/33 e.ScopeVars#3/26/34 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/20 AsIs: )/13 HalfReuse: </16 } Tile{ HalfReuse: & Map@22/17 AsIs: (/28 AsIs: e.ScopeVars#3/26 AsIs: )/29 } Tile{ AsIs: e.Blocks0#1/22 } >/36 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[26], context[27]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z11]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[33], context[9] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[8], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@11/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=2@0/19 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 } 1/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_number(vm, context[20], 1UL);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z11("EnumerateVars-Assignments$2=2@11", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z11);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=5@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@3/4 (/7 e.Result0#3/18 )/8 (/11 e.Blocks0#5/20 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/22 )/17 (/28 e.ScopeVars#6/26 )/29 e.Pattern#6/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Result0#3 as range 18
    // closed e.Blocks0#5 as range 20
    // closed e.Assignments0#1 as range 22
    // closed e.ScopeVars#6 as range 26
    // closed e.Pattern#6 as range 24
    //DEBUG: s.Depth0#4: 13
    //DEBUG: e.Result0#3: 18
    //DEBUG: e.Blocks0#5: 20
    //DEBUG: e.Assignments0#1: 22
    //DEBUG: e.ScopeVars#6: 26
    //DEBUG: e.Pattern#6: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth0#4/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </30 & EnumerateVars-Assignments/31 (/32 Tile{ HalfReuse: (/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/18 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/20 AsIs: )/12 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Pattern#6/24 } )/33 )/34 )/35 Tile{ HalfReuse: s.Depth04 #13/17 AsIs: (/28 AsIs: e.ScopeVars#6/26 AsIs: )/29 } Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
    refalrts::reinit_svar( context[17], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[32], context[35] );
    refalrts::link_brackets( context[0], context[34] );
    refalrts::link_brackets( context[16], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@3/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 13
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=5@0/19 (/20 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/14 AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[20], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[18], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z3("EnumerateVars-Assignments$2=5@3", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z3);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=5@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@4/4 (/7 e.Result0#3/18 )/8 (/11 e.Blocks0#5/20 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/22 )/17 (/28 e.ScopeVars#6/26 )/29 e.Pattern#6/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Result0#3 as range 18
    // closed e.Blocks0#5 as range 20
    // closed e.Assignments0#1 as range 22
    // closed e.ScopeVars#6 as range 26
    // closed e.Pattern#6 as range 24
    //DEBUG: s.Depth0#4: 13
    //DEBUG: e.Result0#3: 18
    //DEBUG: e.Blocks0#5: 20
    //DEBUG: e.Assignments0#1: 22
    //DEBUG: e.ScopeVars#6: 26
    //DEBUG: e.Pattern#6: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth0#4/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </30 & EnumerateVars-Assignments/31 (/32 Tile{ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/18 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/20 AsIs: )/12 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Pattern#6/24 } )/33 )/34 )/35 Tile{ HalfReuse: s.Depth04 #13/17 AsIs: (/28 AsIs: e.ScopeVars#6/26 AsIs: )/29 } Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
    refalrts::reinit_svar( context[17], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[32], context[35] );
    refalrts::link_brackets( context[0], context[34] );
    refalrts::link_brackets( context[16], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@4/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 s.Depth0#4/13 (/16 e.Assignments0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.Depth0#4: 13
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=5@0/19 (/20 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 AsIs: s.Depth0#4/13 AsIs: (/16 AsIs: e.Assignments0#1/14 AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[20], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[18], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z4("EnumerateVars-Assignments$2=5@4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & EnumerateVars-Assignments$2=4@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@9/4 s.new#1/5 (/8 e.new#2/6 )/9 s.new#3/10 (/13 e.new#4/11 )/14 (/17 e.new#5/15 )/18 (/21 e.new#6/19 )/22 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new#4 as range 11
  // closed e.new#5 as range 15
  // closed e.new#6 as range 19
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@9/4 s.ChainType0#1/5 (/8 e.Result0#3/23 )/9 s.Depth0#4/10 (/13 e.Assignments0#1/25 )/14 (/17 e.ScopeVars0#3/27 )/18 (/21 e.Pattern0#1/29 )/22 e.Blocks#5/31 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Result0#3 as range 23
    // closed e.Assignments0#1 as range 25
    // closed e.ScopeVars0#3 as range 27
    // closed e.Pattern0#1 as range 29
    // closed e.Blocks#5 as range 31
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: s.Depth0#4: 10
    //DEBUG: e.Result0#3: 23
    //DEBUG: e.Assignments0#1: 25
    //DEBUG: e.ScopeVars0#3: 27
    //DEBUG: e.Pattern0#1: 29
    //DEBUG: e.Blocks#5: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@9/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/23 AsIs: )/9 } (/33 Tile{ AsIs: e.Blocks#5/31 } )/34 Tile{ AsIs: s.Depth0#4/10 AsIs: (/13 AsIs: e.Assignments0#1/25 AsIs: )/14 HalfReuse: </17 } & DoMapAccum@5/35 s.Depth0#4/10/36 (/37 Tile{ AsIs: e.ScopeVars0#3/27 } Tile{ AsIs: )/18 AsIs: (/21 } Tile{ AsIs: )/22 } Tile{ AsIs: e.Pattern0#1/29 } >/38 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z9]);
    refalrts::reinit_open_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[37], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[10], context[17] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@9/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 s.Depth0#4/10 (/13 e.Assignments0#1/11 )/14 (/17 e.ScopeVars0#3/15 )/18 (/21 e.Pattern0#1/19 )/22 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Assignments0#1 as range 11
  // closed e.ScopeVars0#3 as range 15
  // closed e.Pattern0#1 as range 19
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: s.Depth0#4: 10
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Assignments0#1: 11
  //DEBUG: e.ScopeVars0#3: 15
  //DEBUG: e.Pattern0#1: 19
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & EnumerateVars-Assignments$2=4@0/24 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/6 AsIs: )/9 AsIs: s.Depth0#4/10 AsIs: (/13 AsIs: e.Assignments0#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.ScopeVars0#3/15 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0#1/19 AsIs: )/22 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z9("EnumerateVars-Assignments$2=4@9", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z9);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & EnumerateVars-Assignments$2=5@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@5/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 s.new#8/30 (/33 e.new#9/31 )/34 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new#9 as range 31
  // closed e.new#10 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@5/4 (/7 e.RAssignments0#1/35 )/8 s.ChainType0#1/9 (/12 e.Result0#3/37 )/13 (/16 e.Blocks0#5/39 )/17 (/20 e.Pattern0#6/41 )/21 (/24 e.Result1#3/43 )/25 (/28 e.Blocks1#5/45 )/29 s.Depth0#4/30 (/33 e.Assignments0#1/47 )/34 (/53 e.ScopeVars#6/51 )/54 e.Pattern#6/49 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[10];
    context[38] = context[11];
    context[39] = context[14];
    context[40] = context[15];
    context[41] = context[18];
    context[42] = context[19];
    context[43] = context[22];
    context[44] = context[23];
    context[45] = context[26];
    context[46] = context[27];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    context[51] = 0;
    context[52] = 0;
    context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
    if( ! context[53] )
      continue;
    refalrts::bracket_pointers(context[53], context[54]);
    // closed e.RAssignments0#1 as range 35
    // closed e.Result0#3 as range 37
    // closed e.Blocks0#5 as range 39
    // closed e.Pattern0#6 as range 41
    // closed e.Result1#3 as range 43
    // closed e.Blocks1#5 as range 45
    // closed e.Assignments0#1 as range 47
    // closed e.ScopeVars#6 as range 51
    // closed e.Pattern#6 as range 49
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth0#4: 30
    //DEBUG: e.RAssignments0#1: 35
    //DEBUG: e.Result0#3: 37
    //DEBUG: e.Blocks0#5: 39
    //DEBUG: e.Pattern0#6: 41
    //DEBUG: e.Result1#3: 43
    //DEBUG: e.Blocks1#5: 45
    //DEBUG: e.Assignments0#1: 47
    //DEBUG: e.ScopeVars#6: 51
    //DEBUG: e.Pattern#6: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth0#4/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/35 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/37 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/39 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#6/41 AsIs: )/21 HalfReuse: )/24 } )/55 # Assign/56 (/57 Tile{ AsIs: e.Result1#3/43 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Blocks1#5/45 AsIs: )/29 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Pattern#6/49 } )/58 Tile{ HalfReuse: s.Depth04 #30/34 AsIs: (/53 AsIs: e.ScopeVars#6/51 AsIs: )/54 } Tile{ AsIs: e.Assignments0#1/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_ident(vm, context[56], identifiers[ident_Assign]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_Z2]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[24]);
    refalrts::reinit_svar( context[34], context[30] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[53], context[54] );
    refalrts::link_brackets( context[33], context[58] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[57], context[25] );
    refalrts::link_brackets( context[7], context[55] );
    refalrts::link_brackets( context[8], context[24] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[34], context[54] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[55], context[57] );
    refalrts::splice_to_freelist_open( vm, context[24], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@5/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks0#5/14 )/17 (/20 e.Pattern0#6/18 )/21 (/24 e.Result1#3/22 )/25 (/28 e.Blocks1#5/26 )/29 s.Depth0#4/30 (/33 e.Assignments0#1/31 )/34 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks0#5 as range 14
  // closed e.Pattern0#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Blocks1#5 as range 26
  // closed e.Assignments0#1 as range 31
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth0#4: 30
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks0#5: 14
  //DEBUG: e.Pattern0#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Blocks1#5: 26
  //DEBUG: e.Assignments0#1: 31
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#6/18 AsIs: )/21 HalfReuse: )/24 } )/35 # Assign/36 (/37 Tile{ AsIs: e.Result1#3/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Blocks1#5/26 AsIs: )/29 AsIs: s.Depth0#4/30 AsIs: (/33 AsIs: e.Assignments0#1/31 AsIs: )/34 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_Assign]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[37], context[25] );
  refalrts::link_brackets( context[7], context[35] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[25];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z5("EnumerateVars-Assignments$2=5@5", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z5);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & EnumerateVars-Assignments$2=5@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@6/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 s.new#8/30 (/33 e.new#9/31 )/34 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new#9 as range 31
  // closed e.new#10 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@6/4 (/7 e.RAssignments0#1/35 )/8 s.ChainType0#1/9 (/12 e.Result0#3/37 )/13 (/16 e.Blocks0#5/39 )/17 (/20 e.Pattern0#6/41 )/21 (/24 e.Result1#3/43 )/25 (/28 e.Blocks1#5/45 )/29 s.Depth0#4/30 (/33 e.Assignments0#1/47 )/34 (/53 e.ScopeVars#6/51 )/54 e.Pattern#6/49 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[10];
    context[38] = context[11];
    context[39] = context[14];
    context[40] = context[15];
    context[41] = context[18];
    context[42] = context[19];
    context[43] = context[22];
    context[44] = context[23];
    context[45] = context[26];
    context[46] = context[27];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    context[51] = 0;
    context[52] = 0;
    context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
    if( ! context[53] )
      continue;
    refalrts::bracket_pointers(context[53], context[54]);
    // closed e.RAssignments0#1 as range 35
    // closed e.Result0#3 as range 37
    // closed e.Blocks0#5 as range 39
    // closed e.Pattern0#6 as range 41
    // closed e.Result1#3 as range 43
    // closed e.Blocks1#5 as range 45
    // closed e.Assignments0#1 as range 47
    // closed e.ScopeVars#6 as range 51
    // closed e.Pattern#6 as range 49
    //DEBUG: s.ChainType0#1: 9
    //DEBUG: s.Depth0#4: 30
    //DEBUG: e.RAssignments0#1: 35
    //DEBUG: e.Result0#3: 37
    //DEBUG: e.Blocks0#5: 39
    //DEBUG: e.Pattern0#6: 41
    //DEBUG: e.Result1#3: 43
    //DEBUG: e.Blocks1#5: 45
    //DEBUG: e.Assignments0#1: 47
    //DEBUG: e.ScopeVars#6: 51
    //DEBUG: e.Pattern#6: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Depth0#4/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments@2/4 AsIs: (/7 AsIs: e.RAssignments0#1/35 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/37 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/39 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#6/41 AsIs: )/21 HalfReuse: )/24 } )/55 # Condition/56 (/57 Tile{ AsIs: e.Result1#3/43 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Blocks1#5/45 AsIs: )/29 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Pattern#6/49 } )/58 Tile{ HalfReuse: s.Depth04 #30/34 AsIs: (/53 AsIs: e.ScopeVars#6/51 AsIs: )/54 } Tile{ AsIs: e.Assignments0#1/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_ident(vm, context[56], identifiers[ident_Condition]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_Z2]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[24]);
    refalrts::reinit_svar( context[34], context[30] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[53], context[54] );
    refalrts::link_brackets( context[33], context[58] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[57], context[25] );
    refalrts::link_brackets( context[7], context[55] );
    refalrts::link_brackets( context[8], context[24] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[34], context[54] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[55], context[57] );
    refalrts::splice_to_freelist_open( vm, context[24], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@6/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType0#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks0#5/14 )/17 (/20 e.Pattern0#6/18 )/21 (/24 e.Result1#3/22 )/25 (/28 e.Blocks1#5/26 )/29 s.Depth0#4/30 (/33 e.Assignments0#1/31 )/34 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks0#5 as range 14
  // closed e.Pattern0#6 as range 18
  // closed e.Result1#3 as range 22
  // closed e.Blocks1#5 as range 26
  // closed e.Assignments0#1 as range 31
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 9
  //DEBUG: s.Depth0#4: 30
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks0#5: 14
  //DEBUG: e.Pattern0#6: 18
  //DEBUG: e.Result1#3: 22
  //DEBUG: e.Blocks1#5: 26
  //DEBUG: e.Assignments0#1: 31
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType0#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#6/18 AsIs: )/21 HalfReuse: )/24 } )/35 # Condition/36 (/37 Tile{ AsIs: e.Result1#3/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Blocks1#5/26 AsIs: )/29 AsIs: s.Depth0#4/30 AsIs: (/33 AsIs: e.Assignments0#1/31 AsIs: )/34 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_Condition]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[37], context[25] );
  refalrts::link_brackets( context[7], context[35] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[25];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z6("EnumerateVars-Assignments$2=5@6", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z6);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & EnumerateVars-Assignments$2=4@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@10/4 (/7 e.new#1/5 )/8 s.new#2/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 s.new#6/22 (/25 e.new#7/23 )/26 s.new#8/27 (/30 e.new#9/28 )/31 (/34 e.new#10/32 )/35 (/38 e.new#11/36 )/39 e.new#12/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new#7 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  context[36] = 0;
  context[37] = 0;
  context[38] = refalrts::brackets_left( context[36], context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[38], context[39]);
  // closed e.new#9 as range 28
  // closed e.new#10 as range 32
  // closed e.new#11 as range 36
  // closed e.new#12 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@10/4 (/7 e.RAssignments0#1/40 )/8 s.ChainType1#1/9 (/12 e.Result0#3/42 )/13 (/16 e.Blocks0#5/44 )/17 (/20 e.Pattern#6/46 )/21 s.ChainType0#1/22 (/25 e.Result1#3/48 )/26 s.Depth0#4/27 (/30 e.Assignments0#1/50 )/31 (/34 e.ScopeVars0#3/52 )/35 (/38 e.Pattern0#1/54 )/39 e.Blocks#5/56 >/1
    context[40] = context[5];
    context[41] = context[6];
    context[42] = context[10];
    context[43] = context[11];
    context[44] = context[14];
    context[45] = context[15];
    context[46] = context[18];
    context[47] = context[19];
    context[48] = context[23];
    context[49] = context[24];
    context[50] = context[28];
    context[51] = context[29];
    context[52] = context[32];
    context[53] = context[33];
    context[54] = context[36];
    context[55] = context[37];
    context[56] = context[2];
    context[57] = context[3];
    // closed e.RAssignments0#1 as range 40
    // closed e.Result0#3 as range 42
    // closed e.Blocks0#5 as range 44
    // closed e.Pattern#6 as range 46
    // closed e.Result1#3 as range 48
    // closed e.Assignments0#1 as range 50
    // closed e.ScopeVars0#3 as range 52
    // closed e.Pattern0#1 as range 54
    // closed e.Blocks#5 as range 56
    //DEBUG: s.ChainType1#1: 9
    //DEBUG: s.ChainType0#1: 22
    //DEBUG: s.Depth0#4: 27
    //DEBUG: e.RAssignments0#1: 40
    //DEBUG: e.Result0#3: 42
    //DEBUG: e.Blocks0#5: 44
    //DEBUG: e.Pattern#6: 46
    //DEBUG: e.Result1#3: 48
    //DEBUG: e.Assignments0#1: 50
    //DEBUG: e.ScopeVars0#3: 52
    //DEBUG: e.Pattern0#1: 54
    //DEBUG: e.Blocks#5: 56

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5/4 AsIs: (/7 AsIs: e.RAssignments0#1/40 HalfReuse: (/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/42 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/44 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern#6/46 AsIs: )/21 } Tile{ AsIs: )/39 } )/58 Tile{ AsIs: s.ChainType0#1/22 AsIs: (/25 } Tile{ AsIs: e.Result1#3/48 } Tile{ AsIs: )/35 AsIs: (/38 } Tile{ AsIs: e.Blocks#5/56 } Tile{ AsIs: )/26 AsIs: s.Depth0#4/27 AsIs: (/30 AsIs: e.Assignments0#1/50 AsIs: )/31 HalfReuse: </34 } & DoMapAccum@5/59 s.Depth0#4/27/60 (/61 Tile{ AsIs: e.ScopeVars0#3/52 } )/62 (/63 )/64 Tile{ AsIs: e.Pattern0#1/54 } >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::copy_stvar(vm, context[60], context[27]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_open_call(context[34]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[63], context[64] );
    refalrts::link_brackets( context[61], context[62] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[38], context[26] );
    refalrts::link_brackets( context[25], context[35] );
    refalrts::link_brackets( context[7], context[58] );
    refalrts::link_brackets( context[8], context[39] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[62], context[64] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[59], context[61] );
    res = refalrts::splice_evar( res, context[26], context[34] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[35], context[38] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_elem( res, context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@10/4 (/7 e.RAssignments0#1/5 )/8 s.ChainType1#1/9 (/12 e.Result0#3/10 )/13 (/16 e.Blocks0#5/14 )/17 (/20 e.Pattern#6/18 )/21 s.ChainType0#1/22 (/25 e.Result1#3/23 )/26 s.Depth0#4/27 (/30 e.Assignments0#1/28 )/31 (/34 e.ScopeVars0#3/32 )/35 (/38 e.Pattern0#1/36 )/39 e.dyn#0/2 >/1
  // closed e.RAssignments0#1 as range 5
  // closed e.Result0#3 as range 10
  // closed e.Blocks0#5 as range 14
  // closed e.Pattern#6 as range 18
  // closed e.Result1#3 as range 23
  // closed e.Assignments0#1 as range 28
  // closed e.ScopeVars0#3 as range 32
  // closed e.Pattern0#1 as range 36
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType1#1: 9
  //DEBUG: s.ChainType0#1: 22
  //DEBUG: s.Depth0#4: 27
  //DEBUG: e.RAssignments0#1: 5
  //DEBUG: e.Result0#3: 10
  //DEBUG: e.Blocks0#5: 14
  //DEBUG: e.Pattern#6: 18
  //DEBUG: e.Result1#3: 23
  //DEBUG: e.Assignments0#1: 28
  //DEBUG: e.ScopeVars0#3: 32
  //DEBUG: e.Pattern0#1: 36
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 AsIs: e.RAssignments0#1/5 HalfReuse: (/8 AsIs: s.ChainType1#1/9 AsIs: (/12 AsIs: e.Result0#3/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#5/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.Pattern#6/18 } )/40 )/41 Tile{ AsIs: )/21 AsIs: s.ChainType0#1/22 AsIs: (/25 AsIs: e.Result1#3/23 AsIs: )/26 AsIs: s.Depth0#4/27 AsIs: (/30 AsIs: e.Assignments0#1/28 AsIs: )/31 AsIs: (/34 AsIs: e.ScopeVars0#3/32 AsIs: )/35 AsIs: (/38 AsIs: e.Pattern0#1/36 AsIs: )/39 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[38], context[39] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::link_brackets( context[8], context[41] );
  refalrts::link_brackets( context[20], context[40] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z10("EnumerateVars-Assignments$2=4@10", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoMapAccum$1=1@21/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@21/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & DoMapAccum$1=1@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/18 )/9 (/12 e.Scanned0#1/20 )/13 (/16 e.Tail0#1/22 )/17 t.Acc#2/26 e.StepScanned#2/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.LocalVars#2 as range 18
    // closed e.Scanned0#1 as range 20
    // closed e.Tail0#1 as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    // closed e.StepScanned#2 as range 24
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.LocalVars#2: 18
    //DEBUG: e.Scanned0#1: 20
    //DEBUG: e.Tail0#1: 22
    //DEBUG: t.Acc#2: 26
    //DEBUG: e.StepScanned#2: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@21/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.LocalVars#2/18 AsIs: )/9 } Tile{ AsIs: t.Acc#2/26 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Scanned0#1/20 } Tile{ AsIs: e.StepScanned#2/24 } Tile{ AsIs: )/17 } Tile{ AsIs: e.Tail0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@21/4 s.MarkupContext0#1/5 (/8 e.LocalVars#2/6 )/9 (/12 e.Scanned0#1/10 )/13 (/16 e.Tail0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.LocalVars#2 as range 6
  // closed e.Scanned0#1 as range 10
  // closed e.Tail0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.LocalVars#2: 6
  //DEBUG: e.Scanned0#1: 10
  //DEBUG: e.Tail0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & DoMapAccum$1=1@0/19 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 } )/20 (/21 Tile{ AsIs: e.LocalVars#2/6 } )/22 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Scanned0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0#1/14 AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[0], context[9] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[8], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z21("DoMapAccum$1=1@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z21);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & ExtractNested-Result-Term$5=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.new#10/18 )/8 (/11 e.new#11/20 )/12 (/15 e.new#12/22 )/16 s.new#6/17 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 e.new#9/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[24], context[25] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    // closed e.new#10 as range 18
    // closed e.new#11 as range 20
    // closed e.new#12 as range 22
    // closed e.new#7 as range 26
    // closed e.new#8 as range 30
    // closed e.new#9 as range 24
    do {
      // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.new#16/34 )/8 (/11 e.new#17/36 )/12 (/15 e.new#18/38 )/16 s.new#13/17 (/28 )/29 (/32 e.new#15/40 )/33 e.new#14/42 >/1
      context[34] = context[18];
      context[35] = context[19];
      context[36] = context[20];
      context[37] = context[21];
      context[38] = context[22];
      context[39] = context[23];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[24];
      context[43] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new#16 as range 34
      // closed e.new#17 as range 36
      // closed e.new#18 as range 38
      // closed e.new#15 as range 40
      // closed e.new#14 as range 42
      do {
        // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.new#23/44 )/8 (/11 e.new#24/46 )/12 (/15 e.new#25/48 )/16 s.new#19/17 (/28 )/29 (/32 e.new#22/50 )/33 s.new#20/54 e.new#21/52 >/1
        context[44] = context[34];
        context[45] = context[35];
        context[46] = context[36];
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[40];
        context[51] = context[41];
        context[52] = context[42];
        context[53] = context[43];
        // closed e.new#23 as range 44
        // closed e.new#24 as range 46
        // closed e.new#25 as range 48
        // closed e.new#22 as range 50
        if( ! refalrts::svar_left( context[54], context[52], context[53] ) )
          continue;
        // closed e.new#21 as range 52
        do {
          // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/55 )/8 (/11 e.7#0/57 )/12 (/15 e.4#0/59 )/16 s.MarkupContext0#1/17 (/28 )/29 (/32 e.NestedNestedFuncs#2/61 )/33 # Sentences/54 e.#0/63 >/1
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[54] ) )
            continue;
          // closed e.2#0 as range 55
          // closed e.7#0 as range 57
          // closed e.4#0 as range 59
          // closed e.NestedNestedFuncs#2 as range 61
          // closed e.#0 as range 63
          //DEBUG: s.MarkupContext0#1: 17
          //DEBUG: e.2#0: 55
          //DEBUG: e.7#0: 57
          //DEBUG: e.4#0: 59
          //DEBUG: e.NestedNestedFuncs#2: 61
          //DEBUG: e.#0: 63

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext0#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.2#0/55 } Tile{ AsIs: e.NestedNestedFuncs#2/61 } Tile{ AsIs: (/7 } # Function/65 Tile{ HalfReuse: # GN-Local/8 AsIs: (/11 } e.7#0/57/66 Tile{ AsIs: )/33 AsIs: # Sentences/54 AsIs: e.#0/63 HalfReuse: )/1 } Tile{ AsIs: (/28 } # Drive/68 Tile{ AsIs: e.7#0/57 } )/69 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/59 AsIs: )/16 } Tile{ AsIs: )/29 AsIs: (/32 } # Symbol/70 # Name/71 e.7#0/57/72 )/74 Tile{ ]] }
          refalrts::alloc_ident(vm, context[65], identifiers[ident_Function]);
          refalrts::copy_evar(vm, context[66], context[67], context[57], context[58]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_Drive]);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::alloc_ident(vm, context[70], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[71], identifiers[ident_Name]);
          refalrts::copy_evar(vm, context[72], context[73], context[57], context[58]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_open_bracket(context[4]);
          refalrts::reinit_ident(context[8], identifiers[ident_GNm_Local]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[32], context[74] );
          refalrts::link_brackets( context[0], context[29] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[4], context[12] );
          refalrts::link_brackets( context[28], context[69] );
          refalrts::link_brackets( context[7], context[1] );
          refalrts::link_brackets( context[11], context[33] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[70], context[74] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_evar( res, context[12], context[16] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[33], context[1] );
          res = refalrts::splice_evar( res, context[66], context[67] );
          res = refalrts::splice_evar( res, context[8], context[11] );
          res = refalrts::splice_elem( res, context[65] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/55 )/8 (/11 e.7#0/57 )/12 (/15 e.4#0/59 )/16 s.MarkupContext0#1/17 (/28 )/29 (/32 e.NestedNestedFuncs#2/61 )/33 # NativeBody/54 e.#0/63 >/1
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        context[64] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[54] ) )
          continue;
        // closed e.2#0 as range 55
        // closed e.7#0 as range 57
        // closed e.4#0 as range 59
        // closed e.NestedNestedFuncs#2 as range 61
        // closed e.#0 as range 63
        //DEBUG: s.MarkupContext0#1: 17
        //DEBUG: e.2#0: 55
        //DEBUG: e.7#0: 57
        //DEBUG: e.4#0: 59
        //DEBUG: e.NestedNestedFuncs#2: 61
        //DEBUG: e.#0: 63

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext0#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.2#0/55 } Tile{ AsIs: e.NestedNestedFuncs#2/61 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Function/28 } Tile{ HalfReuse: # GN-Local/8 AsIs: (/11 } Tile{ AsIs: e.7#0/57 } Tile{ AsIs: )/33 AsIs: # NativeBody/54 AsIs: e.#0/63 HalfReuse: )/1 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/59 AsIs: )/16 } Tile{ AsIs: )/29 AsIs: (/32 } # Symbol/65 # Name/66 e.7#0/57/67 )/69 Tile{ ]] }
        refalrts::alloc_ident(vm, context[65], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[66], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[67], context[68], context[57], context[58]);
        refalrts::alloc_close_bracket(vm, context[69]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_ident(context[28], identifiers[ident_Function]);
        refalrts::reinit_ident(context[8], identifiers[ident_GNm_Local]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[32], context[69] );
        refalrts::link_brackets( context[0], context[29] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[4], context[12] );
        refalrts::link_brackets( context[7], context[1] );
        refalrts::link_brackets( context[11], context[33] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[65], context[69] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[12], context[16] );
        res = refalrts::splice_evar( res, context[33], context[1] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/44 )/8 (/11 e.7#0/46 )/12 (/15 e.4#0/48 )/16 s.MarkupContext0#1/17 (/28 )/29 (/32 e.NestedNestedFuncs#2/50 )/33 e.Body#2/52 >/1
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      // closed e.2#0 as range 44
      // closed e.7#0 as range 46
      // closed e.4#0 as range 48
      // closed e.NestedNestedFuncs#2 as range 50
      // closed e.Body#2 as range 52
      //DEBUG: s.MarkupContext0#1: 17
      //DEBUG: e.2#0: 44
      //DEBUG: e.7#0: 46
      //DEBUG: e.4#0: 48
      //DEBUG: e.NestedNestedFuncs#2: 50
      //DEBUG: e.Body#2: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkupContext0#1/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.2#0/44 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/50 } )/54 </55 & ExtractNested-Result-Term$5=2:1$1=1/56 Tile{ AsIs: (/28 } Tile{ AsIs: e.7#0/46 } Tile{ AsIs: )/29 AsIs: (/32 } e.Body#2/52/57 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/48 AsIs: )/16 } </59 & ExtractNested-Result-Term$5=2:1$1=1:1*2/60 (/61 e.7#0/46/62 Tile{ AsIs: )/33 AsIs: e.Body#2/52 AsIs: >/1 } >/64 >/65 Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1]);
      refalrts::copy_evar(vm, context[57], context[58], context[52], context[53]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[46], context[47]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[59] );
      refalrts::link_brackets( context[61], context[33] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[32], context[12] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[11], context[54] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[64], context[65] );
      res = refalrts::splice_evar( res, context[33], context[1] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[59], context[61] );
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/34 )/8 (/11 e.7#0/36 )/12 (/15 e.4#0/38 )/16 s.MarkupContext0#1/17 (/28 e.NestedBorrowedVars#2/40 )/29 (/32 e.NestedNestedFuncs#2/42 )/33 # Sentences/46 e.#0/44 >/1
      context[34] = context[18];
      context[35] = context[19];
      context[36] = context[20];
      context[37] = context[21];
      context[38] = context[22];
      context[39] = context[23];
      context[40] = context[26];
      context[41] = context[27];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[24];
      context[45] = context[25];
      context[46] = refalrts::ident_left( identifiers[ident_Sentences], context[44], context[45] );
      if( ! context[46] )
        continue;
      // closed e.2#0 as range 34
      // closed e.7#0 as range 36
      // closed e.4#0 as range 38
      // closed e.NestedBorrowedVars#2 as range 40
      // closed e.NestedNestedFuncs#2 as range 42
      // closed e.#0 as range 44
      //DEBUG: s.MarkupContext0#1: 17
      //DEBUG: e.2#0: 34
      //DEBUG: e.7#0: 36
      //DEBUG: e.4#0: 38
      //DEBUG: e.NestedBorrowedVars#2: 40
      //DEBUG: e.NestedNestedFuncs#2: 42
      //DEBUG: e.#0: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.2#0/34 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/42 } )/47 </48 & ExtractNested-Result-Term$5=2:1$2=1@1/49 (/50 Tile{ AsIs: e.7#0/36 } Tile{ AsIs: )/33 HalfReuse: (/46 } Tile{ AsIs: e.#0/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/38 AsIs: )/16 } Tile{ AsIs: (/28 AsIs: e.NestedBorrowedVars#2/40 AsIs: )/29 HalfReuse: </32 } & CreateContext/51 Tile{ AsIs: s.MarkupContext0#1/17 } e.NestedBorrowedVars#2/40/52 >/54 >/55 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z1]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_CreateContext]);
      refalrts::copy_evar(vm, context[52], context[53], context[40], context[41]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
      refalrts::reinit_open_bracket(context[46]);
      refalrts::reinit_open_call(context[32]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[46], context[12] );
      refalrts::link_brackets( context[50], context[33] );
      refalrts::link_brackets( context[11], context[47] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[28], context[32] );
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[33], context[46] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/34 )/8 (/11 e.7#0/36 )/12 (/15 e.4#0/38 )/16 s.MarkupContext0#1/17 (/28 e.NestedBorrowedVars#2/40 )/29 (/32 e.NestedNestedFuncs#2/42 )/33 e.Body#2/44 >/1
    context[34] = context[18];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[24];
    context[45] = context[25];
    // closed e.2#0 as range 34
    // closed e.7#0 as range 36
    // closed e.4#0 as range 38
    // closed e.NestedBorrowedVars#2 as range 40
    // closed e.NestedNestedFuncs#2 as range 42
    // closed e.Body#2 as range 44
    //DEBUG: s.MarkupContext0#1: 17
    //DEBUG: e.2#0: 34
    //DEBUG: e.7#0: 36
    //DEBUG: e.4#0: 38
    //DEBUG: e.NestedBorrowedVars#2: 40
    //DEBUG: e.NestedNestedFuncs#2: 42
    //DEBUG: e.Body#2: 44

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.2#0/34 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/42 } Tile{ AsIs: )/33 } </46 & ExtractNested-Result-Term$5=2:1*2/47 Tile{ AsIs: (/32 } Tile{ AsIs: e.7#0/36 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.4#0/38 } )/48 (/49 e.NestedBorrowedVars#2/40/50 )/52 (/53 Tile{ AsIs: )/16 AsIs: s.MarkupContext0#1/17 AsIs: (/28 AsIs: e.NestedBorrowedVars#2/40 AsIs: )/29 } Tile{ AsIs: e.Body#2/44 } >/54 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1D2]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[40], context[41]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[46] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[53], context[16] );
    refalrts::link_brackets( context[49], context[52] );
    refalrts::link_brackets( context[15], context[48] );
    refalrts::link_brackets( context[32], context[12] );
    refalrts::link_brackets( context[11], context[33] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[16], context[29] );
    res = refalrts::splice_evar( res, context[48], context[53] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=1@1/4 (/7 e.2#0/5 )/8 (/11 e.7#0/9 )/12 (/15 e.4#0/13 )/16 s.MarkupContext0#1/17 e.dyn#0/2 >/1
  // closed e.2#0 as range 5
  // closed e.7#0 as range 9
  // closed e.4#0 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 17
  //DEBUG: e.2#0: 5
  //DEBUG: e.7#0: 9
  //DEBUG: e.4#0: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=1@0/4 AsIs: (/7 AsIs: e.2#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.7#0/9 AsIs: )/12 AsIs: (/15 AsIs: e.4#0/13 AsIs: )/16 } (/18 )/19 Tile{ AsIs: s.MarkupContext0#1/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A1Z1("ExtractNested-Result-Term$5=1@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A1Z1);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & ExtractNested-Conditions$1=2@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=2@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=2@1/4 (/7 e.ResultNestedFuncs0#2/30 )/8 (/11 e.ConditionName0#1/32 )/12 (/15 e.Result0#2/34 )/16 (/19 e.Pattern0#1/36 )/20 s.MarkupContext0#1/21 (/24 e.Conditions0#1/38 )/25 (/28 e.LocalVars#2/40 )/29 (/46 e.BorrowedVars#3/44 )/47 e.PatternLocalVars#3/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    // closed e.ResultNestedFuncs0#2 as range 30
    // closed e.ConditionName0#1 as range 32
    // closed e.Result0#2 as range 34
    // closed e.Pattern0#1 as range 36
    // closed e.Conditions0#1 as range 38
    // closed e.LocalVars#2 as range 40
    // closed e.BorrowedVars#3 as range 44
    // closed e.PatternLocalVars#3 as range 42
    //DEBUG: s.MarkupContext0#1: 21
    //DEBUG: e.ResultNestedFuncs0#2: 30
    //DEBUG: e.ConditionName0#1: 32
    //DEBUG: e.Result0#2: 34
    //DEBUG: e.Pattern0#1: 36
    //DEBUG: e.Conditions0#1: 38
    //DEBUG: e.LocalVars#2: 40
    //DEBUG: e.BorrowedVars#3: 44
    //DEBUG: e.PatternLocalVars#3: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=3@1/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/30 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/32 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/34 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/36 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 } Tile{ AsIs: e.BorrowedVars#3/44 } Tile{ AsIs: )/29 AsIs: (/46 } Tile{ AsIs: e.Conditions0#1/38 } Tile{ AsIs: )/25 HalfReuse: </28 } & Uniq/48 Tile{ AsIs: e.LocalVars#2/40 } Tile{ AsIs: e.PatternLocalVars#3/42 } Tile{ HalfReuse: >/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_Uniq]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A3Z1]);
    refalrts::reinit_open_call(context[28]);
    refalrts::reinit_close_call(context[47]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[46], context[25] );
    refalrts::link_brackets( context[24], context[29] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[29], context[46] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=2@1/4 (/7 e.ResultNestedFuncs0#2/5 )/8 (/11 e.ConditionName0#1/9 )/12 (/15 e.Result0#2/13 )/16 (/19 e.Pattern0#1/17 )/20 s.MarkupContext0#1/21 (/24 e.Conditions0#1/22 )/25 (/28 e.LocalVars#2/26 )/29 e.dyn#0/2 >/1
  // closed e.ResultNestedFuncs0#2 as range 5
  // closed e.ConditionName0#1 as range 9
  // closed e.Result0#2 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.Conditions0#1 as range 22
  // closed e.LocalVars#2 as range 26
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 21
  //DEBUG: e.ResultNestedFuncs0#2: 5
  //DEBUG: e.ConditionName0#1: 9
  //DEBUG: e.Result0#2: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.Conditions0#1: 22
  //DEBUG: e.LocalVars#2: 26
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=2@0/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 } )/30 (/31 Tile{ AsIs: e.Conditions0#1/22 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.LocalVars#2/26 AsIs: )/29 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[31], context[25] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[25];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A2Z1("ExtractNested-Conditions$1=2@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & DoMapAccum$1=1@22/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@22/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & DoMapAccum$1=1@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/26 )/9 (/12 e.LocalVars0#1/28 )/13 (/16 e.LocalVars#2/30 )/17 (/20 e.Scanned0#1/32 )/21 (/24 e.Tail0#1/34 )/25 t.Acc#2/38 e.StepScanned#2/36 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.ScopeVars0#1 as range 26
    // closed e.LocalVars0#1 as range 28
    // closed e.LocalVars#2 as range 30
    // closed e.Scanned0#1 as range 32
    // closed e.Tail0#1 as range 34
    context[39] = refalrts::tvar_left( context[38], context[36], context[37] );
    if( ! context[39] )
      continue;
    // closed e.StepScanned#2 as range 36
    //DEBUG: s.MarkupContext0#1: 5
    //DEBUG: e.ScopeVars0#1: 26
    //DEBUG: e.LocalVars0#1: 28
    //DEBUG: e.LocalVars#2: 30
    //DEBUG: e.Scanned0#1: 32
    //DEBUG: e.Tail0#1: 34
    //DEBUG: t.Acc#2: 38
    //DEBUG: e.StepScanned#2: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/20 {REMOVED TILE} )/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@22/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 AsIs: e.ScopeVars0#1/26 AsIs: )/9 AsIs: (/12 AsIs: e.LocalVars0#1/28 AsIs: )/13 AsIs: (/16 AsIs: e.LocalVars#2/30 AsIs: )/17 } Tile{ AsIs: t.Acc#2/38 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Scanned0#1/32 } Tile{ AsIs: e.StepScanned#2/36 } Tile{ AsIs: )/25 } Tile{ AsIs: e.Tail0#1/34 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    refalrts::splice_to_freelist_open( vm, context[17], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@22/4 s.MarkupContext0#1/5 (/8 e.ScopeVars0#1/6 )/9 (/12 e.LocalVars0#1/10 )/13 (/16 e.LocalVars#2/14 )/17 (/20 e.Scanned0#1/18 )/21 (/24 e.Tail0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.ScopeVars0#1 as range 6
  // closed e.LocalVars0#1 as range 10
  // closed e.LocalVars#2 as range 14
  // closed e.Scanned0#1 as range 18
  // closed e.Tail0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 5
  //DEBUG: e.ScopeVars0#1: 6
  //DEBUG: e.LocalVars0#1: 10
  //DEBUG: e.LocalVars#2: 14
  //DEBUG: e.Scanned0#1: 18
  //DEBUG: e.Tail0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 } & DoMapAccum$1=1@0/26 Tile{ HalfReuse: (/0 Reuse: & ExtractNested-Result-Term@0/4 AsIs: s.MarkupContext0#1/5 AsIs: (/8 } Tile{ AsIs: e.ScopeVars0#1/6 } Tile{ AsIs: e.LocalVars0#1/10 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.LocalVars#2/14 } Tile{ AsIs: )/9 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Scanned0#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Tail0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[0], context[17] );
  refalrts::link_brackets( context[16], context[9] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z22("DoMapAccum$1=1@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z22);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 95 elems
  refalrts::Iter context[95];
  refalrts::zeros( context, 95 );
  // </0 & ExtractNested-Result-Term$5=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 s.new#6/25 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.new#12/26 )/8 (/11 e.new#13/28 )/12 (/15 e.new#14/30 )/16 (/19 e.new#15/32 )/20 (/23 e.new#16/34 )/24 s.new#8/25 (/40 e.new#9/38 )/41 (/44 e.new#10/42 )/45 e.new#11/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[2];
    context[37] = context[3];
    context[38] = 0;
    context[39] = 0;
    context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
    if( ! context[40] )
      continue;
    refalrts::bracket_pointers(context[40], context[41]);
    context[42] = 0;
    context[43] = 0;
    context[44] = refalrts::brackets_left( context[42], context[43], context[36], context[37] );
    if( ! context[44] )
      continue;
    refalrts::bracket_pointers(context[44], context[45]);
    // closed e.new#12 as range 26
    // closed e.new#13 as range 28
    // closed e.new#14 as range 30
    // closed e.new#15 as range 32
    // closed e.new#16 as range 34
    // closed e.new#9 as range 38
    // closed e.new#10 as range 42
    // closed e.new#11 as range 36
    do {
      // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.new#20/46 )/8 (/11 e.new#21/48 )/12 (/15 e.new#22/50 )/16 (/19 e.new#23/52 )/20 (/23 e.new#24/54 )/24 s.new#17/25 (/40 )/41 (/44 e.new#19/56 )/45 e.new#18/58 >/1
      context[46] = context[26];
      context[47] = context[27];
      context[48] = context[28];
      context[49] = context[29];
      context[50] = context[30];
      context[51] = context[31];
      context[52] = context[32];
      context[53] = context[33];
      context[54] = context[34];
      context[55] = context[35];
      context[56] = context[42];
      context[57] = context[43];
      context[58] = context[36];
      context[59] = context[37];
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new#20 as range 46
      // closed e.new#21 as range 48
      // closed e.new#22 as range 50
      // closed e.new#23 as range 52
      // closed e.new#24 as range 54
      // closed e.new#19 as range 56
      // closed e.new#18 as range 58
      do {
        // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.new#29/60 )/8 (/11 e.new#30/62 )/12 (/15 e.new#31/64 )/16 (/19 e.new#32/66 )/20 (/23 e.new#33/68 )/24 s.new#25/25 (/40 )/41 (/44 e.new#28/70 )/45 s.new#26/74 e.new#27/72 >/1
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = context[58];
        context[73] = context[59];
        // closed e.new#29 as range 60
        // closed e.new#30 as range 62
        // closed e.new#31 as range 64
        // closed e.new#32 as range 66
        // closed e.new#33 as range 68
        // closed e.new#28 as range 70
        if( ! refalrts::svar_left( context[74], context[72], context[73] ) )
          continue;
        // closed e.new#27 as range 72
        do {
          // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/75 )/8 (/11 e.7#0/77 )/12 (/15 e.4#0/79 )/16 (/19 e.ScopeVars0#1/81 )/20 (/23 e.LocalVars0#1/83 )/24 s.MarkupContext0#1/25 (/40 )/41 (/44 e.NestedNestedFuncs#2/85 )/45 # Sentences/74 e.#0/87 >/1
          context[75] = context[60];
          context[76] = context[61];
          context[77] = context[62];
          context[78] = context[63];
          context[79] = context[64];
          context[80] = context[65];
          context[81] = context[66];
          context[82] = context[67];
          context[83] = context[68];
          context[84] = context[69];
          context[85] = context[70];
          context[86] = context[71];
          context[87] = context[72];
          context[88] = context[73];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[74] ) )
            continue;
          // closed e.2#0 as range 75
          // closed e.7#0 as range 77
          // closed e.4#0 as range 79
          // closed e.ScopeVars0#1 as range 81
          // closed e.LocalVars0#1 as range 83
          // closed e.NestedNestedFuncs#2 as range 85
          // closed e.#0 as range 87
          //DEBUG: s.MarkupContext0#1: 25
          //DEBUG: e.2#0: 75
          //DEBUG: e.7#0: 77
          //DEBUG: e.4#0: 79
          //DEBUG: e.ScopeVars0#1: 81
          //DEBUG: e.LocalVars0#1: 83
          //DEBUG: e.NestedNestedFuncs#2: 85
          //DEBUG: e.#0: 87

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars0#1/81 {REMOVED TILE} {REMOVED TILE} e.LocalVars0#1/83 {REMOVED TILE} s.MarkupContext0#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.2#0/75 } Tile{ AsIs: e.NestedNestedFuncs#2/85 } Tile{ AsIs: (/40 HalfReuse: # Function/41 HalfReuse: # GN-Local/44 } Tile{ AsIs: (/23 } e.7#0/77/89 Tile{ AsIs: )/45 AsIs: # Sentences/74 AsIs: e.#0/87 HalfReuse: )/1 } Tile{ AsIs: (/11 } # Drive/91 Tile{ AsIs: e.7#0/77 } Tile{ AsIs: )/24 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/79 AsIs: )/16 HalfReuse: )/19 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Symbol/8 } # Name/92 e.7#0/77/93 Tile{ AsIs: )/20 } Tile{ ]] }
          refalrts::copy_evar(vm, context[89], context[90], context[77], context[78]);
          refalrts::alloc_ident(vm, context[91], identifiers[ident_Drive]);
          refalrts::alloc_ident(vm, context[92], identifiers[ident_Name]);
          refalrts::copy_evar(vm, context[93], context[94], context[77], context[78]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_open_bracket(context[4]);
          refalrts::reinit_ident(context[41], identifiers[ident_Function]);
          refalrts::reinit_ident(context[44], identifiers[ident_GNm_Local]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::reinit_ident(context[8], identifiers[ident_Symbol]);
          refalrts::link_brackets( context[7], context[20] );
          refalrts::link_brackets( context[0], context[19] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[4], context[12] );
          refalrts::link_brackets( context[11], context[24] );
          refalrts::link_brackets( context[40], context[1] );
          refalrts::link_brackets( context[23], context[45] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[93], context[94] );
          res = refalrts::splice_elem( res, context[92] );
          res = refalrts::splice_elem( res, context[8] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_evar( res, context[12], context[19] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_evar( res, context[77], context[78] );
          res = refalrts::splice_elem( res, context[91] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_evar( res, context[45], context[1] );
          res = refalrts::splice_evar( res, context[89], context[90] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[40], context[44] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/75 )/8 (/11 e.7#0/77 )/12 (/15 e.4#0/79 )/16 (/19 e.ScopeVars0#1/81 )/20 (/23 e.LocalVars0#1/83 )/24 s.MarkupContext0#1/25 (/40 )/41 (/44 e.NestedNestedFuncs#2/85 )/45 # NativeBody/74 e.#0/87 >/1
        context[75] = context[60];
        context[76] = context[61];
        context[77] = context[62];
        context[78] = context[63];
        context[79] = context[64];
        context[80] = context[65];
        context[81] = context[66];
        context[82] = context[67];
        context[83] = context[68];
        context[84] = context[69];
        context[85] = context[70];
        context[86] = context[71];
        context[87] = context[72];
        context[88] = context[73];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[74] ) )
          continue;
        // closed e.2#0 as range 75
        // closed e.7#0 as range 77
        // closed e.4#0 as range 79
        // closed e.ScopeVars0#1 as range 81
        // closed e.LocalVars0#1 as range 83
        // closed e.NestedNestedFuncs#2 as range 85
        // closed e.#0 as range 87
        //DEBUG: s.MarkupContext0#1: 25
        //DEBUG: e.2#0: 75
        //DEBUG: e.7#0: 77
        //DEBUG: e.4#0: 79
        //DEBUG: e.ScopeVars0#1: 81
        //DEBUG: e.LocalVars0#1: 83
        //DEBUG: e.NestedNestedFuncs#2: 85
        //DEBUG: e.#0: 87

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars0#1/81 {REMOVED TILE} {REMOVED TILE} e.LocalVars0#1/83 {REMOVED TILE} s.MarkupContext0#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.2#0/75 } Tile{ AsIs: e.NestedNestedFuncs#2/85 } Tile{ AsIs: (/40 HalfReuse: # Function/41 HalfReuse: # GN-Local/44 } Tile{ AsIs: (/23 } Tile{ AsIs: e.7#0/77 } Tile{ AsIs: )/45 AsIs: # NativeBody/74 AsIs: e.#0/87 HalfReuse: )/1 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/79 AsIs: )/16 HalfReuse: )/19 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Symbol/20 } Tile{ HalfReuse: # Name/8 } e.7#0/77/89 Tile{ AsIs: )/24 } Tile{ ]] }
        refalrts::copy_evar(vm, context[89], context[90], context[77], context[78]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_ident(context[41], identifiers[ident_Function]);
        refalrts::reinit_ident(context[44], identifiers[ident_GNm_Local]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_ident(context[20], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[8], identifiers[ident_Name]);
        refalrts::link_brackets( context[11], context[24] );
        refalrts::link_brackets( context[0], context[19] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[4], context[12] );
        refalrts::link_brackets( context[40], context[1] );
        refalrts::link_brackets( context[23], context[45] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[89], context[90] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[12], context[19] );
        res = refalrts::splice_evar( res, context[45], context[1] );
        res = refalrts::splice_evar( res, context[77], context[78] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[40], context[44] );
        res = refalrts::splice_evar( res, context[85], context[86] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/60 )/8 (/11 e.7#0/62 )/12 (/15 e.4#0/64 )/16 (/19 e.ScopeVars0#1/66 )/20 (/23 e.LocalVars0#1/68 )/24 s.MarkupContext0#1/25 (/40 )/41 (/44 e.NestedNestedFuncs#2/70 )/45 e.Body#2/72 >/1
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      context[72] = context[58];
      context[73] = context[59];
      // closed e.2#0 as range 60
      // closed e.7#0 as range 62
      // closed e.4#0 as range 64
      // closed e.ScopeVars0#1 as range 66
      // closed e.LocalVars0#1 as range 68
      // closed e.NestedNestedFuncs#2 as range 70
      // closed e.Body#2 as range 72
      //DEBUG: s.MarkupContext0#1: 25
      //DEBUG: e.2#0: 60
      //DEBUG: e.7#0: 62
      //DEBUG: e.4#0: 64
      //DEBUG: e.ScopeVars0#1: 66
      //DEBUG: e.LocalVars0#1: 68
      //DEBUG: e.NestedNestedFuncs#2: 70
      //DEBUG: e.Body#2: 72

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ScopeVars0#1/66 {REMOVED TILE} e.LocalVars0#1/68 {REMOVED TILE} s.MarkupContext0#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.2#0/60 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/70 } Tile{ AsIs: )/20 HalfReuse: </23 } & ExtractNested-Result-Term$5=2:1$1=1/74 Tile{ AsIs: (/40 } Tile{ AsIs: e.7#0/62 } Tile{ AsIs: )/41 AsIs: (/44 } e.Body#2/72/75 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/64 AsIs: )/16 HalfReuse: </19 } Tile{ HalfReuse: & ExtractNested-Result-Term$5=2:1$1=1:1*2/24 } (/77 e.7#0/62/78 Tile{ AsIs: )/45 AsIs: e.Body#2/72 AsIs: >/1 } >/80 >/81 Tile{ ]] }
      refalrts::alloc_name(vm, context[74], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1]);
      refalrts::copy_evar(vm, context[75], context[76], context[72], context[73]);
      refalrts::alloc_open_bracket(vm, context[77]);
      refalrts::copy_evar(vm, context[78], context[79], context[62], context[63]);
      refalrts::alloc_close_call(vm, context[80]);
      refalrts::alloc_close_call(vm, context[81]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
      refalrts::reinit_open_call(context[23]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[24], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S1A1B1D2]);
      refalrts::push_stack( vm, context[81] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[80] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[77], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[44], context[12] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[11], context[20] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[80], context[81] );
      res = refalrts::splice_evar( res, context[45], context[1] );
      res = refalrts::splice_evar( res, context[78], context[79] );
      res = refalrts::splice_elem( res, context[77] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/46 )/8 (/11 e.7#0/48 )/12 (/15 e.4#0/50 )/16 (/19 e.ScopeVars0#1/52 )/20 (/23 e.LocalVars0#1/54 )/24 s.MarkupContext0#1/25 (/40 e.NestedBorrowedVars#2/56 )/41 (/44 e.NestedNestedFuncs#2/58 )/45 # Sentences/62 e.#0/60 >/1
      context[46] = context[26];
      context[47] = context[27];
      context[48] = context[28];
      context[49] = context[29];
      context[50] = context[30];
      context[51] = context[31];
      context[52] = context[32];
      context[53] = context[33];
      context[54] = context[34];
      context[55] = context[35];
      context[56] = context[38];
      context[57] = context[39];
      context[58] = context[42];
      context[59] = context[43];
      context[60] = context[36];
      context[61] = context[37];
      context[62] = refalrts::ident_left( identifiers[ident_Sentences], context[60], context[61] );
      if( ! context[62] )
        continue;
      // closed e.2#0 as range 46
      // closed e.7#0 as range 48
      // closed e.4#0 as range 50
      // closed e.ScopeVars0#1 as range 52
      // closed e.LocalVars0#1 as range 54
      // closed e.NestedBorrowedVars#2 as range 56
      // closed e.NestedNestedFuncs#2 as range 58
      // closed e.#0 as range 60
      //DEBUG: s.MarkupContext0#1: 25
      //DEBUG: e.2#0: 46
      //DEBUG: e.7#0: 48
      //DEBUG: e.4#0: 50
      //DEBUG: e.ScopeVars0#1: 52
      //DEBUG: e.LocalVars0#1: 54
      //DEBUG: e.NestedBorrowedVars#2: 56
      //DEBUG: e.NestedNestedFuncs#2: 58
      //DEBUG: e.#0: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 AsIs: e.2#0/46 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.NestedNestedFuncs#2/58 } Tile{ AsIs: )/45 HalfReuse: </62 } & ExtractNested-Result-Term$5=2:1$2=1@2/63 (/64 Tile{ AsIs: e.7#0/48 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.#0/60 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars0#1/52 AsIs: )/20 AsIs: (/23 AsIs: e.LocalVars0#1/54 AsIs: )/24 } (/65 Tile{ AsIs: e.4#0/50 } )/66 Tile{ AsIs: (/40 AsIs: e.NestedBorrowedVars#2/56 AsIs: )/41 HalfReuse: </44 } & CreateContext/67 Tile{ AsIs: s.MarkupContext0#1/25 } e.NestedBorrowedVars#2/56/68 >/70 >/71 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[63], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z2]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_close_bracket(vm, context[66]);
      refalrts::alloc_name(vm, context[67], functions[efunc_CreateContext]);
      refalrts::copy_evar(vm, context[68], context[69], context[56], context[57]);
      refalrts::alloc_close_call(vm, context[70]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
      refalrts::reinit_open_call(context[62]);
      refalrts::reinit_open_call(context[44]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[65], context[66] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[64], context[12] );
      refalrts::link_brackets( context[11], context[45] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[40], context[44] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_elem( res, context[65] );
      res = refalrts::splice_evar( res, context[16], context[24] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[45], context[62] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/46 )/8 (/11 e.7#0/48 )/12 (/15 e.4#0/50 )/16 (/19 e.ScopeVars0#1/52 )/20 (/23 e.LocalVars0#1/54 )/24 s.MarkupContext0#1/25 (/40 e.NestedBorrowedVars#2/56 )/41 (/44 e.NestedNestedFuncs#2/58 )/45 e.Body#2/60 >/1
    context[46] = context[26];
    context[47] = context[27];
    context[48] = context[28];
    context[49] = context[29];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[32];
    context[53] = context[33];
    context[54] = context[34];
    context[55] = context[35];
    context[56] = context[38];
    context[57] = context[39];
    context[58] = context[42];
    context[59] = context[43];
    context[60] = context[36];
    context[61] = context[37];
    // closed e.2#0 as range 46
    // closed e.7#0 as range 48
    // closed e.4#0 as range 50
    // closed e.ScopeVars0#1 as range 52
    // closed e.LocalVars0#1 as range 54
    // closed e.NestedBorrowedVars#2 as range 56
    // closed e.NestedNestedFuncs#2 as range 58
    // closed e.Body#2 as range 60
    //DEBUG: s.MarkupContext0#1: 25
    //DEBUG: e.2#0: 46
    //DEBUG: e.7#0: 48
    //DEBUG: e.4#0: 50
    //DEBUG: e.ScopeVars0#1: 52
    //DEBUG: e.LocalVars0#1: 54
    //DEBUG: e.NestedBorrowedVars#2: 56
    //DEBUG: e.NestedNestedFuncs#2: 58
    //DEBUG: e.Body#2: 60

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2/4 AsIs: (/7 } Tile{ AsIs: e.2#0/46 } )/62 Tile{ AsIs: (/44 AsIs: e.NestedNestedFuncs#2/58 AsIs: )/45 } </63 Tile{ HalfReuse: & ExtractNested-Result-Term$5=2:1*2/8 AsIs: (/11 AsIs: e.7#0/48 AsIs: )/12 AsIs: (/15 AsIs: e.4#0/50 AsIs: )/16 AsIs: (/19 } e.NestedBorrowedVars#2/56/64 Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.ScopeVars0#1/52 } Tile{ AsIs: e.LocalVars0#1/54 } Tile{ AsIs: )/24 AsIs: s.MarkupContext0#1/25 AsIs: (/40 AsIs: e.NestedBorrowedVars#2/56 AsIs: )/41 } Tile{ AsIs: e.Body#2/60 } >/66 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::copy_evar(vm, context[64], context[65], context[56], context[57]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2]);
    refalrts::reinit_name(context[8], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[63] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[7], context[62] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[66] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[24], context[41] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[64], context[65] );
    res = refalrts::splice_evar( res, context[8], context[19] );
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[62] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=1@2/4 (/7 e.2#0/5 )/8 (/11 e.7#0/9 )/12 (/15 e.4#0/13 )/16 (/19 e.ScopeVars0#1/17 )/20 (/23 e.LocalVars0#1/21 )/24 s.MarkupContext0#1/25 e.dyn#0/2 >/1
  // closed e.2#0 as range 5
  // closed e.7#0 as range 9
  // closed e.4#0 as range 13
  // closed e.ScopeVars0#1 as range 17
  // closed e.LocalVars0#1 as range 21
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 25
  //DEBUG: e.2#0: 5
  //DEBUG: e.7#0: 9
  //DEBUG: e.4#0: 13
  //DEBUG: e.ScopeVars0#1: 17
  //DEBUG: e.LocalVars0#1: 21
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=1@0/4 AsIs: (/7 AsIs: e.2#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.7#0/9 AsIs: )/12 AsIs: (/15 AsIs: e.4#0/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.ScopeVars0#1/17 } Tile{ AsIs: e.LocalVars0#1/21 } Tile{ AsIs: )/24 AsIs: s.MarkupContext0#1/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::splice_to_freelist_open( vm, context[19], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A1Z2("ExtractNested-Result-Term$5=1@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A1Z2);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & ExtractNested-Conditions$1=2@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=2@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 (/36 e.new#9/34 )/37 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 34
  // closed e.new#10 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=2@2/4 (/7 e.ResultNestedFuncs0#2/38 )/8 (/11 e.ConditionName0#1/40 )/12 (/15 e.Result0#2/42 )/16 (/19 e.Pattern0#1/44 )/20 s.MarkupContext0#1/21 (/24 e.ScopeVars0#1/46 )/25 (/28 e.LocalVars0#1/48 )/29 (/32 e.Conditions0#1/50 )/33 (/36 e.LocalVars#2/52 )/37 (/58 e.BorrowedVars#3/56 )/59 e.PatternLocalVars#3/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[17];
    context[45] = context[18];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    context[56] = 0;
    context[57] = 0;
    context[58] = refalrts::brackets_left( context[56], context[57], context[54], context[55] );
    if( ! context[58] )
      continue;
    refalrts::bracket_pointers(context[58], context[59]);
    // closed e.ResultNestedFuncs0#2 as range 38
    // closed e.ConditionName0#1 as range 40
    // closed e.Result0#2 as range 42
    // closed e.Pattern0#1 as range 44
    // closed e.ScopeVars0#1 as range 46
    // closed e.LocalVars0#1 as range 48
    // closed e.Conditions0#1 as range 50
    // closed e.LocalVars#2 as range 52
    // closed e.BorrowedVars#3 as range 56
    // closed e.PatternLocalVars#3 as range 54
    //DEBUG: s.MarkupContext0#1: 21
    //DEBUG: e.ResultNestedFuncs0#2: 38
    //DEBUG: e.ConditionName0#1: 40
    //DEBUG: e.Result0#2: 42
    //DEBUG: e.Pattern0#1: 44
    //DEBUG: e.ScopeVars0#1: 46
    //DEBUG: e.LocalVars0#1: 48
    //DEBUG: e.Conditions0#1: 50
    //DEBUG: e.LocalVars#2: 52
    //DEBUG: e.BorrowedVars#3: 56
    //DEBUG: e.PatternLocalVars#3: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=3@2/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/38 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/40 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/42 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/44 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 } Tile{ AsIs: e.BorrowedVars#3/56 } Tile{ AsIs: )/37 AsIs: (/58 } Tile{ AsIs: e.ScopeVars0#1/46 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.LocalVars0#1/48 AsIs: )/29 AsIs: (/32 AsIs: e.Conditions0#1/50 AsIs: )/33 HalfReuse: </36 } Tile{ HalfReuse: & Uniq/59 } Tile{ AsIs: e.LocalVars#2/52 } Tile{ AsIs: e.PatternLocalVars#3/54 } >/60 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[60]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A3Z2]);
    refalrts::reinit_open_call(context[36]);
    refalrts::reinit_name(context[59], functions[efunc_Uniq]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[58], context[25] );
    refalrts::link_brackets( context[24], context[37] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[60] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[59] );
    res = refalrts::splice_evar( res, context[25], context[36] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[37], context[58] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=2@2/4 (/7 e.ResultNestedFuncs0#2/5 )/8 (/11 e.ConditionName0#1/9 )/12 (/15 e.Result0#2/13 )/16 (/19 e.Pattern0#1/17 )/20 s.MarkupContext0#1/21 (/24 e.ScopeVars0#1/22 )/25 (/28 e.LocalVars0#1/26 )/29 (/32 e.Conditions0#1/30 )/33 (/36 e.LocalVars#2/34 )/37 e.dyn#0/2 >/1
  // closed e.ResultNestedFuncs0#2 as range 5
  // closed e.ConditionName0#1 as range 9
  // closed e.Result0#2 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.ScopeVars0#1 as range 22
  // closed e.LocalVars0#1 as range 26
  // closed e.Conditions0#1 as range 30
  // closed e.LocalVars#2 as range 34
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 21
  //DEBUG: e.ResultNestedFuncs0#2: 5
  //DEBUG: e.ConditionName0#1: 9
  //DEBUG: e.Result0#2: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.ScopeVars0#1: 22
  //DEBUG: e.LocalVars0#1: 26
  //DEBUG: e.Conditions0#1: 30
  //DEBUG: e.LocalVars#2: 34
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/25 (/28 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=2@0/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 } Tile{ AsIs: e.ScopeVars0#1/22 } Tile{ AsIs: e.LocalVars0#1/26 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.Conditions0#1/30 AsIs: )/33 AsIs: (/36 AsIs: e.LocalVars#2/34 AsIs: )/37 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[24], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[29];
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::splice_to_freelist_open( vm, context[24], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A2Z2("ExtractNested-Conditions$1=2@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A2Z2);


static refalrts::FnResult func_gen_Fetch_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Fetch@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@9/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@9/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@11/4 } </8 & Map@9/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@9/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-EnumerateVariables@0/8 (/9 & Pass-NameNestedFuncs@0/10 & Pass-RemoveBlocksAndAssigns@0/11 (/12 & Pass-FlatNestedFuncs@0/13 Tile{ AsIs: s.MarkupContext#1/5 } )/14 & Pass-CleanupRedudandExterns@0/15 & Pass-UnfoldEnums@0/16 )/17 {*}/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_unwrapped_closure(vm, context[18], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[17] );
  refalrts::link_brackets( context[12], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[18] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[18] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z9("Fetch@9", COOKIE1_, COOKIE2_, func_gen_Fetch_Z9);


static refalrts::FnResult func_gen_Fetch_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Fetch@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@10/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@10/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@12/4 } </8 & Map@9/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@10/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-EnumerateVariables@0/8 (/9 & Pass-NameNestedFuncs@0/10 & Pass-RemoveBlocksAndAssigns@0/11 (/12 & Pass-FlatNestedFuncs@0/13 s.MarkupContext#1/5/14 )/15 (/16 & Pass-UnCondition@0/17 Tile{ AsIs: s.MarkupContext#1/5 } )/18 & Pass-CleanupRedudandExterns@0/19 & Pass-UnfoldEnums@0/20 )/21 {*}/22 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_EnumerateVariables_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[14], context[5]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_unwrapped_closure(vm, context[22], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[21] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z10("Fetch@10", COOKIE1_, COOKIE2_, func_gen_Fetch_Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum$1=1@23/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@23/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum$1=1@23/4 s.X#0/5 (/8 e.Scanned0#1/14 )/9 (/12 e.Tail0#1/16 )/13 t.Acc#2/20 e.StepScanned#2/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Scanned0#1 as range 14
    // closed e.Tail0#1 as range 16
    context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
    if( ! context[21] )
      continue;
    // closed e.StepScanned#2 as range 18
    //DEBUG: s.X#0: 5
    //DEBUG: e.Scanned0#1: 14
    //DEBUG: e.Tail0#1: 16
    //DEBUG: t.Acc#2: 20
    //DEBUG: e.StepScanned#2: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@23/4 AsIs: s.X#0/5 } Tile{ AsIs: t.Acc#2/20 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Scanned0#1/14 } Tile{ AsIs: e.StepScanned#2/18 } Tile{ AsIs: )/13 } Tile{ AsIs: e.Tail0#1/16 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@23/4 s.X#0/5 (/8 e.Scanned0#1/6 )/9 (/12 e.Tail0#1/10 )/13 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 6
  // closed e.Tail0#1 as range 10
  // closed e.dyn#0 as range 2
  //DEBUG: s.X#0: 5
  //DEBUG: e.Scanned0#1: 6
  //DEBUG: e.Tail0#1: 10
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 AsIs: s.X#0/5 AsIs: (/8 AsIs: e.Scanned0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Tail0#1/10 AsIs: )/13 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z23("DoMapAccum$1=1@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z23);


static refalrts::FnResult func_gen_DoMapAccum_Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum@24/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@24/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum@24/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & DoMapAccum@24/4 (/5 e.#0/21 )/6 (/9 e.Scanned#1/17 )/10 (/15 # TkVariable/25 s.Mode#2/26 '_'/27 e.3#0/23 )/16 e.Tail#1/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_TkVariable], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e.#0 as range 21
      // closed e.Scanned#1 as range 17
      // closed e.Tail#1 as range 19
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      context[27] = refalrts::char_left( '_', context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.3#0 as range 23
      //DEBUG: e.#0: 21
      //DEBUG: e.Scanned#1: 17
      //DEBUG: e.Tail#1: 19
      //DEBUG: s.Mode#2: 26
      //DEBUG: e.3#0: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode#2/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoMapAccum$1=1@24/29 (/30 Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail#1/19 } )/31 Tile{ HalfReuse: </25 } & EnumerateVars-Expr\1$1=1/32 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e.#0/21 AsIs: )/6 HalfReuse: s.Mode2 #26/9 } Tile{ AsIs: '_'/27 AsIs: e.3#0/23 HalfReuse: 2/16 } >/33 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_S1A1Z24]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_EnumerateVarsm_Expr_L1S1A1]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_call(context[25]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::reinit_number(context[16], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[31] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[27], context[16] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@24/4 t.Acc#1/5 (/9 e.Scanned#1/17 )/10 t.Next#1/15 e.Tail#1/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@24/4 } Tile{ AsIs: (/9 AsIs: e.Scanned#1/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail#1/19 } )/22 </23 & EnumerateVars-Expr\1@3*1/24 Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: t.Next#1/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_EnumerateVarsm_Expr_L1Z3D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@24/4 t.Acc#1/5 (/9 e.Scanned#1/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@24/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@24/4 t.acc#0/5 (/9 e.scanned#0/7 )/10 e.items#0/2 >/1
  // closed e.scanned#0 as range 7
  // closed e.items#0 as range 2
  //DEBUG: t.acc#0: 5
  //DEBUG: e.scanned#0: 7
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & EnumerateVars-Expr\1@0/14 Tile{ HalfReuse: 2/0 HalfReuse: {*}/4 AsIs: t.acc#0/5 AsIs: (/9 AsIs: e.scanned#0/7 AsIs: )/10 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 2UL);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z24("DoMapAccum@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z24);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@7/4 (/7 e.Result0#3/17 )/8 (/11 e.Blocks0#5/19 )/12 (/15 e.Assignments0#1/21 )/16 (/27 e.ScopeVars#6/25 )/28 e.Pattern#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Result0#3 as range 17
    // closed e.Blocks0#5 as range 19
    // closed e.Assignments0#1 as range 21
    // closed e.ScopeVars#6 as range 25
    // closed e.Pattern#6 as range 23
    //DEBUG: e.Result0#3: 17
    //DEBUG: e.Blocks0#5: 19
    //DEBUG: e.Assignments0#1: 21
    //DEBUG: e.ScopeVars#6: 25
    //DEBUG: e.Pattern#6: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 & EnumerateVars-Assignments/30 (/31 Tile{ HalfReuse: (/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/17 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern#6/23 } )/32 )/33 )/34 Tile{ HalfReuse: 2/16 AsIs: (/27 AsIs: e.ScopeVars#6/25 AsIs: )/28 } Tile{ AsIs: e.Assignments0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
    refalrts::reinit_number(context[16], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[31], context[34] );
    refalrts::link_brackets( context[0], context[33] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@7/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 (/15 e.Assignments0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=5@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 HalfReuse: 2/15 } (/20 Tile{ AsIs: e.Assignments0#1/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::reinit_number(context[15], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z7("EnumerateVars-Assignments$2=5@7", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z7);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@8/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@8/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@8/4 (/7 e.Result0#3/17 )/8 (/11 e.Blocks0#5/19 )/12 (/15 e.Assignments0#1/21 )/16 (/27 e.ScopeVars#6/25 )/28 e.Pattern#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Result0#3 as range 17
    // closed e.Blocks0#5 as range 19
    // closed e.Assignments0#1 as range 21
    // closed e.ScopeVars#6 as range 25
    // closed e.Pattern#6 as range 23
    //DEBUG: e.Result0#3: 17
    //DEBUG: e.Blocks0#5: 19
    //DEBUG: e.Assignments0#1: 21
    //DEBUG: e.ScopeVars#6: 25
    //DEBUG: e.Pattern#6: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 & EnumerateVars-Assignments/30 (/31 Tile{ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/17 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern#6/23 } )/32 )/33 )/34 Tile{ HalfReuse: 2/16 AsIs: (/27 AsIs: e.ScopeVars#6/25 AsIs: )/28 } Tile{ AsIs: e.Assignments0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
    refalrts::reinit_number(context[16], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[31], context[34] );
    refalrts::link_brackets( context[0], context[33] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@8/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 (/15 e.Assignments0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=5@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 HalfReuse: 2/15 } (/20 Tile{ AsIs: e.Assignments0#1/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::reinit_number(context[15], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z8("EnumerateVars-Assignments$2=5@8", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z8);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & EnumerateVars-Assignments$2=4@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@11/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@11/4 s.ChainType0#1/5 (/8 e.Result0#3/22 )/9 (/12 e.Assignments0#1/24 )/13 (/16 e.ScopeVars0#3/26 )/17 (/20 e.Pattern0#1/28 )/21 e.Blocks#5/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Result0#3 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.ScopeVars0#3 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks#5 as range 30
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Result0#3: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.ScopeVars0#3: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks#5: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@10/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Blocks#5/30 } )/32 (/33 Tile{ AsIs: e.Assignments0#1/24 } Tile{ AsIs: )/21 } </34 Tile{ HalfReuse: & DoMapAccum@24/13 AsIs: (/16 AsIs: e.ScopeVars0#3/26 AsIs: )/17 AsIs: (/20 } )/35 Tile{ AsIs: e.Pattern0#1/28 } >/36 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z10]);
    refalrts::reinit_name(context[13], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[20], context[35] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[33], context[21] );
    refalrts::link_brackets( context[12], context[32] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@11/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Assignments0#1/10 )/13 (/16 e.ScopeVars0#3/14 )/17 (/20 e.Pattern0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Assignments0#1 as range 10
  // closed e.ScopeVars0#3 as range 14
  // closed e.Pattern0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Assignments0#1: 10
  //DEBUG: e.ScopeVars0#3: 14
  //DEBUG: e.Pattern0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 } (/22 )/23 Tile{ AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result0#3/6 } )/24 Tile{ HalfReuse: 2/9 AsIs: (/12 AsIs: e.Assignments0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z11("EnumerateVars-Assignments$2=4@11", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z11);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=5@9/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@9/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 s.new#4/14 (/17 e.new#5/15 )/18 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#5 as range 15
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@9/4 s.ChainType0#1/5 (/8 e.Result0#3/19 )/9 (/12 e.Blocks0#5/21 )/13 s.Depth0#4/14 (/17 e.Assignments0#1/23 )/18 (/29 e.ScopeVars#6/27 )/30 e.Pattern#6/25 >/1
    context[19] = context[6];
    context[20] = context[7];
    context[21] = context[10];
    context[22] = context[11];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.Result0#3 as range 19
    // closed e.Blocks0#5 as range 21
    // closed e.Assignments0#1 as range 23
    // closed e.ScopeVars#6 as range 27
    // closed e.Pattern#6 as range 25
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: s.Depth0#4: 14
    //DEBUG: e.Result0#3: 19
    //DEBUG: e.Blocks0#5: 21
    //DEBUG: e.Assignments0#1: 23
    //DEBUG: e.ScopeVars#6: 27
    //DEBUG: e.Pattern#6: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Depth0#4/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </31 & EnumerateVars-Assignments/32 Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/19 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/21 AsIs: )/13 } Tile{ AsIs: (/17 } Tile{ AsIs: e.Pattern#6/25 } )/33 )/34 )/35 Tile{ HalfReuse: s.Depth04 #14/18 AsIs: (/29 AsIs: e.ScopeVars#6/27 AsIs: )/30 } Tile{ AsIs: e.Assignments0#1/23 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_svar( context[18], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[0], context[35] );
    refalrts::link_brackets( context[4], context[34] );
    refalrts::link_brackets( context[17], context[33] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[30] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@9/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Blocks0#5/10 )/13 s.Depth0#4/14 (/17 e.Assignments0#1/15 )/18 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Blocks0#5 as range 10
  // closed e.Assignments0#1 as range 15
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: s.Depth0#4: 14
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Blocks0#5: 10
  //DEBUG: e.Assignments0#1: 15
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & EnumerateVars-Assignments$2=5@0/20 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/6 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/10 AsIs: )/13 AsIs: s.Depth0#4/14 AsIs: (/17 AsIs: e.Assignments0#1/15 AsIs: )/18 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z9("EnumerateVars-Assignments$2=5@9", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z9);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  // </0 & ExtractNested-Result-Term$5=2:1$2=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=2:1$2=1@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=2:1$2=1@1/4 (/7 e.7#0/21 )/8 (/11 e.#0/23 )/12 (/15 e.4#0/25 )/16 (/19 e.NestedBorrowedVars0#2/27 )/20 e.Context#4/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.7#0 as range 21
    // closed e.#0 as range 23
    // closed e.4#0 as range 25
    // closed e.NestedBorrowedVars0#2 as range 27
    // closed e.Context#4 as range 29
    //DEBUG: e.7#0: 21
    //DEBUG: e.#0: 23
    //DEBUG: e.4#0: 25
    //DEBUG: e.NestedBorrowedVars0#2: 27
    //DEBUG: e.Context#4: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/31 Tile{ HalfReuse: # Function/0 HalfReuse: # GN-Local/4 AsIs: (/7 AsIs: e.7#0/21 AsIs: )/8 HalfReuse: # Sentences/11 } </32 & Map@18/33 Tile{ AsIs: (/19 } e.Context#4/29/34 )/36 Tile{ AsIs: e.#0/23 } >/37 )/38 (/39 # Drive/40 e.7#0/21/41 )/43 (/44 # Spec/45 (/46 e.7#0/21/47 )/49 </50 & CreateSpecPatternForContext/51 e.Context#4/29/52 >/54 )/55 </56 Tile{ HalfReuse: & Reduce@3/12 AsIs: (/15 AsIs: e.4#0/25 AsIs: )/16 } Tile{ AsIs: e.NestedBorrowedVars0#2/27 } >/57 (/58 # ClosureBrackets/59 (/60 # Symbol/61 # Name/62 e.7#0/21/63 Tile{ AsIs: )/20 AsIs: e.Context#4/29 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z18]);
    refalrts::copy_evar(vm, context[34], context[35], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_Drive]);
    refalrts::copy_evar(vm, context[41], context[42], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_ident(vm, context[45], identifiers[ident_Spec]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::copy_evar(vm, context[47], context[48], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_CreateSpecPatternForContext]);
    refalrts::copy_evar(vm, context[52], context[53], context[29], context[30]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_ident(vm, context[59], identifiers[ident_ClosureBrackets]);
    refalrts::alloc_open_bracket(vm, context[60]);
    refalrts::alloc_ident(vm, context[61], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[62], identifiers[ident_Name]);
    refalrts::copy_evar(vm, context[63], context[64], context[21], context[22]);
    refalrts::reinit_ident(context[0], identifiers[ident_Function]);
    refalrts::reinit_ident(context[4], identifiers[ident_GNm_Local]);
    refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
    refalrts::reinit_name(context[12], functions[efunc_gen_Reduce_Z3]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[58], context[1] );
    refalrts::link_brackets( context[60], context[20] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[44], context[55] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[46], context[49] );
    refalrts::link_brackets( context[39], context[43] );
    refalrts::link_brackets( context[31], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[19], context[36] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[63], context[64] );
    res = refalrts::splice_evar( res, context[57], context[62] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[37], context[56] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=2:1$2=1@1/4 (/7 e.7#0/5 )/8 (/11 e.#0/9 )/12 (/15 e.4#0/13 )/16 (/19 e.NestedBorrowedVars0#2/17 )/20 e.dyn#0/2 >/1
  // closed e.7#0 as range 5
  // closed e.#0 as range 9
  // closed e.4#0 as range 13
  // closed e.NestedBorrowedVars0#2 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.7#0: 5
  //DEBUG: e.#0: 9
  //DEBUG: e.4#0: 13
  //DEBUG: e.NestedBorrowedVars0#2: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2:1$2=1@0/4 AsIs: (/7 AsIs: e.7#0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.#0/9 } )/21 (/22 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.4#0/13 AsIs: )/16 AsIs: (/19 AsIs: e.NestedBorrowedVars0#2/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[22], context[12] );
  refalrts::link_brackets( context[11], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z1("ExtractNested-Result-Term$5=2:1$2=1@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z1);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & ExtractNested-Conditions$1=3@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=3@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 e.new#8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=3@1/4 (/7 e.ResultNestedFuncs0#2/30 )/8 (/11 e.ConditionName0#1/32 )/12 (/15 e.Result0#2/34 )/16 (/19 e.Pattern0#1/36 )/20 s.MarkupContext0#1/21 (/24 e.BorrowedVars0#3/38 )/25 (/28 e.Conditions0#1/40 )/29 e.LocalVars#4/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    // closed e.ResultNestedFuncs0#2 as range 30
    // closed e.ConditionName0#1 as range 32
    // closed e.Result0#2 as range 34
    // closed e.Pattern0#1 as range 36
    // closed e.BorrowedVars0#3 as range 38
    // closed e.Conditions0#1 as range 40
    // closed e.LocalVars#4 as range 42
    //DEBUG: s.MarkupContext0#1: 21
    //DEBUG: e.ResultNestedFuncs0#2: 30
    //DEBUG: e.ConditionName0#1: 32
    //DEBUG: e.Result0#2: 34
    //DEBUG: e.Pattern0#1: 36
    //DEBUG: e.BorrowedVars0#3: 38
    //DEBUG: e.Conditions0#1: 40
    //DEBUG: e.LocalVars#4: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=4/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/30 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/32 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/34 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/36 AsIs: )/20 } </44 & ExtractNested-Conditions@1/45 Tile{ AsIs: s.MarkupContext0#1/21 AsIs: (/24 AsIs: e.BorrowedVars0#3/38 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.LocalVars#4/42 } Tile{ AsIs: )/29 } Tile{ AsIs: e.Conditions0#1/40 } >/46 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_gen_ExtractNestedm_Conditions_Z1]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[21], context[28] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=3@1/4 (/7 e.ResultNestedFuncs0#2/5 )/8 (/11 e.ConditionName0#1/9 )/12 (/15 e.Result0#2/13 )/16 (/19 e.Pattern0#1/17 )/20 s.MarkupContext0#1/21 (/24 e.BorrowedVars0#3/22 )/25 (/28 e.Conditions0#1/26 )/29 e.dyn#0/2 >/1
  // closed e.ResultNestedFuncs0#2 as range 5
  // closed e.ConditionName0#1 as range 9
  // closed e.Result0#2 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.BorrowedVars0#3 as range 22
  // closed e.Conditions0#1 as range 26
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 21
  //DEBUG: e.ResultNestedFuncs0#2: 5
  //DEBUG: e.ConditionName0#1: 9
  //DEBUG: e.Result0#2: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.BorrowedVars0#3: 22
  //DEBUG: e.Conditions0#1: 26
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=3@0/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 AsIs: e.BorrowedVars0#3/22 AsIs: )/25 AsIs: (/28 } )/30 (/31 Tile{ AsIs: e.Conditions0#1/26 } Tile{ AsIs: )/29 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[29] );
  refalrts::link_brackets( context[28], context[30] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[29];
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A3Z1("ExtractNested-Conditions$1=3@1", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A3Z1);


static refalrts::FnResult func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 77 elems
  refalrts::Iter context[77];
  refalrts::zeros( context, 77 );
  // </0 & ExtractNested-Result-Term$5=2:1$2=1@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Result-Term$5=2:1$2=1@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 (/23 e.new#5/21 )/24 (/27 e.new#6/25 )/28 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 21
  // closed e.new#6 as range 25
  // closed e.new#7 as range 2
  do {
    // </0 & ExtractNested-Result-Term$5=2:1$2=1@2/4 (/7 e.7#0/29 )/8 (/11 e.#0/31 )/12 (/15 e.ScopeVars0#1/33 )/16 (/19 e.LocalVars0#1/35 )/20 (/23 e.4#0/37 )/24 (/27 e.NestedBorrowedVars0#2/39 )/28 e.Context#4/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.7#0 as range 29
    // closed e.#0 as range 31
    // closed e.ScopeVars0#1 as range 33
    // closed e.LocalVars0#1 as range 35
    // closed e.4#0 as range 37
    // closed e.NestedBorrowedVars0#2 as range 39
    // closed e.Context#4 as range 41
    //DEBUG: e.7#0: 29
    //DEBUG: e.#0: 31
    //DEBUG: e.ScopeVars0#1: 33
    //DEBUG: e.LocalVars0#1: 35
    //DEBUG: e.4#0: 37
    //DEBUG: e.NestedBorrowedVars0#2: 39
    //DEBUG: e.Context#4: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/43 # Function/44 # GN-Local/45 Tile{ AsIs: (/27 } e.7#0/29/46 )/48 # Sentences/49 </50 & Map@18/51 (/52 e.Context#4/41/53 )/55 Tile{ AsIs: e.#0/31 } >/56 Tile{ HalfReuse: )/0 HalfReuse: (/4 HalfReuse: # Drive/7 AsIs: e.7#0/29 AsIs: )/8 AsIs: (/11 } # Spec/57 (/58 e.7#0/29/59 )/61 </62 & CreateSpecPatternForContext/63 e.Context#4/41/64 >/66 )/67 </68 Tile{ HalfReuse: & Reduce@4/12 AsIs: (/15 AsIs: e.ScopeVars0#1/33 AsIs: )/16 AsIs: (/19 AsIs: e.LocalVars0#1/35 AsIs: )/20 AsIs: (/23 AsIs: e.4#0/37 AsIs: )/24 } Tile{ AsIs: e.NestedBorrowedVars0#2/39 } >/69 (/70 # ClosureBrackets/71 (/72 # Symbol/73 # Name/74 e.7#0/29/75 Tile{ AsIs: )/28 AsIs: e.Context#4/41 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_ident(vm, context[44], identifiers[ident_Function]);
    refalrts::alloc_ident(vm, context[45], identifiers[ident_GNm_Local]);
    refalrts::copy_evar(vm, context[46], context[47], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_ident(vm, context[49], identifiers[ident_Sentences]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_Map_Z18]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::copy_evar(vm, context[53], context[54], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_close_call(vm, context[56]);
    refalrts::alloc_ident(vm, context[57], identifiers[ident_Spec]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::copy_evar(vm, context[59], context[60], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[61]);
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_name(vm, context[63], functions[efunc_CreateSpecPatternForContext]);
    refalrts::copy_evar(vm, context[64], context[65], context[41], context[42]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_open_call(vm, context[68]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::alloc_ident(vm, context[71], identifiers[ident_ClosureBrackets]);
    refalrts::alloc_open_bracket(vm, context[72]);
    refalrts::alloc_ident(vm, context[73], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[74], identifiers[ident_Name]);
    refalrts::copy_evar(vm, context[75], context[76], context[29], context[30]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_Drive]);
    refalrts::reinit_name(context[12], functions[efunc_gen_Reduce_Z4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[70], context[1] );
    refalrts::link_brackets( context[72], context[28] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[68] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[67] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[62] );
    refalrts::link_brackets( context[58], context[61] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[43], context[0] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[52], context[55] );
    refalrts::link_brackets( context[27], context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[69], context[74] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    res = refalrts::splice_evar( res, context[57], context[68] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[48], context[55] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[43], context[45] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Result-Term$5=2:1$2=1@2/4 (/7 e.7#0/5 )/8 (/11 e.#0/9 )/12 (/15 e.ScopeVars0#1/13 )/16 (/19 e.LocalVars0#1/17 )/20 (/23 e.4#0/21 )/24 (/27 e.NestedBorrowedVars0#2/25 )/28 e.dyn#0/2 >/1
  // closed e.7#0 as range 5
  // closed e.#0 as range 9
  // closed e.ScopeVars0#1 as range 13
  // closed e.LocalVars0#1 as range 17
  // closed e.4#0 as range 21
  // closed e.NestedBorrowedVars0#2 as range 25
  // closed e.dyn#0 as range 2
  //DEBUG: e.7#0: 5
  //DEBUG: e.#0: 9
  //DEBUG: e.ScopeVars0#1: 13
  //DEBUG: e.LocalVars0#1: 17
  //DEBUG: e.4#0: 21
  //DEBUG: e.NestedBorrowedVars0#2: 25
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Result-Term$5=2:1$2=1@0/4 AsIs: (/7 AsIs: e.7#0/5 AsIs: )/8 AsIs: (/11 AsIs: e.#0/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.ScopeVars0#1/13 } Tile{ AsIs: e.LocalVars0#1/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.4#0/21 AsIs: )/24 AsIs: (/27 AsIs: e.NestedBorrowedVars0#2/25 AsIs: )/28 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[15], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z2("ExtractNested-Result-Term$5=2:1$2=1@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Resultm_Term_S5A2B1S2A1Z2);


static refalrts::FnResult func_gen_ExtractNestedm_Conditions_S1A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & ExtractNested-Conditions$1=3@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ExtractNested-Conditions$1=3@2/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 s.new#5/21 (/24 e.new#6/22 )/25 (/28 e.new#7/26 )/29 (/32 e.new#8/30 )/33 (/36 e.new#9/34 )/37 e.new#10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.new#6 as range 22
  // closed e.new#7 as range 26
  // closed e.new#8 as range 30
  // closed e.new#9 as range 34
  // closed e.new#10 as range 2
  do {
    // </0 & ExtractNested-Conditions$1=3@2/4 (/7 e.ResultNestedFuncs0#2/38 )/8 (/11 e.ConditionName0#1/40 )/12 (/15 e.Result0#2/42 )/16 (/19 e.Pattern0#1/44 )/20 s.MarkupContext0#1/21 (/24 e.BorrowedVars0#3/46 )/25 (/28 e.ScopeVars0#1/48 )/29 (/32 e.LocalVars0#1/50 )/33 (/36 e.Conditions0#1/52 )/37 e.LocalVars#4/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[17];
    context[45] = context[18];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    // closed e.ResultNestedFuncs0#2 as range 38
    // closed e.ConditionName0#1 as range 40
    // closed e.Result0#2 as range 42
    // closed e.Pattern0#1 as range 44
    // closed e.BorrowedVars0#3 as range 46
    // closed e.ScopeVars0#1 as range 48
    // closed e.LocalVars0#1 as range 50
    // closed e.Conditions0#1 as range 52
    // closed e.LocalVars#4 as range 54
    //DEBUG: s.MarkupContext0#1: 21
    //DEBUG: e.ResultNestedFuncs0#2: 38
    //DEBUG: e.ConditionName0#1: 40
    //DEBUG: e.Result0#2: 42
    //DEBUG: e.Pattern0#1: 44
    //DEBUG: e.BorrowedVars0#3: 46
    //DEBUG: e.ScopeVars0#1: 48
    //DEBUG: e.LocalVars0#1: 50
    //DEBUG: e.Conditions0#1: 52
    //DEBUG: e.LocalVars#4: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=4/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/38 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/40 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/42 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/44 AsIs: )/20 } </56 & ExtractNested-Conditions@2/57 Tile{ AsIs: s.MarkupContext0#1/21 AsIs: (/24 AsIs: e.BorrowedVars0#3/46 AsIs: )/25 AsIs: (/28 AsIs: e.ScopeVars0#1/48 AsIs: )/29 AsIs: (/32 AsIs: e.LocalVars0#1/50 AsIs: )/33 AsIs: (/36 } Tile{ AsIs: e.LocalVars#4/54 } Tile{ AsIs: )/37 } Tile{ AsIs: e.Conditions0#1/52 } >/58 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_gen_ExtractNestedm_Conditions_Z2]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[21], context[36] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractNested-Conditions$1=3@2/4 (/7 e.ResultNestedFuncs0#2/5 )/8 (/11 e.ConditionName0#1/9 )/12 (/15 e.Result0#2/13 )/16 (/19 e.Pattern0#1/17 )/20 s.MarkupContext0#1/21 (/24 e.BorrowedVars0#3/22 )/25 (/28 e.ScopeVars0#1/26 )/29 (/32 e.LocalVars0#1/30 )/33 (/36 e.Conditions0#1/34 )/37 e.dyn#0/2 >/1
  // closed e.ResultNestedFuncs0#2 as range 5
  // closed e.ConditionName0#1 as range 9
  // closed e.Result0#2 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.BorrowedVars0#3 as range 22
  // closed e.ScopeVars0#1 as range 26
  // closed e.LocalVars0#1 as range 30
  // closed e.Conditions0#1 as range 34
  // closed e.dyn#0 as range 2
  //DEBUG: s.MarkupContext0#1: 21
  //DEBUG: e.ResultNestedFuncs0#2: 5
  //DEBUG: e.ConditionName0#1: 9
  //DEBUG: e.Result0#2: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.BorrowedVars0#3: 22
  //DEBUG: e.ScopeVars0#1: 26
  //DEBUG: e.LocalVars0#1: 30
  //DEBUG: e.Conditions0#1: 34
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/29 (/32 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractNested-Conditions$1=3@0/4 AsIs: (/7 AsIs: e.ResultNestedFuncs0#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.ConditionName0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Result0#2/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: s.MarkupContext0#1/21 AsIs: (/24 AsIs: e.BorrowedVars0#3/22 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.ScopeVars0#1/26 } Tile{ AsIs: e.LocalVars0#1/30 } Tile{ AsIs: )/33 AsIs: (/36 AsIs: e.Conditions0#1/34 AsIs: )/37 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ExtractNestedm_Conditions_S1A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[28], context[33] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[33];
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::splice_to_freelist_open( vm, context[28], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractNestedm_Conditions_S1A3Z2("ExtractNested-Conditions$1=3@2", COOKIE1_, COOKIE2_, func_gen_ExtractNestedm_Conditions_S1A3Z2);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@12/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@12/4 (/7 e.Assignments0#1/17 )/8 (/11 e.Pattern0#1/19 )/12 (/15 e.Blocks0#1/21 )/16 (/27 e.ScopeVars#3/25 )/28 e.Result#3/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Assignments0#1 as range 17
    // closed e.Pattern0#1 as range 19
    // closed e.Blocks0#1 as range 21
    // closed e.ScopeVars#3 as range 25
    // closed e.Result#3 as range 23
    //DEBUG: e.Assignments0#1: 17
    //DEBUG: e.Pattern0#1: 19
    //DEBUG: e.Blocks0#1: 21
    //DEBUG: e.ScopeVars#3: 25
    //DEBUG: e.Result#3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Assignments$2=4@12/29 (/30 Tile{ AsIs: e.Result#3/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Assignments0#1/17 AsIs: )/8 AsIs: (/11 } e.ScopeVars#3/25/31 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern0#1/19 } )/33 </34 Tile{ HalfReuse: & Map@23/16 AsIs: (/27 AsIs: e.ScopeVars#3/25 AsIs: )/28 } Tile{ AsIs: e.Blocks0#1/21 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z12]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Map_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@12/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=2@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 } 2/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_number(vm, context[20], 2UL);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z12("EnumerateVars-Assignments$2=2@12", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z12);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & EnumerateVars-Assignments$2=2@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@13/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@13/4 (/7 e.Assignments0#1/17 )/8 (/11 e.Pattern0#1/19 )/12 (/15 e.Blocks0#1/21 )/16 (/27 e.ScopeVars#3/25 )/28 e.Result#3/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Assignments0#1 as range 17
    // closed e.Pattern0#1 as range 19
    // closed e.Blocks0#1 as range 21
    // closed e.ScopeVars#3 as range 25
    // closed e.Result#3 as range 23
    //DEBUG: e.Assignments0#1: 17
    //DEBUG: e.Pattern0#1: 19
    //DEBUG: e.Blocks0#1: 21
    //DEBUG: e.ScopeVars#3: 25
    //DEBUG: e.Result#3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & EnumerateVars-Assignments$2=4@13/29 (/30 Tile{ AsIs: e.Result#3/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Assignments0#1/17 AsIs: )/8 AsIs: (/11 } e.ScopeVars#3/25/31 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern0#1/19 } )/33 </34 Tile{ HalfReuse: & Map@23/16 AsIs: (/27 AsIs: e.ScopeVars#3/25 AsIs: )/28 } Tile{ AsIs: e.Blocks0#1/21 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z13]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Map_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@13/4 (/7 e.Assignments0#1/5 )/8 (/11 e.Pattern0#1/9 )/12 (/15 e.Blocks0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 5
  // closed e.Pattern0#1 as range 9
  // closed e.Blocks0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Assignments0#1: 5
  //DEBUG: e.Pattern0#1: 9
  //DEBUG: e.Blocks0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=2@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Assignments0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks0#1/13 AsIs: )/16 } 2/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_number(vm, context[20], 2UL);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z13("EnumerateVars-Assignments$2=2@13", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z13);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & EnumerateVars-Assignments$2=1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=1@4/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 (/24 e.new#6/22 )/25 e.new#7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 22
  // closed e.new#7 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=1@4/4 s.ChainType0#1/5 (/8 e.Assignments0#1/26 )/9 (/12 e.Pattern0#1/28 )/13 (/16 e.Blocks0#1/30 )/17 (/20 e.ScopeVars#3/32 )/21 (/24 e.Result0#1/34 )/25 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Assignments0#1 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks0#1 as range 30
    // closed e.ScopeVars#3 as range 32
    // closed e.Result0#1 as range 34
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Assignments0#1: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks0#1: 30
    //DEBUG: e.ScopeVars#3: 32
    //DEBUG: e.Result0#1: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=2@14/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/26 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/28 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/30 AsIs: )/17 HalfReuse: </20 } & DoMapAccum@24/36 (/37 Tile{ AsIs: e.ScopeVars#3/32 } )/38 Tile{ HalfReuse: (/21 HalfReuse: )/24 AsIs: e.Result0#1/34 HalfReuse: >/25 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z14]);
    refalrts::reinit_open_call(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_close_bracket(context[24]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=1@4/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 (/20 e.ScopeVars#3/18 )/21 (/24 e.Result0#1/22 )/25 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.ScopeVars#3 as range 18
  // closed e.Result0#1 as range 22
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.ScopeVars#3: 18
  //DEBUG: e.Result0#1: 22
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 & EnumerateVars-Assignments$2=1@0/27 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 HalfReuse: 2/20 } (/28 Tile{ AsIs: e.ScopeVars#3/18 } Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.Result0#1/22 AsIs: )/25 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Assignments_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_number(context[20], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[28], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[20] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A1Z4("EnumerateVars-Assignments$2=1@4", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A1Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@24/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum$1=1@24/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0#1/13 )/8 (/11 e.Tail0#1/15 )/12 t.Acc#2/19 e.StepScanned#2/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0#1 as range 13
    // closed e.Tail0#1 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#2 as range 17
    //DEBUG: e.Scanned0#1: 13
    //DEBUG: e.Tail0#1: 15
    //DEBUG: t.Acc#2: 19
    //DEBUG: e.StepScanned#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@24/4 } Tile{ AsIs: t.Acc#2/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0#1/13 } Tile{ AsIs: e.StepScanned#2/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0#1/5 )/8 (/11 e.Tail0#1/9 )/12 e.dyn#0/2 >/1
  // closed e.Scanned0#1 as range 5
  // closed e.Tail0#1 as range 9
  // closed e.dyn#0 as range 2
  //DEBUG: e.Scanned0#1: 5
  //DEBUG: e.Tail0#1: 9
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & EnumerateVars-Expr\1@0/16 Tile{ HalfReuse: 2/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0#1/9 AsIs: )/12 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[0], 2UL);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z24("DoMapAccum$1=1@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z24);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@10/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@10/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@10/4 s.ChainType0#1/5 (/8 e.Result0#3/18 )/9 (/12 e.Blocks0#5/20 )/13 (/16 e.Assignments0#1/22 )/17 (/28 e.ScopeVars#6/26 )/29 e.Pattern#6/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Result0#3 as range 18
    // closed e.Blocks0#5 as range 20
    // closed e.Assignments0#1 as range 22
    // closed e.ScopeVars#6 as range 26
    // closed e.Pattern#6 as range 24
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Result0#3: 18
    //DEBUG: e.Blocks0#5: 20
    //DEBUG: e.Assignments0#1: 22
    //DEBUG: e.ScopeVars#6: 26
    //DEBUG: e.Pattern#6: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </30 & EnumerateVars-Assignments/31 Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/18 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/20 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Pattern#6/24 } )/32 )/33 )/34 Tile{ HalfReuse: 2/17 AsIs: (/28 AsIs: e.ScopeVars#6/26 AsIs: )/29 } Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_number(context[17], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[0], context[34] );
    refalrts::link_brackets( context[4], context[33] );
    refalrts::link_brackets( context[16], context[32] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@10/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Blocks0#5/10 )/13 (/16 e.Assignments0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Blocks0#5 as range 10
  // closed e.Assignments0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Blocks0#5: 10
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=5@0/19 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/6 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/10 AsIs: )/13 HalfReuse: 2/16 } (/20 Tile{ AsIs: e.Assignments0#1/14 } Tile{ AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_number(context[16], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z10("EnumerateVars-Assignments$2=5@10", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z10);


static refalrts::FnResult func_gen_Reduce_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Reduce@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@3/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce@3/4 t.Acc#1/5 t.Next#1/9 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail#1 as range 7
    //DEBUG: t.Acc#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@3/4 } (/11 Tile{ AsIs: e.Tail#1/7 } )/12 </13 & CheckBorrowed/14 (/15 )/16 Tile{ AsIs: t.Acc#1/5 AsIs: t.Next#1/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_CheckBorrowed]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@3/4 t.Acc#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@3/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@3/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 (/9 & CheckBorrowed@0/10 (/11 Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[9], context[4] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z3("Reduce@3", COOKIE1_, COOKIE2_, func_gen_Reduce_Z3);


static refalrts::FnResult func_gen_Reduce_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Reduce@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & Reduce@4/4 (/7 e.ScopeVars0#1/15 )/8 (/11 e.LocalVars0#1/17 )/12 t.Acc#1/13 t.Next#1/21 e.Tail#1/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.ScopeVars0#1 as range 15
    // closed e.LocalVars0#1 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.ScopeVars0#1: 15
    //DEBUG: e.LocalVars0#1: 17
    //DEBUG: t.Next#1: 21
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@4/4 AsIs: (/7 AsIs: e.ScopeVars0#1/15 AsIs: )/8 AsIs: (/11 AsIs: e.LocalVars0#1/17 AsIs: )/12 } (/23 Tile{ AsIs: e.Tail#1/19 } )/24 </25 & CheckBorrowed/26 (/27 e.ScopeVars0#1/15/28 e.LocalVars0#1/17/30 )/32 Tile{ AsIs: t.Acc#1/13 AsIs: t.Next#1/21 } >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_CheckBorrowed]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[15], context[16]);
    refalrts::copy_evar(vm, context[30], context[31], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[27], context[32] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[13], context[22] );
    res = refalrts::splice_evar( res, context[24], context[32] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@4/4 (/7 e.ScopeVars0#1/15 )/8 (/11 e.LocalVars0#1/17 )/12 t.Acc#1/13 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars0#1 as range 15
    // closed e.LocalVars0#1 as range 17
    //DEBUG: t.Acc#1: 13
    //DEBUG: e.ScopeVars0#1: 15
    //DEBUG: e.LocalVars0#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@4/4 (/7 e.ScopeVars0#1/15 )/8 (/11 e.LocalVars0#1/17 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/13 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@4/4 (/7 e.ScopeVars0#1/5 )/8 (/11 e.LocalVars0#1/9 )/12 t.accum#0/13 e.items#0/2 >/1
  // closed e.ScopeVars0#1 as range 5
  // closed e.LocalVars0#1 as range 9
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 13
  //DEBUG: e.ScopeVars0#1: 5
  //DEBUG: e.LocalVars0#1: 9
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 AsIs: (/7 } Tile{ HalfReuse: & CheckBorrowed@0/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars0#1/5 } Tile{ AsIs: e.LocalVars0#1/9 } )/15 Tile{ AsIs: )/12 AsIs: t.accum#0/13 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::reinit_name(context[8], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z4("Reduce@4", COOKIE1_, COOKIE2_, func_gen_Reduce_Z4);


static refalrts::FnResult func_gen_Fetch_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Fetch@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@11/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@11/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@13/4 } </8 & Map@12/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z12]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@11/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-NameNestedFuncs@0/8 (/9 & Pass-RemoveBlocksAndAssigns@0/10 (/11 & Pass-FlatNestedFuncs@0/12 Tile{ AsIs: s.MarkupContext#1/5 } )/13 & Pass-CleanupRedudandExterns@0/14 & Pass-UnfoldEnums@0/15 )/16 {*}/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_unwrapped_closure(vm, context[17], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[16] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[17] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z11("Fetch@11", COOKIE1_, COOKIE2_, func_gen_Fetch_Z11);


static refalrts::FnResult func_gen_Fetch_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Fetch@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@12/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@12/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@14/4 } </8 & Map@12/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z12]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@12/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-NameNestedFuncs@0/8 (/9 & Pass-RemoveBlocksAndAssigns@0/10 (/11 & Pass-FlatNestedFuncs@0/12 s.MarkupContext#1/5/13 )/14 (/15 & Pass-UnCondition@0/16 Tile{ AsIs: s.MarkupContext#1/5 } )/17 & Pass-CleanupRedudandExterns@0/18 & Pass-UnfoldEnums@0/19 )/20 {*}/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_NameNestedFuncs_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[13], context[5]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_unwrapped_closure(vm, context[21], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[20] );
  refalrts::link_brackets( context[15], context[17] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[21] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z12("Fetch@12", COOKIE1_, COOKIE2_, func_gen_Fetch_Z12);


static refalrts::FnResult func_gen_Map_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & Map@23/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@23/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@23/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@23/4 (/7 e.new#8/15 )/8 (/13 e.new#6/19 )/14 e.new#7/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new#8 as range 15
      // closed e.new#6 as range 19
      // closed e.new#7 as range 17
      do {
        // </0 & Map@23/4 (/7 e.new#12/21 )/8 (/13 s.new#9/27 e.new#10/23 )/14 e.new#11/25 >/1
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[17];
        context[26] = context[18];
        // closed e.new#12 as range 21
        // closed e.new#11 as range 25
        if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
          continue;
        // closed e.new#10 as range 23
        do {
          // </0 & Map@23/4 (/7 e.ScopeVars#3/28 )/8 (/13 # Sentences/27 e.0#0/30 )/14 e.Tail#1/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[27] ) )
            continue;
          // closed e.ScopeVars#3 as range 28
          // closed e.0#0 as range 30
          // closed e.Tail#1 as range 32
          //DEBUG: e.ScopeVars#3: 28
          //DEBUG: e.0#0: 30
          //DEBUG: e.Tail#1: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Sentences/27 } </34 & Map@24/35 (/36 e.ScopeVars#3/28/37 Tile{ AsIs: )/14 } Tile{ AsIs: e.0#0/30 } >/39 )/40 Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z24]);
          refalrts::alloc_open_bracket(vm, context[36]);
          refalrts::copy_evar(vm, context[37], context[38], context[28], context[29]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[34] );
          refalrts::link_brackets( context[36], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[34], context[36] );
          res = refalrts::splice_evar( res, context[13], context[27] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@23/4 (/7 e.ScopeVars#3/28 )/8 (/13 # NativeBody/27 t.0#0/34 e.1#0/30 )/14 e.Tail#1/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[27] ) )
            continue;
          // closed e.ScopeVars#3 as range 28
          // closed e.Tail#1 as range 32
          context[35] = refalrts::tvar_left( context[34], context[30], context[31] );
          if( ! context[35] )
            continue;
          // closed e.1#0 as range 30
          //DEBUG: e.ScopeVars#3: 28
          //DEBUG: e.Tail#1: 32
          //DEBUG: t.0#0: 34
          //DEBUG: e.1#0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # NativeBody/27 AsIs: t.0#0/34 AsIs: e.1#0/30 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@23/4 (/7 e.ScopeVars#3/28 )/8 (/13 # Metatable/27 e.0#0/30 )/14 e.Tail#1/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[27] ) )
          continue;
        // closed e.ScopeVars#3 as range 28
        // closed e.0#0 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: e.ScopeVars#3: 28
        //DEBUG: e.0#0: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Metatable/27 AsIs: e.0#0/30 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.ScopeVars#3/28 AsIs: )/8 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@23/4 (/7 e.ScopeVars#3/21 )/8 (/13 e.#0/23 )/14 e.Tail#1/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[17];
      context[26] = context[18];
      // closed e.ScopeVars#3 as range 21
      // closed e.#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: e.ScopeVars#3: 21
      //DEBUG: e.#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/27 </28 & EnumerateVars-Body*3/29 3/30 (/31 e.ScopeVars#3/21/32 Tile{ HalfReuse: )/13 AsIs: e.#0/23 HalfReuse: >/14 } )/34 Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.ScopeVars#3/21 AsIs: )/8 } Tile{ AsIs: e.Tail#1/25 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::alloc_number(vm, context[30], 3UL);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[34] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[31], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[27], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@23/4 (/7 e.ScopeVars#3/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars#3 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.ScopeVars#3: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & EnumerateVars-Blocks\1*1/20 3/21 (/22 e.ScopeVars#3/15/23 )/25 Tile{ AsIs: t.Next#1/13 } >/26 Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.ScopeVars#3/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Blocks_L1D1]);
    refalrts::alloc_number(vm, context[21], 3UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@23/4 (/7 e.ScopeVars#3/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#3 as range 9
    //DEBUG: e.ScopeVars#3: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@23/4 (/7 e.ScopeVars#3/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@23/4 (/7 e.ScopeVars#3/5 )/8 e.items#0/2 >/1
  // closed e.ScopeVars#3 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.ScopeVars#3: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 Tile{ HalfReuse: & EnumerateVars-Blocks\1@0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.ScopeVars#3/5 AsIs: )/8 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Blocks_L1Z0]);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z23("Map@23", COOKIE1_, COOKIE2_, func_gen_Map_Z23);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & EnumerateVars-Assignments$2=4@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@12/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@12/4 (/7 e.Result0#3/21 )/8 (/11 e.Assignments0#1/23 )/12 (/15 e.ScopeVars0#3/25 )/16 (/19 e.Pattern0#1/27 )/20 e.Blocks#5/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Result0#3 as range 21
    // closed e.Assignments0#1 as range 23
    // closed e.ScopeVars0#3 as range 25
    // closed e.Pattern0#1 as range 27
    // closed e.Blocks#5 as range 29
    //DEBUG: e.Result0#3: 21
    //DEBUG: e.Assignments0#1: 23
    //DEBUG: e.ScopeVars0#3: 25
    //DEBUG: e.Pattern0#1: 27
    //DEBUG: e.Blocks#5: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@11/4 AsIs: (/7 AsIs: e.Result0#3/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Blocks#5/29 } )/31 (/32 Tile{ AsIs: e.Assignments0#1/23 } Tile{ AsIs: )/20 } </33 & DoMapAccum@23/34 [*]/35 & EnumerateVars-Expr\1/36 3/37 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.ScopeVars0#3/25 AsIs: )/16 AsIs: (/19 } )/38 Tile{ AsIs: e.Pattern0#1/27 } >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::alloc_closure_head(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
    refalrts::alloc_number(vm, context[37], 3UL);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z11]);
    refalrts::reinit_unwrapped_closure(context[12], context[35]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[19], context[38] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[20] );
    refalrts::link_brackets( context[11], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[33], context[37] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    refalrts::wrap_closure( context[12] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@12/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } )/21 # Assign/22 (/23 Tile{ AsIs: e.Result0#3/5 } )/24 Tile{ HalfReuse: 3/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Assign]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[8], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z12("EnumerateVars-Assignments$2=4@12", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z12);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & EnumerateVars-Assignments$2=4@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@13/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@13/4 (/7 e.Result0#3/21 )/8 (/11 e.Assignments0#1/23 )/12 (/15 e.ScopeVars0#3/25 )/16 (/19 e.Pattern0#1/27 )/20 e.Blocks#5/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Result0#3 as range 21
    // closed e.Assignments0#1 as range 23
    // closed e.ScopeVars0#3 as range 25
    // closed e.Pattern0#1 as range 27
    // closed e.Blocks#5 as range 29
    //DEBUG: e.Result0#3: 21
    //DEBUG: e.Assignments0#1: 23
    //DEBUG: e.ScopeVars0#3: 25
    //DEBUG: e.Pattern0#1: 27
    //DEBUG: e.Blocks#5: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@12/4 AsIs: (/7 AsIs: e.Result0#3/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Blocks#5/29 } )/31 (/32 Tile{ AsIs: e.Assignments0#1/23 } Tile{ AsIs: )/20 } </33 & DoMapAccum@23/34 [*]/35 & EnumerateVars-Expr\1/36 3/37 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.ScopeVars0#3/25 AsIs: )/16 AsIs: (/19 } )/38 Tile{ AsIs: e.Pattern0#1/27 } >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::alloc_closure_head(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
    refalrts::alloc_number(vm, context[37], 3UL);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z12]);
    refalrts::reinit_unwrapped_closure(context[12], context[35]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[19], context[38] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[20] );
    refalrts::link_brackets( context[11], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[33], context[37] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    refalrts::wrap_closure( context[12] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@13/4 (/7 e.Result0#3/5 )/8 (/11 e.Assignments0#1/9 )/12 (/15 e.ScopeVars0#3/13 )/16 (/19 e.Pattern0#1/17 )/20 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Assignments0#1 as range 9
  // closed e.ScopeVars0#3 as range 13
  // closed e.Pattern0#1 as range 17
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Assignments0#1: 9
  //DEBUG: e.ScopeVars0#3: 13
  //DEBUG: e.Pattern0#1: 17
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 AsIs: (/7 } )/21 # Condition/22 (/23 Tile{ AsIs: e.Result0#3/5 } )/24 Tile{ HalfReuse: 3/8 AsIs: (/11 AsIs: e.Assignments0#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.ScopeVars0#3/13 AsIs: )/16 AsIs: (/19 AsIs: e.Pattern0#1/17 AsIs: )/20 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Condition]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[8], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z13("EnumerateVars-Assignments$2=4@13", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z13);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A2Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & EnumerateVars-Assignments$2=2@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=2@14/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=2@14/4 s.ChainType0#1/5 (/8 e.Assignments0#1/18 )/9 (/12 e.Pattern0#1/20 )/13 (/16 e.Blocks0#1/22 )/17 (/28 e.ScopeVars#3/26 )/29 e.Result#3/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Assignments0#1 as range 18
    // closed e.Pattern0#1 as range 20
    // closed e.Blocks0#1 as range 22
    // closed e.ScopeVars#3 as range 26
    // closed e.Result#3 as range 24
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Assignments0#1: 18
    //DEBUG: e.Pattern0#1: 20
    //DEBUG: e.Blocks0#1: 22
    //DEBUG: e.ScopeVars#3: 26
    //DEBUG: e.Result#3: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@14/4 AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result#3/24 } )/30 (/31 Tile{ AsIs: e.Assignments0#1/18 } )/32 (/33 e.ScopeVars#3/26/34 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/20 AsIs: )/13 HalfReuse: </16 } Tile{ HalfReuse: & Map@23/17 AsIs: (/28 AsIs: e.ScopeVars#3/26 AsIs: )/29 } Tile{ AsIs: e.Blocks0#1/22 } >/36 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[26], context[27]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z14]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[33], context[9] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[8], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=2@14/4 s.ChainType0#1/5 (/8 e.Assignments0#1/6 )/9 (/12 e.Pattern0#1/10 )/13 (/16 e.Blocks0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Assignments0#1 as range 6
  // closed e.Pattern0#1 as range 10
  // closed e.Blocks0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Assignments0#1: 6
  //DEBUG: e.Pattern0#1: 10
  //DEBUG: e.Blocks0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=2@0/19 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Assignments0#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks0#1/14 AsIs: )/17 } 2/20 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A2Z0]);
  refalrts::alloc_number(vm, context[20], 2UL);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A2Z14("EnumerateVars-Assignments$2=2@14", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A2Z14);


static refalrts::FnResult func_gen_Map_Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Map@24/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@24/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Map@24/4 (/7 e.new#5/9 )/8 t.new#3/13 e.new#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new#4 as range 11
    do {
      // </0 & Map@24/4 (/7 e.ScopeVars#2/15 )/8 (/13 (/23 e.1#0/21 )/24 e.4#0/19 (/31 e.5#0/29 )/32 (/27 e.3#0/25 )/28 )/14 e.Tail#1/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.ScopeVars#2 as range 15
      // closed e.1#0 as range 21
      // closed e.4#0 as range 19
      // closed e.5#0 as range 29
      // closed e.3#0 as range 25
      // closed e.Tail#1 as range 17
      //DEBUG: e.ScopeVars#2: 15
      //DEBUG: e.1#0: 21
      //DEBUG: e.4#0: 19
      //DEBUG: e.5#0: 29
      //DEBUG: e.3#0: 25
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </33 & EnumerateVars-Body$1\1=1/34 (/35 Tile{ AsIs: e.3#0/25 } )/36 Tile{ AsIs: (/31 AsIs: e.5#0/29 AsIs: )/32 HalfReuse: 3/27 } (/37 Tile{ AsIs: e.4#0/19 } Tile{ AsIs: )/28 } </38 & DoMapAccum@23/39 [*]/40 & EnumerateVars-Expr\1/41 Tile{ HalfReuse: 3/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 AsIs: (/13 HalfReuse: )/23 AsIs: e.1#0/21 HalfReuse: >/24 } >/42 </43 & Map@24/44 (/45 e.ScopeVars#2/15/46 Tile{ AsIs: )/14 AsIs: e.Tail#1/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_EnumerateVarsm_Body_S1L1A1]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_DoMapAccum_Z23]);
      refalrts::alloc_closure_head(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_Map_Z24]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[15], context[16]);
      refalrts::reinit_number(context[27], 3UL);
      refalrts::reinit_number(context[0], 3UL);
      refalrts::reinit_unwrapped_closure(context[4], context[40]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_close_call(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[45], context[14] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[13], context[23] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[37], context[28] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[42], context[45] );
      res = refalrts::splice_evar( res, context[0], context[24] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[31], context[27] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::use( res );
      refalrts::wrap_closure( context[4] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@24/4 (/7 e.ScopeVars#2/15 )/8 t.Next#1/13 e.Tail#1/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars#2 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.Next#1: 13
    //DEBUG: e.ScopeVars#2: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & EnumerateVars-Body$1\1*1/20 3/21 (/22 e.ScopeVars#2/15/23 )/25 Tile{ AsIs: t.Next#1/13 } >/26 Tile{ AsIs: </0 AsIs: & Map@24/4 AsIs: (/7 AsIs: e.ScopeVars#2/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_EnumerateVarsm_Body_S1L1D1]);
    refalrts::alloc_number(vm, context[21], 3UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@24/4 (/7 e.ScopeVars#2/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars#2 as range 9
    //DEBUG: e.ScopeVars#2: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@24/4 (/7 e.ScopeVars#2/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@24/4 (/7 e.ScopeVars#2/5 )/8 e.items#0/2 >/1
  // closed e.ScopeVars#2 as range 5
  // closed e.items#0 as range 2
  //DEBUG: e.ScopeVars#2: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 Tile{ HalfReuse: & EnumerateVars-Body$1\1@0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.ScopeVars#2/5 AsIs: )/8 } {*}/12 Tile{ AsIs: e.items#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Body_S1L1Z0]);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z24("Map@24", COOKIE1_, COOKIE2_, func_gen_Map_Z24);


static refalrts::FnResult func_gen_Reduce_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@3/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Reduce$1=1@3/4 (/7 e.Tail0#1/9 )/8 t.Acc#2/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0#1 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0#1: 9
    //DEBUG: t.Acc#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@3/4 } Tile{ AsIs: t.Acc#2/13 } Tile{ AsIs: e.Tail0#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@3/4 (/7 e.Tail0#1/5 )/8 e.dyn#0/2 >/1
  // closed e.Tail0#1 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Tail0#1: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 (/11 & CheckBorrowed@0/12 (/13 Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Tail0#1/5 AsIs: )/8 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z3("Reduce$1=1@3", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z3);


static refalrts::FnResult func_gen_Reduce_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Reduce$1=1@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce$1=1@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & Reduce$1=1@4/4 (/7 e.ScopeVars0#1/17 )/8 (/11 e.LocalVars0#1/19 )/12 (/15 e.Tail0#1/21 )/16 t.Acc#2/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.ScopeVars0#1 as range 17
    // closed e.LocalVars0#1 as range 19
    // closed e.Tail0#1 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    //DEBUG: e.ScopeVars0#1: 17
    //DEBUG: e.LocalVars0#1: 19
    //DEBUG: e.Tail0#1: 21
    //DEBUG: t.Acc#2: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@4/4 AsIs: (/7 AsIs: e.ScopeVars0#1/17 AsIs: )/8 AsIs: (/11 AsIs: e.LocalVars0#1/19 AsIs: )/12 } Tile{ AsIs: t.Acc#2/25 } Tile{ AsIs: e.Tail0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@4/4 (/7 e.ScopeVars0#1/5 )/8 (/11 e.LocalVars0#1/9 )/12 (/15 e.Tail0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.ScopeVars0#1 as range 5
  // closed e.LocalVars0#1 as range 9
  // closed e.Tail0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.ScopeVars0#1: 5
  //DEBUG: e.LocalVars0#1: 9
  //DEBUG: e.Tail0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 AsIs: (/7 } Tile{ HalfReuse: & CheckBorrowed@0/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars0#1/5 } Tile{ AsIs: e.LocalVars0#1/9 } )/17 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Tail0#1/13 AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::reinit_name(context[8], functions[efunc_gen_CheckBorrowed_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[11], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z4("Reduce$1=1@4", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z4);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@11/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@11/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@11/4 (/7 e.Result0#3/17 )/8 (/11 e.Blocks0#5/19 )/12 (/15 e.Assignments0#1/21 )/16 (/27 e.ScopeVars#6/25 )/28 e.Pattern#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Result0#3 as range 17
    // closed e.Blocks0#5 as range 19
    // closed e.Assignments0#1 as range 21
    // closed e.ScopeVars#6 as range 25
    // closed e.Pattern#6 as range 23
    //DEBUG: e.Result0#3: 17
    //DEBUG: e.Blocks0#5: 19
    //DEBUG: e.Assignments0#1: 21
    //DEBUG: e.ScopeVars#6: 25
    //DEBUG: e.Pattern#6: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 & EnumerateVars-Assignments/30 (/31 Tile{ HalfReuse: (/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/17 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern#6/23 } )/32 )/33 )/34 Tile{ HalfReuse: 3/16 AsIs: (/27 AsIs: e.ScopeVars#6/25 AsIs: )/28 } Tile{ AsIs: e.Assignments0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
    refalrts::reinit_number(context[16], 3UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[31], context[34] );
    refalrts::link_brackets( context[0], context[33] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@11/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 (/15 e.Assignments0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=5@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Assign/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 HalfReuse: 3/15 } (/20 Tile{ AsIs: e.Assignments0#1/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
  refalrts::reinit_number(context[15], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z11("EnumerateVars-Assignments$2=5@11", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z11);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@12/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@12/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@12/4 (/7 e.Result0#3/17 )/8 (/11 e.Blocks0#5/19 )/12 (/15 e.Assignments0#1/21 )/16 (/27 e.ScopeVars#6/25 )/28 e.Pattern#6/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Result0#3 as range 17
    // closed e.Blocks0#5 as range 19
    // closed e.Assignments0#1 as range 21
    // closed e.ScopeVars#6 as range 25
    // closed e.Pattern#6 as range 23
    //DEBUG: e.Result0#3: 17
    //DEBUG: e.Blocks0#5: 19
    //DEBUG: e.Assignments0#1: 21
    //DEBUG: e.ScopeVars#6: 25
    //DEBUG: e.Pattern#6: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 & EnumerateVars-Assignments/30 (/31 Tile{ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/17 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Pattern#6/23 } )/32 )/33 )/34 Tile{ HalfReuse: 3/16 AsIs: (/27 AsIs: e.ScopeVars#6/25 AsIs: )/28 } Tile{ AsIs: e.Assignments0#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
    refalrts::reinit_number(context[16], 3UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[31], context[34] );
    refalrts::link_brackets( context[0], context[33] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@12/4 (/7 e.Result0#3/5 )/8 (/11 e.Blocks0#5/9 )/12 (/15 e.Assignments0#1/13 )/16 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 5
  // closed e.Blocks0#5 as range 9
  // closed e.Assignments0#1 as range 13
  // closed e.dyn#0 as range 2
  //DEBUG: e.Result0#3: 5
  //DEBUG: e.Blocks0#5: 9
  //DEBUG: e.Assignments0#1: 13
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & EnumerateVars-Assignments$2=5@0/18 (/19 Tile{ HalfReuse: )/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Result0#3/5 AsIs: )/8 AsIs: (/11 AsIs: e.Blocks0#5/9 AsIs: )/12 HalfReuse: 3/15 } (/20 Tile{ AsIs: e.Assignments0#1/13 } Tile{ AsIs: )/16 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::reinit_number(context[15], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z12("EnumerateVars-Assignments$2=5@12", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z12);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A4Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & EnumerateVars-Assignments$2=4@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=4@14/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 (/20 e.new#5/18 )/21 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 18
  // closed e.new#6 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=4@14/4 s.ChainType0#1/5 (/8 e.Result0#3/22 )/9 (/12 e.Assignments0#1/24 )/13 (/16 e.ScopeVars0#3/26 )/17 (/20 e.Pattern0#1/28 )/21 e.Blocks#5/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Result0#3 as range 22
    // closed e.Assignments0#1 as range 24
    // closed e.ScopeVars0#3 as range 26
    // closed e.Pattern0#1 as range 28
    // closed e.Blocks#5 as range 30
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Result0#3: 22
    //DEBUG: e.Assignments0#1: 24
    //DEBUG: e.ScopeVars0#3: 26
    //DEBUG: e.Pattern0#1: 28
    //DEBUG: e.Blocks#5: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=5@13/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Blocks#5/30 } )/32 (/33 Tile{ AsIs: e.Assignments0#1/24 } Tile{ AsIs: )/21 } </34 & DoMapAccum@23/35 [*]/36 & EnumerateVars-Expr\1/37 3/38 Tile{ HalfReuse: {*}/13 AsIs: (/16 AsIs: e.ScopeVars0#3/26 AsIs: )/17 AsIs: (/20 } )/39 Tile{ AsIs: e.Pattern0#1/28 } >/40 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::alloc_closure_head(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_EnumerateVarsm_Expr_L1]);
    refalrts::alloc_number(vm, context[38], 3UL);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z13]);
    refalrts::reinit_unwrapped_closure(context[13], context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[20], context[39] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[33], context[21] );
    refalrts::link_brackets( context[12], context[32] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_evar( res, context[34], context[38] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    refalrts::wrap_closure( context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=4@14/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Assignments0#1/10 )/13 (/16 e.ScopeVars0#3/14 )/17 (/20 e.Pattern0#1/18 )/21 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Assignments0#1 as range 10
  // closed e.ScopeVars0#3 as range 14
  // closed e.Pattern0#1 as range 18
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Assignments0#1: 10
  //DEBUG: e.ScopeVars0#3: 14
  //DEBUG: e.Pattern0#1: 18
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EnumerateVars-Assignments$2=4@0/4 } (/22 )/23 Tile{ AsIs: s.ChainType0#1/5 AsIs: (/8 } Tile{ AsIs: e.Result0#3/6 } )/24 Tile{ HalfReuse: 3/9 AsIs: (/12 AsIs: e.Assignments0#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.ScopeVars0#3/14 AsIs: )/17 AsIs: (/20 AsIs: e.Pattern0#1/18 AsIs: )/21 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_EnumerateVarsm_Assignments_S2A4Z0]);
  refalrts::reinit_number(context[9], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A4Z14("EnumerateVars-Assignments$2=4@14", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A4Z14);


static refalrts::FnResult func_gen_Fetch_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Fetch@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@13/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@13/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@15/4 } </8 & Map@14/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z14]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@13/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-RemoveBlocksAndAssigns@0/8 (/9 (/10 & Pass-FlatNestedFuncs@0/11 Tile{ AsIs: s.MarkupContext#1/5 } )/12 & Pass-CleanupRedudandExterns@0/13 & Pass-UnfoldEnums@0/14 )/15 {*}/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_unwrapped_closure(vm, context[16], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[15] );
  refalrts::link_brackets( context[10], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[16] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z13("Fetch@13", COOKIE1_, COOKIE2_, func_gen_Fetch_Z13);


static refalrts::FnResult func_gen_Fetch_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Fetch@14/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@14/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@14/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@16/4 } </8 & Map@14/9 Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z14]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@14/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 & Pass-RemoveBlocksAndAssigns@0/8 (/9 (/10 & Pass-FlatNestedFuncs@0/11 s.MarkupContext#1/5/12 )/13 (/14 & Pass-UnCondition@0/15 Tile{ AsIs: s.MarkupContext#1/5 } )/16 & Pass-CleanupRedudandExterns@0/17 & Pass-UnfoldEnums@0/18 )/19 {*}/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_RemoveBlocksAndAssigns_Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_unwrapped_closure(vm, context[20], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[19] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[20] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z14("Fetch@14", COOKIE1_, COOKIE2_, func_gen_Fetch_Z14);


static refalrts::FnResult func_gen_EnumerateVarsm_Assignments_S2A5Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & EnumerateVars-Assignments$2=5@13/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Assignments$2=5@13/4 s.new#1/5 (/8 e.new#2/6 )/9 (/12 e.new#3/10 )/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 10
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & EnumerateVars-Assignments$2=5@13/4 s.ChainType0#1/5 (/8 e.Result0#3/18 )/9 (/12 e.Blocks0#5/20 )/13 (/16 e.Assignments0#1/22 )/17 (/28 e.ScopeVars#6/26 )/29 e.Pattern#6/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.Result0#3 as range 18
    // closed e.Blocks0#5 as range 20
    // closed e.Assignments0#1 as range 22
    // closed e.ScopeVars#6 as range 26
    // closed e.Pattern#6 as range 24
    //DEBUG: s.ChainType0#1: 5
    //DEBUG: e.Result0#3: 18
    //DEBUG: e.Blocks0#5: 20
    //DEBUG: e.Assignments0#1: 22
    //DEBUG: e.ScopeVars#6: 26
    //DEBUG: e.Pattern#6: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </30 & EnumerateVars-Assignments/31 Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/18 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/20 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Pattern#6/24 } )/32 )/33 )/34 Tile{ HalfReuse: 3/17 AsIs: (/28 AsIs: e.ScopeVars#6/26 AsIs: )/29 } Tile{ AsIs: e.Assignments0#1/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_EnumerateVarsm_Assignments]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_number(context[17], 3UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[0], context[34] );
    refalrts::link_brackets( context[4], context[33] );
    refalrts::link_brackets( context[16], context[32] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[17], context[29] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Assignments$2=5@13/4 s.ChainType0#1/5 (/8 e.Result0#3/6 )/9 (/12 e.Blocks0#5/10 )/13 (/16 e.Assignments0#1/14 )/17 e.dyn#0/2 >/1
  // closed e.Result0#3 as range 6
  // closed e.Blocks0#5 as range 10
  // closed e.Assignments0#1 as range 14
  // closed e.dyn#0 as range 2
  //DEBUG: s.ChainType0#1: 5
  //DEBUG: e.Result0#3: 6
  //DEBUG: e.Blocks0#5: 10
  //DEBUG: e.Assignments0#1: 14
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & EnumerateVars-Assignments$2=5@0/19 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.ChainType0#1/5 AsIs: (/8 AsIs: e.Result0#3/6 AsIs: )/9 AsIs: (/12 AsIs: e.Blocks0#5/10 AsIs: )/13 HalfReuse: 3/16 } (/20 Tile{ AsIs: e.Assignments0#1/14 } Tile{ AsIs: )/17 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_EnumerateVarsm_Assignments_S2A5Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_number(context[16], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[0], context[16] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Assignments_S2A5Z13("EnumerateVars-Assignments$2=5@13", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Assignments_S2A5Z13);


static refalrts::FnResult func_gen_Fetch_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Fetch@15/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@15/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@15/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@17/4 } </8 & Map@17/9 Tile{ AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z17]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@15/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 (/8 & Pass-FlatNestedFuncs@0/9 Tile{ AsIs: s.MarkupContext#1/5 } )/10 (/11 & Pass-CleanupRedudandExterns@0/12 & Pass-UnfoldEnums@0/13 )/14 {*}/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[8], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[15] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z15("Fetch@15", COOKIE1_, COOKIE2_, func_gen_Fetch_Z15);


static refalrts::FnResult func_gen_Fetch_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Fetch@16/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@16/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@16/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@18/4 } </8 & Map@17/9 s.MarkupContext#1/5/10 Tile{ AsIs: e.Argument#1/6 } >/11 Tile{ AsIs: s.MarkupContext#1/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z17]);
    refalrts::copy_stvar(vm, context[10], context[5]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@16/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 (/8 & Pass-FlatNestedFuncs@0/9 s.MarkupContext#1/5/10 )/11 (/12 (/13 & Pass-UnCondition@0/14 Tile{ AsIs: s.MarkupContext#1/5 } )/15 & Pass-CleanupRedudandExterns@0/16 & Pass-UnfoldEnums@0/17 )/18 {*}/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_FlatNestedFuncs_Z0]);
  refalrts::copy_stvar(vm, context[10], context[5]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_unwrapped_closure(vm, context[19], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[18] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[19] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[19] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z16("Fetch@16", COOKIE1_, COOKIE2_, func_gen_Fetch_Z16);


static refalrts::FnResult func_gen_Fetch_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Fetch@17/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Fetch@17/4 e.Argument#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument#1 as range 5
    //DEBUG: e.Argument#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@19/4 } </7 & Pass-CleanupRedudandExterns=1/8 </9 & DoMapAccum@16/10 (/11 )/12 (/13 )/14 Tile{ AsIs: e.Argument#1/5 } >/15 >/16 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_CleanupRedudandExterns_A1]);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@17/4 e.arg#0/2 >/1
  // closed e.arg#0 as range 2
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg#0/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & Pass-CleanupRedudandExterns@0/6 (/7 & Pass-UnfoldEnums@0/8 )/9 {*}/10 >/11 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_unwrapped_closure(vm, context[10], context[1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[10] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z17("Fetch@17", COOKIE1_, COOKIE2_, func_gen_Fetch_Z17);


static refalrts::FnResult func_gen_Fetch_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Fetch@18/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@18/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & Fetch@18/4 e.Argument#1/6 s.MarkupContext#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Argument#1 as range 6
    //DEBUG: s.MarkupContext#1: 5
    //DEBUG: e.Argument#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@17/4 } </8 & Pass-UnCondition/9 Tile{ AsIs: s.MarkupContext#1/5 } Tile{ AsIs: e.Argument#1/6 } >/10 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_Passm_UnCondition]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@18/4 e.arg#0/2 s.MarkupContext#1/5 >/1
  // closed e.arg#0 as range 2
  //DEBUG: s.MarkupContext#1: 5
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/2 } [*]/6 & Pipe$2\1@0/7 (/8 & Pass-UnCondition@0/9 Tile{ AsIs: s.MarkupContext#1/5 } )/10 (/11 & Pass-CleanupRedudandExterns@0/12 & Pass-UnfoldEnums@0/13 )/14 {*}/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Passm_UnCondition_Z0]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Passm_CleanupRedudandExterns_Z0]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[8], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[15] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z18("Fetch@18", COOKIE1_, COOKIE2_, func_gen_Fetch_Z18);


static refalrts::FnResult func_gen_Fetch_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch@19/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Fetch@19/4 e.Argument#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument#1 as range 5
    //DEBUG: e.Argument#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@19/4 AsIs: e.Argument#1/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@19/4 e.arg#0/2 >/1
  // closed e.arg#0 as range 2
  //DEBUG: e.arg#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg#0/2 HalfReuse: & Pass-UnfoldEnums@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_Passm_UnfoldEnums_Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z19("Fetch@19", COOKIE1_, COOKIE2_, func_gen_Fetch_Z19);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1Z1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & EnumerateVars-Expr\1@1*1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#1/7 )/10 t.new#2/11 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#5/13 )/10 (/11 s.new#3/17 e.new#4/15 )/12 >/1
      context[13] = context[7];
      context[14] = context[8];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[11] ) )
        continue;
      // closed e.new#5 as range 13
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      // closed e.new#4 as range 15
      do {
        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#9/18 )/10 (/11 s.new#6/17 s.new#7/22 e.new#8/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        // closed e.new#9 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new#8 as range 20
        do {
          // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#12/23 )/10 (/11 # TkVariable/17 s.new#10/22 e.new#11/25 )/12 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[17] ) )
            continue;
          // closed e.new#12 as range 23
          // closed e.new#11 as range 25
          do {
            // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars-B#2/31 (/37 s.Mode#2/39 e.Index#2/40 s.Depth#2/42 )/38 e.ScopeVars-E#2/33 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            context[30] = context[26];
            // closed e.Index#2 as range 29
            context[31] = 0;
            context[32] = 0;
            refalrts::start_e_loop(vm);
            do {
              context[33] = context[27];
              context[34] = context[28];
              context[35] = 0;
              context[36] = 0;
              context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
              if( ! context[37] )
                continue;
              refalrts::bracket_pointers(context[37], context[38]);
              if( ! refalrts::repeated_stvar_left( vm, context[39], context[22], context[35], context[36] ) )
                continue;
              if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[29], context[30], context[35], context[36] ) )
                continue;
              // closed e.ScopeVars-E#2 as range 33
              if( ! refalrts::svar_left( context[42], context[35], context[36] ) )
                continue;
              if( ! refalrts::empty_seq( context[35], context[36] ) )
                continue;
              //DEBUG: s.Mode#2: 22
              //DEBUG: e.Index#2: 29
              //DEBUG: e.ScopeVars-B#2: 31
              //DEBUG: e.ScopeVars-E#2: 33
              //DEBUG: s.Depth#2: 42

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@1*1/4 {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars-B#2/31 AsIs: (/37 AsIs: s.Mode#2/39 AsIs: e.Index#2/40 AsIs: s.Depth#2/42 AsIs: )/38 AsIs: e.ScopeVars-E#2/33 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: s.Depth2 #42/12 HalfReuse: )/1 ]] }
              refalrts::reinit_svar( context[12], context[42] );
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[11], context[1] );
              refalrts::link_brackets( context[9], context[10] );
              refalrts::link_brackets( context[37], context[38] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[9];
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( refalrts::open_evar_advance( context[31], context[32], context[27], context[28] ) );
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.ScopeVars#2 as range 27
          // closed e.Index#2 as range 29
          //DEBUG: s.Mode#2: 22
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.Index#2: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } (/31 s.Mode#2/22/32 e.Index#2/29/33 Tile{ HalfReuse: 0/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: 0/12 HalfReuse: )/1 ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::copy_stvar(vm, context[32], context[22]);
          refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_number(context[4], 0UL);
          refalrts::reinit_close_bracket(context[9]);
          refalrts::reinit_number(context[12], 0UL);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[11], context[1] );
          refalrts::link_brackets( context[0], context[10] );
          refalrts::link_brackets( context[31], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[4];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/23 )/10 (/11 # TkNewVariable/17 s.Mode#2/22 e.Index#2/25 )/12 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 23
        // closed e.Index#2 as range 25
        //DEBUG: s.Mode#2: 22
        //DEBUG: e.ScopeVars#2: 23
        //DEBUG: e.Index#2: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } (/27 s.Mode#2/22/28 e.Index#2/25/29 Tile{ HalfReuse: 0/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/23 AsIs: )/10 AsIs: (/11 Reuse: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/25 HalfReuse: 0/12 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::copy_stvar(vm, context[28], context[22]);
        refalrts::copy_evar(vm, context[29], context[30], context[25], context[26]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::update_ident(context[17], identifiers[ident_TkVariable]);
        refalrts::reinit_number(context[12], 0UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[11], context[1] );
        refalrts::link_brackets( context[0], context[10] );
        refalrts::link_brackets( context[27], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[4];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # Brackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # ADT-Brackets/17 (/24 e.Name#2/22 )/25 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[17] ) )
          continue;
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
        if( ! context[24] )
          continue;
        refalrts::bracket_pointers(context[24], context[25]);
        // closed e.ScopeVars#2 as range 18
        // closed e.Name#2 as range 22
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.Name#2: 22
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & Fetch@2/25 } Tile{ AsIs: (/24 } Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 } Tile{ AsIs: e.InBrackets#2/20 } >/27 Tile{ AsIs: )/12 } Tile{ AsIs: e.Name#2/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_name(context[25], functions[efunc_gen_Fetch_Z2]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[24], context[12] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # CallBrackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@3/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z3]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#7/18 )/10 (/11 # Closure/17 e.new#6/20 )/12 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[17] ) )
        continue;
      // closed e.new#7 as range 18
      // closed e.new#6 as range 20
      do {
        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.new#10/22 )/10 (/11 # Closure/17 s.new#8/26 e.new#9/24 )/12 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.new#10 as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e.new#9 as range 24
        do {
          // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Sentences/26 e.#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          // closed e.#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 } & Fetch@4/31 Tile{ AsIs: (/11 Reuse: # Sentences/17 } Tile{ AsIs: </0 Reuse: & Map@20/4 AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 } Tile{ AsIs: e.#0/29 } >/32 Tile{ AsIs: )/12 } e.ScopeVars#2/27/33 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[31], functions[efunc_gen_Fetch_Z4]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
          refalrts::reinit_open_call(context[26]);
          refalrts::update_ident(context[17], identifiers[ident_Sentences]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z20]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[10] );
          res = refalrts::splice_evar( res, context[11], context[17] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # NativeBody/26 t.0#0/31 e.0#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
          if( ! context[32] )
            continue;
          // closed e.0#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: t.0#0: 31
          //DEBUG: e.0#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@1*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # NativeBody/26 AsIs: t.0#0/31 AsIs: e.0#0/29 AsIs: )/12 } Tile{ ]] }
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[12] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Metatable/26 e.#0/29 )/12 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[26] ) )
          continue;
        // closed e.ScopeVars#2 as range 27
        // closed e.#0 as range 29
        //DEBUG: e.ScopeVars#2: 27
        //DEBUG: e.#0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@1*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # Metatable/26 AsIs: e.#0/29 AsIs: )/12 } Tile{ ]] }
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/22 )/10 (/11 # Closure/17 e.Sentences#2/24 )/12 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.ScopeVars#2 as range 22
      // closed e.Sentences#2 as range 24
      //DEBUG: e.ScopeVars#2: 22
      //DEBUG: e.Sentences#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@4/4 AsIs: (/9 } </26 & EnumerateVars-Body*3/27 Tile{ HalfReuse: 1/10 AsIs: (/11 } Tile{ AsIs: e.ScopeVars#2/22 } Tile{ HalfReuse: )/17 AsIs: e.Sentences#2/24 HalfReuse: >/12 HalfReuse: )/1 } e.ScopeVars#2/22/28 >/30 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::copy_evar(vm, context[28], context[29], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z4]);
      refalrts::reinit_number(context[10], 1UL);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[11], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Expr\1@1*1/4 (/9 e.ScopeVars#2/13 )/10 t.OtherTerm#2/11 >/1
    context[13] = context[7];
    context[14] = context[8];
    // closed e.ScopeVars#2 as range 13
    //DEBUG: t.OtherTerm#2: 11
    //DEBUG: e.ScopeVars#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@1*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/13 AsIs: )/10 AsIs: t.OtherTerm#2/11 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Expr\1@1*1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & EnumerateVars-Expr\1@0/0 HalfReuse: 0/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1Z1D1("EnumerateVars-Expr\\1@1*1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1Z1D1);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & EnumerateVars-Expr\1*1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EnumerateVars-Expr\1*1/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EnumerateVars-Expr\1*1/4 s.new#4/5 (/8 e.new#7/12 )/9 (/10 s.new#5/16 e.new#6/14 )/11 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = 0;
    context[15] = 0;
    if( ! refalrts::brackets_term( context[14], context[15], context[10] ) )
      continue;
    // closed e.new#7 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    // closed e.new#6 as range 14
    do {
      // </0 & EnumerateVars-Expr\1*1/4 s.new#8/5 (/8 e.new#12/17 )/9 (/10 s.new#9/16 s.new#10/21 e.new#11/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      // closed e.new#12 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new#11 as range 19
      do {
        // </0 & EnumerateVars-Expr\1*1/4 s.new#13/5 (/8 e.new#16/22 )/9 (/10 # TkVariable/16 s.new#14/21 e.new#15/24 )/11 >/1
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[16] ) )
          continue;
        // closed e.new#16 as range 22
        // closed e.new#15 as range 24
        do {
          // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars-B#2/30 (/36 s.Mode#2/38 e.Index#2/39 s.Depth#2/41 )/37 e.ScopeVars-E#2/32 )/9 (/10 # TkVariable/16 s.Mode#2/21 e.Index#2/28 )/11 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          // closed e.Index#2 as range 28
          context[30] = 0;
          context[31] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[32] = context[26];
            context[33] = context[27];
            context[34] = 0;
            context[35] = 0;
            context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
            if( ! context[36] )
              continue;
            refalrts::bracket_pointers(context[36], context[37]);
            if( ! refalrts::repeated_stvar_left( vm, context[38], context[21], context[34], context[35] ) )
              continue;
            if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[28], context[29], context[34], context[35] ) )
              continue;
            // closed e.ScopeVars-E#2 as range 32
            if( ! refalrts::svar_left( context[41], context[34], context[35] ) )
              continue;
            if( ! refalrts::empty_seq( context[34], context[35] ) )
              continue;
            //DEBUG: s.Depth#1: 5
            //DEBUG: s.Mode#2: 21
            //DEBUG: e.Index#2: 28
            //DEBUG: e.ScopeVars-B#2: 30
            //DEBUG: e.ScopeVars-E#2: 32
            //DEBUG: s.Depth#2: 41

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.ScopeVars-B#2/30 AsIs: (/36 AsIs: s.Mode#2/38 AsIs: e.Index#2/39 AsIs: s.Depth#2/41 AsIs: )/37 AsIs: e.ScopeVars-E#2/32 AsIs: )/9 AsIs: (/10 AsIs: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/28 HalfReuse: s.Depth2 #41/11 HalfReuse: )/1 ]] }
            refalrts::reinit_svar( context[11], context[41] );
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[10], context[1] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::link_brackets( context[36], context[37] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[30], context[31], context[26], context[27] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/26 )/9 (/10 # TkVariable/16 s.Mode#2/21 e.Index#2/28 )/11 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        // closed e.ScopeVars#2 as range 26
        // closed e.Index#2 as range 28
        //DEBUG: s.Depth#1: 5
        //DEBUG: s.Mode#2: 21
        //DEBUG: e.ScopeVars#2: 26
        //DEBUG: e.Index#2: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } s.Mode#2/21/30 e.Index#2/28/31 Tile{ AsIs: s.Depth#1/5 HalfReuse: )/8 AsIs: e.ScopeVars#2/26 AsIs: )/9 AsIs: (/10 AsIs: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/28 HalfReuse: s.Depth1 #5/11 HalfReuse: )/1 ]] }
        refalrts::copy_stvar(vm, context[30], context[21]);
        refalrts::copy_evar(vm, context[31], context[32], context[28], context[29]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_close_bracket(context[8]);
        refalrts::reinit_svar( context[11], context[5] );
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[10], context[1] );
        refalrts::link_brackets( context[0], context[9] );
        refalrts::link_brackets( context[4], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[5];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/22 )/9 (/10 # TkNewVariable/16 s.Mode#2/21 e.Index#2/24 )/11 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 22
      // closed e.Index#2 as range 24
      //DEBUG: s.Depth#1: 5
      //DEBUG: s.Mode#2: 21
      //DEBUG: e.ScopeVars#2: 22
      //DEBUG: e.Index#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } s.Mode#2/21/26 e.Index#2/24/27 Tile{ AsIs: s.Depth#1/5 HalfReuse: )/8 AsIs: e.ScopeVars#2/22 AsIs: )/9 AsIs: (/10 Reuse: # TkVariable/16 AsIs: s.Mode#2/21 AsIs: e.Index#2/24 HalfReuse: s.Depth1 #5/11 HalfReuse: )/1 ]] }
      refalrts::copy_stvar(vm, context[26], context[21]);
      refalrts::copy_evar(vm, context[27], context[28], context[24], context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::update_ident(context[16], identifiers[ident_TkVariable]);
      refalrts::reinit_svar( context[11], context[5] );
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[10], context[1] );
      refalrts::link_brackets( context[0], context[9] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # Brackets/16 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 17
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </21 & Fetch@1/22 Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 AsIs: e.InBrackets#2/19 HalfReuse: >/11 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Fetch_Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # ADT-Brackets/16 (/23 e.Name#2/21 )/24 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[16] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.ScopeVars#2 as range 17
      // closed e.Name#2 as range 21
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.Name#2: 21
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Fetch@2/24 } Tile{ AsIs: (/23 } Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 } Tile{ AsIs: e.InBrackets#2/19 } >/26 Tile{ AsIs: )/11 } Tile{ AsIs: e.Name#2/21 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_name(context[24], functions[efunc_gen_Fetch_Z2]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[23], context[11] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[16] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # CallBrackets/16 e.InBrackets#2/19 )/11 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[16] ) )
        continue;
      // closed e.ScopeVars#2 as range 17
      // closed e.InBrackets#2 as range 19
      //DEBUG: s.Depth#1: 5
      //DEBUG: e.ScopeVars#2: 17
      //DEBUG: e.InBrackets#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </21 & Fetch@3/22 Tile{ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: s.Depth#1/5 AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 AsIs: (/10 HalfReuse: )/16 AsIs: e.InBrackets#2/19 HalfReuse: >/11 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Fetch_Z3]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/17 )/9 (/10 # Closure/16 e.Sentences#2/19 )/11 >/1
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    context[20] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[16] ) )
      continue;
    // closed e.ScopeVars#2 as range 17
    // closed e.Sentences#2 as range 19
    //DEBUG: s.Depth#1: 5
    //DEBUG: e.ScopeVars#2: 17
    //DEBUG: e.Sentences#2: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@4/4 } Tile{ AsIs: (/10 HalfReuse: </16 } & EnumerateVars-Body/21 </22 & Add/23 1/24 Tile{ AsIs: s.Depth#1/5 } >/25 Tile{ AsIs: (/8 AsIs: e.ScopeVars#2/17 AsIs: )/9 } Tile{ AsIs: e.Sentences#2/19 } >/26 Tile{ AsIs: )/11 } e.ScopeVars#2/17/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[21], functions[efunc_EnumerateVarsm_Body]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[24], 1UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[17], context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[10], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 (/8 e.ScopeVars#2/6 )/9 t.OtherTerm#2/10 >/1
  // closed e.ScopeVars#2 as range 6
  //DEBUG: t.OtherTerm#2: 10
  //DEBUG: s.Depth#1: 5
  //DEBUG: e.ScopeVars#2: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1*1/4 s.Depth#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.ScopeVars#2/6 AsIs: )/9 AsIs: t.OtherTerm#2/10 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1D1("EnumerateVars-Expr\\1*1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1D1);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1Z2D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & EnumerateVars-Expr\1@2*1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#1/7 )/10 t.new#2/11 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#5/13 )/10 (/11 s.new#3/17 e.new#4/15 )/12 >/1
      context[13] = context[7];
      context[14] = context[8];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[11] ) )
        continue;
      // closed e.new#5 as range 13
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      // closed e.new#4 as range 15
      do {
        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#9/18 )/10 (/11 s.new#6/17 s.new#7/22 e.new#8/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        // closed e.new#9 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new#8 as range 20
        do {
          // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#12/23 )/10 (/11 # TkVariable/17 s.new#10/22 e.new#11/25 )/12 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[17] ) )
            continue;
          // closed e.new#12 as range 23
          // closed e.new#11 as range 25
          do {
            // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars-B#2/31 (/37 s.Mode#2/39 e.Index#2/40 s.Depth#2/42 )/38 e.ScopeVars-E#2/33 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            context[30] = context[26];
            // closed e.Index#2 as range 29
            context[31] = 0;
            context[32] = 0;
            refalrts::start_e_loop(vm);
            do {
              context[33] = context[27];
              context[34] = context[28];
              context[35] = 0;
              context[36] = 0;
              context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
              if( ! context[37] )
                continue;
              refalrts::bracket_pointers(context[37], context[38]);
              if( ! refalrts::repeated_stvar_left( vm, context[39], context[22], context[35], context[36] ) )
                continue;
              if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[29], context[30], context[35], context[36] ) )
                continue;
              // closed e.ScopeVars-E#2 as range 33
              if( ! refalrts::svar_left( context[42], context[35], context[36] ) )
                continue;
              if( ! refalrts::empty_seq( context[35], context[36] ) )
                continue;
              //DEBUG: s.Mode#2: 22
              //DEBUG: e.Index#2: 29
              //DEBUG: e.ScopeVars-B#2: 31
              //DEBUG: e.ScopeVars-E#2: 33
              //DEBUG: s.Depth#2: 42

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@2*1/4 {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars-B#2/31 AsIs: (/37 AsIs: s.Mode#2/39 AsIs: e.Index#2/40 AsIs: s.Depth#2/42 AsIs: )/38 AsIs: e.ScopeVars-E#2/33 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: s.Depth2 #42/12 HalfReuse: )/1 ]] }
              refalrts::reinit_svar( context[12], context[42] );
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[11], context[1] );
              refalrts::link_brackets( context[9], context[10] );
              refalrts::link_brackets( context[37], context[38] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[9];
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( refalrts::open_evar_advance( context[31], context[32], context[27], context[28] ) );
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.ScopeVars#2 as range 27
          // closed e.Index#2 as range 29
          //DEBUG: s.Mode#2: 22
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.Index#2: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } (/31 s.Mode#2/22/32 e.Index#2/29/33 Tile{ HalfReuse: 1/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: 1/12 HalfReuse: )/1 ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::copy_stvar(vm, context[32], context[22]);
          refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_number(context[4], 1UL);
          refalrts::reinit_close_bracket(context[9]);
          refalrts::reinit_number(context[12], 1UL);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[11], context[1] );
          refalrts::link_brackets( context[0], context[10] );
          refalrts::link_brackets( context[31], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[4];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/23 )/10 (/11 # TkNewVariable/17 s.Mode#2/22 e.Index#2/25 )/12 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 23
        // closed e.Index#2 as range 25
        //DEBUG: s.Mode#2: 22
        //DEBUG: e.ScopeVars#2: 23
        //DEBUG: e.Index#2: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } (/27 s.Mode#2/22/28 e.Index#2/25/29 Tile{ HalfReuse: 1/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/23 AsIs: )/10 AsIs: (/11 Reuse: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/25 HalfReuse: 1/12 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::copy_stvar(vm, context[28], context[22]);
        refalrts::copy_evar(vm, context[29], context[30], context[25], context[26]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 1UL);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::update_ident(context[17], identifiers[ident_TkVariable]);
        refalrts::reinit_number(context[12], 1UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[11], context[1] );
        refalrts::link_brackets( context[0], context[10] );
        refalrts::link_brackets( context[27], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[4];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # Brackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # ADT-Brackets/17 (/24 e.Name#2/22 )/25 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[17] ) )
          continue;
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
        if( ! context[24] )
          continue;
        refalrts::bracket_pointers(context[24], context[25]);
        // closed e.ScopeVars#2 as range 18
        // closed e.Name#2 as range 22
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.Name#2: 22
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & Fetch@2/25 } Tile{ AsIs: (/24 } Tile{ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 } Tile{ AsIs: e.InBrackets#2/20 } >/27 Tile{ AsIs: )/12 } Tile{ AsIs: e.Name#2/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_name(context[25], functions[efunc_gen_Fetch_Z2]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[24], context[12] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # CallBrackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@3/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z3]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#7/18 )/10 (/11 # Closure/17 e.new#6/20 )/12 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[17] ) )
        continue;
      // closed e.new#7 as range 18
      // closed e.new#6 as range 20
      do {
        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.new#10/22 )/10 (/11 # Closure/17 s.new#8/26 e.new#9/24 )/12 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.new#10 as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e.new#9 as range 24
        do {
          // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Sentences/26 e.#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          // closed e.#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 } & Fetch@4/31 Tile{ AsIs: (/11 Reuse: # Sentences/17 } Tile{ AsIs: </0 Reuse: & Map@21/4 AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 } Tile{ AsIs: e.#0/29 } >/32 Tile{ AsIs: )/12 } e.ScopeVars#2/27/33 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[31], functions[efunc_gen_Fetch_Z4]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
          refalrts::reinit_open_call(context[26]);
          refalrts::update_ident(context[17], identifiers[ident_Sentences]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z21]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[10] );
          res = refalrts::splice_evar( res, context[11], context[17] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # NativeBody/26 t.0#0/31 e.0#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
          if( ! context[32] )
            continue;
          // closed e.0#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: t.0#0: 31
          //DEBUG: e.0#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@2*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # NativeBody/26 AsIs: t.0#0/31 AsIs: e.0#0/29 AsIs: )/12 } Tile{ ]] }
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[12] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Metatable/26 e.#0/29 )/12 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[26] ) )
          continue;
        // closed e.ScopeVars#2 as range 27
        // closed e.#0 as range 29
        //DEBUG: e.ScopeVars#2: 27
        //DEBUG: e.#0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@2*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # Metatable/26 AsIs: e.#0/29 AsIs: )/12 } Tile{ ]] }
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/22 )/10 (/11 # Closure/17 e.Sentences#2/24 )/12 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.ScopeVars#2 as range 22
      // closed e.Sentences#2 as range 24
      //DEBUG: e.ScopeVars#2: 22
      //DEBUG: e.Sentences#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@4/4 AsIs: (/9 } </26 & EnumerateVars-Body*3/27 Tile{ HalfReuse: 2/10 AsIs: (/11 } Tile{ AsIs: e.ScopeVars#2/22 } Tile{ HalfReuse: )/17 AsIs: e.Sentences#2/24 HalfReuse: >/12 HalfReuse: )/1 } e.ScopeVars#2/22/28 >/30 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::copy_evar(vm, context[28], context[29], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z4]);
      refalrts::reinit_number(context[10], 2UL);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[11], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Expr\1@2*1/4 (/9 e.ScopeVars#2/13 )/10 t.OtherTerm#2/11 >/1
    context[13] = context[7];
    context[14] = context[8];
    // closed e.ScopeVars#2 as range 13
    //DEBUG: t.OtherTerm#2: 11
    //DEBUG: e.ScopeVars#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@2*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/13 AsIs: )/10 AsIs: t.OtherTerm#2/11 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Expr\1@2*1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & EnumerateVars-Expr\1@0/0 HalfReuse: 1/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1Z2D1("EnumerateVars-Expr\\1@2*1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1Z2D1);


static refalrts::FnResult func_gen_EnumerateVarsm_Expr_L1Z3D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & EnumerateVars-Expr\1@3*1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#1/7 )/10 t.new#2/11 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#5/13 )/10 (/11 s.new#3/17 e.new#4/15 )/12 >/1
      context[13] = context[7];
      context[14] = context[8];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[11] ) )
        continue;
      // closed e.new#5 as range 13
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      // closed e.new#4 as range 15
      do {
        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#9/18 )/10 (/11 s.new#6/17 s.new#7/22 e.new#8/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        // closed e.new#9 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new#8 as range 20
        do {
          // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#12/23 )/10 (/11 # TkVariable/17 s.new#10/22 e.new#11/25 )/12 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[17] ) )
            continue;
          // closed e.new#12 as range 23
          // closed e.new#11 as range 25
          do {
            // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars-B#2/31 (/37 s.Mode#2/39 e.Index#2/40 s.Depth#2/42 )/38 e.ScopeVars-E#2/33 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            context[30] = context[26];
            // closed e.Index#2 as range 29
            context[31] = 0;
            context[32] = 0;
            refalrts::start_e_loop(vm);
            do {
              context[33] = context[27];
              context[34] = context[28];
              context[35] = 0;
              context[36] = 0;
              context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
              if( ! context[37] )
                continue;
              refalrts::bracket_pointers(context[37], context[38]);
              if( ! refalrts::repeated_stvar_left( vm, context[39], context[22], context[35], context[36] ) )
                continue;
              if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[29], context[30], context[35], context[36] ) )
                continue;
              // closed e.ScopeVars-E#2 as range 33
              if( ! refalrts::svar_left( context[42], context[35], context[36] ) )
                continue;
              if( ! refalrts::empty_seq( context[35], context[36] ) )
                continue;
              //DEBUG: s.Mode#2: 22
              //DEBUG: e.Index#2: 29
              //DEBUG: e.ScopeVars-B#2: 31
              //DEBUG: e.ScopeVars-E#2: 33
              //DEBUG: s.Depth#2: 42

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@3*1/4 {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars-B#2/31 AsIs: (/37 AsIs: s.Mode#2/39 AsIs: e.Index#2/40 AsIs: s.Depth#2/42 AsIs: )/38 AsIs: e.ScopeVars-E#2/33 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: s.Depth2 #42/12 HalfReuse: )/1 ]] }
              refalrts::reinit_svar( context[12], context[42] );
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[11], context[1] );
              refalrts::link_brackets( context[9], context[10] );
              refalrts::link_brackets( context[37], context[38] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[9];
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( refalrts::open_evar_advance( context[31], context[32], context[27], context[28] ) );
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # TkVariable/17 s.Mode#2/22 e.Index#2/29 )/12 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.ScopeVars#2 as range 27
          // closed e.Index#2 as range 29
          //DEBUG: s.Mode#2: 22
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.Index#2: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } (/31 s.Mode#2/22/32 e.Index#2/29/33 Tile{ HalfReuse: 2/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/29 HalfReuse: 2/12 HalfReuse: )/1 ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::copy_stvar(vm, context[32], context[22]);
          refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_number(context[4], 2UL);
          refalrts::reinit_close_bracket(context[9]);
          refalrts::reinit_number(context[12], 2UL);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[11], context[1] );
          refalrts::link_brackets( context[0], context[10] );
          refalrts::link_brackets( context[31], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[4];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/23 )/10 (/11 # TkNewVariable/17 s.Mode#2/22 e.Index#2/25 )/12 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkNewVariable], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 23
        // closed e.Index#2 as range 25
        //DEBUG: s.Mode#2: 22
        //DEBUG: e.ScopeVars#2: 23
        //DEBUG: e.Index#2: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } (/27 s.Mode#2/22/28 e.Index#2/25/29 Tile{ HalfReuse: 2/4 HalfReuse: )/9 AsIs: e.ScopeVars#2/23 AsIs: )/10 AsIs: (/11 Reuse: # TkVariable/17 AsIs: s.Mode#2/22 AsIs: e.Index#2/25 HalfReuse: 2/12 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::copy_stvar(vm, context[28], context[22]);
        refalrts::copy_evar(vm, context[29], context[30], context[25], context[26]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 2UL);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::update_ident(context[17], identifiers[ident_TkVariable]);
        refalrts::reinit_number(context[12], 2UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[11], context[1] );
        refalrts::link_brackets( context[0], context[10] );
        refalrts::link_brackets( context[27], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[4];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # Brackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@24/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # ADT-Brackets/17 (/24 e.Name#2/22 )/25 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[17] ) )
          continue;
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
        if( ! context[24] )
          continue;
        refalrts::bracket_pointers(context[24], context[25]);
        // closed e.ScopeVars#2 as range 18
        // closed e.Name#2 as range 22
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.Name#2: 22
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & Fetch@2/25 } Tile{ AsIs: (/24 } Tile{ AsIs: </0 Reuse: & DoMapAccum@24/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 } Tile{ AsIs: e.InBrackets#2/20 } >/27 Tile{ AsIs: )/12 } Tile{ AsIs: e.Name#2/22 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_name(context[25], functions[efunc_gen_Fetch_Z2]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[24], context[12] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/18 )/10 (/11 # CallBrackets/17 e.InBrackets#2/20 )/12 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
          continue;
        // closed e.ScopeVars#2 as range 18
        // closed e.InBrackets#2 as range 20
        //DEBUG: e.ScopeVars#2: 18
        //DEBUG: e.InBrackets#2: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </22 & Fetch@3/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@24/4 AsIs: (/9 AsIs: e.ScopeVars#2/18 AsIs: )/10 AsIs: (/11 HalfReuse: )/17 AsIs: e.InBrackets#2/20 HalfReuse: >/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_Fetch_Z3]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#7/18 )/10 (/11 # Closure/17 e.new#6/20 )/12 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[17] ) )
        continue;
      // closed e.new#7 as range 18
      // closed e.new#6 as range 20
      do {
        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.new#10/22 )/10 (/11 # Closure/17 s.new#8/26 e.new#9/24 )/12 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.new#10 as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e.new#9 as range 24
        do {
          // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Sentences/26 e.#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          // closed e.#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: e.#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 } & Fetch@4/31 Tile{ AsIs: (/11 Reuse: # Sentences/17 } Tile{ AsIs: </0 Reuse: & Map@24/4 AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 } Tile{ AsIs: e.#0/29 } >/32 Tile{ AsIs: )/12 } e.ScopeVars#2/27/33 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[31], functions[efunc_gen_Fetch_Z4]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
          refalrts::reinit_open_call(context[26]);
          refalrts::update_ident(context[17], identifiers[ident_Sentences]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z24]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[10] );
          res = refalrts::splice_evar( res, context[11], context[17] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # NativeBody/26 t.0#0/31 e.0#0/29 )/12 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[26] ) )
            continue;
          // closed e.ScopeVars#2 as range 27
          context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
          if( ! context[32] )
            continue;
          // closed e.0#0 as range 29
          //DEBUG: e.ScopeVars#2: 27
          //DEBUG: t.0#0: 31
          //DEBUG: e.0#0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@3*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # NativeBody/26 AsIs: t.0#0/31 AsIs: e.0#0/29 AsIs: )/12 } Tile{ ]] }
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[12] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/27 )/10 (/11 # Closure/17 # Metatable/26 e.#0/29 )/12 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Metatable], context[26] ) )
          continue;
        // closed e.ScopeVars#2 as range 27
        // closed e.#0 as range 29
        //DEBUG: e.ScopeVars#2: 27
        //DEBUG: e.#0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@3*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/27 AsIs: )/10 AsIs: (/11 AsIs: # Closure/17 AsIs: # Metatable/26 AsIs: e.#0/29 AsIs: )/12 } Tile{ ]] }
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/22 )/10 (/11 # Closure/17 e.Sentences#2/24 )/12 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.ScopeVars#2 as range 22
      // closed e.Sentences#2 as range 24
      //DEBUG: e.ScopeVars#2: 22
      //DEBUG: e.Sentences#2: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@4/4 AsIs: (/9 } </26 & EnumerateVars-Body*3/27 Tile{ HalfReuse: 3/10 AsIs: (/11 } Tile{ AsIs: e.ScopeVars#2/22 } Tile{ HalfReuse: )/17 AsIs: e.Sentences#2/24 HalfReuse: >/12 HalfReuse: )/1 } e.ScopeVars#2/22/28 >/30 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_EnumerateVarsm_Body_D3]);
      refalrts::copy_evar(vm, context[28], context[29], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z4]);
      refalrts::reinit_number(context[10], 3UL);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[11], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EnumerateVars-Expr\1@3*1/4 (/9 e.ScopeVars#2/13 )/10 t.OtherTerm#2/11 >/1
    context[13] = context[7];
    context[14] = context[8];
    // closed e.ScopeVars#2 as range 13
    //DEBUG: t.OtherTerm#2: 11
    //DEBUG: e.ScopeVars#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EnumerateVars-Expr\1@3*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.ScopeVars#2/13 AsIs: )/10 AsIs: t.OtherTerm#2/11 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EnumerateVars-Expr\1@3*1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & EnumerateVars-Expr\1@0/0 HalfReuse: 2/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_EnumerateVarsm_Expr_L1Z0]);
  refalrts::reinit_number(context[4], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EnumerateVarsm_Expr_L1Z3D1("EnumerateVars-Expr\\1@3*1", COOKIE1_, COOKIE2_, func_gen_EnumerateVarsm_Expr_L1Z3D1);


//End of file
