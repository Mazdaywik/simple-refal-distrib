// This file automatically generated from 'Generator-RASL.ref'
// Don't edit! Edit 'Generator-RASL.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_4129146360_1249980708
#define COOKIE1_ 4129146360U
#define COOKIE2_ 1249980708U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_Apply = 4,
  efunc_Reduce = 5,
  efunc_DoMapAccum = 6,
  efunc_DoMapAccumm_Aux = 7,
  efunc_Add = 8,
  efunc_Sub = 9,
  efunc_Fetch = 10,
  efunc_Pipe = 11,
  efunc_gen_Pipe_S2L1 = 12,
  efunc_gen_Pipe_S3L1 = 13,
  efunc_PutBlockStart = 14,
  efunc_PutBlock = 15,
  efunc_PutWordLE = 16,
  efunc_Mul = 17,
  efunc_gen_Map_Z2 = 18,
  efunc_gen_Map_Z1 = 19,
  efunc_Assemble = 20,
  efunc_gen_GenProgramm_RASL_A4 = 21,
  efunc_Lenw = 22,
  efunc_BytesFromStringList = 23,
  efunc_gen_GenProgramm_RASL_A3 = 24,
  efunc_BytesFromIdentList = 25,
  efunc_gen_GenProgramm_RASL_A2 = 26,
  efunc_gen_GenProgramm_RASL_A1 = 27,
  efunc_BytesFromFunctionList = 28,
  efunc_Asciiz = 29,
  efunc_DisplayName = 30,
  efunc_gen_NameWithSignm_Bytes_D2 = 31,
  efunc_gen_Map_Z3 = 32,
  efunc_gen_Map_Z4 = 33,
  efunc_Ord = 34,
  efunc_gen_BytesFromStringList_L1L1 = 35,
  efunc_gen_Map_Z5 = 36,
  efunc_gen_PutBlock_L1 = 37,
  efunc_gen_BlockTypeNumber_D12 = 38,
  efunc_Divmod = 39,
  efunc_gen_PutWordLE_S2A1 = 40,
  efunc_gen_Map_Z6 = 41,
  efunc_NameWithSignm_Bytes = 42,
  efunc_gen_GenCommandm_Globals_S4A1 = 43,
  efunc_ResolveLabeledDestinations = 44,
  efunc_gen_Assemble_A3 = 45,
  efunc_gen_Assemble_A2 = 46,
  efunc_CalcLabelsOffsets = 47,
  efunc_gen_Assemble_A1 = 48,
  efunc_gen_Map_Z7 = 49,
  efunc_gen_PutCommand_S3B1 = 50,
  efunc_PutCommand = 51,
  efunc_gen_NumberFromOpcode_D119 = 52,
  efunc_gen_PutCommand_S3A1 = 53,
  efunc_gen_CreateCommandInfo_D8 = 54,
  efunc_gen_NumberFromBracket_D6 = 55,
  efunc_gen_MapAccum_Z1 = 56,
  efunc_gen_ResolveLabeledDestinations_S1B1S1A1 = 57,
  efunc_PrintErr = 58,
  efunc_Exit = 59,
  efunc_Symb = 60,
  efunc_gen_ResolveLabeledDestinations_S1B1 = 61,
  efunc_TermCompare = 62,
  efunc_gen_ResolveLabeledDestinations_S1A2 = 63,
  efunc_gen_ResolveLabeledDestinations_S1A1 = 64,
  efunc_Mu = 65,
  efunc_Up = 66,
  efunc_Evm_met = 67,
  efunc_Residue = 68,
  efunc_u_u_Metau_Residue = 69,
  efunc_MapAccum = 70,
  efunc_UnBracket = 71,
  efunc_DelAccumulator = 72,
  efunc_Inc = 73,
  efunc_Dec = 74,
  efunc_NumberFromOpcode = 75,
  efunc_NumberFromBracket = 76,
  efunc_BlockTypeNumber = 77,
  efunc_GenProgramm_RASL = 78,
  efunc_BytesFromString = 79,
  efunc_GenCommandm_Globals = 80,
  efunc_GenCommandm_RASL = 81,
  efunc_CreateCommandTag = 82,
  efunc_CreateCommandInfo = 83,
  efunc_PutBlockReference = 84,
  efunc_PutBlockIncorporated = 85,
  efunc_gen_UnBracket_D1 = 86,
  efunc_gen_Map_Z0 = 87,
  efunc_gen_BytesFromFunctionList_L1D1 = 88,
  efunc_gen_BytesFromFunctionList_L1 = 89,
  efunc_gen_BytesFromIdentList_L1D1 = 90,
  efunc_gen_BytesFromIdentList_L1 = 91,
  efunc_gen_BytesFromStringList_L1D1 = 92,
  efunc_gen_BytesFromStringList_L1 = 93,
  efunc_gen_GenCommandm_Globals_S4L1D1 = 94,
  efunc_gen_GenCommandm_Globals_S4L1 = 95,
  efunc_gen_DoMapAccum_Z1 = 96,
  efunc_gen_MapAccum_Z0 = 97,
  efunc_gen_CalcLabelsOffsets_L1 = 98,
  efunc_gen_DoMapAccumm_Aux_Z1 = 99,
  efunc_gen_CalcLabelsOffsets_L1D3 = 100,
  efunc_gen_DoMapAccum_Z0 = 101,
  efunc_gen_DoMapAccumm_Aux_Z0 = 102,
};


enum ident {
  ident_CmdProfileFunction = 0,
  ident_CmdLoadConstants = 1,
  ident_CmdIssueMemory = 2,
  ident_CmdReserveBacktrackStack = 3,
  ident_CmdOnFailGoTo = 4,
  ident_CmdProfilerStopSentence = 5,
  ident_CmdInitB0 = 6,
  ident_CmdInitB0m_Lite = 7,
  ident_CmdChar = 8,
  ident_AlgLeft = 9,
  ident_AlgRight = 10,
  ident_AlgTerm = 11,
  ident_CmdCharSave = 12,
  ident_CmdNumber = 13,
  ident_CmdNumberSave = 14,
  ident_CmdHugeNum = 15,
  ident_CmdHugeNumSave = 16,
  ident_CmdName = 17,
  ident_CmdNameSave = 18,
  ident_CmdIdent = 19,
  ident_CmdIdentSave = 20,
  ident_CmdBrackets = 21,
  ident_CmdBracketsSave = 22,
  ident_CmdADT = 23,
  ident_CmdADTSave = 24,
  ident_CmdCallSave = 25,
  ident_CmdEmpty = 26,
  ident_CmdNotEmpty = 27,
  ident_CmdVar = 28,
  ident_CmdVarSave = 29,
  ident_CmdRepeated = 30,
  ident_CmdRepeatedSave = 31,
  ident_CmdEPrepare = 32,
  ident_CmdEStart = 33,
  ident_CmdSave = 34,
  ident_CmdResetAllocator = 35,
  ident_CmdSetResArgBegin = 36,
  ident_CmdSetResRightEdge = 37,
  ident_CmdSetRes = 38,
  ident_CmdCopyEVar = 39,
  ident_CmdCopySTVar = 40,
  ident_CmdReinitSVar = 41,
  ident_Allocate = 42,
  ident_ElChar = 43,
  ident_ElName = 44,
  ident_ElNumber = 45,
  ident_ElHugeNumber = 46,
  ident_ElIdent = 47,
  ident_ElBracket = 48,
  ident_ElString = 49,
  ident_ElClosureHead = 50,
  ident_ElUnwrappedClosure = 51,
  ident_Reinit = 52,
  ident_Update = 53,
  ident_CmdLinkBrackets = 54,
  ident_CmdPushStack = 55,
  ident_CmdWrapClosure = 56,
  ident_CmdSpliceElem = 57,
  ident_CmdSpliceEVar = 58,
  ident_CmdSpliceSTVar = 59,
  ident_CmdSpliceRange = 60,
  ident_CmdSpliceTile = 61,
  ident_CmdSpliceToFreeList = 62,
  ident_CmdNextStep = 63,
  ident_CmdTrashLeftEdge = 64,
  ident_CmdTrash = 65,
  ident_CmdFail = 66,
  ident_CmdFetchSwapHead = 67,
  ident_CmdFetchSwapInfoBounds = 68,
  ident_CmdSwapSave = 69,
  ident_CmdPerformNative = 70,
  ident_CmdScale = 71,
  ident_CmdVariableDebugOffset = 72,
  ident_CmdSpliceToFreeListm_Range = 73,
  ident_CmdPushState = 74,
  ident_CmdPopState = 75,
  ident_CmdMainLoopReturnSuccess = 76,
  ident_ElOpenADT = 77,
  ident_ElOpenBracket = 78,
  ident_ElOpenCall = 79,
  ident_ElCloseADT = 80,
  ident_ElCloseBracket = 81,
  ident_ElCloseCall = 82,
  ident_Start = 83,
  ident_ConstTable = 84,
  ident_RefalFunction = 85,
  ident_NativeFunction = 86,
  ident_EmptyFunction = 87,
  ident_Swap = 88,
  ident_Reference = 89,
  ident_ConditionRasl = 90,
  ident_ConditionNative = 91,
  ident_Incorporated = 92,
  ident_UnitName = 93,
  ident_Metatable = 94,
  ident_ModuleID = 95,
  ident_CmdFuncArray = 96,
  ident_CmdIdentArray = 97,
  ident_CmdStringArray = 98,
  ident_RASL = 99,
  ident_Items = 100,
  ident_GNm_Entry = 101,
  ident_GNm_Local = 102,
  ident_CmdEnumDescr = 103,
  ident_CmdInterpretFuncDescr = 104,
  ident_CmdMetatable = 105,
  ident_CmdSwapDescr = 106,
  ident_CmdConditionFuncDecsrRasl = 107,
  ident_CmdConditionFuncDecsrNative = 108,
  ident_CmdNativeFuncDescr = 109,
  ident_ARGm_BEGIN = 110,
  ident_RIGHTm_EDGE = 111,
  ident_LEFTm_EDGE = 112,
  ident_LABEL = 113,
  ident_Funck32_namek58_ = 114,
  ident_CmdRepeatedTVarSave = 115,
  ident_CmdVariableDebugTable = 116,
  ident_CmdCopyVar = 117,
  ident_CmdCreateElem = 118,
  ident_CmdInsertElem = 119,
  ident_CmdInsertVar = 120,
  ident_CmdInsertRange = 121,
  ident_CmdInsertTile = 122,
  ident_Mu = 123,
  ident_Up = 124,
  ident_Evm_met = 125,
  ident_Residue = 126,
  ident_u_u_Metau_Residue = 127,
  ident_Apply = 128,
  ident_Map = 129,
  ident_Reduce = 130,
  ident_Fetch = 131,
  ident_MapAccum = 132,
  ident_DoMapAccum = 133,
  ident_DoMapAccumm_Aux = 134,
  ident_UnBracket = 135,
  ident_DelAccumulator = 136,
  ident_Inc = 137,
  ident_Dec = 138,
  ident_Pipe = 139,
  ident_NumberFromOpcode = 140,
  ident_NumberFromBracket = 141,
  ident_BlockTypeNumber = 142,
  ident_GenProgramm_RASL = 143,
  ident_BytesFromFunctionList = 144,
  ident_BytesFromIdentList = 145,
  ident_BytesFromStringList = 146,
  ident_BytesFromString = 147,
  ident_Asciiz = 148,
  ident_PutBlock = 149,
  ident_PutWordLE = 150,
  ident_NameWithSignm_Bytes = 151,
  ident_GenCommandm_Globals = 152,
  ident_Assemble = 153,
  ident_GenCommandm_RASL = 154,
  ident_PutCommand = 155,
  ident_CreateCommandTag = 156,
  ident_CreateCommandInfo = 157,
  ident_CalcLabelsOffsets = 158,
  ident_ResolveLabeledDestinations = 159,
  ident_PutBlockStart = 160,
  ident_PutBlockReference = 161,
  ident_PutBlockIncorporated = 162,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 </8 & __Step-Drop/9 >/10 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply/4 s.Fn#1/5 e.Argument#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument#1 as range 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.Argument#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 AsIs: s.Fn#1/5 AsIs: e.Argument#1/7 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure#1/9 e.Bounded#1/7 )/6 e.Argument#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded#1 as range 7
  //DEBUG: e.Argument#1: 2
  //DEBUG: t.Closure#1: 9
  //DEBUG: e.Bounded#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure#1/9 } Tile{ AsIs: e.Bounded#1/7 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Map/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map/4 t.Fn#1/5 t.Next#1/9 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail#1 as range 7
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 AsIs: t.Fn#1/5 AsIs: t.Next#1/9 } >/11 </12 & Map/13 t.Fn#1/5/14 Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_Apply]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Reduce/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail#1 as range 9
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce/14 t.Fn#1/5/15 Tile{ AsIs: </0 Reuse: & Apply/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/17 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Reduce]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_Apply]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument#1/2 t.Function#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Argument#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function#1/5 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn#1/5 t.Acc#1/7 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 } (/9 )/10 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 t.Next#1/17 e.Tail#1/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned#1 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 15
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Tail#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum-Aux/4 AsIs: t.Fn#1/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/13 AsIs: )/12 } (/19 </20 & Apply/21 t.Fn#1/5/22 Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: t.Next#1/17 } >/24 )/25 Tile{ AsIs: e.Tail#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_Apply]);
    refalrts::copy_evar(vm, context[22], context[23], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_DoMapAccumm_Aux]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 9
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Scanned#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn#1/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_DoMapAccumm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum-Aux/4 t.Fn#1/5 (/9 e.Scanned#1/7 )/10 (/13 t.Acc#1/15 e.StepScanned#1/11 )/14 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned#1 as range 7
  // closed e.Tail#1 as range 2
  context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#1 as range 11
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Scanned#1: 7
  //DEBUG: e.Tail#1: 2
  //DEBUG: t.Acc#1: 15
  //DEBUG: e.StepScanned#1: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#1/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/7 } Tile{ AsIs: e.StepScanned#1/11 } Tile{ AsIs: )/14 AsIs: e.Tail#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccumm_Aux("DoMapAccum-Aux", COOKIE1_, COOKIE2_, func_DoMapAccumm_Aux);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 5
  //DEBUG: e.Expr#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Dec/4 s.Num#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num#1/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num#1/2 >/1
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num#1/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func#1/5 (/9 e.Funcs#1/7 )/10 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs#1 as range 7
  // closed e.Arg#2 as range 2
  //DEBUG: t.Func#1: 5
  //DEBUG: e.Funcs#1: 7
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func#1/5 } Tile{ AsIs: e.Arg#2/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#2 as range 2
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Pipe/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Pipe/4 t.Func#1/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func#1: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func#1/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func#1/7 e.Funcs#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs#1 as range 9
    //DEBUG: t.Func#1: 7
    //DEBUG: e.Funcs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func#1/7 } (/11 Tile{ AsIs: e.Funcs#1/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_NumberFromOpcode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & NumberFromOpcode/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NumberFromOpcode/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & NumberFromOpcode/4 s.new#3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # CmdProfileFunction/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdProfileFunction/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
      refalrts::reinit_number(context[1], 0UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdLoadConstants/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdLoadConstants/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
      refalrts::reinit_number(context[1], 1UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdIssueMemory/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIssueMemory/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
      refalrts::reinit_number(context[1], 2UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdReserveBacktrackStack/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdReserveBacktrackStack/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
      refalrts::reinit_number(context[1], 3UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdOnFailGoTo/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdOnFailGoTo/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
      refalrts::reinit_number(context[1], 4UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdProfilerStopSentence/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdProfilerStopSentence/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
      refalrts::reinit_number(context[1], 5UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdInitB0/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdInitB0/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 6/1 ]] }
      refalrts::reinit_number(context[1], 6UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # CmdInitB0-Lite/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdInitB0-Lite/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 7/1 ]] }
    refalrts::reinit_number(context[1], 7UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 s.new#4/8 s.new#3/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # CmdChar/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdChar/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 8/1 ]] }
        refalrts::reinit_number(context[1], 8UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdChar/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 9/1 ]] }
        refalrts::reinit_number(context[1], 9UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdChar/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
      refalrts::reinit_number(context[1], 10UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdCharSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdCharSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCharSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
        refalrts::reinit_number(context[1], 11UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdCharSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCharSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
      refalrts::reinit_number(context[1], 12UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdNumber/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 13/1 ]] }
        refalrts::reinit_number(context[1], 13UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 14/1 ]] }
        refalrts::reinit_number(context[1], 14UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 15/1 ]] }
      refalrts::reinit_number(context[1], 15UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdNumberSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdNumberSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumberSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 16/1 ]] }
        refalrts::reinit_number(context[1], 16UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdNumberSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumberSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 17/1 ]] }
      refalrts::reinit_number(context[1], 17UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdHugeNum/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdHugeNum], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 18/1 ]] }
        refalrts::reinit_number(context[1], 18UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 19/1 ]] }
        refalrts::reinit_number(context[1], 19UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 20/1 ]] }
      refalrts::reinit_number(context[1], 20UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdHugeNumSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdHugeNumSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdHugeNumSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNumSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 21/1 ]] }
        refalrts::reinit_number(context[1], 21UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdHugeNumSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNumSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 22/1 ]] }
      refalrts::reinit_number(context[1], 22UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdName/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdName], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdName/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 23/1 ]] }
        refalrts::reinit_number(context[1], 23UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdName/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 24/1 ]] }
        refalrts::reinit_number(context[1], 24UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdName/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 25/1 ]] }
      refalrts::reinit_number(context[1], 25UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdNameSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdNameSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNameSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 26/1 ]] }
        refalrts::reinit_number(context[1], 26UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdNameSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNameSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 27/1 ]] }
      refalrts::reinit_number(context[1], 27UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdIdent/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 28/1 ]] }
        refalrts::reinit_number(context[1], 28UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 29/1 ]] }
        refalrts::reinit_number(context[1], 29UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 30/1 ]] }
      refalrts::reinit_number(context[1], 30UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdIdentSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdIdentSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdentSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 31/1 ]] }
        refalrts::reinit_number(context[1], 31UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdIdentSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdentSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 32/1 ]] }
      refalrts::reinit_number(context[1], 32UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdBrackets/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 33/1 ]] }
        refalrts::reinit_number(context[1], 33UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 34/1 ]] }
        refalrts::reinit_number(context[1], 34UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 35/1 ]] }
      refalrts::reinit_number(context[1], 35UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdBracketsSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdBracketsSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBracketsSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 36/1 ]] }
        refalrts::reinit_number(context[1], 36UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdBracketsSave/8 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBracketsSave/8 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 37/1 ]] }
      refalrts::reinit_number(context[1], 37UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdADT/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdADT/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 38/1 ]] }
        refalrts::reinit_number(context[1], 38UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdADT/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 39/1 ]] }
        refalrts::reinit_number(context[1], 39UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdADT/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 40/1 ]] }
      refalrts::reinit_number(context[1], 40UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdADTSave/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 41/1 ]] }
        refalrts::reinit_number(context[1], 41UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 42/1 ]] }
        refalrts::reinit_number(context[1], 42UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/8 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 43/1 ]] }
      refalrts::reinit_number(context[1], 43UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # CmdCallSave/8 # AlgLeft/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[8] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCallSave/8 # AlgLeft/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 44/1 ]] }
    refalrts::reinit_number(context[1], 44UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 s.new#3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # CmdEmpty/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEmpty/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 45/1 ]] }
      refalrts::reinit_number(context[1], 45UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # CmdNotEmpty/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNotEmpty/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 46/1 ]] }
    refalrts::reinit_number(context[1], 46UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 s.new#4/8 s.new#5/9 s.new#3/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 s.new#7/8 # CmdVar/9 s.new#6/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 s.new#8/5 >/1
        if( ! refalrts::char_term( 's', context[8] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgLeft/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgLeft/5 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 47/1 ]] }
          refalrts::reinit_number(context[1], 47UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgRight/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgRight/5 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 48/1 ]] }
          refalrts::reinit_number(context[1], 48UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgTerm/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdVar/9 # AlgTerm/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 49/1 ]] }
        refalrts::reinit_number(context[1], 49UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/8 # CmdVar/9 s.new#8/5 >/1
      if( ! refalrts::char_term( 't', context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 't'/8 # CmdVar/9 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdVar/9 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 50/1 ]] }
        refalrts::reinit_number(context[1], 50UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/8 # CmdVar/9 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdVar/9 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 51/1 ]] }
      refalrts::reinit_number(context[1], 51UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 't'/8 # CmdVarSave/9 s.new#6/5 >/1
      if( ! refalrts::char_term( 't', context[8] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 't'/8 # CmdVarSave/9 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdVarSave/9 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 52/1 ]] }
        refalrts::reinit_number(context[1], 52UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/8 # CmdVarSave/9 # AlgRight/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdVarSave/9 # AlgRight/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 53/1 ]] }
      refalrts::reinit_number(context[1], 53UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 s.new#7/8 # CmdRepeated/9 s.new#6/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 'e'/8 # CmdRepeated/9 s.new#8/5 >/1
        if( ! refalrts::char_term( 'e', context[8] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 'e'/8 # CmdRepeated/9 # AlgLeft/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 'e'/8 # CmdRepeated/9 # AlgLeft/5 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 54/1 ]] }
          refalrts::reinit_number(context[1], 54UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 'e'/8 # CmdRepeated/9 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 'e'/8 # CmdRepeated/9 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 55/1 ]] }
        refalrts::reinit_number(context[1], 55UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 s.new#8/5 >/1
        if( ! refalrts::char_term( 's', context[8] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgLeft/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgLeft/5 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 56/1 ]] }
          refalrts::reinit_number(context[1], 56UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgRight/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgRight/5 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 57/1 ]] }
          refalrts::reinit_number(context[1], 57UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgTerm/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/8 # CmdRepeated/9 # AlgTerm/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 58/1 ]] }
        refalrts::reinit_number(context[1], 58UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 s.new#8/5 >/1
      if( ! refalrts::char_term( 't', context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgLeft/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgLeft/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 59/1 ]] }
        refalrts::reinit_number(context[1], 59UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgRight/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgRight/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 60/1 ]] }
        refalrts::reinit_number(context[1], 60UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgTerm/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdRepeated/9 # AlgTerm/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 61/1 ]] }
      refalrts::reinit_number(context[1], 61UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 't'/8 # CmdRepeatedSave/9 s.new#6/5 >/1
    if( ! refalrts::char_term( 't', context[8] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedSave], context[9] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 't'/8 # CmdRepeatedSave/9 # AlgLeft/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdRepeatedSave/9 # AlgLeft/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 62/1 ]] }
      refalrts::reinit_number(context[1], 62UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 't'/8 # CmdRepeatedSave/9 # AlgRight/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/8 # CmdRepeatedSave/9 # AlgRight/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 63/1 ]] }
    refalrts::reinit_number(context[1], 63UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 s.new#3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # CmdEPrepare/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEPrepare/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 64/1 ]] }
      refalrts::reinit_number(context[1], 64UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdEStart/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEStart/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 65/1 ]] }
      refalrts::reinit_number(context[1], 65UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSave/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSave/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 66/1 ]] }
      refalrts::reinit_number(context[1], 66UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdResetAllocator/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdResetAllocator/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 67/1 ]] }
      refalrts::reinit_number(context[1], 67UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSetResArgBegin/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetResArgBegin/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 68/1 ]] }
      refalrts::reinit_number(context[1], 68UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSetResRightEdge/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetResRightEdge/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 69/1 ]] }
      refalrts::reinit_number(context[1], 69UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSetRes/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetRes/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 70/1 ]] }
      refalrts::reinit_number(context[1], 70UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdCopyEVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCopyEVar/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 71/1 ]] }
      refalrts::reinit_number(context[1], 71UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdCopySTVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCopySTVar/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 72/1 ]] }
      refalrts::reinit_number(context[1], 72UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # CmdReinitSVar/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdReinitSVar/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 73/1 ]] }
    refalrts::reinit_number(context[1], 73UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 s.new#4/8 s.new#3/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # Allocate/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_Allocate], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElChar/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElChar/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 74/1 ]] }
        refalrts::reinit_number(context[1], 74UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElName/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElName/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 75/1 ]] }
        refalrts::reinit_number(context[1], 75UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElNumber/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElNumber/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 76/1 ]] }
        refalrts::reinit_number(context[1], 76UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElHugeNumber/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElHugeNumber/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 77/1 ]] }
        refalrts::reinit_number(context[1], 77UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElIdent/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElIdent/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 78/1 ]] }
        refalrts::reinit_number(context[1], 78UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElBracket/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElBracket/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 79/1 ]] }
        refalrts::reinit_number(context[1], 79UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElString/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElString], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElString/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 80/1 ]] }
        refalrts::reinit_number(context[1], 80UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Allocate/8 # ElClosureHead/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElClosureHead/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 113/1 ]] }
        refalrts::reinit_number(context[1], 113UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # Allocate/8 # ElUnwrappedClosure/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/8 # ElUnwrappedClosure/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 114/1 ]] }
      refalrts::reinit_number(context[1], 114UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # Reinit/8 s.new#5/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_Reinit], context[8] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElChar/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElChar/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 81/1 ]] }
        refalrts::reinit_number(context[1], 81UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElName/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElName/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 82/1 ]] }
        refalrts::reinit_number(context[1], 82UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElNumber/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElNumber/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 83/1 ]] }
        refalrts::reinit_number(context[1], 83UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElHugeNumber/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElHugeNumber/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 84/1 ]] }
        refalrts::reinit_number(context[1], 84UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElIdent/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElIdent/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 85/1 ]] }
        refalrts::reinit_number(context[1], 85UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElBracket/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElBracket/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 86/1 ]] }
        refalrts::reinit_number(context[1], 86UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/8 # ElClosureHead/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[5] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElClosureHead/5 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 87/1 ]] }
        refalrts::reinit_number(context[1], 87UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # Reinit/8 # ElUnwrappedClosure/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/8 # ElUnwrappedClosure/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 88/1 ]] }
      refalrts::reinit_number(context[1], 88UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # Update/8 s.new#5/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Update], context[8] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # Update/8 # ElChar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/8 # ElChar/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 89/1 ]] }
      refalrts::reinit_number(context[1], 89UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # Update/8 # ElName/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/8 # ElName/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 90/1 ]] }
      refalrts::reinit_number(context[1], 90UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # Update/8 # ElNumber/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/8 # ElNumber/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 91/1 ]] }
      refalrts::reinit_number(context[1], 91UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # Update/8 # ElHugeNumber/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/8 # ElHugeNumber/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 92/1 ]] }
      refalrts::reinit_number(context[1], 92UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # Update/8 # ElIdent/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/8 # ElIdent/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 93/1 ]] }
    refalrts::reinit_number(context[1], 93UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromOpcode/4 s.new#3/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NumberFromOpcode/4 # CmdLinkBrackets/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdLinkBrackets/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 94/1 ]] }
    refalrts::reinit_number(context[1], 94UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPushStack/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPushStack/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 95/1 ]] }
    refalrts::reinit_number(context[1], 95UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdWrapClosure/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdWrapClosure/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 110/1 ]] }
    refalrts::reinit_number(context[1], 110UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceElem/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceElem/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 96/1 ]] }
    refalrts::reinit_number(context[1], 96UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceEVar/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceEVar/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 97/1 ]] }
    refalrts::reinit_number(context[1], 97UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceSTVar/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceSTVar/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 98/1 ]] }
    refalrts::reinit_number(context[1], 98UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceRange/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceRange/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 99/1 ]] }
    refalrts::reinit_number(context[1], 99UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceTile/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceTile/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 100/1 ]] }
    refalrts::reinit_number(context[1], 100UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceToFreeList/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceToFreeList/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 101/1 ]] }
    refalrts::reinit_number(context[1], 101UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdNextStep/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNextStep/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 102/1 ]] }
    refalrts::reinit_number(context[1], 102UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdTrashLeftEdge/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdTrashLeftEdge/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 103/1 ]] }
    refalrts::reinit_number(context[1], 103UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdTrash/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdTrash/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 104/1 ]] }
    refalrts::reinit_number(context[1], 104UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFail/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFail/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 105/1 ]] }
    refalrts::reinit_number(context[1], 105UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFetchSwapHead/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFetchSwapHead/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 106/1 ]] }
    refalrts::reinit_number(context[1], 106UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFetchSwapInfoBounds/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFetchSwapInfoBounds/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 107/1 ]] }
    refalrts::reinit_number(context[1], 107UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSwapSave/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSwapSave/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 108/1 ]] }
    refalrts::reinit_number(context[1], 108UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPerformNative/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPerformNative/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 109/1 ]] }
    refalrts::reinit_number(context[1], 109UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdScale/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdScale/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 111/1 ]] }
    refalrts::reinit_number(context[1], 111UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdVariableDebugOffset/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdVariableDebugOffset/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 112/1 ]] }
    refalrts::reinit_number(context[1], 112UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceToFreeList-Range/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceToFreeList-Range/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 115/1 ]] }
    refalrts::reinit_number(context[1], 115UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPushState/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPushState/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 116/1 ]] }
    refalrts::reinit_number(context[1], 116UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPopState/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPopState/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 117/1 ]] }
    refalrts::reinit_number(context[1], 117UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromOpcode/4 # CmdMainLoopReturnSuccess/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdMainLoopReturnSuccess/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 118/1 ]] }
  refalrts::reinit_number(context[1], 118UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberFromOpcode("NumberFromOpcode", 0U, 0U, func_NumberFromOpcode);


static refalrts::FnResult func_NumberFromBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & NumberFromBracket/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NumberFromBracket/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NumberFromBracket/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromBracket/4 # ElCloseCall/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseCall/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
  refalrts::reinit_number(context[1], 5UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberFromBracket("NumberFromBracket", 0U, 0U, func_NumberFromBracket);


static refalrts::FnResult func_BlockTypeNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & BlockTypeNumber/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & BlockTypeNumber/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & BlockTypeNumber/4 # Start/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Start], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Start/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConstTable/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConstTable], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConstTable/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # RefalFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_RefalFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # RefalFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # NativeFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_NativeFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # NativeFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # EmptyFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_EmptyFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # EmptyFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
    refalrts::reinit_number(context[1], 5UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Swap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Swap/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 6/1 ]] }
    refalrts::reinit_number(context[1], 6UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Reference/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Reference], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Reference/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 7/1 ]] }
    refalrts::reinit_number(context[1], 7UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConditionRasl/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConditionRasl], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConditionRasl/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 8/1 ]] }
    refalrts::reinit_number(context[1], 8UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConditionNative/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConditionNative], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConditionNative/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 9/1 ]] }
    refalrts::reinit_number(context[1], 9UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Incorporated/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Incorporated], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Incorporated/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
    refalrts::reinit_number(context[1], 10UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # UnitName/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # UnitName/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
    refalrts::reinit_number(context[1], 11UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BlockTypeNumber/4 # Metatable/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Metatable/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
  refalrts::reinit_number(context[1], 12UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BlockTypeNumber("BlockTypeNumber", 0U, 0U, func_BlockTypeNumber);


static refalrts::FnResult func_gen_GenProgramm_RASL_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & GenProgram-RASL=4/4 s.Cookie1#1/5 s.Cookie2#1/6 s.FunctionCount#1/7 s.IdentCount#1/8 s.StringCount#1/9 s.ExternalSize#2/10 s.IdentSize#3/11 s.StringSize#4/12 (/15 e.FuncNamesAsBytes#2/13 )/16 (/19 e.IdentsAsBytes#3/17 )/20 (/23 e.StringsAsBytes#4/21 )/24 (/27 e.Items#1/25 )/28 s.RaslLength#5/29 (/32 e.LabelOffsets#5/30 )/33 e.RASLAsWords#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.FuncNamesAsBytes#2 as range 13
  // closed e.IdentsAsBytes#3 as range 17
  // closed e.StringsAsBytes#4 as range 21
  // closed e.Items#1 as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.LabelOffsets#5 as range 30
  // closed e.RASLAsWords#5 as range 2
  //DEBUG: s.Cookie1#1: 5
  //DEBUG: s.Cookie2#1: 6
  //DEBUG: s.FunctionCount#1: 7
  //DEBUG: s.IdentCount#1: 8
  //DEBUG: s.StringCount#1: 9
  //DEBUG: s.ExternalSize#2: 10
  //DEBUG: s.IdentSize#3: 11
  //DEBUG: s.StringSize#4: 12
  //DEBUG: e.FuncNamesAsBytes#2: 13
  //DEBUG: e.IdentsAsBytes#3: 17
  //DEBUG: e.StringsAsBytes#4: 21
  //DEBUG: e.Items#1: 25
  //DEBUG: s.RaslLength#5: 29
  //DEBUG: e.LabelOffsets#5: 30
  //DEBUG: e.RASLAsWords#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </34 & PutBlockStart/35 >/36 </37 & PutBlock/38 # ConstTable/39 Tile{ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Cookie1#1/5 } Tile{ HalfReuse: >/24 } </40 & PutWordLE/41 Tile{ AsIs: s.Cookie2#1/6 } Tile{ HalfReuse: >/20 HalfReuse: </23 } & PutWordLE/42 Tile{ AsIs: s.FunctionCount#1/7 } Tile{ HalfReuse: >/16 HalfReuse: </19 } & PutWordLE/43 Tile{ AsIs: s.IdentCount#1/8 } >/44 </45 & PutWordLE/46 0/47 >/48 </49 & PutWordLE/50 Tile{ AsIs: s.StringCount#1/9 } >/51 </52 & PutWordLE/53 Tile{ AsIs: s.RaslLength#5/29 HalfReuse: >/32 } </54 & PutWordLE/55 Tile{ AsIs: s.ExternalSize#2/10 } >/56 </57 & PutWordLE/58 Tile{ AsIs: s.IdentSize#3/11 } >/59 </60 & PutWordLE/61 </62 & Sub/63 Tile{ AsIs: s.StringSize#4/12 HalfReuse: </15 } & Mul/64 4/65 s.StringCount#1/9/66 >/67 >/68 >/69 Tile{ AsIs: e.FuncNamesAsBytes#2/13 } Tile{ AsIs: e.IdentsAsBytes#3/17 } Tile{ AsIs: e.StringsAsBytes#4/21 } </70 Tile{ HalfReuse: & Map@1/33 AsIs: e.RASLAsWords#5/2 AsIs: >/1 } >/71 </72 & Map@2/73 Tile{ AsIs: e.LabelOffsets#5/30 } Tile{ AsIs: (/27 AsIs: e.Items#1/25 AsIs: )/28 } >/74 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_PutBlockStart]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::alloc_open_call(vm, context[37]);
  refalrts::alloc_name(vm, context[38], functions[efunc_PutBlock]);
  refalrts::alloc_ident(vm, context[39], identifiers[ident_ConstTable]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_PutWordLE]);
  refalrts::alloc_name(vm, context[42], functions[efunc_PutWordLE]);
  refalrts::alloc_name(vm, context[43], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_open_call(vm, context[45]);
  refalrts::alloc_name(vm, context[46], functions[efunc_PutWordLE]);
  refalrts::alloc_number(vm, context[47], 0UL);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_open_call(vm, context[49]);
  refalrts::alloc_name(vm, context[50], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[51]);
  refalrts::alloc_open_call(vm, context[52]);
  refalrts::alloc_name(vm, context[53], functions[efunc_PutWordLE]);
  refalrts::alloc_open_call(vm, context[54]);
  refalrts::alloc_name(vm, context[55], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[56]);
  refalrts::alloc_open_call(vm, context[57]);
  refalrts::alloc_name(vm, context[58], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[59]);
  refalrts::alloc_open_call(vm, context[60]);
  refalrts::alloc_name(vm, context[61], functions[efunc_PutWordLE]);
  refalrts::alloc_open_call(vm, context[62]);
  refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
  refalrts::alloc_name(vm, context[64], functions[efunc_Mul]);
  refalrts::alloc_number(vm, context[65], 4UL);
  refalrts::copy_stvar(vm, context[66], context[9]);
  refalrts::alloc_close_call(vm, context[67]);
  refalrts::alloc_close_call(vm, context[68]);
  refalrts::alloc_close_call(vm, context[69]);
  refalrts::alloc_open_call(vm, context[70]);
  refalrts::alloc_close_call(vm, context[71]);
  refalrts::alloc_open_call(vm, context[72]);
  refalrts::alloc_name(vm, context[73], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[74]);
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::reinit_close_call(context[24]);
  refalrts::reinit_close_call(context[20]);
  refalrts::reinit_open_call(context[23]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_open_call(context[19]);
  refalrts::reinit_close_call(context[32]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_name(context[33], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[74] );
  refalrts::push_stack( vm, context[72] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::push_stack( vm, context[71] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[70] );
  refalrts::push_stack( vm, context[69] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[68] );
  refalrts::push_stack( vm, context[62] );
  refalrts::push_stack( vm, context[67] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[59] );
  refalrts::push_stack( vm, context[57] );
  refalrts::push_stack( vm, context[56] );
  refalrts::push_stack( vm, context[54] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[51] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[34] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[74], context[74] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[71], context[73] );
  res = refalrts::splice_evar( res, context[33], context[1] );
  res = refalrts::splice_evar( res, context[70], context[70] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[64], context[69] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[59], context[63] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[56], context[58] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[54], context[55] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[51], context[53] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[44], context[50] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[43], context[43] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[42], context[42] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[34], context[39] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A4("GenProgram-RASL=4", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A4);


static refalrts::FnResult func_gen_GenProgramm_RASL_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & GenProgram-RASL=3/4 s.Cookie1#1/5 s.Cookie2#1/6 s.FunctionCount#1/7 s.IdentCount#1/8 s.StringCount#1/9 s.ExternalSize#2/10 s.IdentSize#3/11 (/14 e.FuncNamesAsBytes#2/12 )/15 (/18 e.IdentsAsBytes#3/16 )/19 (/22 e.Items#1/20 )/23 (/26 e.RASL#1/24 )/27 s.StringSize#4/28 e.StringsAsBytes#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.FuncNamesAsBytes#2 as range 12
  // closed e.IdentsAsBytes#3 as range 16
  // closed e.Items#1 as range 20
  // closed e.RASL#1 as range 24
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.StringsAsBytes#4 as range 2
  //DEBUG: s.Cookie1#1: 5
  //DEBUG: s.Cookie2#1: 6
  //DEBUG: s.FunctionCount#1: 7
  //DEBUG: s.IdentCount#1: 8
  //DEBUG: s.StringCount#1: 9
  //DEBUG: s.ExternalSize#2: 10
  //DEBUG: s.IdentSize#3: 11
  //DEBUG: e.FuncNamesAsBytes#2: 12
  //DEBUG: e.IdentsAsBytes#3: 16
  //DEBUG: e.Items#1: 20
  //DEBUG: e.RASL#1: 24
  //DEBUG: s.StringSize#4: 28
  //DEBUG: e.StringsAsBytes#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.StringSize#4/28 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=4/4 AsIs: s.Cookie1#1/5 AsIs: s.Cookie2#1/6 AsIs: s.FunctionCount#1/7 AsIs: s.IdentCount#1/8 AsIs: s.StringCount#1/9 AsIs: s.ExternalSize#2/10 AsIs: s.IdentSize#3/11 HalfReuse: s.StringSize4 #28/14 } (/29 Tile{ AsIs: e.FuncNamesAsBytes#2/12 } Tile{ AsIs: )/15 AsIs: (/18 AsIs: e.IdentsAsBytes#3/16 AsIs: )/19 AsIs: (/22 } Tile{ AsIs: e.StringsAsBytes#4/2 } Tile{ AsIs: )/23 AsIs: (/26 } Tile{ AsIs: e.Items#1/20 } Tile{ AsIs: )/27 } </30 & Assemble/31 Tile{ AsIs: e.RASL#1/24 } >/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_Assemble]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A4]);
  refalrts::reinit_svar( context[14], context[28] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[29], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[32] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[22] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A3("GenProgram-RASL=3", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A3);


static refalrts::FnResult func_gen_GenProgramm_RASL_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & GenProgram-RASL=2/4 s.Cookie1#1/5 s.Cookie2#1/6 s.FunctionCount#1/7 s.IdentCount#1/8 s.StringCount#1/9 s.ExternalSize#2/10 (/13 e.FuncNamesAsBytes#2/11 )/14 (/17 e.Items#1/15 )/18 (/21 e.RASL#1/19 )/22 (/25 e.Strings#1/23 )/26 s.IdentSize#3/27 e.IdentsAsBytes#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.FuncNamesAsBytes#2 as range 11
  // closed e.Items#1 as range 15
  // closed e.RASL#1 as range 19
  // closed e.Strings#1 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.IdentsAsBytes#3 as range 2
  //DEBUG: s.Cookie1#1: 5
  //DEBUG: s.Cookie2#1: 6
  //DEBUG: s.FunctionCount#1: 7
  //DEBUG: s.IdentCount#1: 8
  //DEBUG: s.StringCount#1: 9
  //DEBUG: s.ExternalSize#2: 10
  //DEBUG: e.FuncNamesAsBytes#2: 11
  //DEBUG: e.Items#1: 15
  //DEBUG: e.RASL#1: 19
  //DEBUG: e.Strings#1: 23
  //DEBUG: s.IdentSize#3: 27
  //DEBUG: e.IdentsAsBytes#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.IdentSize#3/27 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=3/4 AsIs: s.Cookie1#1/5 AsIs: s.Cookie2#1/6 AsIs: s.FunctionCount#1/7 AsIs: s.IdentCount#1/8 AsIs: s.StringCount#1/9 AsIs: s.ExternalSize#2/10 HalfReuse: s.IdentSize3 #27/13 } (/28 Tile{ AsIs: e.FuncNamesAsBytes#2/11 } Tile{ AsIs: )/26 } (/29 Tile{ AsIs: e.IdentsAsBytes#3/2 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Items#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.RASL#1/19 AsIs: )/22 HalfReuse: </25 } & Lenw/30 </31 & BytesFromStringList/32 Tile{ AsIs: e.Strings#1/23 } >/33 >/34 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Lenw]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_BytesFromStringList]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A3]);
  refalrts::reinit_svar( context[13], context[27] );
  refalrts::reinit_open_call(context[25]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[29], context[14] );
  refalrts::link_brackets( context[28], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[30], context[32] );
  res = refalrts::splice_evar( res, context[14], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[28], context[28] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A2("GenProgram-RASL=2", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A2);


static refalrts::FnResult func_gen_GenProgramm_RASL_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & GenProgram-RASL=1/4 s.Cookie1#1/5 s.Cookie2#1/6 s.FunctionCount#1/7 s.IdentCount#1/8 s.StringCount#1/9 (/12 e.Items#1/10 )/13 (/16 e.RASL#1/14 )/17 (/20 e.Strings#1/18 )/21 (/24 e.Idents#1/22 )/25 s.ExternalSize#2/26 e.FuncNamesAsBytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Items#1 as range 10
  // closed e.RASL#1 as range 14
  // closed e.Strings#1 as range 18
  // closed e.Idents#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FuncNamesAsBytes#2 as range 2
  //DEBUG: s.Cookie1#1: 5
  //DEBUG: s.Cookie2#1: 6
  //DEBUG: s.FunctionCount#1: 7
  //DEBUG: s.IdentCount#1: 8
  //DEBUG: s.StringCount#1: 9
  //DEBUG: e.Items#1: 10
  //DEBUG: e.RASL#1: 14
  //DEBUG: e.Strings#1: 18
  //DEBUG: e.Idents#1: 22
  //DEBUG: s.ExternalSize#2: 26
  //DEBUG: e.FuncNamesAsBytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=2/4 AsIs: s.Cookie1#1/5 AsIs: s.Cookie2#1/6 AsIs: s.FunctionCount#1/7 AsIs: s.IdentCount#1/8 AsIs: s.StringCount#1/9 } Tile{ AsIs: s.ExternalSize#2/26 } (/27 Tile{ AsIs: e.FuncNamesAsBytes#2/2 } Tile{ AsIs: )/25 } Tile{ AsIs: (/12 AsIs: e.Items#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.RASL#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Strings#1/18 AsIs: )/21 HalfReuse: </24 } & Lenw/28 </29 & BytesFromIdentList/30 Tile{ AsIs: e.Idents#1/22 } >/31 >/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Lenw]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_BytesFromIdentList]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A2]);
  refalrts::reinit_open_call(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_evar( res, context[12], context[24] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A1("GenProgram-RASL=1", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A1);


static refalrts::FnResult func_GenProgramm_RASL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & GenProgram-RASL/4 (/7 (/11 # ModuleID/13 s.Cookie1#1/39 s.Cookie2#1/40 )/12 (/16 # CmdFuncArray/18 s.FunctionCount#1/41 e.FuncNames#1/14 )/17 (/21 # CmdIdentArray/23 s.IdentCount#1/42 e.Idents#1/19 )/22 (/26 # CmdStringArray/28 s.StringCount#1/43 e.Strings#1/24 )/27 (/31 # RASL/33 e.RASL#1/29 )/32 (/36 # Items/38 e.Items#1/34 )/37 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_ModuleID], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = refalrts::ident_left( identifiers[ident_CmdFuncArray], context[14], context[15] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[5], context[6] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = refalrts::ident_left( identifiers[ident_CmdIdentArray], context[19], context[20] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[5], context[6] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = refalrts::ident_left( identifiers[ident_CmdStringArray], context[24], context[25] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = refalrts::ident_left( identifiers[ident_RASL], context[29], context[30] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[5], context[6] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = refalrts::ident_left( identifiers[ident_Items], context[34], context[35] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.RASL#1 as range 29
  // closed e.Items#1 as range 34
  if( ! refalrts::svar_left( context[39], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[40], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[41], context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FuncNames#1 as range 14
  if( ! refalrts::svar_left( context[42], context[19], context[20] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Idents#1 as range 19
  if( ! refalrts::svar_left( context[43], context[24], context[25] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Strings#1 as range 24
  //DEBUG: e.RASL#1: 29
  //DEBUG: e.Items#1: 34
  //DEBUG: s.Cookie1#1: 39
  //DEBUG: s.Cookie2#1: 40
  //DEBUG: s.FunctionCount#1: 41
  //DEBUG: e.FuncNames#1: 14
  //DEBUG: s.IdentCount#1: 42
  //DEBUG: e.Idents#1: 19
  //DEBUG: s.StringCount#1: 43
  //DEBUG: e.Strings#1: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.FunctionCount#1/41 {REMOVED TILE} )/17 {REMOVED TILE} # CmdIdentArray/23 s.IdentCount#1/42 {REMOVED TILE} {REMOVED TILE} # CmdStringArray/28 s.StringCount#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & GenProgram-RASL=1/13 AsIs: s.Cookie1#1/39 AsIs: s.Cookie2#1/40 HalfReuse: s.FunctionCount1 #41/12 HalfReuse: s.IdentCount1 #42/16 HalfReuse: s.StringCount1 #43/18 } Tile{ AsIs: (/21 } Tile{ AsIs: e.Items#1/34 } Tile{ HalfReuse: )/31 HalfReuse: (/33 AsIs: e.RASL#1/29 AsIs: )/32 AsIs: (/36 } Tile{ AsIs: e.Strings#1/24 } Tile{ AsIs: )/22 AsIs: (/26 } Tile{ AsIs: e.Idents#1/19 } Tile{ AsIs: )/27 } Tile{ AsIs: </0 Reuse: & Lenw/4 HalfReuse: </7 } Tile{ HalfReuse: & BytesFromFunctionList/38 } Tile{ AsIs: e.FuncNames#1/14 } Tile{ HalfReuse: >/37 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[13], functions[efunc_gen_GenProgramm_RASL_A1]);
  refalrts::reinit_svar( context[12], context[41] );
  refalrts::reinit_svar( context[16], context[42] );
  refalrts::reinit_svar( context[18], context[43] );
  refalrts::reinit_close_bracket(context[31]);
  refalrts::reinit_open_bracket(context[33]);
  refalrts::update_name(context[4], functions[efunc_Lenw]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[38], functions[efunc_BytesFromFunctionList]);
  refalrts::reinit_close_call(context[37]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[36], context[22] );
  refalrts::link_brackets( context[33], context[32] );
  refalrts::link_brackets( context[21], context[31] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[37];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[31], context[36] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  res = refalrts::splice_evar( res, context[11], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenProgramm_RASL("GenProgram-RASL", 0U, 0U, func_GenProgramm_RASL);


static refalrts::FnResult func_gen_BytesFromFunctionList_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & BytesFromFunctionList\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & BytesFromFunctionList\1/4 (/7 s.new#1/9 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 5
  do {
    // </0 & BytesFromFunctionList\1/4 (/7 # GN-Entry/9 e.FuncName#2/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[9] ) )
      continue;
    // closed e.FuncName#2 as range 10
    //DEBUG: e.FuncName#2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 Tile{ HalfReuse: & Asciiz/0 HalfReuse: '*'/4 HalfReuse: </7 HalfReuse: & DisplayName/9 AsIs: e.FuncName#2/10 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::reinit_name(context[0], functions[efunc_Asciiz]);
    refalrts::reinit_char(context[4], '*');
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[12], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BytesFromFunctionList\1/4 (/7 # GN-Local/9 e.FuncName#2/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[9] ) )
      continue;
    // closed e.FuncName#2 as range 10
    //DEBUG: e.FuncName#2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 Tile{ HalfReuse: & Asciiz/0 HalfReuse: '#'/4 HalfReuse: </7 HalfReuse: & DisplayName/9 AsIs: e.FuncName#2/10 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::reinit_name(context[0], functions[efunc_Asciiz]);
    refalrts::reinit_char(context[4], '#');
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[12], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BytesFromFunctionList\1/4 (/7 s.ScopeClass#2/9 e.FuncName#2/5 )/8 >/1
  // closed e.FuncName#2 as range 5
  //DEBUG: s.ScopeClass#2: 9
  //DEBUG: e.FuncName#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & NameWithSign-Bytes*2/7 AsIs: s.ScopeClass#2/9 AsIs: e.FuncName#2/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BytesFromFunctionList_L1("BytesFromFunctionList\\1", COOKIE1_, COOKIE2_, func_gen_BytesFromFunctionList_L1);


static refalrts::FnResult func_BytesFromFunctionList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromFunctionList/4 e.FuncNames#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FuncNames#1 as range 2
  //DEBUG: e.FuncNames#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: e.FuncNames#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromFunctionList("BytesFromFunctionList", COOKIE1_, COOKIE2_, func_BytesFromFunctionList);


static refalrts::FnResult func_gen_BytesFromIdentList_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & BytesFromIdentList\1/4 (/7 s.IdentId#2/9 e.Ident#2/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Ident#2 as range 5
  //DEBUG: s.IdentId#2: 9
  //DEBUG: e.Ident#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.IdentId#2/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: </7 } & DisplayName/10 Tile{ AsIs: e.Ident#2/5 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[10], functions[efunc_DisplayName]);
  refalrts::update_name(context[4], functions[efunc_Asciiz]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BytesFromIdentList_L1("BytesFromIdentList\\1", COOKIE1_, COOKIE2_, func_gen_BytesFromIdentList_L1);


static refalrts::FnResult func_BytesFromIdentList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromIdentList/4 e.Idents#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Idents#1 as range 2
  //DEBUG: e.Idents#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Idents#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromIdentList("BytesFromIdentList", COOKIE1_, COOKIE2_, func_BytesFromIdentList);


static refalrts::FnResult func_gen_BytesFromStringList_L1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & BytesFromStringList\1\1/4 s.Length#3/5 e.String#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.String#3 as range 2
  //DEBUG: s.Length#3: 5
  //DEBUG: e.String#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Length#3/5 } >/6 </7 & Ord/8 Tile{ AsIs: e.String#3/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_Ord]);
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BytesFromStringList_L1L1("BytesFromStringList\\1\\1", COOKIE1_, COOKIE2_, func_gen_BytesFromStringList_L1L1);


static refalrts::FnResult func_gen_BytesFromStringList_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BytesFromStringList\1/4 (/7 s.StringId#2/9 e.String#2/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.String#2 as range 5
  //DEBUG: s.StringId#2: 9
  //DEBUG: e.String#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.StringId#2/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 HalfReuse: </7 } & Lenw/10 Tile{ AsIs: e.String#2/5 } >/11 Tile{ HalfReuse: & BytesFromStringList\1\1/8 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[10], functions[efunc_Lenw]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_BytesFromStringList_L1L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BytesFromStringList_L1("BytesFromStringList\\1", COOKIE1_, COOKIE2_, func_gen_BytesFromStringList_L1);


static refalrts::FnResult func_BytesFromStringList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromStringList/4 e.Strings#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Strings#1 as range 2
  //DEBUG: e.Strings#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: e.Strings#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromStringList("BytesFromStringList", COOKIE1_, COOKIE2_, func_BytesFromStringList);


static refalrts::FnResult func_BytesFromString(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromString/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Ord/4 AsIs: e.String#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromString("BytesFromString", COOKIE1_, COOKIE2_, func_BytesFromString);


static refalrts::FnResult func_Asciiz(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Asciiz/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Ord/4 AsIs: e.String#1/2 AsIs: >/1 } 0/5 Tile{ ]] }
  refalrts::alloc_number(vm, context[5], 0UL);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Asciiz("Asciiz", COOKIE1_, COOKIE2_, func_Asciiz);


static refalrts::FnResult func_gen_PutBlock_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & PutBlock\1/4 s.Length#2/5 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#2 as range 2
  //DEBUG: s.Length#2: 5
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Length#2/5 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Bytes#2/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_L1("PutBlock\\1", COOKIE1_, COOKIE2_, func_gen_PutBlock_L1);


static refalrts::FnResult func_PutBlock(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & PutBlock/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & PutBlock/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & PutBlock/4 # Start/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Start], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 1/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 1UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConstTable/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConstTable], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 2/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 2UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # RefalFunction/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_RefalFunction], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 3/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 3UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # NativeFunction/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeFunction], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 4/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 4UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # EmptyFunction/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_EmptyFunction], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 5/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 5UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Swap/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 6/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 6UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Reference/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Reference], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 7/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 7UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConditionRasl/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConditionRasl], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 8/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 8UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConditionNative/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConditionNative], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 9/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 9UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Incorporated/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Incorporated], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 10/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 10UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # UnitName/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 11/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 11UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Metatable/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 12/8 </9 Tile{ HalfReuse: & Fetch/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes#1/6 AsIs: >/1 } & PutBlock\1/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 12UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_PutBlock_L1]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::reinit_name(context[0], functions[efunc_Fetch]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock/4 s.Type#1/5 e.Bytes#1/2 >/1
  // closed e.Bytes#1 as range 2
  //DEBUG: s.Type#1: 5
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BlockTypeNumber*12/4 AsIs: s.Type#1/5 } >/6 </7 & Fetch/8 </9 & Lenw/10 Tile{ AsIs: e.Bytes#1/2 } >/11 & PutBlock\1/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_Fetch]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Lenw]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PutBlock_L1]);
  refalrts::update_name(context[4], functions[efunc_gen_BlockTypeNumber_D12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlock("PutBlock", COOKIE1_, COOKIE2_, func_PutBlock);


static refalrts::FnResult func_gen_PutWordLE_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PutWordLE$2=1/4 (/7 e.Bytes#1/5 )/8 (/11 s.ValueHigh#2/13 )/12 s.ValueLow#2/14 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Bytes#1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Bytes#1: 5
  //DEBUG: s.ValueHigh#2: 13
  //DEBUG: s.ValueLow#2: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} )/12 s.ValueLow#2/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 } Tile{ AsIs: e.Bytes#1/5 } Tile{ HalfReuse: s.ValueLow2 #14/11 AsIs: s.ValueHigh#2/13 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::reinit_svar( context[11], context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutWordLE_S2A1("PutWordLE$2=1", COOKIE1_, COOKIE2_, func_gen_PutWordLE_S2A1);


static refalrts::FnResult func_PutWordLE(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutWordLE/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & PutWordLE/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & PutWordLE/4 s.1#1/8 s.2#1/9 s.3#1/10 s.4#1/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.4#1: 5
    //DEBUG: s.1#1: 8
    //DEBUG: s.2#1: 9
    //DEBUG: s.3#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PutWordLE/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: s.1#1/8 AsIs: s.2#1/9 AsIs: s.3#1/10 AsIs: s.4#1/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[5] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutWordLE/4 e.Bytes#1/2 s.Value#1/5 >/1
  // closed e.Bytes#1 as range 2
  //DEBUG: s.Value#1: 5
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE$2=1/4 } (/6 Tile{ AsIs: e.Bytes#1/2 } )/7 </8 & Divmod/9 Tile{ AsIs: s.Value#1/5 } 256/10 >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[10], 256UL);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_PutWordLE_S2A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutWordLE("PutWordLE", COOKIE1_, COOKIE2_, func_PutWordLE);


static refalrts::FnResult func_NameWithSignm_Bytes(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & NameWithSign-Bytes/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & NameWithSign-Bytes/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & NameWithSign-Bytes/4 # GN-Entry/5 e.Name#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[5] ) )
      continue;
    // closed e.Name#1 as range 6
    //DEBUG: e.Name#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: '*'/5 } </8 & DisplayName/9 Tile{ AsIs: e.Name#1/6 } >/10 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_DisplayName]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Asciiz]);
    refalrts::reinit_char(context[5], '*');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameWithSign-Bytes/4 # GN-Local/5 e.Name#1/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 2
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: '#'/5 } </6 & DisplayName/7 Tile{ AsIs: e.Name#1/2 } >/8 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_Asciiz]);
  refalrts::reinit_char(context[5], '#');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameWithSignm_Bytes("NameWithSign-Bytes", COOKIE1_, COOKIE2_, func_NameWithSignm_Bytes);


static refalrts::FnResult func_gen_GenCommandm_Globals_S4L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & GenCommand-Globals$4\1/4 (/7 s.Ident#3/9 s.Function#3/10 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Ident#3: 9
  //DEBUG: s.Function#3: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Ident#3/9 s.Function#3/10 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 HalfReuse: s.Ident3 #9/7 } >/11 </12 & PutWordLE/13 Tile{ HalfReuse: s.Function3 #10/8 AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_PutWordLE]);
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::reinit_svar( context[8], context[10] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_Globals_S4L1("GenCommand-Globals$4\\1", COOKIE1_, COOKIE2_, func_gen_GenCommandm_Globals_S4L1);


static refalrts::FnResult func_gen_GenCommandm_Globals_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & GenCommand-Globals$4=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenCommand-Globals$4=1/4 s.new#1/5 (/8 e.new#2/6 )/9 s.new#3/10 e.new#4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & GenCommand-Globals$4=1/4 # GN-Entry/5 (/8 e.Name#1/11 )/9 s.Count#2/10 e.Table#2/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[5] ) )
      continue;
    // closed e.Name#1 as range 11
    // closed e.Table#2 as range 13
    //DEBUG: s.Count#2: 10
    //DEBUG: e.Name#1: 11
    //DEBUG: e.Table#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 Reuse: # Metatable/5 HalfReuse: </8 } & Asciiz/15 '*'/16 </17 & DisplayName/18 Tile{ AsIs: e.Name#1/11 } >/19 >/20 </21 Tile{ HalfReuse: & PutWordLE/9 AsIs: s.Count#2/10 } >/22 </23 & Map@6/24 Tile{ AsIs: e.Table#2/13 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[15], functions[efunc_Asciiz]);
    refalrts::alloc_char(vm, context[16], '*');
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_DisplayName]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::update_ident(context[5], identifiers[ident_Metatable]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[9], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals$4=1/4 # GN-Local/5 (/8 e.Name#1/11 )/9 s.Count#2/10 e.Table#2/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[5] ) )
      continue;
    // closed e.Name#1 as range 11
    // closed e.Table#2 as range 13
    //DEBUG: s.Count#2: 10
    //DEBUG: e.Name#1: 11
    //DEBUG: e.Table#2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 Reuse: # Metatable/5 HalfReuse: </8 } & Asciiz/15 '#'/16 </17 & DisplayName/18 Tile{ AsIs: e.Name#1/11 } >/19 >/20 </21 Tile{ HalfReuse: & PutWordLE/9 AsIs: s.Count#2/10 } >/22 </23 & Map@6/24 Tile{ AsIs: e.Table#2/13 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[15], functions[efunc_Asciiz]);
    refalrts::alloc_char(vm, context[16], '#');
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_DisplayName]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::update_ident(context[5], identifiers[ident_Metatable]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[9], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals$4=1/4 s.ScopeClass#1/5 (/8 e.Name#1/6 )/9 s.Count#2/10 e.Table#2/2 >/1
  // closed e.Name#1 as range 6
  // closed e.Table#2 as range 2
  //DEBUG: s.ScopeClass#1: 5
  //DEBUG: s.Count#2: 10
  //DEBUG: e.Name#1: 6
  //DEBUG: e.Table#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.ScopeClass#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # Metatable/11 </12 & NameWithSign-Bytes*2/13 Tile{ HalfReuse: s.ScopeClass1 #5/8 AsIs: e.Name#1/6 HalfReuse: >/9 } </14 & PutWordLE/15 Tile{ AsIs: s.Count#2/10 } >/16 </17 & Map@6/18 Tile{ AsIs: e.Table#2/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[11], identifiers[ident_Metatable]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Map_Z6]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_PutBlock]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::reinit_close_call(context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_Globals_S4A1("GenCommand-Globals$4=1", COOKIE1_, COOKIE2_, func_gen_GenCommandm_Globals_S4A1);


static refalrts::FnResult func_GenCommandm_Globals(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & GenCommand-Globals/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenCommand-Globals/4 e.new#1/2 (/7 s.new#2/9 e.new#3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 5
  do {
    // </0 & GenCommand-Globals/4 e.Labels#1/10 (/7 # UnitName/9 e.SrcName#1/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[9] ) )
      continue;
    // closed e.Labels#1 as range 10
    // closed e.SrcName#1 as range 12
    //DEBUG: e.Labels#1: 10
    //DEBUG: e.SrcName#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # UnitName/14 Tile{ HalfReuse: </7 HalfReuse: & Ord/9 AsIs: e.SrcName#1/12 HalfReuse: >/8 HalfReuse: 0/1 } >/15 Tile{ ]] }
    refalrts::alloc_ident(vm, context[14], identifiers[ident_UnitName]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_Ord]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 e.new#4/2 (/7 s.new#5/9 s.new#6/10 e.new#7/5 )/8 >/1
  // closed e.new#4 as range 2
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 5
  do {
    // </0 & GenCommand-Globals/4 e.new#8/11 (/7 # CmdEnumDescr/9 s.new#9/10 e.new#10/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdEnumDescr], context[9] ) )
      continue;
    // closed e.new#8 as range 11
    // closed e.new#10 as range 13
    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdEnumDescr/9 # GN-Entry/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # EmptyFunction/19 </20 & Asciiz/21 Tile{ HalfReuse: '*'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_EmptyFunction]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '*');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdEnumDescr/9 # GN-Local/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # EmptyFunction/19 </20 & Asciiz/21 Tile{ HalfReuse: '#'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_EmptyFunction]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '#');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdEnumDescr/9 s.ScopeClass#1/10 e.Name#1/17 )/8 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Labels#1 as range 15
    // closed e.Name#1 as range 17
    //DEBUG: s.ScopeClass#1: 10
    //DEBUG: e.Labels#1: 15
    //DEBUG: e.Name#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # EmptyFunction/19 Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes*2/9 AsIs: s.ScopeClass#1/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_EmptyFunction]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[19], context[19] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.Labels-B#1/16 (/22 s.Label#1/24 s.Offset#1/25 )/23 e.Labels-E#1/18 (/7 # CmdInterpretFuncDescr/9 s.ScopeClass#1/10 e.Name#1/13 s.Label#1/15 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdInterpretFuncDescr], context[9] ) )
      continue;
    if( ! refalrts::svar_right( context[15], context[13], context[14] ) )
      continue;
    // closed e.Name#1 as range 13
    context[16] = 0;
    context[17] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[18] = context[11];
      context[19] = context[12];
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      if( ! refalrts::repeated_stvar_left( vm, context[24], context[15], context[20], context[21] ) )
        continue;
      // closed e.Labels-E#1 as range 18
      if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: s.ScopeClass#1: 10
      //DEBUG: s.Label#1: 15
      //DEBUG: e.Name#1: 13
      //DEBUG: e.Labels-B#1: 16
      //DEBUG: e.Labels-E#1: 18
      //DEBUG: s.Offset#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels-B#1/16 {REMOVED TILE} s.Label#1/24 {REMOVED TILE} {REMOVED TILE} e.Labels-E#1/18 {REMOVED TILE} {REMOVED TILE} s.Label#1/15 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } Tile{ HalfReuse: # RefalFunction/23 } Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes/9 AsIs: s.ScopeClass#1/10 } Tile{ AsIs: e.Name#1/13 } Tile{ HalfReuse: >/22 } </26 & PutWordLE/27 Tile{ AsIs: s.Offset#1/25 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_PutWordLE]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_ident(context[23], identifiers[ident_RefalFunction]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_NameWithSignm_Bytes]);
      refalrts::reinit_close_call(context[22]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[16], context[17], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.Labels#1/11 (/7 # CmdMetatable/9 s.ScopeClass#1/10 (/17 e.Name#1/15 )/18 e.Table#1/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdMetatable], context[9] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.Labels#1 as range 11
    // closed e.Name#1 as range 15
    // closed e.Table#1 as range 13
    //DEBUG: s.ScopeClass#1: 10
    //DEBUG: e.Labels#1: 11
    //DEBUG: e.Name#1: 15
    //DEBUG: e.Table#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Labels#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </7 HalfReuse: & GenCommand-Globals$4=1/9 AsIs: s.ScopeClass#1/10 AsIs: (/17 AsIs: e.Name#1/15 AsIs: )/18 } Tile{ AsIs: </0 Reuse: & Lenw/4 } Tile{ AsIs: e.Table#1/13 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_gen_GenCommandm_Globals_S4A1]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.new#8/11 (/7 # CmdSwapDescr/9 s.new#9/10 e.new#10/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdSwapDescr], context[9] ) )
      continue;
    // closed e.new#8 as range 11
    // closed e.new#10 as range 13
    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdSwapDescr/9 # GN-Entry/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # Swap/19 </20 & Asciiz/21 Tile{ HalfReuse: '*'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_Swap]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '*');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdSwapDescr/9 # GN-Local/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # Swap/19 </20 & Asciiz/21 Tile{ HalfReuse: '#'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_Swap]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '#');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdSwapDescr/9 s.ScopeClass#1/10 e.Name#1/17 )/8 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Labels#1 as range 15
    // closed e.Name#1 as range 17
    //DEBUG: s.ScopeClass#1: 10
    //DEBUG: e.Labels#1: 15
    //DEBUG: e.Name#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # Swap/19 Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes*2/9 AsIs: s.ScopeClass#1/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Swap]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[19], context[19] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.new#8/11 (/7 # CmdConditionFuncDecsrRasl/9 s.new#9/10 e.new#10/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrRasl], context[9] ) )
      continue;
    // closed e.new#8 as range 11
    // closed e.new#10 as range 13
    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrRasl/9 # GN-Entry/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionRasl/19 </20 & Asciiz/21 Tile{ HalfReuse: '*'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionRasl]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '*');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrRasl/9 # GN-Local/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionRasl/19 </20 & Asciiz/21 Tile{ HalfReuse: '#'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionRasl]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '#');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrRasl/9 s.ScopeClass#1/10 e.Name#1/17 )/8 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Labels#1 as range 15
    // closed e.Name#1 as range 17
    //DEBUG: s.ScopeClass#1: 10
    //DEBUG: e.Labels#1: 15
    //DEBUG: e.Name#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionRasl/19 Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes*2/9 AsIs: s.ScopeClass#1/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionRasl]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[19], context[19] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.new#8/11 (/7 # CmdConditionFuncDecsrNative/9 s.new#9/10 e.new#10/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrNative], context[9] ) )
      continue;
    // closed e.new#8 as range 11
    // closed e.new#10 as range 13
    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrNative/9 # GN-Entry/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionNative/19 </20 & Asciiz/21 Tile{ HalfReuse: '*'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionNative]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '*');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrNative/9 # GN-Local/10 e.Name#1/17 )/8 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[10] ) )
        continue;
      // closed e.Labels#1 as range 15
      // closed e.Name#1 as range 17
      //DEBUG: e.Labels#1: 15
      //DEBUG: e.Name#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionNative/19 </20 & Asciiz/21 Tile{ HalfReuse: '#'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionNative]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Asciiz]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_PutBlock]);
      refalrts::reinit_char(context[7], '#');
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 e.Labels#1/15 (/7 # CmdConditionFuncDecsrNative/9 s.ScopeClass#1/10 e.Name#1/17 )/8 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Labels#1 as range 15
    // closed e.Name#1 as range 17
    //DEBUG: s.ScopeClass#1: 10
    //DEBUG: e.Labels#1: 15
    //DEBUG: e.Name#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # ConditionNative/19 Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes*2/9 AsIs: s.ScopeClass#1/10 AsIs: e.Name#1/17 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_ConditionNative]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[19], context[19] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 e.new#8/2 (/7 # CmdNativeFuncDescr/9 s.new#9/10 e.new#10/5 )/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdNativeFuncDescr], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#8 as range 2
  // closed e.new#10 as range 5
  do {
    // </0 & GenCommand-Globals/4 e.Labels#1/11 (/7 # CmdNativeFuncDescr/9 # GN-Entry/10 e.Name#1/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[10] ) )
      continue;
    // closed e.Labels#1 as range 11
    // closed e.Name#1 as range 13
    //DEBUG: e.Labels#1: 11
    //DEBUG: e.Name#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/11 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # NativeFunction/15 </16 & Asciiz/17 Tile{ HalfReuse: '*'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/13 HalfReuse: >/8 AsIs: >/1 } >/18 Tile{ ]] }
    refalrts::alloc_ident(vm, context[15], identifiers[ident_NativeFunction]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Asciiz]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_char(context[7], '*');
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 e.Labels#1/11 (/7 # CmdNativeFuncDescr/9 # GN-Local/10 e.Name#1/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[10] ) )
      continue;
    // closed e.Labels#1 as range 11
    // closed e.Name#1 as range 13
    //DEBUG: e.Labels#1: 11
    //DEBUG: e.Name#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Labels#1/11 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # NativeFunction/15 </16 & Asciiz/17 Tile{ HalfReuse: '#'/7 HalfReuse: </9 HalfReuse: & DisplayName/10 AsIs: e.Name#1/13 HalfReuse: >/8 AsIs: >/1 } >/18 Tile{ ]] }
    refalrts::alloc_ident(vm, context[15], identifiers[ident_NativeFunction]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Asciiz]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_PutBlock]);
    refalrts::reinit_char(context[7], '#');
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[10], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 e.Labels#1/2 (/7 # CmdNativeFuncDescr/9 s.ScopeClass#1/10 e.Name#1/5 )/8 >/1
  // closed e.Labels#1 as range 2
  // closed e.Name#1 as range 5
  //DEBUG: s.ScopeClass#1: 10
  //DEBUG: e.Labels#1: 2
  //DEBUG: e.Name#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.Labels#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 } # NativeFunction/11 Tile{ HalfReuse: </7 HalfReuse: & NameWithSign-Bytes*2/9 AsIs: s.ScopeClass#1/10 AsIs: e.Name#1/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[11], identifiers[ident_NativeFunction]);
  refalrts::update_name(context[4], functions[efunc_PutBlock]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[9], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenCommandm_Globals("GenCommand-Globals", COOKIE1_, COOKIE2_, func_GenCommandm_Globals);


static refalrts::FnResult func_gen_Assemble_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Assemble=3/4 s.RaslLength#3/5 (/8 e.Labels#3/6 )/9 e.RASLAsWords#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Labels#3 as range 6
  // closed e.RASLAsWords#4 as range 2
  //DEBUG: s.RaslLength#3: 5
  //DEBUG: e.Labels#3: 6
  //DEBUG: e.RASLAsWords#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Assemble=3/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.RaslLength#3/5 AsIs: (/8 AsIs: e.Labels#3/6 AsIs: )/9 } Tile{ AsIs: e.RASLAsWords#4/2 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A3("Assemble=3", COOKIE1_, COOKIE2_, func_gen_Assemble_A3);


static refalrts::FnResult func_gen_Assemble_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Assemble=2/4 (/7 s.RaslLength#3/9 e.Labels#3/5 )/8 e.RASLAsWords#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RASLAsWords#3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Labels#3 as range 5
  //DEBUG: e.RASLAsWords#3: 2
  //DEBUG: s.RaslLength#3: 9
  //DEBUG: e.Labels#3: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.RaslLength#3/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Assemble=3/4 HalfReuse: s.RaslLength3 #9/7 } (/10 e.Labels#3/5/11 )/13 </14 & ResolveLabeledDestinations/15 (/16 Tile{ AsIs: e.Labels#3/5 } Tile{ AsIs: )/8 AsIs: e.RASLAsWords#3/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::copy_evar(vm, context[11], context[12], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_ResolveLabeledDestinations]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_Assemble_A3]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[16], context[8] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A2("Assemble=2", COOKIE1_, COOKIE2_, func_gen_Assemble_A2);


static refalrts::FnResult func_gen_Assemble_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Assemble=1/4 e.RASLAsWords#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASLAsWords#2 as range 2
  //DEBUG: e.RASLAsWords#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Assemble=2/6 Tile{ AsIs: </0 Reuse: & CalcLabelsOffsets/4 AsIs: e.RASLAsWords#2/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Assemble_A2]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_CalcLabelsOffsets]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A1("Assemble=1", COOKIE1_, COOKIE2_, func_gen_Assemble_A1);


static refalrts::FnResult func_Assemble(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Assemble/4 e.RASL#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASL#1 as range 2
  //DEBUG: e.RASL#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Assemble=1/6 Tile{ AsIs: </0 Reuse: & Map@7/4 AsIs: e.RASL#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Assemble_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Assemble("Assemble", COOKIE1_, COOKIE2_, func_Assemble);


static refalrts::FnResult func_gen_GenCommandm_RASL_S33L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & GenCommand-RASL$33\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenCommand-RASL$33\1/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GenCommand-RASL$33\1/4 # ARG-BEGIN/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ARGm_BEGIN], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 68/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
    refalrts::alloc_number(vm, context[6], 0UL);
    refalrts::alloc_close_bracket(vm, context[7]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 68UL);
    refalrts::reinit_number(context[5], 0UL);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL$33\1/4 # RIGHT-EDGE/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_RIGHTm_EDGE], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 69/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
    refalrts::alloc_number(vm, context[6], 0UL);
    refalrts::alloc_close_bracket(vm, context[7]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 69UL);
    refalrts::reinit_number(context[5], 0UL);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-RASL$33\1/4 s.Offset#2/5 >/1
  //DEBUG: s.Offset#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3:1/7 70/8 </9 & Divmod/10 0/11 256/12 >/13 </14 & Divmod/15 0/16 256/17 >/18 Tile{ AsIs: </0 Reuse: & Divmod/4 AsIs: s.Offset#2/5 HalfReuse: 256/1 } >/19 >/20 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::alloc_number(vm, context[8], 70UL);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[11], 0UL);
  refalrts::alloc_number(vm, context[12], 256UL);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[16], 0UL);
  refalrts::alloc_number(vm, context[17], 256UL);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_Divmod]);
  refalrts::reinit_number(context[1], 256UL);
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_RASL_S33L1("GenCommand-RASL$33\\1", COOKIE1_, COOKIE2_, func_gen_GenCommandm_RASL_S33L1);


static refalrts::FnResult func_gen_GenCommandm_RASL_S50L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & GenCommand-RASL$50\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenCommand-RASL$50\1/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GenCommand-RASL$50\1/4 # LEFT-EDGE/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_LEFTm_EDGE], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 103/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
    refalrts::alloc_number(vm, context[6], 0UL);
    refalrts::alloc_close_bracket(vm, context[7]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 103UL);
    refalrts::reinit_number(context[5], 0UL);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-RASL$50\1/4 s.Offset#2/5 >/1
  //DEBUG: s.Offset#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3:1/7 104/8 </9 & Divmod/10 0/11 256/12 >/13 </14 & Divmod/15 0/16 256/17 >/18 Tile{ AsIs: </0 Reuse: & Divmod/4 AsIs: s.Offset#2/5 HalfReuse: 256/1 } >/19 >/20 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::alloc_number(vm, context[8], 104UL);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[11], 0UL);
  refalrts::alloc_number(vm, context[12], 256UL);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[16], 0UL);
  refalrts::alloc_number(vm, context[17], 256UL);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_Divmod]);
  refalrts::reinit_number(context[1], 256UL);
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_RASL_S50L1("GenCommand-RASL$50\\1", COOKIE1_, COOKIE2_, func_gen_GenCommandm_RASL_S50L1);


static refalrts::FnResult func_GenCommandm_RASL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & GenCommand-RASL/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & GenCommand-RASL/4 (/7 s.new#1/9 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 5
  do {
    // </0 & GenCommand-RASL/4 (/7 # LABEL/9 s.Label#1/12 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.Label#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenCommand-RASL/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # LABEL/9 AsIs: s.Label#1/12 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 )/8 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdProfileFunction/9 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[9] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[8], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdLoadConstants/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[9] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 1UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 s.new#4/12 e.new#5/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    // closed e.new#5 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 s.new#6/9 s.new#7/12 )/8 >/1
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdIssueMemory/9 s.Memory#1/12 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[9] ) )
          continue;
        //DEBUG: s.Memory#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & PutCommand$3:1/0 HalfReuse: 2/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Memory#1/12 HalfReuse: 256/8 AsIs: >/1 } </14 & Divmod/15 0/16 256/17 >/18 </19 & Divmod/20 0/21 256/22 >/23 >/24 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[16], 0UL);
        refalrts::alloc_number(vm, context[17], 256UL);
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::reinit_name(context[0], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[4], 2UL);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[9], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[14], context[24] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdReserveBacktrackStack/9 s.Depth#1/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[9] ) )
        continue;
      //DEBUG: s.Depth#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & PutCommand$3:1/0 HalfReuse: 3/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Depth#1/12 HalfReuse: 256/8 AsIs: >/1 } </14 & Divmod/15 0/16 256/17 >/18 </19 & Divmod/20 0/21 256/22 >/23 >/24 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 0UL);
      refalrts::alloc_number(vm, context[17], 256UL);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[0], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[4], 3UL);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[14], context[24] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdOnFailGoTo/9 s.Offset#1/12 # Func$_name:/15 e.FuncName#1/13 )/8 >/1
    context[13] = context[10];
    context[14] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_Funck32_namek58_], context[13], context[14] );
    if( ! context[15] )
      continue;
    // closed e.FuncName#1 as range 13
    //DEBUG: s.Offset#1: 12
    //DEBUG: e.FuncName#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenCommand-RASL/4 {REMOVED TILE} # Func$_name:/15 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # CmdOnFailGoTo/9 AsIs: s.Offset#1/12 } Tile{ AsIs: e.FuncName#1/13 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 )/8 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdProfilerStopSentence/9 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[9] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 5/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 5UL);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[8], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdInitB0/9 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[9] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 6/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 6UL);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[8], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdInitB0-Lite/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[9] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 7/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 7UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 s.new#4/12 s.new#5/13 e.new#6/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[10], context[11] ) )
      continue;
    // closed e.new#6 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 s.new#7/9 s.new#8/12 s.new#9/13 s.new#10/16 e.new#11/14 )/8 >/1
      context[14] = context[10];
      context[15] = context[11];
      if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
        continue;
      // closed e.new#11 as range 14
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdChar/9 s.Direction#1/12 s.BracketNumber#1/13 s.Char#1/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[9] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.Char#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketNumber#1/13 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 AsIs: # CmdChar/9 AsIs: s.Direction#1/12 } )/17 0/18 </19 & Ord/20 Tile{ AsIs: s.Char#1/16 } >/21 Tile{ HalfReuse: s.BracketNumber1 #13/8 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_number(vm, context[18], 0UL);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Ord]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[8], context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[7], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[21], context[21] );
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[17], context[20] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdCharSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.Char#1/19 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.SaveOffset#1: 16
        //DEBUG: s.Char#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketNumber#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 AsIs: # CmdCharSave/9 AsIs: s.Direction#1/12 } )/20 Tile{ AsIs: s.SaveOffset#1/16 } </21 & Ord/22 Tile{ AsIs: s.Char#1/19 } >/23 Tile{ HalfReuse: s.BracketNumber1 #13/8 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Ord]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[8], context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[7], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[23], context[23] );
        res = refalrts::splice_evar( res, context[19], context[19] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdNumber/9 s.new#12/12 s.new#13/13 s.new#14/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[9] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNumber/9 # AlgLeft/12 s.BracketNumber#1/13 s.Number#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.Number#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 13/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Number#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 13UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNumber/9 # AlgRight/12 s.BracketNumber#1/13 s.Number#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.Number#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 14/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Number#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 14UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNumber/9 # AlgTerm/12 s.BracketNumber#1/13 s.Number#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.Number#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 15/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Number#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 15UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdNumber/9 s.Direction#1/12 s.BracketNumber#1/13 s.Number#1/16 )/8 >/1
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.Number#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Number#1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.Number1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </17 & NumberFromOpcode*119/18 # CmdNumber/19 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_CmdNumber]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_svar( context[9], context[16] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdNumberSave/9 s.new#12/12 s.new#13/13 s.new#14/16 s.new#15/19 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNumberSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.Number#1/19 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.Number#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 16/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.Number#1/19 HalfReuse: 256/8 AsIs: >/1 } </24 & Divmod/25 Tile{ AsIs: s.BracketNumber#1/13 } 256/26 >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[20], 256UL);
          refalrts::alloc_close_call(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 16UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[19], context[1] );
          res = refalrts::splice_evar( res, context[20], context[23] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNumberSave/9 # AlgRight/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.Number#1/19 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.Number#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 17/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.Number#1/19 HalfReuse: 256/8 AsIs: >/1 } </24 & Divmod/25 Tile{ AsIs: s.BracketNumber#1/13 } 256/26 >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[20], 256UL);
          refalrts::alloc_close_call(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 17UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[19], context[1] );
          res = refalrts::splice_evar( res, context[20], context[23] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdNumberSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.Number#1/19 )/8 >/1
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.SaveOffset#1: 16
        //DEBUG: s.Number#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset#1/16 s.Number#1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset1 #16/7 HalfReuse: s.Number1 #19/9 } Tile{ AsIs: s.BracketNumber#1/13 } </20 & NumberFromOpcode*119/21 # CmdNumberSave/22 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_CmdNumberSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[7], context[16] );
        refalrts::reinit_svar( context[9], context[19] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdName/9 s.new#12/12 s.new#13/13 s.new#14/16 e.new#15/17 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[9] ) )
          continue;
        // closed e.new#15 as range 17
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdName/9 # AlgLeft/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 23/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 23UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdName/9 # AlgRight/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 24/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 24UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdName/9 # AlgTerm/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 25/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 25UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdName/9 s.Direction#1/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
        context[19] = context[17];
        context[20] = context[18];
        // closed e.Name#1 as range 19
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.NameId#1: 16
        //DEBUG: e.Name#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameId#1/16 e.Name#1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NameId1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </21 & NumberFromOpcode*119/22 # CmdName/23 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_CmdName]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_svar( context[9], context[16] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[21], context[23] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdNameSave/9 s.new#12/12 s.new#13/13 s.new#14/16 s.new#15/19 e.new#16/17 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
          continue;
        // closed e.new#16 as range 17
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNameSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
          context[20] = context[17];
          context[21] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          // closed e.Name#1 as range 20
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 26/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/19 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 26UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdNameSave/9 # AlgRight/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
          context[20] = context[17];
          context[21] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          // closed e.Name#1 as range 20
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 27/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/19 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 27UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdNameSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
        context[20] = context[17];
        context[21] = context[18];
        // closed e.Name#1 as range 20
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.SaveOffset#1: 16
        //DEBUG: s.NameId#1: 19
        //DEBUG: e.Name#1: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset1 #16/7 HalfReuse: s.NameId1 #19/9 } Tile{ AsIs: s.BracketNumber#1/13 } </22 & NumberFromOpcode*119/23 # CmdNameSave/24 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_CmdNameSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[7], context[16] );
        refalrts::reinit_svar( context[9], context[19] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdIdent/9 s.new#12/12 s.new#13/13 s.new#14/16 e.new#15/17 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[9] ) )
          continue;
        // closed e.new#15 as range 17
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdIdent/9 # AlgLeft/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 28/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 28UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdIdent/9 # AlgRight/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 29/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 29UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdIdent/9 # AlgTerm/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
          context[19] = context[17];
          context[20] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          // closed e.Name#1 as range 19
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.NameId#1: 16
          //DEBUG: e.Name#1: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 30/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/21 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/16 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 30UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdIdent/9 s.Direction#1/12 s.BracketNumber#1/13 s.NameId#1/16 e.Name#1/19 )/8 >/1
        context[19] = context[17];
        context[20] = context[18];
        // closed e.Name#1 as range 19
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.NameId#1: 16
        //DEBUG: e.Name#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameId#1/16 e.Name#1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NameId1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </21 & NumberFromOpcode*119/22 # CmdIdent/23 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_CmdIdent]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_svar( context[9], context[16] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[21], context[23] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdIdentSave/9 s.new#12/12 s.new#13/13 s.new#14/16 s.new#15/19 e.new#16/17 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
          continue;
        // closed e.new#16 as range 17
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdIdentSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
          context[20] = context[17];
          context[21] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          // closed e.Name#1 as range 20
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 31/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/19 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 31UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdIdentSave/9 # AlgRight/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
          context[20] = context[17];
          context[21] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          // closed e.Name#1 as range 20
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.SaveOffset#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 32/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.SaveOffset#1/16 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.NameId#1/19 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.BracketNumber#1/13 } 256/30 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 32UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdIdentSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 )/8 >/1
        context[20] = context[17];
        context[21] = context[18];
        // closed e.Name#1 as range 20
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.SaveOffset#1: 16
        //DEBUG: s.NameId#1: 19
        //DEBUG: e.Name#1: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset#1/16 s.NameId#1/19 e.Name#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset1 #16/7 HalfReuse: s.NameId1 #19/9 } Tile{ AsIs: s.BracketNumber#1/13 } </22 & NumberFromOpcode*119/23 # CmdIdentSave/24 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_CmdIdentSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[7], context[16] );
        refalrts::reinit_svar( context[9], context[19] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 s.new#12/9 s.new#13/12 s.new#14/13 s.new#15/16 )/8 >/1
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdBrackets/9 s.new#16/12 s.new#17/13 s.new#18/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[9] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdBrackets/9 # AlgLeft/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            //DEBUG: s.Num#1: 13
            //DEBUG: s.NumRanges#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 33/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Num#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[17], 0UL);
            refalrts::alloc_number(vm, context[18], 256UL);
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 33UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[17], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdBrackets/9 # AlgRight/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
              continue;
            //DEBUG: s.Num#1: 13
            //DEBUG: s.NumRanges#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 34/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Num#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[17], 0UL);
            refalrts::alloc_number(vm, context[18], 256UL);
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 34UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[17], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdBrackets/9 # AlgTerm/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
              continue;
            //DEBUG: s.Num#1: 13
            //DEBUG: s.NumRanges#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 35/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Num#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[17], 0UL);
            refalrts::alloc_number(vm, context[18], 256UL);
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 35UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[17], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdBrackets/9 s.Direction#1/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
          //DEBUG: s.Direction#1: 12
          //DEBUG: s.Num#1: 13
          //DEBUG: s.NumRanges#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NumRanges#1/16 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NumRanges1 #16/9 } Tile{ AsIs: s.Num#1/13 } </17 & NumberFromOpcode*119/18 # CmdBrackets/19 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[19], identifiers[ident_CmdBrackets]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_number(context[7], 0UL);
          refalrts::reinit_svar( context[9], context[16] );
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[12], context[12] );
          res = refalrts::splice_evar( res, context[17], context[19] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdBracketsSave/9 s.new#16/12 s.new#17/13 s.new#18/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[9] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdBracketsSave/9 # AlgLeft/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          //DEBUG: s.Num#1: 13
          //DEBUG: s.NumRanges#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 36/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Num#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 36UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdBracketsSave/9 # AlgRight/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          //DEBUG: s.Num#1: 13
          //DEBUG: s.NumRanges#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 37/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.NumRanges#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Num#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 37UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdBracketsSave/9 s.Direction#1/12 s.Num#1/13 s.NumRanges#1/16 )/8 >/1
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.Num#1: 13
        //DEBUG: s.NumRanges#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NumRanges#1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NumRanges1 #16/9 } Tile{ AsIs: s.Num#1/13 } </17 & NumberFromOpcode*119/18 # CmdBracketsSave/19 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_CmdBracketsSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_svar( context[9], context[16] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 s.new#12/9 s.new#13/12 s.new#14/13 s.new#15/16 s.new#16/19 e.new#17/17 )/8 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
          continue;
        // closed e.new#17 as range 17
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdADT/9 s.new#18/12 s.new#19/13 s.new#20/16 s.new#21/19 e.new#22/20 )/8 >/1
          context[20] = context[17];
          context[21] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[9] ) )
            continue;
          // closed e.new#22 as range 20
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdADT/9 # AlgLeft/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
            context[22] = context[20];
            context[23] = context[21];
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            // closed e.Name#1 as range 22
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.InnerBrackets#1: 16
            //DEBUG: s.NameId#1: 19
            //DEBUG: e.Name#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 38/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_open_call(vm, context[30]);
            refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[32], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 38UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[32], context[32] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[28], context[31] );
            res = refalrts::splice_evar( res, context[16], context[16] );
            res = refalrts::splice_evar( res, context[24], context[27] );
            res = refalrts::splice_evar( res, context[19], context[19] );
            refalrts::splice_to_freelist_open( vm, context[12], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdADT/9 # AlgRight/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
            context[22] = context[20];
            context[23] = context[21];
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
              continue;
            // closed e.Name#1 as range 22
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.InnerBrackets#1: 16
            //DEBUG: s.NameId#1: 19
            //DEBUG: e.Name#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 39/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_open_call(vm, context[30]);
            refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[32], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 39UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[32], context[32] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[28], context[31] );
            res = refalrts::splice_evar( res, context[16], context[16] );
            res = refalrts::splice_evar( res, context[24], context[27] );
            res = refalrts::splice_evar( res, context[19], context[19] );
            refalrts::splice_to_freelist_open( vm, context[12], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdADT/9 # AlgTerm/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
            context[22] = context[20];
            context[23] = context[21];
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
              continue;
            // closed e.Name#1 as range 22
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.InnerBrackets#1: 16
            //DEBUG: s.NameId#1: 19
            //DEBUG: e.Name#1: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 40/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_open_call(vm, context[30]);
            refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[32], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 40UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[32], context[32] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[28], context[31] );
            res = refalrts::splice_evar( res, context[16], context[16] );
            res = refalrts::splice_evar( res, context[24], context[27] );
            res = refalrts::splice_evar( res, context[19], context[19] );
            refalrts::splice_to_freelist_open( vm, context[12], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdADT/9 s.Direction#1/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
          context[22] = context[20];
          context[23] = context[21];
          // closed e.Name#1 as range 22
          //DEBUG: s.Direction#1: 12
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.InnerBrackets#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.NameId1 #19/7 HalfReuse: s.InnerBrackets1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </24 & NumberFromOpcode*119/25 # CmdADT/26 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[26], identifiers[ident_CmdADT]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_svar( context[7], context[19] );
          refalrts::reinit_svar( context[9], context[16] );
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[12], context[12] );
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdADTSave/9 s.new#18/12 s.new#19/13 s.new#20/16 s.new#21/19 e.new#22/20 )/8 >/1
        context[20] = context[17];
        context[21] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[9] ) )
          continue;
        // closed e.new#22 as range 20
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdADTSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
          context[22] = context[20];
          context[23] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
            continue;
          // closed e.Name#1 as range 22
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.InnerBrackets#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 41/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 41UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdADTSave/9 # AlgRight/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
          context[22] = context[20];
          context[23] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          // closed e.Name#1 as range 22
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.InnerBrackets#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 42/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 42UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdADTSave/9 # AlgTerm/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
          context[22] = context[20];
          context[23] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          // closed e.Name#1 as range 22
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.InnerBrackets#1: 16
          //DEBUG: s.NameId#1: 19
          //DEBUG: e.Name#1: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name#1/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 43/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.NameId#1/19 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.InnerBrackets#1/16 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber#1/13 } 256/32 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 43UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_evar( res, context[19], context[19] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdADTSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 )/8 >/1
        context[22] = context[20];
        context[23] = context[21];
        // closed e.Name#1 as range 22
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.InnerBrackets#1: 16
        //DEBUG: s.NameId#1: 19
        //DEBUG: e.Name#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerBrackets#1/16 s.NameId#1/19 e.Name#1/22 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.NameId1 #19/7 HalfReuse: s.InnerBrackets1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </24 & NumberFromOpcode*119/25 # CmdADTSave/26 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[26], identifiers[ident_CmdADTSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[7], context[19] );
        refalrts::reinit_svar( context[9], context[16] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdCallSave/9 s.new#12/12 s.new#13/13 s.new#14/16 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdCallSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
          continue;
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.InnerBrackets#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 44/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.InnerBrackets#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
        refalrts::alloc_number(vm, context[17], 0UL);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[24], 256UL);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 44UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[12], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[16], context[1] );
        res = refalrts::splice_evar( res, context[17], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdCallSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.InnerBrackets#1/16 )/8 >/1
      //DEBUG: s.Direction#1: 12
      //DEBUG: s.BracketNumber#1: 13
      //DEBUG: s.InnerBrackets#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerBrackets#1/16 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.InnerBrackets1 #16/9 } Tile{ AsIs: s.BracketNumber#1/13 } </17 & NumberFromOpcode*119/18 # CmdCallSave/19 Tile{ AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_CmdCallSave]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_svar( context[9], context[16] );
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdEmpty/9 s.Direction#1/12 s.Num#1/13 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      //DEBUG: s.Direction#1: 12
      //DEBUG: s.Num#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Direction#1/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/7 HalfReuse: </9 } & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 0/20 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.Num#1/13 HalfReuse: 256/8 AsIs: >/1 } >/25 Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 0UL);
      refalrts::alloc_number(vm, context[21], 256UL);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 45UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[14], context[24] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 s.new#7/9 s.new#8/12 s.new#9/13 e.new#10/14 s.new#11/17 s.new#12/16 )/8 >/1
      context[14] = context[10];
      context[15] = context[11];
      if( ! refalrts::svar_right( context[16], context[14], context[15] ) )
        continue;
      if( ! refalrts::svar_right( context[17], context[14], context[15] ) )
        continue;
      // closed e.new#10 as range 14
      do {
        // </0 & GenCommand-RASL/4 (/7 s.new#13/9 s.new#14/12 s.new#15/13 s.new#17/17 s.new#16/16 )/8 >/1
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 s.new#18/12 s.new#19/13 s.new#21/17 s.new#20/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[9] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 s.new#22/12 s.new#23/13 's'/17 s.new#24/16 )/8 >/1
            if( ! refalrts::char_term( 's', context[17] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 # AlgLeft/12 s.BracketNumber#1/13 's'/17 s.VarNumber#1/16 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
                continue;
              //DEBUG: s.BracketNumber#1: 13
              //DEBUG: s.VarNumber#1: 16

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 47/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
              refalrts::alloc_number(vm, context[18], 0UL);
              refalrts::alloc_number(vm, context[19], 256UL);
              refalrts::alloc_close_call(vm, context[20]);
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[24], 256UL);
              refalrts::alloc_close_call(vm, context[25]);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 47UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[17], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[22] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[20] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[24], context[26] );
              res = refalrts::splice_evar( res, context[13], context[13] );
              res = refalrts::splice_evar( res, context[22], context[23] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 # AlgRight/12 s.BracketNumber#1/13 's'/17 s.VarNumber#1/16 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
                continue;
              //DEBUG: s.BracketNumber#1: 13
              //DEBUG: s.VarNumber#1: 16

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 48/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
              refalrts::alloc_number(vm, context[18], 0UL);
              refalrts::alloc_number(vm, context[19], 256UL);
              refalrts::alloc_close_call(vm, context[20]);
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[24], 256UL);
              refalrts::alloc_close_call(vm, context[25]);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 48UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[17], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[22] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[20] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[24], context[26] );
              res = refalrts::splice_evar( res, context[13], context[13] );
              res = refalrts::splice_evar( res, context[22], context[23] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 # AlgTerm/12 s.BracketNumber#1/13 's'/17 s.VarNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 49/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[18], 0UL);
            refalrts::alloc_number(vm, context[19], 256UL);
            refalrts::alloc_close_call(vm, context[20]);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 49UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[17], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[17], context[1] );
            res = refalrts::splice_evar( res, context[18], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 s.new#22/12 s.new#23/13 't'/17 s.new#24/16 )/8 >/1
            if( ! refalrts::char_term( 't', context[17] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 # AlgLeft/12 s.BracketNumber#1/13 't'/17 s.VarNumber#1/16 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
                continue;
              //DEBUG: s.BracketNumber#1: 13
              //DEBUG: s.VarNumber#1: 16

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 50/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
              refalrts::alloc_number(vm, context[18], 0UL);
              refalrts::alloc_number(vm, context[19], 256UL);
              refalrts::alloc_close_call(vm, context[20]);
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[24], 256UL);
              refalrts::alloc_close_call(vm, context[25]);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 50UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[17], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[22] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[20] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[24], context[26] );
              res = refalrts::splice_evar( res, context[13], context[13] );
              res = refalrts::splice_evar( res, context[22], context[23] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 # AlgRight/12 s.BracketNumber#1/13 't'/17 s.VarNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 51/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[18], 0UL);
            refalrts::alloc_number(vm, context[19], 256UL);
            refalrts::alloc_close_call(vm, context[20]);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 51UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[17], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[17], context[1] );
            res = refalrts::splice_evar( res, context[18], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdVar/9 s.Direction#1/12 s.BracketNumber#1/13 s.Mode#1/17 s.VarNumber#1/16 )/8 >/1
          //DEBUG: s.Direction#1: 12
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.Mode#1: 17
          //DEBUG: s.VarNumber#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode#1/17 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </18 & PutCommand$3=1/19 0/20 Tile{ AsIs: s.VarNumber#1/16 } Tile{ AsIs: s.BracketNumber#1/13 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode1 #17/7 AsIs: # CmdVar/9 AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[18]);
          refalrts::alloc_name(vm, context[19], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::reinit_svar( context[7], context[17] );
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[0], context[12] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[16], context[16] );
          res = refalrts::splice_evar( res, context[18], context[20] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdVarSave/9 s.new#18/12 s.new#19/13 s.new#21/17 s.new#20/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[9] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdVarSave/9 s.new#22/12 s.new#23/13 't'/17 s.new#24/16 )/8 >/1
          if( ! refalrts::char_term( 't', context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdVarSave/9 # AlgLeft/12 s.BracketNumber#1/13 't'/17 s.VarNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 52/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
            refalrts::alloc_number(vm, context[18], 0UL);
            refalrts::alloc_number(vm, context[19], 256UL);
            refalrts::alloc_close_call(vm, context[20]);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 256UL);
            refalrts::alloc_close_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 52UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[17], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[26] );
            res = refalrts::splice_evar( res, context[13], context[13] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            res = refalrts::splice_evar( res, context[17], context[1] );
            res = refalrts::splice_evar( res, context[18], context[21] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdVarSave/9 # AlgRight/12 s.BracketNumber#1/13 't'/17 s.VarNumber#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.VarNumber#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 53/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/18 256/19 >/20 </21 Tile{ HalfReuse: & Divmod/17 AsIs: s.VarNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
          refalrts::alloc_number(vm, context[18], 0UL);
          refalrts::alloc_number(vm, context[19], 256UL);
          refalrts::alloc_close_call(vm, context[20]);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 53UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_name(context[17], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_evar( res, context[13], context[13] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[17], context[1] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdVarSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.Mode#1/17 s.VarNumber#1/16 )/8 >/1
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.Mode#1: 17
        //DEBUG: s.VarNumber#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode#1/17 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </18 & PutCommand$3=1/19 0/20 Tile{ AsIs: s.VarNumber#1/16 } Tile{ AsIs: s.BracketNumber#1/13 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode1 #17/7 AsIs: # CmdVarSave/9 AsIs: s.Direction#1/12 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::alloc_number(vm, context[20], 0UL);
        refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::reinit_svar( context[7], context[17] );
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 s.new#13/12 s.new#14/13 s.new#17/20 s.new#16/17 s.new#15/16 )/8 >/1
        context[18] = context[14];
        context[19] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
          continue;
        if( ! refalrts::empty_seq( context[18], context[19] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 s.new#18/12 s.new#19/13 'e'/20 s.new#21/17 s.new#20/16 )/8 >/1
          if( ! refalrts::char_term( 'e', context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgLeft/12 s.BracketNumber#1/13 'e'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 17
            //DEBUG: s.SampleNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 54/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
            refalrts::alloc_number(vm, context[21], 256UL);
            refalrts::alloc_close_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 54UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::reinit_number(context[20], 256UL);
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[13], context[20] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[21], context[24] );
            res = refalrts::splice_evar( res, context[17], context[17] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgRight/12 s.BracketNumber#1/13 'e'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.VarNumber#1: 17
          //DEBUG: s.SampleNumber#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 55/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[21], 256UL);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 55UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[13], context[20] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[21], context[24] );
          res = refalrts::splice_evar( res, context[17], context[17] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 s.new#18/12 s.new#19/13 's'/20 s.new#21/17 s.new#20/16 )/8 >/1
          if( ! refalrts::char_term( 's', context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgLeft/12 s.BracketNumber#1/13 's'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 17
            //DEBUG: s.SampleNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 56/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
            refalrts::alloc_number(vm, context[21], 256UL);
            refalrts::alloc_close_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 56UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::reinit_number(context[20], 256UL);
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[13], context[20] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[21], context[24] );
            res = refalrts::splice_evar( res, context[17], context[17] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgRight/12 s.BracketNumber#1/13 's'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 17
            //DEBUG: s.SampleNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 57/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
            refalrts::alloc_number(vm, context[21], 256UL);
            refalrts::alloc_close_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 57UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::reinit_number(context[20], 256UL);
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[13], context[20] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[21], context[24] );
            res = refalrts::splice_evar( res, context[17], context[17] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgTerm/12 s.BracketNumber#1/13 's'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.VarNumber#1: 17
          //DEBUG: s.SampleNumber#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 58/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[21], 256UL);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 58UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[13], context[20] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[21], context[24] );
          res = refalrts::splice_evar( res, context[17], context[17] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 s.new#18/12 s.new#19/13 't'/20 s.new#21/17 s.new#20/16 )/8 >/1
          if( ! refalrts::char_term( 't', context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgLeft/12 s.BracketNumber#1/13 't'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 17
            //DEBUG: s.SampleNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 59/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
            refalrts::alloc_number(vm, context[21], 256UL);
            refalrts::alloc_close_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 59UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::reinit_number(context[20], 256UL);
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[13], context[20] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[21], context[24] );
            res = refalrts::splice_evar( res, context[17], context[17] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgRight/12 s.BracketNumber#1/13 't'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
              continue;
            //DEBUG: s.BracketNumber#1: 13
            //DEBUG: s.VarNumber#1: 17
            //DEBUG: s.SampleNumber#1: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 60/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
            refalrts::alloc_number(vm, context[21], 256UL);
            refalrts::alloc_close_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 60UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::reinit_number(context[20], 256UL);
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[22] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[13], context[20] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[16], context[1] );
            res = refalrts::splice_evar( res, context[21], context[24] );
            res = refalrts::splice_evar( res, context[17], context[17] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 # AlgTerm/12 s.BracketNumber#1/13 't'/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[12] ) )
            continue;
          //DEBUG: s.BracketNumber#1: 13
          //DEBUG: s.VarNumber#1: 17
          //DEBUG: s.SampleNumber#1: 16

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 61/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.BracketNumber#1/13 HalfReuse: 256/20 } >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[21], 256UL);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 61UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[13], context[20] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_evar( res, context[21], context[24] );
          res = refalrts::splice_evar( res, context[17], context[17] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdRepeated/9 s.Direction#1/12 s.BracketNumber#1/13 s.Mode#1/20 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
        //DEBUG: s.Direction#1: 12
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.Mode#1: 20
        //DEBUG: s.VarNumber#1: 17
        //DEBUG: s.SampleNumber#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber#1/13 s.Mode#1/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </21 & PutCommand$3=1/22 Tile{ AsIs: s.VarNumber#1/17 AsIs: s.SampleNumber#1/16 HalfReuse: s.BracketNumber1 #13/8 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode1 #20/7 AsIs: # CmdRepeated/9 AsIs: s.Direction#1/12 } >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::reinit_svar( context[8], context[13] );
        refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::reinit_svar( context[7], context[20] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[23] );
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_evar( res, context[17], context[8] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdRepeatedTVarSave/9 s.new#13/12 s.new#14/13 s.new#16/17 s.new#15/16 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedTVarSave], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdRepeatedTVarSave/9 # AlgLeft/12 s.BracketNumber#1/13 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[12] ) )
          continue;
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.VarNumber#1: 17
        //DEBUG: s.SampleNumber#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 62/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[24], 256UL);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 62UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[12], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[16], context[1] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_evar( res, context[17], context[17] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdRepeatedTVarSave/9 # AlgRight/12 s.BracketNumber#1/13 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[12] ) )
          continue;
        //DEBUG: s.BracketNumber#1: 13
        //DEBUG: s.VarNumber#1: 17
        //DEBUG: s.SampleNumber#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 63/7 HalfReuse: </9 HalfReuse: & Divmod/12 } Tile{ AsIs: s.VarNumber#1/17 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.SampleNumber#1/16 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.BracketNumber#1/13 } 256/24 >/25 >/26 Tile{ ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[24], 256UL);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 63UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[12], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[13], context[13] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[16], context[1] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_evar( res, context[17], context[17] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdRepeatedTVarSave/9 s.Direction#1/12 s.BracketNumber#1/13 s.VarNumber#1/17 s.SampleNumber#1/16 )/8 >/1
      //DEBUG: s.Direction#1: 12
      //DEBUG: s.BracketNumber#1: 13
      //DEBUG: s.VarNumber#1: 17
      //DEBUG: s.SampleNumber#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber#1/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </18 & PutCommand$3=1/19 Tile{ AsIs: s.VarNumber#1/17 AsIs: s.SampleNumber#1/16 HalfReuse: s.BracketNumber1 #13/8 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: 't'/7 Reuse: # CmdRepeatedSave/9 AsIs: s.Direction#1/12 } >/20 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_PutCommand_S3A1]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::reinit_svar( context[8], context[13] );
      refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::reinit_char(context[7], 't');
      refalrts::update_ident(context[9], identifiers[ident_CmdRepeatedSave]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[20] );
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_evar( res, context[17], context[8] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 s.new#7/9 s.new#8/12 s.new#9/13 )/8 >/1
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdEPrepare/9 s.BracketNumber#1/12 s.VarNumber#1/13 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[9] ) )
        continue;
      //DEBUG: s.BracketNumber#1: 12
      //DEBUG: s.VarNumber#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/7 HalfReuse: </9 } & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.VarNumber#1/13 HalfReuse: 256/8 AsIs: >/1 } </20 & Divmod/21 Tile{ AsIs: s.BracketNumber#1/12 } 256/22 >/23 >/24 Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 64UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdEStart/9 s.BracketNumber#1/12 s.VarNumber#1/13 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[9] ) )
        continue;
      //DEBUG: s.BracketNumber#1: 12
      //DEBUG: s.VarNumber#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/7 HalfReuse: </9 } & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.VarNumber#1/13 HalfReuse: 256/8 AsIs: >/1 } </20 & Divmod/21 Tile{ AsIs: s.BracketNumber#1/12 } 256/22 >/23 >/24 Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 65UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdSave/9 s.OldBracketNumber#1/12 s.NewBracketNumber#1/13 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[9] ) )
        continue;
      //DEBUG: s.OldBracketNumber#1: 12
      //DEBUG: s.NewBracketNumber#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/7 HalfReuse: </9 } & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.NewBracketNumber#1/13 HalfReuse: 256/8 AsIs: >/1 } </20 & Divmod/21 Tile{ AsIs: s.OldBracketNumber#1/12 } 256/22 >/23 >/24 Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 66UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdVariableDebugTable/9 s.StringId#1/12 s.Offset#1/13 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugTable], context[9] ) )
      continue;
    //DEBUG: s.StringId#1: 12
    //DEBUG: s.Offset#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/7 HalfReuse: </9 } & Divmod/14 Tile{ AsIs: s.StringId#1/12 } 256/15 >/16 </17 & Divmod/18 0/19 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.Offset#1/13 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 0UL);
    refalrts::alloc_number(vm, context[20], 256UL);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 112UL);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[15], context[23] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdResetAllocator/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & PutCommand$3:1/11 67/12 </13 & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 0/20 256/21 >/22 Tile{ AsIs: </0 Reuse: & Divmod/4 HalfReuse: 0/7 HalfReuse: 256/9 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[12], 67UL);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_number(vm, context[16], 256UL);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[20], 0UL);
    refalrts::alloc_number(vm, context[21], 256UL);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_Divmod]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 256UL);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 s.new#4/12 e.new#5/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    // closed e.new#5 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdSetRes/9 s.new#6/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdSetRes/9 # ARG-BEGIN/12 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_ARGm_BEGIN], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 68/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/12 AsIs: )/8 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 68UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[12], 0UL);
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdSetRes/9 # RIGHT-EDGE/12 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_RIGHTm_EDGE], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 69/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/12 AsIs: )/8 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 69UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[12], 0UL);
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdSetRes/9 s.Offset#1/12 )/8 >/1
      //DEBUG: s.Offset#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 70/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Offset#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[15], 70UL);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_number(context[0], 256UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 s.new#6/9 s.new#7/12 s.new#8/15 e.new#9/13 )/8 >/1
      context[13] = context[10];
      context[14] = context[11];
      if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
        continue;
      // closed e.new#9 as range 13
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdCopyVar/9 s.new#10/12 s.new#11/15 s.new#12/18 )/8 >/1
        context[16] = context[13];
        context[17] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyVar], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCopyVar/9 'e'/12 s.Target#1/15 s.Sample#1/18 )/8 >/1
          if( ! refalrts::char_term( 'e', context[12] ) )
            continue;
          //DEBUG: s.Target#1: 15
          //DEBUG: s.Sample#1: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.Target#1/15 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Sample#1/18 HalfReuse: 256/8 AsIs: >/1 } </23 & Divmod/24 0/25 256/26 >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[19], 256UL);
          refalrts::alloc_close_call(vm, context[20]);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[7], 71UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[12], functions[efunc_Divmod]);
          refalrts::reinit_number(context[8], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[23], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdCopyVar/9 s.Mode#1/12 s.Target#1/15 s.Sample#1/18 )/8 >/1
        //DEBUG: s.Mode#1: 12
        //DEBUG: s.Target#1: 15
        //DEBUG: s.Sample#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Mode#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/7 HalfReuse: </9 } & Divmod/19 Tile{ AsIs: s.Target#1/15 } 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.Sample#1/18 HalfReuse: 256/8 AsIs: >/1 } </24 & Divmod/25 0/26 256/27 >/28 >/29 Tile{ ]] }
        refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[20], 256UL);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 0UL);
        refalrts::alloc_number(vm, context[27], 256UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 72UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[29] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[20], context[23] );
        res = refalrts::splice_evar( res, context[15], context[15] );
        res = refalrts::splice_evar( res, context[19], context[19] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdReinitSVar/9 s.Offset#1/12 s.Sample#1/15 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[9] ) )
          continue;
        if( ! refalrts::empty_seq( context[13], context[14] ) )
          continue;
        //DEBUG: s.Offset#1: 12
        //DEBUG: s.Sample#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/7 HalfReuse: </9 } & Divmod/16 0/17 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Sample#1/15 HalfReuse: 256/8 AsIs: >/1 } </22 & Divmod/23 Tile{ AsIs: s.Offset#1/12 } 256/24 >/25 >/26 Tile{ ]] }
        refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[17], 0UL);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[24], 256UL);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 73UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_evar( res, context[12], context[12] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[16], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#10/12 s.new#11/15 s.new#12/18 e.new#13/16 )/8 >/1
        context[16] = context[13];
        context[17] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_CmdCreateElem], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
          continue;
        // closed e.new#13 as range 16
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElOpenBracket/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElOpenBracket/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElOpenBracket/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 1/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 1UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElOpenBracket/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 1/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 1UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenBracket/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 1/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 1UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenBracket/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElOpenBracket/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElOpenADT/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElOpenADT/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElOpenADT/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 0/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 0UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElOpenADT/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 0/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 0UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenADT/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 0/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 0UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenADT/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElOpenADT/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElOpenCall/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElOpenCall/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElOpenCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 2/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 2UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElOpenCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 2/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 2UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenCall/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 2/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 2UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenCall/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElOpenCall/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElCloseBracket/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElCloseBracket/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElCloseBracket/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 4/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 4UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElCloseBracket/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 4/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 4UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseBracket/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 4/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 4UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseBracket/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElCloseBracket/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElCloseADT/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElCloseADT/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElCloseADT/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 3/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 3UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElCloseADT/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 3/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 3UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseADT/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 3/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 3UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseADT/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElCloseADT/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElCloseCall/18 e.new#16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
            continue;
          // closed e.new#16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#17/12 s.new#18/15 # ElCloseCall/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElCloseCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 5/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 5UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElCloseCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 </24 & Divmod/25 0/26 256/27 >/28 </29 & Divmod/30 Tile{ HalfReuse: 5/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
              refalrts::reinit_number(context[0], 5UL);
              refalrts::reinit_number(context[4], 256UL);
              refalrts::reinit_close_call(context[7]);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[7] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[30] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseCall/18 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 5/9 } Tile{ AsIs: s.ElemNumber#1/15 } </21 & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 5UL);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseCall/18 e.Info#1/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info#1 as range 21
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: e.Info#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElCloseCall/18 AsIs: e.Info#1/21 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 s.new#16/18 s.new#17/21 e.new#18/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
            continue;
          // closed e.new#18 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElChar/18 s.Char#1/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
              continue;
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.Char#1: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } # ElChar/22 )/23 0/24 </25 Tile{ HalfReuse: & Ord/18 AsIs: s.Char#1/21 } >/26 Tile{ HalfReuse: s.ElemNumber1 #15/8 AsIs: >/1 ]] }
            refalrts::alloc_ident(vm, context[22], identifiers[ident_ElChar]);
            refalrts::alloc_close_bracket(vm, context[23]);
            refalrts::alloc_number(vm, context[24], 0UL);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_PutCommand]);
            refalrts::reinit_svar( context[9], context[12] );
            refalrts::reinit_name(context[18], functions[efunc_Ord]);
            refalrts::reinit_svar( context[8], context[15] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[7], context[23] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[26], context[26] );
            res = refalrts::splice_evar( res, context[18], context[21] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#19/12 s.new#20/15 # ElName/18 s.new#21/21 e.new#22/22 )/8 >/1
            context[22] = context[19];
            context[23] = context[20];
            if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
              continue;
            // closed e.new#22 as range 22
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElName/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 75/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 75UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElName/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 82/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 82UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber#1/15 # ElName/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 90/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 90UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElName/18 s.NameId#1/21 e.#0/24 )/8 >/1
            context[24] = context[22];
            context[25] = context[23];
            // closed e.#0 as range 24
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.NameId#1: 21
            //DEBUG: e.#0: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameId#1/21 e.#0/24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NameId1 #21/9 } Tile{ AsIs: s.ElemNumber#1/15 HalfReuse: </18 } & NumberFromOpcode*119/26 Tile{ AsIs: s.CreateMode#1/12 } # ElName/27 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[26], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::alloc_ident(vm, context[27], identifiers[ident_ElName]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_svar( context[9], context[21] );
            refalrts::reinit_open_call(context[18]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[27], context[27] );
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[26], context[26] );
            res = refalrts::splice_evar( res, context[15], context[18] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#19/12 s.new#20/15 # ElNumber/18 s.new#21/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
              continue;
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElNumber/18 s.Number#1/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.Number#1: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 76/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[22], 0UL);
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_open_call(vm, context[26]);
              refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[28], 256UL);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 76UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[28], context[30] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[26], context[27] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[25] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElNumber/18 s.Number#1/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.Number#1: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 83/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[22], 0UL);
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_open_call(vm, context[26]);
              refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[28], 256UL);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 83UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[28], context[30] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[26], context[27] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[25] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber#1/15 # ElNumber/18 s.Number#1/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.Number#1: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 91/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[22], 0UL);
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_open_call(vm, context[26]);
              refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[28], 256UL);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 91UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[28], context[30] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[26], context[27] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[25] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElNumber/18 s.Number#1/21 )/8 >/1
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.Number#1: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Number#1/21 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.Number1 #21/9 } Tile{ AsIs: s.ElemNumber#1/15 HalfReuse: </18 } & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } # ElNumber/23 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::alloc_ident(vm, context[23], identifiers[ident_ElNumber]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_svar( context[9], context[21] );
            refalrts::reinit_open_call(context[18]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[23], context[23] );
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[22], context[22] );
            res = refalrts::splice_evar( res, context[15], context[18] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#19/12 s.new#20/15 # ElIdent/18 s.new#21/21 e.new#22/22 )/8 >/1
            context[22] = context[19];
            context[23] = context[20];
            if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
              continue;
            // closed e.new#22 as range 22
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElIdent/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 78/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 78UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElIdent/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 85/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 85UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber#1/15 # ElIdent/18 s.NameId#1/21 e.#0/24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              // closed e.#0 as range 24
              //DEBUG: s.ElemNumber#1: 15
              //DEBUG: s.NameId#1: 21
              //DEBUG: e.#0: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.#0/24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 93/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/26 256/27 >/28 </29 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId#1/21 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.ElemNumber#1/15 } 256/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_number(vm, context[26], 0UL);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_open_call(vm, context[29]);
              refalrts::alloc_number(vm, context[30], 256UL);
              refalrts::alloc_close_call(vm, context[31]);
              refalrts::alloc_open_call(vm, context[32]);
              refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[34], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 93UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[9] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_evar( res, context[34], context[34] );
              res = refalrts::splice_evar( res, context[15], context[15] );
              res = refalrts::splice_evar( res, context[30], context[33] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[29] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElIdent/18 s.NameId#1/21 e.#0/24 )/8 >/1
            context[24] = context[22];
            context[25] = context[23];
            // closed e.#0 as range 24
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.NameId#1: 21
            //DEBUG: e.#0: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameId#1/21 e.#0/24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.NameId1 #21/9 } Tile{ AsIs: s.ElemNumber#1/15 HalfReuse: </18 } & NumberFromOpcode*119/26 Tile{ AsIs: s.CreateMode#1/12 } # ElIdent/27 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[26], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::alloc_ident(vm, context[27], identifiers[ident_ElIdent]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_svar( context[9], context[21] );
            refalrts::reinit_open_call(context[18]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_evar( res, context[27], context[27] );
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[26], context[26] );
            res = refalrts::splice_evar( res, context[15], context[18] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#19/12 s.new#20/15 # ElString/18 s.new#21/21 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElString], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElString/18 s.StringId#1/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.StringId#1: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 80/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.StringId#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[22], 0UL);
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 80UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[28], context[30] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElString/18 s.StringId#1/21 )/8 >/1
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: s.StringId#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.StringId#1/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.StringId1 #21/9 } Tile{ AsIs: s.ElemNumber#1/15 HalfReuse: </18 } & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } # ElString/23 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElString]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_number(context[7], 0UL);
          refalrts::reinit_svar( context[9], context[21] );
          refalrts::reinit_open_call(context[18]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[23], context[23] );
          res = refalrts::splice_evar( res, context[12], context[12] );
          res = refalrts::splice_evar( res, context[22], context[22] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElClosureHead/18 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElClosureHead/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </19 & PutCommand$3:1/20 113/21 </22 & Divmod/23 0/24 256/25 >/26 </27 & Divmod/28 Tile{ HalfReuse: 0/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::alloc_number(vm, context[21], 113UL);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 0UL);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_open_call(vm, context[27]);
            refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
            refalrts::reinit_number(context[0], 0UL);
            refalrts::reinit_number(context[4], 256UL);
            refalrts::reinit_close_call(context[7]);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::push_stack( vm, context[7] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[0];
            res = refalrts::splice_evar( res, context[19], context[28] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElClosureHead/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </19 & PutCommand$3:1/20 87/21 </22 & Divmod/23 0/24 256/25 >/26 </27 & Divmod/28 Tile{ HalfReuse: 0/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber#1/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::alloc_number(vm, context[21], 87UL);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[24], 0UL);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_open_call(vm, context[27]);
            refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
            refalrts::reinit_number(context[0], 0UL);
            refalrts::reinit_number(context[4], 256UL);
            refalrts::reinit_close_call(context[7]);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::push_stack( vm, context[7] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[0];
            res = refalrts::splice_evar( res, context[19], context[28] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElClosureHead/18 )/8 >/1
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 0/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElClosureHead/18 HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_number(context[7], 0UL);
          refalrts::reinit_number(context[9], 0UL);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_evar( res, context[12], context[12] );
          res = refalrts::splice_evar( res, context[19], context[20] );
          res = refalrts::splice_evar( res, context[15], context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 # ElUnwrappedClosure/18 s.new#16/21 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
            continue;
          if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber#1/15 # ElUnwrappedClosure/18 s.HeadCounter#1/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.HeadCounter#1: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 114/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.HeadCounter#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[22], 0UL);
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 114UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[28], context[30] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber#1/15 # ElUnwrappedClosure/18 s.HeadCounter#1/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber#1: 15
            //DEBUG: s.HeadCounter#1: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 88/7 HalfReuse: </9 HalfReuse: & Divmod/12 } 0/22 256/23 >/24 </25 Tile{ HalfReuse: & Divmod/18 AsIs: s.HeadCounter#1/21 HalfReuse: 256/8 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.ElemNumber#1/15 } 256/28 >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[22], 0UL);
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[28], 256UL);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 88UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[28], context[30] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElUnwrappedClosure/18 s.HeadCounter#1/21 )/8 >/1
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: s.HeadCounter#1: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.HeadCounter#1/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: s.HeadCounter1 #21/9 } Tile{ AsIs: s.ElemNumber#1/15 HalfReuse: </18 } & NumberFromOpcode*119/22 Tile{ AsIs: s.CreateMode#1/12 } # ElUnwrappedClosure/23 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[22], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElUnwrappedClosure]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_number(context[7], 0UL);
          refalrts::reinit_svar( context[9], context[21] );
          refalrts::reinit_open_call(context[18]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[23], context[23] );
          res = refalrts::splice_evar( res, context[12], context[12] );
          res = refalrts::splice_evar( res, context[22], context[22] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new#14/12 s.new#15/15 s.new#16/18 )/8 >/1
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenADT/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 0/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElOpenADT/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 0UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenBracket/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 1/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElOpenBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 1UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElOpenCall/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 2/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElOpenCall/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 2UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseADT/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 3/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElCloseADT/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 3UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseBracket/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 4/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElCloseBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 4UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 # ElCloseCall/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
              continue;
            //DEBUG: s.CreateMode#1: 12
            //DEBUG: s.ElemNumber#1: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: 0/7 HalfReuse: 5/9 } Tile{ AsIs: s.ElemNumber#1/15 } </19 & NumberFromOpcode*119/20 Tile{ AsIs: s.CreateMode#1/12 } Tile{ AsIs: # ElCloseCall/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_number(context[9], 5UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_evar( res, context[12], context[12] );
            res = refalrts::splice_evar( res, context[19], context[20] );
            res = refalrts::splice_evar( res, context[15], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 s.ElementType#1/18 )/8 >/1
          //DEBUG: s.CreateMode#1: 12
          //DEBUG: s.ElemNumber#1: 15
          //DEBUG: s.ElementType#1: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } Tile{ AsIs: s.ElementType#1/18 AsIs: )/8 HalfReuse: 0/1 } </19 & NumberFromBracket*6/20 s.ElementType#1/18/21 >/22 Tile{ AsIs: s.ElemNumber#1/15 } >/23 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromBracket_D6]);
          refalrts::copy_stvar(vm, context[21], context[18]);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_number(context[1], 0UL);
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[23], context[23] );
          res = refalrts::splice_evar( res, context[15], context[15] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode#1/12 s.ElemNumber#1/15 s.ElementType#1/18 e.Info#1/19 )/8 >/1
        context[19] = context[16];
        context[20] = context[17];
        // closed e.Info#1 as range 19
        //DEBUG: s.CreateMode#1: 12
        //DEBUG: s.ElemNumber#1: 15
        //DEBUG: s.ElementType#1: 18
        //DEBUG: e.Info#1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.CreateMode#1/12 s.ElemNumber#1/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode1 #12/9 } s.ElementType#1/18/21 )/22 0/23 </24 & CreateCommandInfo*8/25 Tile{ AsIs: s.ElementType#1/18 AsIs: e.Info#1/19 HalfReuse: >/8 HalfReuse: s.ElemNumber1 #15/1 } >/26 Tile{ ]] }
        refalrts::copy_stvar(vm, context[21], context[18]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_number(vm, context[23], 0UL);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_CreateCommandInfo_D8]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[9], context[12] );
        refalrts::reinit_close_call(context[8]);
        refalrts::reinit_svar( context[1], context[15] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[26] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[21], context[25] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdLinkBrackets/9 s.Left#1/12 s.Right#1/15 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: s.Left#1: 12
      //DEBUG: s.Right#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/7 HalfReuse: </9 } & Divmod/16 Tile{ AsIs: s.Left#1/12 } 256/17 >/18 </19 & Divmod/20 Tile{ AsIs: s.Right#1/15 HalfReuse: 256/8 AsIs: >/1 } </21 & Divmod/22 0/23 256/24 >/25 >/26 Tile{ ]] }
      refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[17], 256UL);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_number(vm, context[24], 256UL);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 94UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[21], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[12], context[12] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdPushStack/9 s.ElemNumber#1/12 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.ElemNumber#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 95/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[15], 95UL);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 0UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_number(context[0], 256UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_Divmod]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[13], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdPushState/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & PutCommand$3:1/11 116/12 </13 & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 0/20 256/21 >/22 Tile{ AsIs: </0 Reuse: & Divmod/4 HalfReuse: 0/7 HalfReuse: 256/9 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[12], 116UL);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_number(vm, context[16], 256UL);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[20], 0UL);
    refalrts::alloc_number(vm, context[21], 256UL);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_Divmod]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 256UL);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new#3/9 e.new#4/10 s.new#5/12 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_right( context[12], context[10], context[11] ) )
      continue;
    // closed e.new#4 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 s.new#6/9 s.new#7/12 )/8 >/1
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdWrapClosure/9 s.Offset#1/12 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[9] ) )
          continue;
        //DEBUG: s.Offset#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 110/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Offset#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[15], 110UL);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 0UL);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 0UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::reinit_number(context[0], 256UL);
        refalrts::reinit_close_call(context[4]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[9], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[24] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdInsertElem/9 s.ElemNumber#1/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertElem], context[9] ) )
        continue;
      //DEBUG: s.ElemNumber#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 96/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[15], 96UL);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_number(context[0], 256UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 s.new#7/15 s.new#6/12 )/8 >/1
      context[13] = context[10];
      context[14] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertVar], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 'e'/15 s.Offset#1/12 )/8 >/1
        if( ! refalrts::char_term( 'e', context[15] ) )
          continue;
        //DEBUG: s.Offset#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </16 & PutCommand$3:1/17 97/18 </19 & Divmod/20 0/21 256/22 >/23 </24 & Divmod/25 Tile{ HalfReuse: 0/0 HalfReuse: 256/4 HalfReuse: >/7 HalfReuse: </9 HalfReuse: & Divmod/15 AsIs: s.Offset#1/12 HalfReuse: 256/8 AsIs: >/1 } >/26 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[18], 97UL);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::reinit_number(context[0], 0UL);
        refalrts::reinit_number(context[4], 256UL);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[15], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[9] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[26] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[16], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 s.Mode#1/15 s.Offset#1/12 )/8 >/1
      //DEBUG: s.Mode#1: 15
      //DEBUG: s.Offset#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/7 HalfReuse: </9 } & Divmod/16 0/17 256/18 >/19 </20 & Divmod/21 0/22 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.Offset#1/12 HalfReuse: 256/8 AsIs: >/1 } >/27 Tile{ ]] }
      refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[17], 0UL);
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 98UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[27] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      res = refalrts::splice_evar( res, context[16], context[26] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdInsertRange/9 s.ElemNumber#1/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertRange], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      //DEBUG: s.ElemNumber#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 99/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[15], 99UL);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_number(context[0], 256UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdInsertTile/9 s.BeginOffset#1/15 s.EndOffset#1/12 )/8 >/1
    context[13] = context[10];
    context[14] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_CmdInsertTile], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: s.EndOffset#1: 12
    //DEBUG: s.BeginOffset#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/7 HalfReuse: </9 } & Divmod/16 Tile{ AsIs: s.BeginOffset#1/15 } 256/17 >/18 </19 & Divmod/20 Tile{ AsIs: s.EndOffset#1/12 HalfReuse: 256/8 AsIs: >/1 } </21 & Divmod/22 0/23 256/24 >/25 >/26 Tile{ ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[17], 256UL);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 0UL);
    refalrts::alloc_number(vm, context[24], 256UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 100UL);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[26] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[15], context[15] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdSpliceToFreeList/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & PutCommand$3:1/11 101/12 </13 & Divmod/14 0/15 256/16 >/17 </18 & Divmod/19 0/20 256/21 >/22 Tile{ AsIs: </0 Reuse: & Divmod/4 HalfReuse: 0/7 HalfReuse: 256/9 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[12], 101UL);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_number(vm, context[16], 256UL);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[20], 0UL);
    refalrts::alloc_number(vm, context[21], 256UL);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_Divmod]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 256UL);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdSpliceToFreeList-Range/9 s.Start#1/12 s.End#1/13 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.Start#1: 12
    //DEBUG: s.End#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/7 HalfReuse: </9 } & Divmod/14 Tile{ AsIs: s.Start#1/12 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.End#1/13 HalfReuse: 256/8 AsIs: >/1 } </19 & Divmod/20 0/21 256/22 >/23 >/24 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[21], 0UL);
    refalrts::alloc_number(vm, context[22], 256UL);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 115UL);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[24] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[14], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdNextStep/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 102/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 102UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 s.new#3/12 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 # LEFT-EDGE/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_LEFTm_EDGE], context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 103/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/12 AsIs: )/8 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 103UL);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[12], 0UL);
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 s.Offset#1/12 )/8 >/1
    //DEBUG: s.Offset#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 104/15 </16 & Divmod/17 0/18 256/19 >/20 </21 & Divmod/22 0/23 Tile{ HalfReuse: 256/0 HalfReuse: >/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Offset#1/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[15], 104UL);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 0UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_number(context[0], 256UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_Divmod]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[24] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[13], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-RASL/4 (/7 # CmdFail/9 )/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 105/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_number(context[4], 105UL);
  refalrts::reinit_number(context[7], 0UL);
  refalrts::reinit_number(context[9], 0UL);
  refalrts::reinit_number(context[8], 0UL);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenCommandm_RASL("GenCommand-RASL", COOKIE1_, COOKIE2_, func_GenCommandm_RASL);


static refalrts::FnResult func_gen_PutCommand_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & PutCommand$3:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & PutCommand$3:1/4 s.new#1/5 (/8 s.new#2/10 )/9 s.new#3/11 (/14 s.new#4/16 )/15 s.new#5/17 (/20 s.new#6/22 )/21 s.new#7/23 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[18], context[19] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PutCommand$3:1/4 s.OpCode#2/5 (/8 0/10 )/9 s.LoArg1#3/11 (/14 0/16 )/15 s.LoArg2#3/17 (/20 0/22 )/21 s.LoArg3#3/23 >/1
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[16] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[22] ) )
      continue;
    //DEBUG: s.OpCode#2: 5
    //DEBUG: s.LoArg1#3: 11
    //DEBUG: s.LoArg2#3: 17
    //DEBUG: s.LoArg3#3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & PutCommand$3:1/4 s.OpCode#2/5 (/8 0/10 )/9 s.LoArg1#3/11 (/14 0/16 )/15 s.LoArg2#3/17 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: s.OpCode2 #5/20 HalfReuse: s.LoArg13 #11/22 HalfReuse: s.LoArg23 #17/21 AsIs: s.LoArg3#3/23 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[20], context[5] );
    refalrts::reinit_svar( context[22], context[11] );
    refalrts::reinit_svar( context[21], context[17] );
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3:1/4 s.OpCode#2/5 (/8 s.HiArg1#3/10 )/9 s.LoArg1#3/11 (/14 s.HiArg2#3/16 )/15 s.LoArg2#3/17 (/20 s.HiArg3#3/22 )/21 s.LoArg3#3/23 >/1
  //DEBUG: s.OpCode#2: 5
  //DEBUG: s.HiArg1#3: 10
  //DEBUG: s.LoArg1#3: 11
  //DEBUG: s.HiArg2#3: 16
  //DEBUG: s.LoArg2#3: 17
  //DEBUG: s.HiArg3#3: 22
  //DEBUG: s.LoArg3#3: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LoArg2#3/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & PutCommand$3:1/4 } 111/24 </25 Tile{ HalfReuse: & Divmod/8 AsIs: s.HiArg1#3/10 HalfReuse: 256/9 } >/26 </27 Tile{ HalfReuse: & Divmod/14 AsIs: s.HiArg2#3/16 HalfReuse: 256/15 } >/28 </29 Tile{ HalfReuse: & Divmod/20 AsIs: s.HiArg3#3/22 } 256/30 >/31 >/32 (/33 Tile{ AsIs: s.OpCode#2/5 } Tile{ AsIs: s.LoArg1#3/11 } Tile{ HalfReuse: s.LoArg23 #17/21 AsIs: s.LoArg3#3/23 HalfReuse: )/1 ]] }
  refalrts::alloc_number(vm, context[24], 111UL);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_number(vm, context[30], 256UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::reinit_name(context[8], functions[efunc_Divmod]);
  refalrts::reinit_number(context[9], 256UL);
  refalrts::reinit_name(context[14], functions[efunc_Divmod]);
  refalrts::reinit_number(context[15], 256UL);
  refalrts::reinit_name(context[20], functions[efunc_Divmod]);
  refalrts::reinit_svar( context[21], context[17] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[33], context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3B1("PutCommand$3:1", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3B1);


static refalrts::FnResult func_gen_PutCommand_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1/4 s.Arg1#1/5 s.Arg2#1/6 s.Arg3#1/7 s.OpCode#2/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Arg1#1: 5
  //DEBUG: s.Arg2#1: 6
  //DEBUG: s.Arg3#1: 7
  //DEBUG: s.OpCode#2: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode#2/8 } </9 & Divmod/10 Tile{ AsIs: s.Arg1#1/5 } 256/11 >/12 </13 & Divmod/14 Tile{ AsIs: s.Arg2#1/6 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg3#1/7 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[11], 256UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[15], 256UL);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[19], 256UL);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1("PutCommand$3=1", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1);


static refalrts::FnResult func_PutCommand(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & PutCommand/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & PutCommand/4 e.new#1/2 s.new#2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 2
  do {
    // </0 & PutCommand/4 s.new#3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & PutCommand/4 # CmdProfileFunction/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdLoadConstants/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdIssueMemory/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 2/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 2UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdReserveBacktrackStack/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 3/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 3UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdOnFailGoTo/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 4/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 4UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdProfilerStopSentence/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 5/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 5UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdInitB0/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 6/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 6UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdInitB0-Lite/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 7/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 7UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEmpty/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 45/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 45UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdNotEmpty/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 46/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 46UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEPrepare/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 64/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 64UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEStart/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 65/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 65UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSave/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 66/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 66UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdResetAllocator/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 67/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 67UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetResArgBegin/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 68/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 68UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetResRightEdge/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 69/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 69UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetRes/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 70/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 70UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdCopyEVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 71/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 71UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdCopySTVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 72/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 72UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdReinitSVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 73/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 73UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdLinkBrackets/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 94/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 94UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPushStack/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 95/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 95UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdWrapClosure/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 110/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 110UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceElem/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 96/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 96UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceEVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 97/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 97UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceSTVar/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 98/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 98UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceRange/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 99/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 99UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceTile/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 100/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 100UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceToFreeList/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 101/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 101UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdNextStep/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 102/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 102UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdTrashLeftEdge/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 103/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 103UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdTrash/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 104/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 104UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFail/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 105/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 105UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFetchSwapHead/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 106/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 106UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFetchSwapInfoBounds/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 107/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 107UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSwapSave/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 108/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 108UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPerformNative/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 109/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 109UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdScale/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 111/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 111UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdVariableDebugOffset/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 112/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 112UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceToFreeList-Range/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 115/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 115UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPushState/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 116/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 116UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPopState/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 117/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 117UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdMainLoopReturnSuccess/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 118/4 HalfReuse: 0/5 HalfReuse: 0/1 } 0/6 )/7 Tile{ ]] }
      refalrts::alloc_number(vm, context[6], 0UL);
      refalrts::alloc_close_bracket(vm, context[7]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 118UL);
      refalrts::reinit_number(context[5], 0UL);
      refalrts::reinit_number(context[1], 0UL);
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 s.Symbolic#1/5 >/1
    //DEBUG: s.Symbolic#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/6 Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 AsIs: s.Symbolic#1/5 AsIs: >/1 } 0/7 0/8 0/9 )/10 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[6]);
    refalrts::alloc_number(vm, context[7], 0UL);
    refalrts::alloc_number(vm, context[8], 0UL);
    refalrts::alloc_number(vm, context[9], 0UL);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
    refalrts::link_brackets( context[6], context[10] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand/4 t.new#4/6 s.new#5/8 s.new#6/9 s.new#3/5 >/1
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PutCommand/4 s.new#8/6 s.new#9/8 s.new#10/9 s.new#7/5 >/1
    if( ! refalrts::svar_term( context[6], context[6] ) )
      continue;
    do {
      // </0 & PutCommand/4 # CmdProfileFunction/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 0/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 0UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdLoadConstants/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 1/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdIssueMemory/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 2/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdReserveBacktrackStack/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 3/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 3UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdOnFailGoTo/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 4UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdProfilerStopSentence/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 5/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 5UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdInitB0/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 6/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 6UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdInitB0-Lite/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 7/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 7UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEmpty/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 45UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdNotEmpty/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 46/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 46UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEPrepare/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 64UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdEStart/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 65UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSave/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 66UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdResetAllocator/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 67/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 67UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetResArgBegin/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 68/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 68UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetResRightEdge/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 69/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 69UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSetRes/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 70/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 70UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdCopyEVar/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 71UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdCopySTVar/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 72UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdReinitSVar/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 73UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdLinkBrackets/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 94UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPushStack/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 95/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 95UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdWrapClosure/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 110/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 110UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceElem/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 96/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 96UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceEVar/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 97/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 97UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceSTVar/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 98UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceRange/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 99/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 99UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceTile/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 100UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceToFreeList/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 101/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 101UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdNextStep/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 102/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 102UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdTrashLeftEdge/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 103/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 103UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdTrash/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 104/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 104UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFail/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 105/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 105UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFetchSwapHead/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 106/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 106UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdFetchSwapInfoBounds/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 107/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 107UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSwapSave/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 108/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 108UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPerformNative/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 109/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 109UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdScale/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 111/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 111UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdVariableDebugOffset/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 112UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdSpliceToFreeList-Range/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 115UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPushState/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 116/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 116UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdPopState/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 117/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 117UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdMainLoopReturnSuccess/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[6] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 118/6 } </10 & Divmod/11 Tile{ AsIs: s.Arg1#1/8 } 256/12 >/13 </14 & Divmod/15 Tile{ AsIs: s.Arg2#1/9 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.Arg3#1/5 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[12], 256UL);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[16], 256UL);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[20], 256UL);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 118UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[8], context[8] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 s.Symbolic#1/6 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
    //DEBUG: s.Symbolic#1: 6
    //DEBUG: s.Arg1#1: 8
    //DEBUG: s.Arg2#1: 9
    //DEBUG: s.Arg3#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 } Tile{ AsIs: s.Arg1#1/8 AsIs: s.Arg2#1/9 AsIs: s.Arg3#1/5 HalfReuse: </1 } & NumberFromOpcode*119/10 Tile{ AsIs: s.Symbolic#1/6 } >/11 >/12 Tile{ ]] }
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_NumberFromOpcode_D119]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
    refalrts::reinit_open_call(context[1]);
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[6], context[6] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand/4 (/6 e.new#8/10 )/7 s.new#9/8 s.new#10/9 s.new#7/5 >/1
  context[10] = 0;
  context[11] = 0;
  if( ! refalrts::brackets_term( context[10], context[11], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#8 as range 10
  do {
    // </0 & PutCommand/4 (/6 e.new#12/12 s.new#13/14 )/7 s.new#14/8 s.new#15/9 s.new#11/5 >/1
    context[12] = context[10];
    context[13] = context[11];
    if( ! refalrts::svar_right( context[14], context[12], context[13] ) )
      continue;
    // closed e.new#12 as range 12
    do {
      // </0 & PutCommand/4 (/6 s.new#17/14 )/7 s.new#18/8 s.new#19/9 s.new#16/5 >/1
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # CmdProfileFunction/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 0/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 0UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdLoadConstants/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 1/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 1UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdIssueMemory/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 2/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 2UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdReserveBacktrackStack/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 3/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 3UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdOnFailGoTo/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 4UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdProfilerStopSentence/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 5/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 5UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdInitB0/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 6/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 6UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # CmdInitB0-Lite/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 7/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 7UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 s.new#18/17 s.new#17/14 )/7 s.new#19/8 s.new#20/9 s.new#16/5 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # CmdChar/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdChar/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 8/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 8UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdChar/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 9/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 9UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdChar/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 10/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 10UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdCharSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdCharSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 11/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 11UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdCharSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 12/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 12UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdNumber/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdNumber/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 13/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 13UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdNumber/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 14/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 14UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdNumber/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 15/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 15UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdNumberSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdNumberSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 16/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 16UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdNumberSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 17/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 17UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdHugeNum/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNum], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdHugeNum/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 18/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 18UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdHugeNum/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 19/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 19UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdHugeNum/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 20/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 20UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdHugeNumSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNumSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdHugeNumSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 21/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 21UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdHugeNumSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 22/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 22UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdName/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdName/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 23/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 23UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdName/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 24/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 24UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdName/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 25/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 25UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdNameSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdNameSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 26/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 26UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdNameSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 27/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 27UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdIdent/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdIdent/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 28/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 28UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdIdent/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 29/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 29UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdIdent/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 30/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 30UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdIdentSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdIdentSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 31/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 31UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdIdentSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 32/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 32UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdBrackets/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdBrackets/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 33/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 33UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdBrackets/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 34/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 34UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdBrackets/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 35/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 35UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdBracketsSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdBracketsSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 36/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 36UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdBracketsSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 37/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 37UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdADT/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdADT/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 38/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 38UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdADT/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 39/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 39UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdADT/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 40/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 40UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdADTSave/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # CmdADTSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 41/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 41UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # CmdADTSave/17 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 42/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 42UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # CmdADTSave/17 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 43/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 43UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # CmdCallSave/17 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 44/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 44UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 s.new#17/14 )/7 s.new#18/8 s.new#19/9 s.new#16/5 >/1
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # CmdEmpty/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 45UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # CmdNotEmpty/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 46/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 46UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 s.new#18/17 s.new#19/18 s.new#17/14 )/7 s.new#20/8 s.new#21/9 s.new#16/5 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 s.new#24/17 # CmdVar/18 s.new#23/14 )/7 s.new#25/8 s.new#26/9 s.new#22/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 's'/17 # CmdVar/18 s.new#28/14 )/7 s.new#29/8 s.new#30/9 s.new#27/5 >/1
          if( ! refalrts::char_term( 's', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/6 's'/17 # CmdVar/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1#1: 8
            //DEBUG: s.Arg2#1: 9
            //DEBUG: s.Arg3#1: 5

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 47/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[6], 47UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[8] );
            refalrts::reinit_number(context[7], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[5], context[5] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_evar( res, context[9], context[9] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & PutCommand/4 (/6 's'/17 # CmdVar/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            //DEBUG: s.Arg1#1: 8
            //DEBUG: s.Arg2#1: 9
            //DEBUG: s.Arg3#1: 5

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 48/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[6], 48UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[8] );
            refalrts::reinit_number(context[7], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[5], context[5] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_evar( res, context[9], context[9] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/6 's'/17 # CmdVar/18 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 49/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 49UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 't'/17 # CmdVar/18 s.new#28/14 )/7 s.new#29/8 s.new#30/9 s.new#27/5 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 't'/17 # CmdVar/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 50/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 50UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 't'/17 # CmdVar/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 51/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 51UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[8] );
        refalrts::reinit_number(context[7], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 't'/17 # CmdVarSave/18 s.new#23/14 )/7 s.new#24/8 s.new#25/9 s.new#22/5 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 't'/17 # CmdVarSave/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 52/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 52UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 't'/17 # CmdVarSave/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 53/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 53UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[8] );
        refalrts::reinit_number(context[7], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 s.new#24/17 # CmdRepeated/18 s.new#23/14 )/7 s.new#25/8 s.new#26/9 s.new#22/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 'e'/17 # CmdRepeated/18 s.new#28/14 )/7 s.new#29/8 s.new#30/9 s.new#27/5 >/1
          if( ! refalrts::char_term( 'e', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/6 'e'/17 # CmdRepeated/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1#1: 8
            //DEBUG: s.Arg2#1: 9
            //DEBUG: s.Arg3#1: 5

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 54/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[6], 54UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[8] );
            refalrts::reinit_number(context[7], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[5], context[5] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_evar( res, context[9], context[9] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/6 'e'/17 # CmdRepeated/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 55/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 55UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 's'/17 # CmdRepeated/18 s.new#28/14 )/7 s.new#29/8 s.new#30/9 s.new#27/5 >/1
          if( ! refalrts::char_term( 's', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/6 's'/17 # CmdRepeated/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1#1: 8
            //DEBUG: s.Arg2#1: 9
            //DEBUG: s.Arg3#1: 5

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 56/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[6], 56UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[8] );
            refalrts::reinit_number(context[7], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[5], context[5] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_evar( res, context[9], context[9] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & PutCommand/4 (/6 's'/17 # CmdRepeated/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            //DEBUG: s.Arg1#1: 8
            //DEBUG: s.Arg2#1: 9
            //DEBUG: s.Arg3#1: 5

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 57/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[6], 57UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[8] );
            refalrts::reinit_number(context[7], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[5], context[5] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_evar( res, context[9], context[9] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/6 's'/17 # CmdRepeated/18 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 58/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 58UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 't'/17 # CmdRepeated/18 s.new#28/14 )/7 s.new#29/8 s.new#30/9 s.new#27/5 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 't'/17 # CmdRepeated/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 59/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 59UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 't'/17 # CmdRepeated/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 60/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 60UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[8] );
          refalrts::reinit_number(context[7], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 't'/17 # CmdRepeated/18 # AlgTerm/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 61/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 61UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[8] );
        refalrts::reinit_number(context[7], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 't'/17 # CmdRepeatedSave/18 s.new#23/14 )/7 s.new#24/8 s.new#25/9 s.new#22/5 >/1
      if( ! refalrts::char_term( 't', context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedSave], context[18] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 't'/17 # CmdRepeatedSave/18 # AlgLeft/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 62/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 62UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[8] );
        refalrts::reinit_number(context[7], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 't'/17 # CmdRepeatedSave/18 # AlgRight/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 63/6 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg11 #8/14 HalfReuse: 256/7 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 63UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[18], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[14], context[8] );
      refalrts::reinit_number(context[7], 256UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 s.new#17/14 )/7 s.new#18/8 s.new#19/9 s.new#16/5 >/1
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # CmdEPrepare/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 64UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdEStart/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 65UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdSave/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 66UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdResetAllocator/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 67/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 67UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdSetResArgBegin/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 68/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 68UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdSetResRightEdge/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 69/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 69UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdSetRes/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 70/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 70UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdCopyEVar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 71UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # CmdCopySTVar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 72UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[7], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # CmdReinitSVar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 73UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 s.new#18/17 s.new#17/14 )/7 s.new#19/8 s.new#20/9 s.new#16/5 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # Allocate/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_Allocate], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElChar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 74/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 74UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElName/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 75/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 75UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 76/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 76UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElHugeNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 77/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 77UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElIdent/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 78/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 78UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElBracket/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 79/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 79UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElString/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElString], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 80/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 80UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Allocate/17 # ElClosureHead/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 113/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 113UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # Allocate/17 # ElUnwrappedClosure/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 114/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 114UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # Reinit/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_Reinit], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElChar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 81/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 81UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElName/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 82/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 82UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 83/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 83UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElHugeNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 84/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 84UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElIdent/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 85/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 85UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElBracket/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 86/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 86UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/6 # Reinit/17 # ElClosureHead/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[14] ) )
            continue;
          //DEBUG: s.Arg1#1: 8
          //DEBUG: s.Arg2#1: 9
          //DEBUG: s.Arg3#1: 5

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 87/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[6], 87UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[7], context[8] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[5], context[5] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_evar( res, context[9], context[9] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/6 # Reinit/17 # ElUnwrappedClosure/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 88/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 88UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # Update/17 s.new#22/14 )/7 s.new#23/8 s.new#24/9 s.new#21/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_Update], context[17] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/6 # Update/17 # ElChar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 89/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 89UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # Update/17 # ElName/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 90/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 90UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # Update/17 # ElNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 91/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 91UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/6 # Update/17 # ElHugeNumber/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
          continue;
        //DEBUG: s.Arg1#1: 8
        //DEBUG: s.Arg2#1: 9
        //DEBUG: s.Arg3#1: 5

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 92/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[6], 92UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[7], context[8] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[9], context[9] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/6 # Update/17 # ElIdent/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1#1/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 93/6 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg11 #8/7 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2#1/9 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3#1/5 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 93UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/6 s.new#17/14 )/7 s.new#18/8 s.new#19/9 s.new#16/5 >/1
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    do {
      // </0 & PutCommand/4 (/6 # CmdLinkBrackets/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 94UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdPushStack/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 95/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 95UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdWrapClosure/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 110/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 110UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceElem/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 96/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 96UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceEVar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 97/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 97UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceSTVar/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 98UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceRange/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 99/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 99UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceTile/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 100UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceToFreeList/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 101/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 101UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdNextStep/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 102/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 102UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdTrashLeftEdge/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 103/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 103UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdTrash/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 104/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 104UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdFail/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 105/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 105UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdFetchSwapHead/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 106/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 106UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdFetchSwapInfoBounds/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 107/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 107UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSwapSave/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 108/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 108UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdPerformNative/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 109/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 109UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdScale/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 111/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 111UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdVariableDebugOffset/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 112UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdSpliceToFreeList-Range/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 115UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdPushState/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 116/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 116UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/6 # CmdPopState/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[14] ) )
        continue;
      //DEBUG: s.Arg1#1: 8
      //DEBUG: s.Arg2#1: 9
      //DEBUG: s.Arg3#1: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 117/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[6], 117UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[7], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/6 # CmdMainLoopReturnSuccess/14 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[14] ) )
      continue;
    //DEBUG: s.Arg1#1: 8
    //DEBUG: s.Arg2#1: 9
    //DEBUG: s.Arg3#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 118/6 HalfReuse: </14 HalfReuse: & Divmod/7 AsIs: s.Arg1#1/8 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2#1/9 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3#1/5 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 256UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[6], 118UL);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[7], functions[efunc_Divmod]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[5], context[5] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand/4 (/6 e.Symbolic#1/10 )/7 s.Arg1#1/8 s.Arg2#1/9 s.Arg3#1/5 >/1
  // closed e.Symbolic#1 as range 10
  //DEBUG: s.Arg1#1: 8
  //DEBUG: s.Arg2#1: 9
  //DEBUG: s.Arg3#1: 5
  //DEBUG: e.Symbolic#1: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & PutCommand$3=1/7 AsIs: s.Arg1#1/8 AsIs: s.Arg2#1/9 AsIs: s.Arg3#1/5 HalfReuse: </1 } Tile{ Reuse: & NumberFromOpcode*119/4 } Tile{ AsIs: e.Symbolic#1/10 } Tile{ HalfReuse: >/6 } >/12 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::reinit_name(context[7], functions[efunc_gen_PutCommand_S3A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
  refalrts::reinit_close_call(context[6]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[4], context[4] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutCommand("PutCommand", COOKIE1_, COOKIE2_, func_PutCommand);


static refalrts::FnResult func_CreateCommandTag(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & CreateCommandTag/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CreateCommandTag/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateCommandTag/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandTag/4 s.Other#1/5 >/1
  //DEBUG: s.Other#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 s.Other#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Other1 #5/1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateCommandTag("CreateCommandTag", COOKIE1_, COOKIE2_, func_CreateCommandTag);


static refalrts::FnResult func_CreateCommandInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & CreateCommandInfo/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CreateCommandInfo/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & CreateCommandInfo/4 s.new#3/5 s.new#4/8 e.new#5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new#5 as range 6
    do {
      // </0 & CreateCommandInfo/4 # ElChar/5 s.Char#1/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Char#1: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Ord/5 AsIs: s.Char#1/8 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_Ord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElName/5 s.NameId#1/8 e.Name#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
        continue;
      // closed e.Name#1 as range 9
      //DEBUG: s.NameId#1: 8
      //DEBUG: e.Name#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElName/5 s.NameId#1/8 e.Name#1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.NameId1 #8/1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElNumber/5 s.Number#1/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Number#1: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElNumber/5 s.Number#1/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Number1 #8/1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId#1/8 e.Name#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
        continue;
      // closed e.Name#1 as range 9
      //DEBUG: s.NameId#1: 8
      //DEBUG: e.Name#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId#1/8 e.Name#1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.NameId1 #8/1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CreateCommandInfo/4 # ElString/5 s.StringId#1/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElString], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.StringId#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElString/5 s.StringId#1/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.StringId1 #8/1 ]] }
    refalrts::reinit_svar( context[1], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElClosureHead/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElClosureHead/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElUnwrappedClosure/5 s.HeadCounter#1/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.HeadCounter#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElUnwrappedClosure/5 s.HeadCounter#1/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.HeadCounter1 #8/1 ]] }
    refalrts::reinit_svar( context[1], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandInfo/4 s.new#3/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateCommandInfo/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
    refalrts::reinit_number(context[1], 5UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandInfo/4 s.Bracket#1/5 >/1
  //DEBUG: s.Bracket#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & NumberFromBracket*6/4 AsIs: s.Bracket#1/5 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_NumberFromBracket_D6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateCommandInfo("CreateCommandInfo", COOKIE1_, COOKIE2_, func_CreateCommandInfo);


static refalrts::FnResult func_gen_CalcLabelsOffsets_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & CalcLabelsOffsets\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CalcLabelsOffsets\1/4 (/7 s.new#1/9 e.new#2/5 )/8 t.new#3/10 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 5
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CalcLabelsOffsets\1/4 (/7 s.new#7/9 e.new#8/12 )/8 (/10 s.new#4/16 s.new#5/17 e.new#6/14 )/11 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = 0;
    context[15] = 0;
    if( ! refalrts::brackets_term( context[14], context[15], context[10] ) )
      continue;
    // closed e.new#8 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[14], context[15] ) )
      continue;
    // closed e.new#6 as range 14
    do {
      // </0 & CalcLabelsOffsets\1/4 (/7 s.Offset#2/9 e.Labels#2/18 )/8 (/10 # LABEL/16 s.Label#2/17 )/11 >/1
      context[18] = context[12];
      context[19] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_LABEL], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Labels#2 as range 18
      //DEBUG: s.Offset#2: 9
      //DEBUG: s.Label#2: 17
      //DEBUG: e.Labels#2: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CalcLabelsOffsets\1/4 {REMOVED TILE} s.Label#2/17 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Offset#2/9 AsIs: e.Labels#2/18 HalfReuse: (/8 HalfReuse: s.Label2 #17/10 HalfReuse: s.Offset2 #9/16 } Tile{ AsIs: )/11 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_svar( context[10], context[17] );
      refalrts::reinit_svar( context[16], context[9] );
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[8], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      res = refalrts::splice_evar( res, context[7], context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CalcLabelsOffsets\1/4 (/7 s.Offset#2/9 e.Labels#2/18 )/8 (/10 # CmdOnFailGoTo/16 s.Destination#2/17 e.FuncName#2/20 )/11 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[16] ) )
      continue;
    // closed e.Labels#2 as range 18
    // closed e.FuncName#2 as range 20
    //DEBUG: s.Offset#2: 9
    //DEBUG: s.Destination#2: 17
    //DEBUG: e.Labels#2: 18
    //DEBUG: e.FuncName#2: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/22 Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/7 AsIs: s.Offset#2/9 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Labels#2/18 } )/23 (/24 # CmdOnFailGoTo/25 </26 & Add/27 Tile{ HalfReuse: 1/8 HalfReuse: s.Offset2 #9/10 HalfReuse: >/16 AsIs: s.Destination#2/17 AsIs: e.FuncName#2/20 AsIs: )/11 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_CmdOnFailGoTo]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Add]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[7], 1UL);
    refalrts::reinit_number(context[8], 1UL);
    refalrts::reinit_svar( context[10], context[9] );
    refalrts::reinit_close_call(context[16]);
    refalrts::link_brackets( context[24], context[11] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[22], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CalcLabelsOffsets\1/4 (/7 s.Offset#2/9 e.Labels#2/5 )/8 t.OtherCommand#2/10 >/1
  // closed e.Labels#2 as range 5
  //DEBUG: t.OtherCommand#2: 10
  //DEBUG: s.Offset#2: 9
  //DEBUG: e.Labels#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/12 Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/7 AsIs: s.Offset#2/9 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Labels#2/5 } Tile{ AsIs: )/8 AsIs: t.OtherCommand#2/10 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::link_brackets( context[12], context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CalcLabelsOffsets_L1("CalcLabelsOffsets\\1", COOKIE1_, COOKIE2_, func_gen_CalcLabelsOffsets_L1);


static refalrts::FnResult func_CalcLabelsOffsets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CalcLabelsOffsets/4 e.RASL#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASL#1 as range 2
  //DEBUG: e.RASL#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & MapAccum@1/6 (/7 Tile{ HalfReuse: 0/0 HalfReuse: )/4 AsIs: e.RASL#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CalcLabelsOffsets("CalcLabelsOffsets", COOKIE1_, COOKIE2_, func_CalcLabelsOffsets);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & ResolveLabeledDestinations$1:1$1=1/4 (/7 e.ReadyRASL#1/5 )/8 (/11 e.Labels#1/9 )/12 (/15 e.UnscannedRASL#1/13 )/16 (/19 s.JumpHigh#5/21 )/20 s.JumpLow#5/22 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.ReadyRASL#1 as range 5
  // closed e.Labels#1 as range 9
  // closed e.UnscannedRASL#1 as range 13
  if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ReadyRASL#1: 5
  //DEBUG: e.Labels#1: 9
  //DEBUG: e.UnscannedRASL#1: 13
  //DEBUG: s.JumpHigh#5: 21
  //DEBUG: s.JumpLow#5: 22

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ReadyRASL#1/5 } Tile{ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/7 } </23 & Divmod/24 Tile{ AsIs: s.JumpLow#5/22 } 256/25 Tile{ HalfReuse: >/15 } Tile{ HalfReuse: </16 HalfReuse: & Divmod/19 AsIs: s.JumpHigh#5/21 HalfReuse: 256/20 } >/26 </27 & Divmod/28 0/29 256/30 >/31 >/32 </33 Tile{ HalfReuse: & ResolveLabeledDestinations/8 AsIs: (/11 AsIs: e.Labels#1/9 AsIs: )/12 } Tile{ AsIs: e.UnscannedRASL#1/13 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[25], 256UL);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[29], 0UL);
  refalrts::alloc_number(vm, context[30], 256UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::reinit_number(context[7], 4UL);
  refalrts::reinit_close_call(context[15]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_name(context[19], functions[efunc_Divmod]);
  refalrts::reinit_number(context[20], 256UL);
  refalrts::reinit_name(context[8], functions[efunc_ResolveLabeledDestinations]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[26], context[33] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1B1S1A1("ResolveLabeledDestinations$1:1$1=1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1B1S1A1);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & ResolveLabeledDestinations$1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 (/20 e.new#5/18 )/21 s.new#6/22 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new#5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.ReadyRASL#1/23 )/8 (/11 e.Labels#1/25 )/12 (/15 e.UnscannedRASL#1/27 )/16 s.RelativeJump#3/17 (/20 e.FuncName#1/29 )/21 '<'/22 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[9];
    context[26] = context[10];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[18];
    context[30] = context[19];
    if( ! refalrts::char_term( '<', context[22] ) )
      continue;
    // closed e.ReadyRASL#1 as range 23
    // closed e.Labels#1 as range 25
    // closed e.UnscannedRASL#1 as range 27
    // closed e.FuncName#1 as range 29
    //DEBUG: s.RelativeJump#3: 17
    //DEBUG: e.ReadyRASL#1: 23
    //DEBUG: e.Labels#1: 25
    //DEBUG: e.UnscannedRASL#1: 27
    //DEBUG: e.FuncName#1: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.FuncName#1/29 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1:1$1=1/4 AsIs: (/7 AsIs: e.ReadyRASL#1/23 AsIs: )/8 AsIs: (/11 AsIs: e.Labels#1/25 AsIs: )/12 AsIs: (/15 AsIs: e.UnscannedRASL#1/27 AsIs: )/16 } </31 Tile{ HalfReuse: & Divmod/20 } Tile{ AsIs: s.RelativeJump#3/17 } Tile{ HalfReuse: 256/21 HalfReuse: >/22 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1B1S1A1]);
    refalrts::reinit_name(context[20], functions[efunc_Divmod]);
    refalrts::reinit_number(context[21], 256UL);
    refalrts::reinit_close_call(context[22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[20], context[20] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.ReadyRASL#1/5 )/8 (/11 e.Labels#1/9 )/12 (/15 e.UnscannedRASL#1/13 )/16 s.RelativeJump#3/17 (/20 e.FuncName#1/18 )/21 s.Other#4/22 >/1
  // closed e.ReadyRASL#1 as range 5
  // closed e.Labels#1 as range 9
  // closed e.UnscannedRASL#1 as range 13
  // closed e.FuncName#1 as range 18
  //DEBUG: s.RelativeJump#3: 17
  //DEBUG: s.Other#4: 22
  //DEBUG: e.ReadyRASL#1: 5
  //DEBUG: e.Labels#1: 9
  //DEBUG: e.UnscannedRASL#1: 13
  //DEBUG: e.FuncName#1: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.ReadyRASL#1/5 {REMOVED TILE} e.Labels#1/9 {REMOVED TILE} e.UnscannedRASL#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Other#4/22 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintErr/4 HalfReuse: 'C'/7 } Tile{ HalfReuse: 'o'/8 HalfReuse: 'm'/11 } 'p'/23 Tile{ HalfReuse: 'i'/12 HalfReuse: 'l'/15 } Tile{ HalfReuse: 'a'/21 }"tion failure in function "/24 </26 & DisplayName/27 Tile{ AsIs: e.FuncName#1/18 } >/28 ':'/29 >/30 </31 & PrintErr/32"  this function try jump over "/33 </35 Tile{ HalfReuse: & Symb/16 AsIs: s.RelativeJump#3/17 HalfReuse: >/20 }" commands, but maximum jump length is 65535."/36 >/38 </39 & PrintErr/40"  Compilation aborted."/41 >/43 </44 & Exit/45 1/46 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], 'p');
  refalrts::alloc_chars(vm, context[24], context[25], "tion failure in function ", 25);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_char(vm, context[29], ':');
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_PrintErr]);
  refalrts::alloc_chars(vm, context[33], context[34], "  this function try jump over ", 30);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_chars(vm, context[36], context[37], " commands, but maximum jump length is 65535.", 44);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_open_call(vm, context[39]);
  refalrts::alloc_name(vm, context[40], functions[efunc_PrintErr]);
  refalrts::alloc_chars(vm, context[41], context[42], "  Compilation aborted.", 22);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_Exit]);
  refalrts::alloc_number(vm, context[46], 1UL);
  refalrts::update_name(context[4], functions[efunc_PrintErr]);
  refalrts::reinit_char(context[7], 'C');
  refalrts::reinit_char(context[8], 'o');
  refalrts::reinit_char(context[11], 'm');
  refalrts::reinit_char(context[12], 'i');
  refalrts::reinit_char(context[15], 'l');
  refalrts::reinit_char(context[21], 'a');
  refalrts::reinit_name(context[16], functions[efunc_Symb]);
  refalrts::reinit_close_call(context[20]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[36], context[46] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[28], context[35] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1B1("ResolveLabeledDestinations$1:1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1B1);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ResolveLabeledDestinations$1=2/4 (/7 e.ReadyRASL#1/5 )/8 (/11 e.Labels#1/9 )/12 (/15 e.UnscannedRASL#1/13 )/16 (/19 e.FuncName#1/17 )/20 s.RelativeJump#3/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.ReadyRASL#1 as range 5
  // closed e.Labels#1 as range 9
  // closed e.UnscannedRASL#1 as range 13
  // closed e.FuncName#1 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ReadyRASL#1: 5
  //DEBUG: e.Labels#1: 9
  //DEBUG: e.UnscannedRASL#1: 13
  //DEBUG: e.FuncName#1: 17
  //DEBUG: s.RelativeJump#3: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1:1/4 AsIs: (/7 AsIs: e.ReadyRASL#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Labels#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.UnscannedRASL#1/13 AsIs: )/16 HalfReuse: s.RelativeJump3 #21/19 } (/22 Tile{ AsIs: e.FuncName#1/17 } )/23 </24 Tile{ HalfReuse: & TermCompare/20 AsIs: s.RelativeJump#3/21 } 65536/25 >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_number(vm, context[25], 65536UL);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1B1]);
  refalrts::reinit_svar( context[19], context[21] );
  refalrts::reinit_name(context[20], functions[efunc_TermCompare]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1A2("ResolveLabeledDestinations$1=2", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1A2);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & ResolveLabeledDestinations$1=1/4 s.DestinationLabel#1/5 (/8 e.ReadyRASL#1/6 )/9 (/12 e.Labels#1/10 )/13 (/16 e.UnscannedRASL#1/14 )/17 (/20 e.FuncName#1/18 )/21 s.CommandOffset#1/22 e.Labels-B#2/23 (/29 s.DestinationLabel#1/31 s.DestinationOffset#2/32 )/30 e.Labels-E#2/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.ReadyRASL#1 as range 6
  // closed e.Labels#1 as range 10
  // closed e.UnscannedRASL#1 as range 14
  // closed e.FuncName#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    if( ! refalrts::repeated_stvar_left( vm, context[31], context[5], context[27], context[28] ) )
      continue;
    // closed e.Labels-E#2 as range 25
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    //DEBUG: s.DestinationLabel#1: 5
    //DEBUG: e.ReadyRASL#1: 6
    //DEBUG: e.Labels#1: 10
    //DEBUG: e.UnscannedRASL#1: 14
    //DEBUG: e.FuncName#1: 18
    //DEBUG: s.CommandOffset#1: 22
    //DEBUG: e.Labels-B#2: 23
    //DEBUG: e.Labels-E#2: 25
    //DEBUG: s.DestinationOffset#2: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.DestinationLabel#1/5 {REMOVED TILE} s.CommandOffset#1/22 e.Labels-B#2/23 {REMOVED TILE} s.DestinationLabel#1/31 {REMOVED TILE} e.Labels-E#2/25 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1=2/4 } Tile{ AsIs: (/8 AsIs: e.ReadyRASL#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Labels#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.UnscannedRASL#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.FuncName#1/18 AsIs: )/21 } Tile{ HalfReuse: </29 } & Sub/33 Tile{ AsIs: s.DestinationOffset#2/32 HalfReuse: s.CommandOffset1 #22/30 } >/34 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[33], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1A2]);
    refalrts::reinit_open_call(context[29]);
    refalrts::reinit_svar( context[30], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[34] );
    res = refalrts::splice_evar( res, context[32], context[30] );
    res = refalrts::splice_evar( res, context[33], context[33] );
    res = refalrts::splice_evar( res, context[29], context[29] );
    res = refalrts::splice_evar( res, context[8], context[21] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[23], context[24], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1A1("ResolveLabeledDestinations$1=1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1A1);


static refalrts::FnResult func_ResolveLabeledDestinations(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & ResolveLabeledDestinations/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ResolveLabeledDestinations/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ResolveLabeledDestinations/4 (/7 e.Labels#1/9 )/8 e.ReadyRASL#1/13 (/19 # CmdOnFailGoTo/21 s.CommandOffset#1/22 s.DestinationLabel#1/23 e.FuncName#1/17 )/20 e.UnscannedRASL#1/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Labels#1 as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_CmdOnFailGoTo], context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.UnscannedRASL#1 as range 15
      if( ! refalrts::svar_left( context[22], context[17], context[18] ) )
        continue;
      if( ! refalrts::svar_left( context[23], context[17], context[18] ) )
        continue;
      // closed e.FuncName#1 as range 17
      //DEBUG: e.Labels#1: 9
      //DEBUG: e.ReadyRASL#1: 13
      //DEBUG: e.UnscannedRASL#1: 15
      //DEBUG: s.CommandOffset#1: 22
      //DEBUG: s.DestinationLabel#1: 23
      //DEBUG: e.FuncName#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & ResolveLabeledDestinations$1=1/24 Tile{ AsIs: s.DestinationLabel#1/23 } (/25 Tile{ AsIs: e.ReadyRASL#1/13 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Labels#1/9 AsIs: )/8 } Tile{ AsIs: (/19 } Tile{ AsIs: e.UnscannedRASL#1/15 } Tile{ AsIs: )/20 } (/26 Tile{ AsIs: e.FuncName#1/17 } Tile{ HalfReuse: )/21 AsIs: s.CommandOffset#1/22 } e.Labels#1/9/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_ResolveLabeledDestinations_S1A1]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::copy_evar(vm, context[27], context[28], context[9], context[10]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[21] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[25], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[26], context[26] );
      res = refalrts::splice_evar( res, context[20], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[19], context[19] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      res = refalrts::splice_evar( res, context[24], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveLabeledDestinations/4 (/7 e.Labels#1/5 )/8 e.ReadyRASL#1/2 >/1
  // closed e.Labels#1 as range 5
  // closed e.ReadyRASL#1 as range 2
  //DEBUG: e.Labels#1: 5
  //DEBUG: e.ReadyRASL#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveLabeledDestinations/4 (/7 e.Labels#1/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ReadyRASL#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveLabeledDestinations("ResolveLabeledDestinations", COOKIE1_, COOKIE2_, func_ResolveLabeledDestinations);


static refalrts::FnResult func_PutBlockStart(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlockStart/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock/4 HalfReuse: # Start/1 } </5 & Ord/6"RASLCODE"/7 >/9 >/10 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Ord]);
  refalrts::alloc_chars(vm, context[7], context[8], "RASLCODE", 8);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_PutBlock]);
  refalrts::reinit_ident(context[1], identifiers[ident_Start]);
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockStart("PutBlockStart", 0U, 0U, func_PutBlockStart);


static refalrts::FnResult func_PutBlockReference(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & PutBlockReference/4 e.Reference#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Reference#1 as range 2
  //DEBUG: e.Reference#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & PutBlock/6 # Reference/7 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.Reference#1/2 AsIs: >/1 } 0/8 >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_PutBlock]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Reference]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockReference("PutBlockReference", 0U, 0U, func_PutBlockReference);


static refalrts::FnResult func_PutBlockIncorporated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & PutBlockIncorporated/4 e.LibName#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.LibName#1 as range 2
  //DEBUG: e.LibName#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & PutBlock/6 # Incorporated/7 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.LibName#1/2 AsIs: >/1 } 0/8 >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_PutBlock]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Incorporated]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockIncorporated("PutBlockIncorporated", 0U, 0U, func_PutBlockIncorporated);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@1/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@1/4 (/7 e.#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.#0 as range 11
      // closed e.Tail#1 as range 9
      //DEBUG: e.#0: 11
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@1/4 (/7 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.#0/11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[0], context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnBracket*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_UnBracket_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UnBracket/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_UnBracket]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map@2/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & Map@2/4 e.LabelOffsets#5/9 (/7 t.Next#1/13 e.Tail#1/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    // closed e.LabelOffsets#5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Tail#1 as range 11
    //DEBUG: e.LabelOffsets#5: 9
    //DEBUG: t.Next#1: 13
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & GenCommand-Globals/16 e.LabelOffsets#5/9/17 Tile{ AsIs: t.Next#1/13 } >/19 Tile{ AsIs: </0 AsIs: & Map@2/4 AsIs: e.LabelOffsets#5/9 AsIs: (/7 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_GenCommandm_Globals]);
    refalrts::copy_evar(vm, context[17], context[18], context[9], context[10]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[19], context[19] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 e.LabelOffsets#5/9 (/7 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.LabelOffsets#5 as range 9
    //DEBUG: e.LabelOffsets#5: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 e.LabelOffsets#5/9 (/7 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.LabelOffsets#5/2 (/7 e.items#0/5 )/8 >/1
  // closed e.LabelOffsets#5 as range 2
  // closed e.items#0 as range 5
  //DEBUG: e.LabelOffsets#5: 2
  //DEBUG: e.items#0: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } & Map@0/9 Tile{ HalfReuse: (/0 Reuse: & GenCommand-Globals/4 AsIs: e.LabelOffsets#5/2 HalfReuse: )/7 AsIs: e.items#0/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z0]);
  refalrts::reinit_open_call(context[1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_GenCommandm_Globals]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@3/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.new#3/13 e.new#4/11 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new#4 as range 11
      do {
        // </0 & Map@3/4 (/7 # GN-Entry/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: '*'/7 HalfReuse: </13 } & DisplayName/18 Tile{ AsIs: e.0#0/14 } >/19 >/20 </21 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[18], functions[efunc_DisplayName]);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::update_name(context[4], functions[efunc_Asciiz]);
        refalrts::reinit_char(context[7], '*');
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[19], context[21] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[18], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 # GN-Local/13 e.0#0/14 )/8 e.Tail#1/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[13] ) )
          continue;
        // closed e.0#0 as range 14
        // closed e.Tail#1 as range 16
        //DEBUG: e.0#0: 14
        //DEBUG: e.Tail#1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: '#'/7 HalfReuse: </13 } & DisplayName/18 Tile{ AsIs: e.0#0/14 } >/19 >/20 </21 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[18], functions[efunc_DisplayName]);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::update_name(context[4], functions[efunc_Asciiz]);
        refalrts::reinit_char(context[7], '#');
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[19], context[21] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[18], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@3/4 (/7 s.ScopeClass#2/13 e.0#0/14 )/8 e.Tail#1/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      // closed e.0#0 as range 14
      // closed e.Tail#1 as range 16
      //DEBUG: s.ScopeClass#2: 13
      //DEBUG: e.0#0: 14
      //DEBUG: e.Tail#1: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.ScopeClass#2/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameWithSign-Bytes*2/4 HalfReuse: s.ScopeClass2 #13/7 } Tile{ AsIs: e.0#0/14 } >/18 </19 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/16 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_NameWithSignm_Bytes_D2]);
      refalrts::reinit_svar( context[7], context[13] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromFunctionList\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromFunctionList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromFunctionList\1/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromFunctionList_L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Map@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@4/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.IdentId#2/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.IdentId#2: 13
      //DEBUG: e.0#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdentId#2/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: </7 } & DisplayName/14 Tile{ AsIs: e.0#0/11 } >/15 >/16 </17 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_DisplayName]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::update_name(context[4], functions[efunc_Asciiz]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromIdentList\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromIdentList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromIdentList\1/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromIdentList_L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@5/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@5/4 (/7 s.StringId#2/13 e.0#0/11 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0#0 as range 11
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.StringId#2: 13
      //DEBUG: e.0#0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.StringId#2/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 HalfReuse: </7 } & Lenw/14 Tile{ AsIs: e.0#0/11 } >/15 & BytesFromStringList\1\1/16 >/17 </18 Tile{ HalfReuse: & Map@5/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Lenw]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_BytesFromStringList_L1L1]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::update_name(context[4], functions[efunc_Fetch]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromStringList\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromStringList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromStringList\1/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromStringList_L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@6/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@6/4 (/7 s.Ident#3/13 s.Function#3/14 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.Ident#3: 13
      //DEBUG: s.Function#3: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Ident#3/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 HalfReuse: s.Ident3 #13/7 } >/15 </16 & PutWordLE/17 Tile{ AsIs: s.Function#3/14 } >/18 </19 Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_PutWordLE]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_PutWordLE]);
      refalrts::reinit_svar( context[7], context[13] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-Globals$4\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@6/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z6]);
    refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & GenCommand-Globals$4\1/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@7/4 t.Next#1/7 e.Tail#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail#1 as range 5
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-RASL/4 AsIs: t.Next#1/7 } >/9 </10 & Map@7/11 Tile{ AsIs: e.Tail#1/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_GenCommandm_RASL]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & GenCommand-RASL/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_GenCommandm_RASL]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MapAccum@1/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & MapAccum@1/4 t.Acc#1/5 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Tail#1 as range 7
    //DEBUG: t.Acc#1: 5
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: t.Acc#1/5 } (/9 Tile{ AsIs: e.Tail#1/7 } )/10 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@1/4 t.accum#0/5 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: t.accum#0: 5
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & MapAccum@0/0 Reuse: & CalcLabelsOffsets\1/4 AsIs: t.accum#0/5 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_MapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CalcLabelsOffsets_L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@1/4 t.new#1/9 e.new#2/2 (/7 e.new#3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#3 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new#4/9 e.new#5/11 (/7 t.new#6/15 e.new#7/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    // closed e.new#5 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#7 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/9 s.new#8/23 e.new#9/21 )/10 e.new#10/17 (/7 t.new#11/15 e.new#12/19 )/8 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[9] ) )
        continue;
      // closed e.new#10 as range 17
      // closed e.new#12 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new#9 as range 21
      do {
        // </0 & DoMapAccum@1/4 (/9 s.new#13/23 e.new#14/24 )/10 e.new#15/26 (/7 (/15 s.new#16/32 s.new#17/33 e.new#18/30 )/16 e.new#19/28 )/8 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        // closed e.new#14 as range 24
        // closed e.new#15 as range 26
        // closed e.new#19 as range 28
        if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
          continue;
        if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
          continue;
        // closed e.new#18 as range 30
        do {
          // </0 & DoMapAccum@1/4 (/9 s.Offset#2/23 e.1#0/34 )/10 e.Scanned#1/36 (/7 (/15 # LABEL/32 s.Label#2/33 )/16 e.Tail#1/38 )/8 >/1
          context[34] = context[24];
          context[35] = context[25];
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_LABEL], context[32] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e.1#0 as range 34
          // closed e.Scanned#1 as range 36
          // closed e.Tail#1 as range 38
          //DEBUG: s.Offset#2: 23
          //DEBUG: s.Label#2: 33
          //DEBUG: e.1#0: 34
          //DEBUG: e.Scanned#1: 36
          //DEBUG: e.Tail#1: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label#2/33 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 } & DoMapAccum-Aux@1/40 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/4 AsIs: (/9 AsIs: s.Offset#2/23 AsIs: e.1#0/34 HalfReuse: (/10 } Tile{ HalfReuse: s.Label2 #33/7 HalfReuse: s.Offset2 #23/15 HalfReuse: )/32 } )/41 )/42 Tile{ HalfReuse: (/16 AsIs: e.Tail#1/38 AsIs: )/8 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccumm_Aux_Z1]);
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::alloc_close_bracket(vm, context[42]);
          refalrts::reinit_open_bracket(context[4]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_svar( context[7], context[33] );
          refalrts::reinit_svar( context[15], context[23] );
          refalrts::reinit_close_bracket(context[32]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[8] );
          refalrts::link_brackets( context[4], context[42] );
          refalrts::link_brackets( context[9], context[41] );
          refalrts::link_brackets( context[10], context[32] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[16];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[7], context[32] );
          res = refalrts::splice_evar( res, context[4], context[10] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[40], context[40] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@1/4 (/9 s.Offset#2/23 e.1#0/34 )/10 e.Scanned#1/36 (/7 (/15 # CmdOnFailGoTo/32 s.Destination#2/33 e.3#0/38 )/16 e.Tail#1/40 )/8 >/1
        context[34] = context[24];
        context[35] = context[25];
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[28];
        context[41] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[32] ) )
          continue;
        // closed e.1#0 as range 34
        // closed e.Scanned#1 as range 36
        // closed e.3#0 as range 38
        // closed e.Tail#1 as range 40
        //DEBUG: s.Offset#2: 23
        //DEBUG: s.Destination#2: 33
        //DEBUG: e.1#0: 34
        //DEBUG: e.Scanned#1: 36
        //DEBUG: e.3#0: 38
        //DEBUG: e.Tail#1: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </42 Tile{ HalfReuse: & DoMapAccum-Aux@1/10 AsIs: e.Scanned#1/36 AsIs: (/7 AsIs: (/15 HalfReuse: </32 } & Add/43 1/44 s.Offset#2/23/45 >/46 Tile{ AsIs: e.1#0/34 } )/47 (/48 # CmdOnFailGoTo/49 Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/9 AsIs: s.Offset#2/23 } >/50 Tile{ AsIs: s.Destination#2/33 } Tile{ AsIs: e.3#0/38 } )/51 )/52 Tile{ HalfReuse: (/16 AsIs: e.Tail#1/40 AsIs: )/8 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[44], 1UL);
        refalrts::copy_stvar(vm, context[45], context[23]);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_ident(vm, context[49], identifiers[ident_CmdOnFailGoTo]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_name(context[10], functions[efunc_gen_DoMapAccumm_Aux_Z1]);
        refalrts::reinit_open_call(context[32]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_number(context[9], 1UL);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[16], context[8] );
        refalrts::link_brackets( context[7], context[52] );
        refalrts::link_brackets( context[48], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[47] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[33], context[33] );
        res = refalrts::splice_evar( res, context[50], context[50] );
        res = refalrts::splice_evar( res, context[0], context[23] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[43], context[46] );
        res = refalrts::splice_evar( res, context[10], context[32] );
        res = refalrts::splice_evar( res, context[42], context[42] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/9 s.Offset#2/23 e.0#0/24 )/10 e.Scanned#1/26 (/7 t.Next#1/15 e.Tail#1/28 )/8 >/1
      context[24] = context[21];
      context[25] = context[22];
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      // closed e.0#0 as range 24
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.Next#1: 15
      //DEBUG: s.Offset#2: 23
      //DEBUG: e.0#0: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </30 Tile{ HalfReuse: & DoMapAccum-Aux@1/10 AsIs: e.Scanned#1/26 AsIs: (/7 } (/31 Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/9 AsIs: s.Offset#2/23 } >/32 Tile{ AsIs: e.0#0/24 } )/33 Tile{ AsIs: t.Next#1/15 } )/34 (/35 Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::reinit_name(context[10], functions[efunc_gen_DoMapAccumm_Aux_Z1]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_number(context[9], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[35], context[8] );
      refalrts::link_brackets( context[7], context[34] );
      refalrts::link_brackets( context[31], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[33], context[33] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      res = refalrts::splice_evar( res, context[0], context[23] );
      res = refalrts::splice_evar( res, context[31], context[31] );
      res = refalrts::splice_evar( res, context[10], context[7] );
      res = refalrts::splice_evar( res, context[30], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc#1/9 e.Scanned#1/17 (/7 t.Next#1/15 e.Tail#1/19 )/8 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned#1 as range 17
    // closed e.Tail#1 as range 19
    //DEBUG: t.Acc#1: 9
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: e.Tail#1: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </21 & DoMapAccum-Aux@1/22 Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: (/7 } Tile{ AsIs: </0 Reuse: & CalcLabelsOffsets\1*3/4 AsIs: t.Acc#1/9 } Tile{ AsIs: t.Next#1/15 } >/23 )/24 (/25 Tile{ AsIs: e.Tail#1/19 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccumm_Aux_Z1]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_CalcLabelsOffsets_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[25], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc#1/9 e.Scanned#1/11 (/7 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Scanned#1 as range 11
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.Scanned#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} {REMOVED TILE} (/7 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc#0/9 e.scanned#0/2 (/7 e.items#0/5 )/8 >/1
  // closed e.scanned#0 as range 2
  // closed e.items#0 as range 5
  //DEBUG: t.acc#0: 9
  //DEBUG: e.scanned#0: 2
  //DEBUG: e.items#0: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } & CalcLabelsOffsets\1/11 Tile{ AsIs: t.acc#0/9 } Tile{ AsIs: (/7 } Tile{ AsIs: e.scanned#0/2 } Tile{ AsIs: )/8 } Tile{ AsIs: e.items#0/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_CalcLabelsOffsets_L1]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccumm_Aux_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum-Aux@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum-Aux@1/4 e.new#1/2 (/11 e.new#2/9 )/12 (/7 e.new#3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 9
  // closed e.new#3 as range 5
  do {
    // </0 & DoMapAccum-Aux@1/4 e.Scanned#1/13 (/11 t.Acc#1/19 e.StepScanned#1/15 )/12 (/7 e.Tail#1/17 )/8 >/1
    context[13] = context[2];
    context[14] = context[3];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    // closed e.Scanned#1 as range 13
    // closed e.Tail#1 as range 17
    context[20] = refalrts::tvar_left( context[19], context[15], context[16] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned#1 as range 15
    //DEBUG: e.Scanned#1: 13
    //DEBUG: e.Tail#1: 17
    //DEBUG: t.Acc#1: 19
    //DEBUG: e.StepScanned#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc#1/19 } Tile{ AsIs: e.Scanned#1/13 } Tile{ AsIs: e.StepScanned#1/15 } Tile{ AsIs: (/7 AsIs: e.Tail#1/17 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum-Aux@1/4 e.scanned#0/2 (/11 e.acc-and-step-scanned#0/9 )/12 (/7 e.items#0/5 )/8 >/1
  // closed e.scanned#0 as range 2
  // closed e.acc-and-step-scanned#0 as range 9
  // closed e.items#0 as range 5
  //DEBUG: e.scanned#0: 2
  //DEBUG: e.acc-and-step-scanned#0: 9
  //DEBUG: e.items#0: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum-Aux@0/4 } & CalcLabelsOffsets\1/13 Tile{ AsIs: (/7 } Tile{ AsIs: e.scanned#0/2 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.acc-and-step-scanned#0/9 AsIs: )/12 } Tile{ AsIs: e.items#0/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_CalcLabelsOffsets_L1]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccumm_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccumm_Aux_Z1("DoMapAccum-Aux@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccumm_Aux_Z1);


//End of file
