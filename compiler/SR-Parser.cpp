// This file automatically generated from 'SR-Parser.sref'
// Don't edit! Edit 'SR-Parser.sref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_153369461_2855128779
#define COOKIE1_ 153369461U
#define COOKIE2_ 2855128779U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Map_Z1 = 18,
  efunc_ParseElements = 19,
  efunc_gen_ParseElements_S2A1 = 20,
  efunc_ParseElementm_SwDirective = 21,
  efunc_gen_ParseElements_S4A1 = 22,
  efunc_gen_ParseFunction_S1A1 = 23,
  efunc_ParseBlock = 24,
  efunc_ELm_AddErrorAt = 25,
  efunc_SRm_StrFromToken = 26,
  efunc_gen_AddUnexpected_D3 = 27,
  efunc_gen_ParseFunction_D5 = 28,
  efunc_gen_ParseFunction_S1A1Z1 = 29,
  efunc_gen_ParseInclude_D3 = 30,
  efunc_ParseNameListm_Idents = 31,
  efunc_gen_ParseSpec_S1A1 = 32,
  efunc_gen_DoParsePattern_Z1 = 33,
  efunc_gen_ParseSpec_D2 = 34,
  efunc_ParseNameList = 35,
  efunc_gen_ASTItemFromDirective_D8 = 36,
  efunc_gen_ParseSpec_S1A2 = 37,
  efunc_gen_Expect_D2 = 38,
  efunc_gen_ParseNameListm_Tail_D3 = 39,
  efunc_gen_ParseNameListm_Identsm_Tail_D3 = 40,
  efunc_gen_DoParseBlock_S3A1Z1 = 41,
  efunc_ParseSentence = 42,
  efunc_gen_DoParseBlock_S3A1 = 43,
  efunc_gen_ParseSentence_B1S1A1 = 44,
  efunc_gen_ParseSentence_B1S1A1L1D2 = 45,
  efunc_gen_ParseSentence_B1S2A1 = 46,
  efunc_gen_ParseSentence_B1S4A1D1 = 47,
  efunc_gen_ParseSentencePart_A1 = 48,
  efunc_gen_ParseSentence_A1 = 49,
  efunc_gen_ParseResult_A1 = 50,
  efunc_gen_DoParseResult_Z1 = 51,
  efunc_gen_ParseSentencePart_A3 = 52,
  efunc_gen_ParseSentencePart_A3Z1 = 53,
  efunc_gen_ParseSentencePart_A3Z2 = 54,
  efunc_gen_ParseSentencePart_A2 = 55,
  efunc_gen_ParseSentencePart_A2L1D3 = 56,
  efunc_DoParsePattern = 57,
  efunc_gen_StrFromBracket_D9 = 58,
  efunc_ParseBlocks = 59,
  efunc_gen_ParseResult_A2 = 60,
  efunc_gen_ParseBlocks_S1A2 = 61,
  efunc_gen_ParseBlocks_S1A1 = 62,
  efunc_DoParseResult = 63,
  efunc_gen_DoParseResult_S10L1D2 = 64,
  efunc_gen_DoParseResult_S10L2D2 = 65,
  efunc_gen_Fetch_Z1 = 66,
  efunc_Mu = 67,
  efunc_Up = 68,
  efunc_Evm_met = 69,
  efunc_Residue = 70,
  efunc_u_u_Metau_Residue = 71,
  efunc_MapAccum = 72,
  efunc_UnBracket = 73,
  efunc_DelAccumulator = 74,
  efunc_Inc = 75,
  efunc_Dec = 76,
  efunc_SRm_ParseProgram = 77,
  efunc_PrepareBracket = 78,
  efunc_ASTItemFromDirective = 79,
  efunc_ParseSpec = 80,
  efunc_ParseInclude = 81,
  efunc_ParseNameListm_Tail = 82,
  efunc_ParseNameListm_Identsm_Tail = 83,
  efunc_ParseFunction = 84,
  efunc_Expect = 85,
  efunc_DoParseBlock = 86,
  efunc_ParseSentencePart = 87,
  efunc_ParsePattern = 88,
  efunc_StrFromBracket = 89,
  efunc_ParseResult = 90,
  efunc_AddUnexpected = 91,
  efunc_gen_Apply_Z4 = 92,
  efunc_gen_Map_Z0 = 93,
  efunc_gen_PrepareBracket_Z0 = 94,
  efunc_gen_DoParsePattern_Z0 = 95,
  efunc_gen_ParseSentencePart_A3Z0 = 96,
  efunc_gen_Fetch_Z2 = 97,
  efunc_gen_DoParseResult_Z0 = 98,
  efunc_gen_DoParseResult_Z3 = 99,
  efunc_gen_DoParseResult_Z4 = 100,
  efunc_gen_Fetch_Z3 = 101,
  efunc_gen_DoParseResult_Z2 = 102,
  efunc_gen_DoParseResult_S12L1D1 = 103,
  efunc_gen_Fetch_Z0 = 104,
  efunc_gen_DoParseResult_S12L1Z0 = 105,
  efunc_gen_ParseFunction_S1A1Z0 = 106,
  efunc_gen_DoParseBlock_S3A1Z0 = 107,
  efunc_gen_Fetch_Z4 = 108,
  efunc_gen_DoParseResult_Z5 = 109,
  efunc_gen_DoParseResult_Z6 = 110,
  efunc_gen_Fetch_Z5 = 111,
  efunc_gen_Fetch_Z6 = 112,
  efunc_gen_Fetch_Z7 = 113,
};


enum ident {
  ident_TkOpenBracket = 0,
  ident_Open = 1,
  ident_TkCloseBracket = 2,
  ident_Close = 3,
  ident_TkOpenADT = 4,
  ident_TkCloseADT = 5,
  ident_TkOpenCall = 6,
  ident_TkCloseCall = 7,
  ident_TkEOF = 8,
  ident_TkDirective = 9,
  ident_TkNativeBlock = 10,
  ident_NativeBlock = 11,
  ident_TkName = 12,
  ident_TkOpenBlock = 13,
  ident_GNm_Local = 14,
  ident_TkError = 15,
  ident_TkUnexpected = 16,
  ident_TkSemicolon = 17,
  ident_EEnum = 18,
  ident_Enum = 19,
  ident_GNm_Entry = 20,
  ident_ESwap = 21,
  ident_Swap = 22,
  ident_Extern = 23,
  ident_Declaration = 24,
  ident_Forward = 25,
  ident_Entry = 26,
  ident_Meta = 27,
  ident_Include = 28,
  ident_TkCompound = 29,
  ident_Ident = 30,
  ident_Spec = 31,
  ident_TkComma = 32,
  ident_Function = 33,
  ident_TkCloseBlock = 34,
  ident_NativeBody = 35,
  ident_Sentences = 36,
  ident_Assign = 37,
  ident_Condition = 38,
  ident_TkColon = 39,
  ident_TkReplace = 40,
  ident_TkChar = 41,
  ident_Symbol = 42,
  ident_Char = 43,
  ident_TkNumber = 44,
  ident_Number = 45,
  ident_Name = 46,
  ident_TkIdentMarker = 47,
  ident_Identifier = 48,
  ident_TkVariable = 49,
  ident_TkRedefinition = 50,
  ident_TkNewVariable = 51,
  ident_Brackets = 52,
  ident_ADTm_Brackets = 53,
  ident_UnnamedADT = 54,
  ident_CallBrackets = 55,
  ident_Mu = 56,
  ident_Up = 57,
  ident_Evm_met = 58,
  ident_Residue = 59,
  ident_u_u_Metau_Residue = 60,
  ident_Apply = 61,
  ident_Map = 62,
  ident_Reduce = 63,
  ident_Fetch = 64,
  ident_MapAccum = 65,
  ident_DoMapAccum = 66,
  ident_UnBracket = 67,
  ident_DelAccumulator = 68,
  ident_Inc = 69,
  ident_Dec = 70,
  ident_Pipe = 71,
  ident_SRm_ParseProgram = 72,
  ident_PrepareBracket = 73,
  ident_ParseElements = 74,
  ident_ASTItemFromDirective = 75,
  ident_ParseElementm_SwDirective = 76,
  ident_ParseSpec = 77,
  ident_ParseInclude = 78,
  ident_ParseNameList = 79,
  ident_ParseNameListm_Tail = 80,
  ident_ParseNameListm_Idents = 81,
  ident_ParseNameListm_Identsm_Tail = 82,
  ident_ParseFunction = 83,
  ident_ParseBlock = 84,
  ident_Expect = 85,
  ident_DoParseBlock = 86,
  ident_ParseSentence = 87,
  ident_ParseSentencePart = 88,
  ident_ParsePattern = 89,
  ident_DoParsePattern = 90,
  ident_StrFromBracket = 91,
  ident_ParseResult = 92,
  ident_ParseBlocks = 93,
  ident_DoParseResult = 94,
  ident_AddUnexpected = 95,
  ident_Closure = 96,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#1 as range 2
  //DEBUG: e.Arg#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply/4 s.Fn#1/5 e.Argument#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument#1 as range 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.Argument#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.Argument#1/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure#1/9 e.Bounded#1/7 )/6 e.Argument#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded#1 as range 7
  //DEBUG: e.Argument#1: 2
  //DEBUG: t.Closure#1: 9
  //DEBUG: e.Bounded#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure#1/9 } Tile{ AsIs: e.Bounded#1/7 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map/4 t.new#3/5 t.new#4/9 e.new#5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new#5 as range 7
    do {
      // </0 & Map/4 s.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      //DEBUG: t.Next#1: 9
      //DEBUG: s.Fn#1: 5
      //DEBUG: e.Tail#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Next#1/9 } & $table/13 >/14 </15 & Map/16 s.Fn#1/5/17 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t.#0/15 e.0#0/13 )/6 t.Next#1/9 e.Tail#1/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail#1 as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0#0 as range 13
      //DEBUG: t.Next#1: 9
      //DEBUG: e.Tail#1: 11
      //DEBUG: t.#0: 15
      //DEBUG: e.0#0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t.#0/15/19 e.0#0/13/21 Tile{ AsIs: t.Next#1/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t.#0/15 AsIs: e.0#0/13 AsIs: )/6 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn#1/5 t.Next#1/9 e.Tail#1/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail#1 as range 11
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn#1/5 AsIs: t.Next#1/9 } >/13 </14 & Map/15 t.Fn#1/5/16 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn#1/5 (/9 e.Tail#1/7 )/10 t.Acc#2/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail#1 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Tail#1: 7
  //DEBUG: t.Acc#2: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/11 } Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail#1 as range 9
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn#1/5/15 (/17 Tile{ AsIs: e.Tail#1/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument#1/2 t.Function#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Argument#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function#1/5 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn#1/5 t.Acc#1/7 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 } (/9 )/10 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn#1/5 (/9 e.Scanned#1/7 )/10 (/13 e.Tail#1/11 )/14 t.Acc#2/15 e.StepScanned#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned#1 as range 7
  // closed e.Tail#1 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#2 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Scanned#1: 7
  //DEBUG: e.Tail#1: 11
  //DEBUG: t.Acc#2: 15
  //DEBUG: e.StepScanned#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#2/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/7 } Tile{ AsIs: e.StepScanned#2/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 t.Next#1/17 e.Tail#1/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned#1 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 15
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Tail#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn#1/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail#1/15 } )/20 </21 & Apply@2/22 t.Fn#1/5/23 Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: t.Next#1/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 9
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Scanned#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn#1/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 5
  //DEBUG: e.Expr#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Dec/4 s.Num#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num#1/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num#1/2 >/1
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num#1/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func#1/5 (/9 e.Funcs#1/7 )/10 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs#1 as range 7
  // closed e.Arg#2 as range 2
  //DEBUG: t.Func#1: 5
  //DEBUG: e.Funcs#1: 7
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func#1/5 } Tile{ AsIs: e.Arg#2/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#2 as range 2
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Pipe/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Pipe/4 t.Func#1/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func#1: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func#1/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func#1/7 e.Funcs#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs#1 as range 9
    //DEBUG: t.Func#1: 7
    //DEBUG: e.Funcs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func#1/7 } (/11 Tile{ AsIs: e.Funcs#1/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_SRm_ParseProgram(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & SR-ParseProgram/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements/4 AsIs: t.ErrorList#1/5 } (/7 )/8 </9 & Map@1/10 Tile{ AsIs: e.Tokens#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_ParseElements]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SRm_ParseProgram("SR-ParseProgram", 0U, 0U, func_SRm_ParseProgram);


static refalrts::FnResult func_PrepareBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PrepareBracket/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & PrepareBracket/4 t.new#1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PrepareBracket/4 (/5 s.new#2/9 s.new#3/10 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & PrepareBracket/4 (/5 # TkOpenBracket/9 s.LnNum#1/10 )/6 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[9] ) )
        continue;
      //DEBUG: s.LnNum#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Open/9 AsIs: s.LnNum#1/10 HalfReuse: # TkOpenBracket/6 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[9], identifiers[ident_Open]);
      refalrts::reinit_ident(context[6], identifiers[ident_TkOpenBracket]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareBracket/4 (/5 # TkCloseBracket/9 s.LnNum#1/10 )/6 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[9] ) )
        continue;
      //DEBUG: s.LnNum#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Close/9 AsIs: s.LnNum#1/10 HalfReuse: # TkCloseBracket/6 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[9], identifiers[ident_Close]);
      refalrts::reinit_ident(context[6], identifiers[ident_TkCloseBracket]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareBracket/4 (/5 # TkOpenADT/9 s.LnNum#1/10 )/6 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[9] ) )
        continue;
      //DEBUG: s.LnNum#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Open/9 AsIs: s.LnNum#1/10 HalfReuse: # TkOpenADT/6 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[9], identifiers[ident_Open]);
      refalrts::reinit_ident(context[6], identifiers[ident_TkOpenADT]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareBracket/4 (/5 # TkCloseADT/9 s.LnNum#1/10 )/6 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[9] ) )
        continue;
      //DEBUG: s.LnNum#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Close/9 AsIs: s.LnNum#1/10 HalfReuse: # TkCloseADT/6 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[9], identifiers[ident_Close]);
      refalrts::reinit_ident(context[6], identifiers[ident_TkCloseADT]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareBracket/4 (/5 # TkOpenCall/9 s.LnNum#1/10 )/6 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[9] ) )
        continue;
      //DEBUG: s.LnNum#1: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Open/9 AsIs: s.LnNum#1/10 HalfReuse: # TkOpenCall/6 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[9], identifiers[ident_Open]);
      refalrts::reinit_ident(context[6], identifiers[ident_TkOpenCall]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[5];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrepareBracket/4 (/5 # TkCloseCall/9 s.LnNum#1/10 )/6 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[9] ) )
      continue;
    //DEBUG: s.LnNum#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Close/9 AsIs: s.LnNum#1/10 HalfReuse: # TkCloseCall/6 HalfReuse: )/1 ]] }
    refalrts::update_ident(context[9], identifiers[ident_Close]);
    refalrts::reinit_ident(context[6], identifiers[ident_TkCloseCall]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrepareBracket/4 t.OtherToken#1/5 >/1
  //DEBUG: t.OtherToken#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PrepareBracket/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherToken#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareBracket("PrepareBracket", COOKIE1_, COOKIE2_, func_PrepareBracket);


static refalrts::FnResult func_gen_ParseElements_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ParseElements$2=1/4 (/7 e.AST#1/5 )/8 (/11 e.NewASTItems#2/9 )/12 t.ErrorList#2/13 e.Tail#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.AST#1 as range 5
  // closed e.NewASTItems#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#2 as range 2
  //DEBUG: e.AST#1: 5
  //DEBUG: e.NewASTItems#2: 9
  //DEBUG: t.ErrorList#2: 13
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements/4 } Tile{ AsIs: t.ErrorList#2/13 } Tile{ AsIs: (/11 } Tile{ AsIs: e.AST#1/5 } Tile{ AsIs: e.NewASTItems#2/9 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_ParseElements]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseElements_S2A1("ParseElements$2=1", COOKIE1_, COOKIE2_, func_gen_ParseElements_S2A1);


static refalrts::FnResult func_gen_ParseElements_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ParseElements$4=1/4 (/7 e.AST#1/5 )/8 (/11 e.NewASTItems#2/9 )/12 t.ErrorList#2/13 e.Tail#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.AST#1 as range 5
  // closed e.NewASTItems#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#2 as range 2
  //DEBUG: e.AST#1: 5
  //DEBUG: e.NewASTItems#2: 9
  //DEBUG: t.ErrorList#2: 13
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements/4 } Tile{ AsIs: t.ErrorList#2/13 } Tile{ AsIs: (/11 } Tile{ AsIs: e.AST#1/5 } Tile{ AsIs: e.NewASTItems#2/9 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_ParseElements]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseElements_S4A1("ParseElements$4=1", COOKIE1_, COOKIE2_, func_gen_ParseElements_S4A1);


static refalrts::FnResult func_ParseElements(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & ParseElements/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseElements/4 t.new#1/5 (/9 e.new#2/7 )/10 t.new#3/11 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & ParseElements/4 t.new#5/5 (/9 e.new#10/13 )/10 (/11 s.new#6/19 t.new#7/20 e.new#8/17 )/12 e.new#9/15 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[2];
    context[16] = context[3];
    context[17] = 0;
    context[18] = 0;
    if( ! refalrts::brackets_term( context[17], context[18], context[11] ) )
      continue;
    // closed e.new#10 as range 13
    // closed e.new#9 as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    context[21] = refalrts::tvar_left( context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    // closed e.new#8 as range 17
    do {
      // </0 & ParseElements/4 t.new#11/5 (/9 e.new#16/22 )/10 (/11 s.new#12/19 s.new#13/20 e.new#14/24 )/12 e.new#15/26 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::svar_term( context[20], context[20] ) )
        continue;
      // closed e.new#16 as range 22
      // closed e.new#14 as range 24
      // closed e.new#15 as range 26
      do {
        // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 # TkEOF/19 s.LnNum#1/20 )/12 >/1
        context[28] = context[22];
        context[29] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[19] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        // closed e.AST#1 as range 28
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.AST#1: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ParseElements/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/11 # TkEOF/19 s.LnNum#1/20 )/12 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.AST#1/28 } Tile{ ]] }
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 # TkDirective/19 s.LnNum#1/20 s.Directive#1/34 )/12 e.Tail#1/32 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkDirective], context[19] ) )
        continue;
      // closed e.AST#1 as range 28
      // closed e.Tail#1 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 28
      //DEBUG: e.Tail#1: 32
      //DEBUG: s.Directive#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 s.Directive#1/34 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$2=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/28 AsIs: )/10 HalfReuse: </11 HalfReuse: & ParseElement-SwDirective/19 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ HalfReuse: s.Directive1 #34/12 AsIs: e.Tail#1/32 AsIs: >/1 } >/35 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S2A1]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[19], functions[efunc_ParseElementm_SwDirective]);
      refalrts::reinit_svar( context[12], context[34] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[9], context[19] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/22 )/10 (/11 # TkNativeBlock/19 t.SrcPos#1/20 e.Block#1/24 )/12 e.Tail#1/26 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkNativeBlock], context[19] ) )
        continue;
      // closed e.AST#1 as range 22
      // closed e.Block#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: t.SrcPos#1: 20
      //DEBUG: e.AST#1: 22
      //DEBUG: e.Block#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseElements/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.AST#1/22 HalfReuse: (/10 HalfReuse: # NativeBlock/11 } Tile{ AsIs: t.SrcPos#1/20 } Tile{ AsIs: e.Block#1/24 } Tile{ HalfReuse: )/19 } Tile{ AsIs: )/12 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[11], identifiers[ident_NativeBlock]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[12] );
      refalrts::link_brackets( context[10], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseElements/4 t.new#11/5 (/9 e.new#16/22 )/10 (/11 s.new#12/19 s.new#13/20 e.new#14/24 )/12 e.new#15/26 >/1
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[15];
    context[27] = context[16];
    if( ! refalrts::svar_term( context[20], context[20] ) )
      continue;
    // closed e.new#16 as range 22
    // closed e.new#14 as range 24
    // closed e.new#15 as range 26
    do {
      // </0 & ParseElements/4 t.new#17/5 (/9 e.new#21/28 )/10 (/11 # TkName/19 s.new#18/20 e.new#19/30 )/12 e.new#20/32 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[19] ) )
        continue;
      // closed e.new#21 as range 28
      // closed e.new#19 as range 30
      // closed e.new#20 as range 32
      do {
        // </0 & ParseElements/4 t.new#22/5 (/9 e.new#27/34 )/10 (/11 # TkName/19 s.new#23/20 e.new#24/36 )/12 t.new#25/40 e.new#26/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        // closed e.new#27 as range 34
        // closed e.new#24 as range 36
        context[41] = refalrts::tvar_left( context[40], context[38], context[39] );
        if( ! context[41] )
          continue;
        // closed e.new#26 as range 38
        do {
          // </0 & ParseElements/4 t.new#28/5 (/9 e.new#35/42 )/10 (/11 # TkName/19 s.new#29/20 e.new#30/44 )/12 (/40 s.new#31/50 s.new#32/51 e.new#33/48 )/41 e.new#34/46 >/1
          context[42] = context[34];
          context[43] = context[35];
          context[44] = context[36];
          context[45] = context[37];
          context[46] = context[38];
          context[47] = context[39];
          context[48] = 0;
          context[49] = 0;
          if( ! refalrts::brackets_term( context[48], context[49], context[40] ) )
            continue;
          // closed e.new#35 as range 42
          // closed e.new#30 as range 44
          // closed e.new#34 as range 46
          if( ! refalrts::svar_left( context[50], context[48], context[49] ) )
            continue;
          if( ! refalrts::svar_left( context[51], context[48], context[49] ) )
            continue;
          // closed e.new#33 as range 48
          do {
            // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/52 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/54 )/12 (/40 # TkOpenBlock/50 s.LnNum0#1/51 )/41 e.#0/56 >/1
            context[52] = context[42];
            context[53] = context[43];
            context[54] = context[44];
            context[55] = context[45];
            context[56] = context[46];
            context[57] = context[47];
            if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[50] ) )
              continue;
            if( ! refalrts::empty_seq( context[48], context[49] ) )
              continue;
            // closed e.AST#1 as range 52
            // closed e.Name#1 as range 54
            // closed e.#0 as range 56
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LnNum0#1: 51
            //DEBUG: e.AST#1: 52
            //DEBUG: e.Name#1: 54
            //DEBUG: e.#0: 56

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$4=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/52 AsIs: )/10 HalfReuse: </11 HalfReuse: & ParseFunction$1=1/19 } Tile{ AsIs: s.LnNum0#1/51 HalfReuse: # GN-Local/41 } (/58 Tile{ AsIs: e.Name#1/54 } Tile{ AsIs: )/12 HalfReuse: </40 HalfReuse: & ParseBlock/50 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.#0/56 } >/59 >/60 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[58]);
            refalrts::alloc_close_call(vm, context[59]);
            refalrts::alloc_close_call(vm, context[60]);
            refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S4A1]);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[19], functions[efunc_gen_ParseFunction_S1A1]);
            refalrts::reinit_ident(context[41], identifiers[ident_GNm_Local]);
            refalrts::reinit_open_call(context[40]);
            refalrts::reinit_name(context[50], functions[efunc_ParseBlock]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[60] );
            refalrts::push_stack( vm, context[11] );
            refalrts::push_stack( vm, context[59] );
            refalrts::push_stack( vm, context[40] );
            refalrts::link_brackets( context[58], context[12] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[59], context[60] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[12], context[50] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_elem( res, context[58] );
            res = refalrts::splice_evar( res, context[51], context[41] );
            res = refalrts::splice_evar( res, context[9], context[19] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/52 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/54 )/12 (/40 # TkError/50 s.LineNumber#1/51 e.2#0/56 )/41 e.#0/58 >/1
            context[52] = context[42];
            context[53] = context[43];
            context[54] = context[44];
            context[55] = context[45];
            context[56] = context[48];
            context[57] = context[49];
            context[58] = context[46];
            context[59] = context[47];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[50] ) )
              continue;
            // closed e.AST#1 as range 52
            // closed e.Name#1 as range 54
            // closed e.2#0 as range 56
            // closed e.#0 as range 58
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 51
            //DEBUG: e.AST#1: 52
            //DEBUG: e.Name#1: 54
            //DEBUG: e.2#0: 56
            //DEBUG: e.#0: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 e.Name#1/54 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$4=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/52 AsIs: )/10 AsIs: (/11 HalfReuse: )/19 } </60 & EL-AddErrorAt/61 Tile{ AsIs: t.ErrorList#1/5 } s.LineNumber#1/51/62 e.2#0/56/63 Tile{ HalfReuse: >/12 AsIs: (/40 AsIs: # TkError/50 AsIs: s.LineNumber#1/51 AsIs: e.2#0/56 AsIs: )/41 AsIs: e.#0/58 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[60]);
            refalrts::alloc_name(vm, context[61], functions[efunc_ELm_AddErrorAt]);
            refalrts::copy_stvar(vm, context[62], context[51]);
            refalrts::copy_evar(vm, context[63], context[64], context[56], context[57]);
            refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S4A1]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::reinit_close_call(context[12]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[40], context[41] );
            refalrts::push_stack( vm, context[12] );
            refalrts::push_stack( vm, context[60] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[12];
            res = refalrts::splice_evar( res, context[63], context[64] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[60], context[61] );
            res = refalrts::splice_evar( res, context[9], context[19] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/52 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/54 )/12 (/40 # TkUnexpected/50 s.LineNumber#1/51 e.2#0/56 )/41 e.#0/58 >/1
            context[52] = context[42];
            context[53] = context[43];
            context[54] = context[44];
            context[55] = context[45];
            context[56] = context[48];
            context[57] = context[49];
            context[58] = context[46];
            context[59] = context[47];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[50] ) )
              continue;
            // closed e.AST#1 as range 52
            // closed e.Name#1 as range 54
            // closed e.2#0 as range 56
            // closed e.#0 as range 58
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 51
            //DEBUG: e.AST#1: 52
            //DEBUG: e.Name#1: 54
            //DEBUG: e.2#0: 56
            //DEBUG: e.#0: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 e.Name#1/54 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$4=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/52 AsIs: )/10 AsIs: (/11 HalfReuse: )/19 } </60 & EL-AddErrorAt/61 Tile{ AsIs: t.ErrorList#1/5 } s.LineNumber#1/51/62"Unknown characters \""/63 e.2#0/56/65 '\"'/67 Tile{ HalfReuse: >/12 AsIs: (/40 AsIs: # TkUnexpected/50 AsIs: s.LineNumber#1/51 AsIs: e.2#0/56 AsIs: )/41 AsIs: e.#0/58 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[60]);
            refalrts::alloc_name(vm, context[61], functions[efunc_ELm_AddErrorAt]);
            refalrts::copy_stvar(vm, context[62], context[51]);
            refalrts::alloc_chars(vm, context[63], context[64], "Unknown characters \"", 20);
            refalrts::copy_evar(vm, context[65], context[66], context[56], context[57]);
            refalrts::alloc_char(vm, context[67], '\"');
            refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S4A1]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::reinit_close_call(context[12]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[40], context[41] );
            refalrts::push_stack( vm, context[12] );
            refalrts::push_stack( vm, context[60] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[12];
            res = refalrts::splice_evar( res, context[62], context[67] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[60], context[61] );
            res = refalrts::splice_evar( res, context[9], context[19] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/52 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/54 )/12 (/40 s.Unexpected#1/50 s.LineNumber#1/51 e.2#0/56 )/41 e.#0/58 >/1
          context[52] = context[42];
          context[53] = context[43];
          context[54] = context[44];
          context[55] = context[45];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[46];
          context[59] = context[47];
          // closed e.AST#1 as range 52
          // closed e.Name#1 as range 54
          // closed e.2#0 as range 56
          // closed e.#0 as range 58
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: s.Unexpected#1: 50
          //DEBUG: s.LineNumber#1: 51
          //DEBUG: e.AST#1: 52
          //DEBUG: e.Name#1: 54
          //DEBUG: e.2#0: 56
          //DEBUG: e.#0: 58

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 e.Name#1/54 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$4=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/52 AsIs: )/10 AsIs: (/11 HalfReuse: )/19 } </60 & EL-AddErrorAt/61 Tile{ AsIs: t.ErrorList#1/5 } s.LineNumber#1/51/62"Unexpected "/63 </65 & SR-StrFromToken/66 s.Unexpected#1/50/67 e.2#0/56/68 >/70", expected open brace"/71 Tile{ HalfReuse: >/12 AsIs: (/40 AsIs: s.Unexpected#1/50 AsIs: s.LineNumber#1/51 AsIs: e.2#0/56 AsIs: )/41 AsIs: e.#0/58 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[60]);
          refalrts::alloc_name(vm, context[61], functions[efunc_ELm_AddErrorAt]);
          refalrts::copy_stvar(vm, context[62], context[51]);
          refalrts::alloc_chars(vm, context[63], context[64], "Unexpected ", 11);
          refalrts::alloc_open_call(vm, context[65]);
          refalrts::alloc_name(vm, context[66], functions[efunc_SRm_StrFromToken]);
          refalrts::copy_stvar(vm, context[67], context[50]);
          refalrts::copy_evar(vm, context[68], context[69], context[56], context[57]);
          refalrts::alloc_close_call(vm, context[70]);
          refalrts::alloc_chars(vm, context[71], context[72], ", expected open brace", 21);
          refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S4A1]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[40], context[41] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[60] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[65] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[12];
          res = refalrts::splice_evar( res, context[62], context[72] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[9], context[19] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/42 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/44 )/12 t.#0/40 e.#0/46 >/1
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        // closed e.AST#1 as range 42
        // closed e.Name#1 as range 44
        // closed e.#0 as range 46
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: t.#0: 40
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.AST#1: 42
        //DEBUG: e.Name#1: 44
        //DEBUG: e.#0: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 e.Name#1/44 {REMOVED TILE}
        //RESULT: Tile{ [[ } </48 & ParseElements$4=1/49 Tile{ AsIs: (/9 AsIs: e.AST#1/42 AsIs: )/10 AsIs: (/11 HalfReuse: )/19 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } t.#0/40/50"open brace"/52 Tile{ HalfReuse: >/12 AsIs: t.#0/40 AsIs: e.#0/46 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_gen_ParseElements_S4A1]);
        refalrts::copy_evar(vm, context[50], context[51], context[40], context[41]);
        refalrts::alloc_chars(vm, context[52], context[53], "open brace", 10);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[19] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[12];
        res = refalrts::splice_evar( res, context[50], context[53] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[9], context[19] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/34 )/10 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/36 )/12 e.Tail#1/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      // closed e.AST#1 as range 34
      // closed e.Name#1 as range 36
      // closed e.Tail#1 as range 38
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 34
      //DEBUG: e.Name#1: 36
      //DEBUG: e.Tail#1: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseElements$4=1/4 } Tile{ AsIs: (/9 AsIs: e.AST#1/34 AsIs: )/10 HalfReuse: </11 HalfReuse: & ParseFunction*5/19 } # GN-Local/40 (/41 Tile{ AsIs: e.Name#1/36 } Tile{ AsIs: )/12 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/38 } >/42 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[40], identifiers[ident_GNm_Local]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_gen_ParseElements_S4A1]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[19], functions[efunc_gen_ParseFunction_D5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[41], context[12] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[19] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 # TkSemicolon/19 s.LnNum#1/20 )/12 e.Tail#1/30 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[26];
      context[31] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.AST#1 as range 28
      // closed e.Tail#1 as range 30
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 28
      //DEBUG: e.Tail#1: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/11 # TkSemicolon/19 s.LnNum#1/20 )/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseElements/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.AST#1/28 AsIs: )/10 } Tile{ AsIs: e.Tail#1/30 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 # TkError/19 s.LineNumber#1/20 e.1#0/30 )/12 e.Tail#1/32 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[19] ) )
        continue;
      // closed e.AST#1 as range 28
      // closed e.1#0 as range 30
      // closed e.Tail#1 as range 32
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 28
      //DEBUG: e.1#0: 30
      //DEBUG: e.Tail#1: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseElements/4 } Tile{ HalfReuse: </19 } & EL-AddErrorAt/34 Tile{ AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #20/9 } Tile{ AsIs: e.1#0/30 } Tile{ HalfReuse: >/10 AsIs: (/11 } Tile{ AsIs: e.AST#1/28 } Tile{ AsIs: )/12 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[34], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[5], context[9] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 # TkUnexpected/19 s.LineNumber#1/20 e.1#0/30 )/12 e.Tail#1/32 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[19] ) )
        continue;
      // closed e.AST#1 as range 28
      // closed e.1#0 as range 30
      // closed e.Tail#1 as range 32
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 28
      //DEBUG: e.1#0: 30
      //DEBUG: e.Tail#1: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </34 Tile{ HalfReuse: & ParseElements/19 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #20/9 }"Unknown characters \""/35 Tile{ AsIs: e.1#0/30 } '\"'/37 Tile{ HalfReuse: >/10 AsIs: (/11 } Tile{ AsIs: e.AST#1/28 } Tile{ AsIs: )/12 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "Unknown characters \"", 20);
      refalrts::alloc_char(vm, context[37], '\"');
      refalrts::reinit_name(context[19], functions[efunc_ParseElements]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/28 )/10 (/11 s.Unexpected#1/19 s.LineNumber#1/20 e.1#0/30 )/12 e.Tail#1/32 >/1
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    context[32] = context[26];
    context[33] = context[27];
    // closed e.AST#1 as range 28
    // closed e.1#0 as range 30
    // closed e.Tail#1 as range 32
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.Unexpected#1: 19
    //DEBUG: s.LineNumber#1: 20
    //DEBUG: e.AST#1: 28
    //DEBUG: e.1#0: 30
    //DEBUG: e.Tail#1: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/20 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & ParseElements/35 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #20/9 }"Unexpected "/36 Tile{ HalfReuse: </10 HalfReuse: & SR-StrFromToken/11 AsIs: s.Unexpected#1/19 } Tile{ AsIs: e.1#0/30 } >/38", expected directive or name"/39 >/41 (/42 Tile{ AsIs: e.AST#1/28 } Tile{ AsIs: )/12 AsIs: e.Tail#1/32 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_ParseElements]);
    refalrts::alloc_chars(vm, context[36], context[37], "Unexpected ", 11);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], ", expected directive or name", 28);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[20] );
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_name(context[11], functions[efunc_SRm_StrFromToken]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[38], context[42] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[10], context[19] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseElements/4 t.ErrorList#1/5 (/9 e.AST#1/7 )/10 t.Unexpected#1/11 e.Tail#1/2 >/1
  // closed e.AST#1 as range 7
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: t.Unexpected#1: 11
  //DEBUG: e.AST#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseElements/4 } </13 & AddUnexpected*3/14 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: t.Unexpected#1/11 }"directive or name"/15 >/17 Tile{ AsIs: (/9 AsIs: e.AST#1/7 AsIs: )/10 } Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::alloc_chars(vm, context[15], context[16], "directive or name", 17);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseElements("ParseElements", COOKIE1_, COOKIE2_, func_ParseElements);


static refalrts::FnResult func_ASTItemFromDirective(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & ASTItemFromDirective/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ASTItemFromDirective/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ASTItemFromDirective/4 # EEnum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_EEnum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Enum/5 HalfReuse: # GN-Entry/1 ]] }
    refalrts::update_ident(context[5], identifiers[ident_Enum]);
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Entry]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # Enum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Enum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Enum/5 HalfReuse: # GN-Local/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Local]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # ESwap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ESwap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Swap/5 HalfReuse: # GN-Entry/1 ]] }
    refalrts::update_ident(context[5], identifiers[ident_Swap]);
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Entry]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # Swap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Swap/5 HalfReuse: # GN-Local/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Local]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # Extern/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Extern], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Declaration/5 HalfReuse: # GN-Entry/1 ]] }
    refalrts::update_ident(context[5], identifiers[ident_Declaration]);
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Entry]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # Forward/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Forward], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Declaration/5 HalfReuse: # GN-Local/1 ]] }
    refalrts::update_ident(context[5], identifiers[ident_Declaration]);
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Local]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ASTItemFromDirective/4 # Entry/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Entry], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Entry/5 HalfReuse: # GN-Entry/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_GNm_Entry]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ASTItemFromDirective/4 # Meta/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Meta], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ASTItemFromDirective/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: # Meta/5 HalfReuse: # GN-Local/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_GNm_Local]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ASTItemFromDirective("ASTItemFromDirective", COOKIE1_, COOKIE2_, func_ASTItemFromDirective);


static refalrts::FnResult func_ParseElementm_SwDirective(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & ParseElement-SwDirective/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseElement-SwDirective/4 t.new#1/5 s.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & ParseElement-SwDirective/4 t.new#4/5 s.new#5/7 t.new#6/10 e.new#7/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[11] = refalrts::tvar_left( context[10], context[8], context[9] );
    if( ! context[11] )
      continue;
    // closed e.new#7 as range 8
    do {
      // </0 & ParseElement-SwDirective/4 t.new#8/5 s.new#9/7 (/10 s.new#10/16 s.new#11/17 e.new#12/14 )/11 e.new#13/12 >/1
      context[12] = context[8];
      context[13] = context[9];
      context[14] = 0;
      context[15] = 0;
      if( ! refalrts::brackets_term( context[14], context[15], context[10] ) )
        continue;
      // closed e.new#13 as range 12
      if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
        continue;
      if( ! refalrts::svar_left( context[17], context[14], context[15] ) )
        continue;
      // closed e.new#12 as range 14
      do {
        // </0 & ParseElement-SwDirective/4 t.new#14/5 s.new#15/7 (/10 s.new#16/16 s.new#17/17 e.new#18/18 )/11 t.new#19/22 e.new#20/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[12];
        context[21] = context[13];
        // closed e.new#18 as range 18
        context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
        if( ! context[23] )
          continue;
        // closed e.new#20 as range 20
        do {
          // </0 & ParseElement-SwDirective/4 t.new#21/5 s.new#22/7 (/10 s.new#23/16 s.new#24/17 e.new#25/24 )/11 (/22 s.new#26/30 s.new#27/31 e.new#28/28 )/23 e.new#29/26 >/1
          context[24] = context[18];
          context[25] = context[19];
          context[26] = context[20];
          context[27] = context[21];
          context[28] = 0;
          context[29] = 0;
          if( ! refalrts::brackets_term( context[28], context[29], context[22] ) )
            continue;
          // closed e.new#25 as range 24
          // closed e.new#29 as range 26
          if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
            continue;
          if( ! refalrts::svar_left( context[31], context[28], context[29] ) )
            continue;
          // closed e.new#28 as range 28
          do {
            // </0 & ParseElement-SwDirective/4 t.new#30/5 s.new#31/7 (/10 s.new#32/16 s.new#33/17 e.new#34/32 )/11 (/22 s.new#35/30 s.new#36/31 )/23 e.new#37/34 >/1
            context[32] = context[24];
            context[33] = context[25];
            context[34] = context[26];
            context[35] = context[27];
            if( ! refalrts::empty_seq( context[28], context[29] ) )
              continue;
            // closed e.new#34 as range 32
            // closed e.new#37 as range 34
            do {
              // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Entry/7 (/10 # TkName/16 s.NamePos#1/17 e.Name#1/36 )/11 (/22 # TkOpenBlock/30 s.BracePos#1/31 )/23 e.Tail#1/38 >/1
              context[36] = context[32];
              context[37] = context[33];
              context[38] = context[34];
              context[39] = context[35];
              if( ! refalrts::ident_term( identifiers[ident_Entry], context[7] ) )
                continue;
              if( ! refalrts::ident_term( identifiers[ident_TkName], context[16] ) )
                continue;
              if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[30] ) )
                continue;
              // closed e.Name#1 as range 36
              // closed e.Tail#1 as range 38
              //DEBUG: t.ErrorList#1: 5
              //DEBUG: s.NamePos#1: 17
              //DEBUG: s.BracePos#1: 31
              //DEBUG: e.Name#1: 36
              //DEBUG: e.Tail#1: 38

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NamePos#1/17 {REMOVED TILE} {REMOVED TILE} s.BracePos#1/31 )/23 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseFunction$1=1@1/4 } Tile{ HalfReuse: s.BracePos1 #31/7 AsIs: (/10 } Tile{ AsIs: e.Name#1/36 } Tile{ AsIs: )/11 HalfReuse: </22 HalfReuse: & ParseBlock/30 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/38 } Tile{ HalfReuse: >/16 } Tile{ AsIs: >/1 ]] }
              refalrts::update_name(context[4], functions[efunc_gen_ParseFunction_S1A1Z1]);
              refalrts::reinit_svar( context[7], context[31] );
              refalrts::reinit_open_call(context[22]);
              refalrts::reinit_name(context[30], functions[efunc_ParseBlock]);
              refalrts::reinit_close_call(context[16]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[16] );
              refalrts::push_stack( vm, context[22] );
              refalrts::link_brackets( context[10], context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_elem( res, context[16] );
              res = refalrts::splice_evar( res, context[38], context[39] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_evar( res, context[11], context[30] );
              res = refalrts::splice_evar( res, context[36], context[37] );
              res = refalrts::splice_evar( res, context[7], context[10] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkCompound/16 s.LnNum1#1/17 e.4#0/36 )/11 (/22 # TkSemicolon/30 s.LnNum2#1/31 )/23 e.1#0/38 >/1
            context[36] = context[32];
            context[37] = context[33];
            context[38] = context[34];
            context[39] = context[35];
            if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
              continue;
            if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[16] ) )
              continue;
            if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[30] ) )
              continue;
            // closed e.4#0 as range 36
            // closed e.1#0 as range 38
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum1#1: 17
            //DEBUG: s.LnNum2#1: 31
            //DEBUG: e.4#0: 36
            //DEBUG: e.1#0: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & ParseElement-SwDirective/4 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/30 s.LnNum2#1/31 )/23 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/7 AsIs: (/10 Reuse: # Include/16 AsIs: s.LnNum1#1/17 AsIs: e.4#0/36 AsIs: )/11 HalfReuse: )/22 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.1#0/38 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[7]);
            refalrts::update_ident(context[16], identifiers[ident_Include]);
            refalrts::reinit_close_bracket(context[22]);
            refalrts::link_brackets( context[7], context[22] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[38], context[39] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[7], context[22] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseElement-SwDirective/4 t.new#30/5 # Include/7 (/10 # TkCompound/16 s.new#31/17 e.new#32/32 )/11 (/22 s.new#33/30 s.new#34/31 e.new#35/34 )/23 e.new#36/36 >/1
          context[32] = context[24];
          context[33] = context[25];
          context[34] = context[28];
          context[35] = context[29];
          context[36] = context[26];
          context[37] = context[27];
          if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[16] ) )
            continue;
          // closed e.new#32 as range 32
          // closed e.new#35 as range 34
          // closed e.new#36 as range 36
          do {
            // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkCompound/16 s.LnNum#1/17 e.3#0/38 )/11 (/22 # TkError/30 s.LineNumber#1/31 e.2#0/40 )/23 e.1#0/42 >/1
            context[38] = context[32];
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[30] ) )
              continue;
            // closed e.3#0 as range 38
            // closed e.2#0 as range 40
            // closed e.1#0 as range 42
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum#1: 17
            //DEBUG: s.LineNumber#1: 31
            //DEBUG: e.3#0: 38
            //DEBUG: e.2#0: 40
            //DEBUG: e.1#0: 42

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/7 AsIs: (/10 Reuse: # Include/16 AsIs: s.LnNum#1/17 AsIs: e.3#0/38 AsIs: )/11 HalfReuse: )/22 HalfReuse: </30 } Tile{ Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } Tile{ HalfReuse: s.LineNumber1 #31/0 } e.2#0/40/44 Tile{ AsIs: >/1 } (/46 # TkError/47 Tile{ AsIs: s.LineNumber#1/31 AsIs: e.2#0/40 AsIs: )/23 } Tile{ AsIs: e.1#0/42 } Tile{ ]] }
            refalrts::copy_evar(vm, context[44], context[45], context[40], context[41]);
            refalrts::alloc_open_bracket(vm, context[46]);
            refalrts::alloc_ident(vm, context[47], identifiers[ident_TkError]);
            refalrts::reinit_open_bracket(context[7]);
            refalrts::update_ident(context[16], identifiers[ident_Include]);
            refalrts::reinit_close_bracket(context[22]);
            refalrts::reinit_open_call(context[30]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_svar( context[0], context[31] );
            refalrts::link_brackets( context[46], context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[30] );
            refalrts::link_brackets( context[7], context[22] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[42], context[43] );
            res = refalrts::splice_evar( res, context[31], context[23] );
            res = refalrts::splice_evar( res, context[46], context[47] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_elem( res, context[0] );
            res = refalrts::splice_evar( res, context[4], context[6] );
            res = refalrts::splice_evar( res, context[7], context[30] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkCompound/16 s.LnNum#1/17 e.3#0/38 )/11 (/22 # TkUnexpected/30 s.LineNumber#1/31 e.2#0/40 )/23 e.1#0/42 >/1
            context[38] = context[32];
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[30] ) )
              continue;
            // closed e.3#0 as range 38
            // closed e.2#0 as range 40
            // closed e.1#0 as range 42
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNum#1: 17
            //DEBUG: s.LineNumber#1: 31
            //DEBUG: e.3#0: 38
            //DEBUG: e.2#0: 40
            //DEBUG: e.1#0: 42

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/7 AsIs: (/10 Reuse: # Include/16 AsIs: s.LnNum#1/17 AsIs: e.3#0/38 AsIs: )/11 HalfReuse: )/22 HalfReuse: </30 } Tile{ Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/31/44"Un"/45 Tile{ HalfReuse: 'k'/0 }"nown characters \""/47 e.2#0/40/49 '\"'/51 Tile{ AsIs: >/1 } (/52 # TkUnexpected/53 Tile{ AsIs: s.LineNumber#1/31 AsIs: e.2#0/40 AsIs: )/23 } Tile{ AsIs: e.1#0/42 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[44], context[31]);
            refalrts::alloc_chars(vm, context[45], context[46], "Un", 2);
            refalrts::alloc_chars(vm, context[47], context[48], "nown characters \"", 17);
            refalrts::copy_evar(vm, context[49], context[50], context[40], context[41]);
            refalrts::alloc_char(vm, context[51], '\"');
            refalrts::alloc_open_bracket(vm, context[52]);
            refalrts::alloc_ident(vm, context[53], identifiers[ident_TkUnexpected]);
            refalrts::reinit_open_bracket(context[7]);
            refalrts::update_ident(context[16], identifiers[ident_Include]);
            refalrts::reinit_close_bracket(context[22]);
            refalrts::reinit_open_call(context[30]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[0], 'k');
            refalrts::link_brackets( context[52], context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[30] );
            refalrts::link_brackets( context[7], context[22] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[42], context[43] );
            res = refalrts::splice_evar( res, context[31], context[23] );
            res = refalrts::splice_evar( res, context[52], context[53] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[47], context[51] );
            res = refalrts::splice_elem( res, context[0] );
            res = refalrts::splice_evar( res, context[44], context[46] );
            res = refalrts::splice_evar( res, context[4], context[6] );
            res = refalrts::splice_evar( res, context[7], context[30] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkCompound/16 s.LnNum#1/17 e.3#0/38 )/11 (/22 s.Unexpected#1/30 s.LineNumber#1/31 e.2#0/40 )/23 e.1#0/42 >/1
          context[38] = context[32];
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[37];
          // closed e.3#0 as range 38
          // closed e.2#0 as range 40
          // closed e.1#0 as range 42
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 17
          //DEBUG: s.Unexpected#1: 30
          //DEBUG: s.LineNumber#1: 31
          //DEBUG: e.3#0: 38
          //DEBUG: e.2#0: 40
          //DEBUG: e.1#0: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/7 AsIs: (/10 Reuse: # Include/16 AsIs: s.LnNum#1/17 AsIs: e.3#0/38 AsIs: )/11 HalfReuse: )/22 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/31/44"Unexpected "/45 </47 & SR-StrFromToken/48 s.Unexpected#1/30/49 e.2#0/40/50 Tile{ AsIs: >/1 }", expected semicolon"/52 >/54 (/55 Tile{ AsIs: s.Unexpected#1/30 AsIs: s.LineNumber#1/31 AsIs: e.2#0/40 AsIs: )/23 } Tile{ AsIs: e.1#0/42 } Tile{ ]] }
          refalrts::copy_stvar(vm, context[44], context[31]);
          refalrts::alloc_chars(vm, context[45], context[46], "Unexpected ", 11);
          refalrts::alloc_open_call(vm, context[47]);
          refalrts::alloc_name(vm, context[48], functions[efunc_SRm_StrFromToken]);
          refalrts::copy_stvar(vm, context[49], context[30]);
          refalrts::copy_evar(vm, context[50], context[51], context[40], context[41]);
          refalrts::alloc_chars(vm, context[52], context[53], ", expected semicolon", 20);
          refalrts::alloc_close_call(vm, context[54]);
          refalrts::alloc_open_bracket(vm, context[55]);
          refalrts::reinit_open_bracket(context[7]);
          refalrts::update_ident(context[16], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[22]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::link_brackets( context[55], context[23] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[47] );
          refalrts::link_brackets( context[7], context[22] );
          refalrts::link_brackets( context[10], context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[30], context[23] );
          res = refalrts::splice_evar( res, context[52], context[55] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_evar( res, context[44], context[49] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_evar( res, context[7], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkCompound/16 s.LnNum#1/17 e.3#0/24 )/11 t.0#0/22 e.1#0/26 >/1
        context[24] = context[18];
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[16] ) )
          continue;
        // closed e.3#0 as range 24
        // closed e.1#0 as range 26
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: t.0#0: 22
        //DEBUG: s.LnNum#1: 17
        //DEBUG: e.3#0: 24
        //DEBUG: e.1#0: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/7 AsIs: (/10 Reuse: # Include/16 AsIs: s.LnNum#1/17 AsIs: e.3#0/24 AsIs: )/11 } )/28 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: t.0#0/22 }"semicolon"/29 Tile{ AsIs: >/1 } t.0#0/22/31 Tile{ AsIs: e.1#0/26 } Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "semicolon", 9);
        refalrts::copy_evar(vm, context[31], context[32], context[22], context[23]);
        refalrts::reinit_open_bracket(context[7]);
        refalrts::update_ident(context[16], identifiers[ident_Include]);
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[28] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseElement-SwDirective/4 t.new#14/5 # Include/7 (/10 s.new#15/16 s.new#16/17 e.new#17/18 )/11 e.new#18/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
        continue;
      // closed e.new#17 as range 18
      // closed e.new#18 as range 20
      do {
        // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkError/16 s.LineNumber#1/17 e.2#0/22 )/11 e.#0/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[16] ) )
          continue;
        // closed e.2#0 as range 22
        // closed e.#0 as range 24
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LineNumber#1: 17
        //DEBUG: e.2#0: 22
        //DEBUG: e.#0: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } )/26 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/17/27 e.2#0/22/28 Tile{ HalfReuse: >/7 AsIs: (/10 AsIs: # TkError/16 AsIs: s.LineNumber#1/17 AsIs: e.2#0/22 AsIs: )/11 } Tile{ AsIs: e.#0/24 } Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[26]);
        refalrts::copy_stvar(vm, context[27], context[17]);
        refalrts::copy_evar(vm, context[28], context[29], context[22], context[23]);
        refalrts::reinit_open_bracket(context[1]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_close_call(context[7]);
        refalrts::link_brackets( context[10], context[11] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[1], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 # TkUnexpected/16 s.LineNumber#1/17 e.2#0/22 )/11 e.#0/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[16] ) )
          continue;
        // closed e.2#0 as range 22
        // closed e.#0 as range 24
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LineNumber#1: 17
        //DEBUG: e.2#0: 22
        //DEBUG: e.#0: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/26 )/27 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/17/28 'U'/29 Tile{ HalfReuse: 'n'/1 }"known characters \""/30 e.2#0/22/32 '\"'/34 Tile{ HalfReuse: >/7 AsIs: (/10 AsIs: # TkUnexpected/16 AsIs: s.LineNumber#1/17 AsIs: e.2#0/22 AsIs: )/11 } Tile{ AsIs: e.#0/24 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::copy_stvar(vm, context[28], context[17]);
        refalrts::alloc_char(vm, context[29], 'U');
        refalrts::alloc_chars(vm, context[30], context[31], "known characters \"", 18);
        refalrts::copy_evar(vm, context[32], context[33], context[22], context[23]);
        refalrts::alloc_char(vm, context[34], '\"');
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_char(context[1], 'n');
        refalrts::reinit_close_call(context[7]);
        refalrts::link_brackets( context[10], context[11] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        res = refalrts::splice_evar( res, context[30], context[34] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 (/10 s.Unexpected#1/16 s.LineNumber#1/17 e.2#0/22 )/11 e.#0/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.2#0 as range 22
      // closed e.#0 as range 24
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.Unexpected#1: 16
      //DEBUG: s.LineNumber#1: 17
      //DEBUG: e.2#0: 22
      //DEBUG: e.#0: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/26 )/27 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/17/28"Unexpected "/29 </31 & SR-StrFromToken/32 s.Unexpected#1/16/33 e.2#0/22/34 Tile{ AsIs: >/1 }", expected compound symbol"/36 Tile{ HalfReuse: >/7 AsIs: (/10 AsIs: s.Unexpected#1/16 AsIs: s.LineNumber#1/17 AsIs: e.2#0/22 AsIs: )/11 } Tile{ AsIs: e.#0/24 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::copy_stvar(vm, context[28], context[17]);
      refalrts::alloc_chars(vm, context[29], context[30], "Unexpected ", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_SRm_StrFromToken]);
      refalrts::copy_stvar(vm, context[33], context[16]);
      refalrts::copy_evar(vm, context[34], context[35], context[22], context[23]);
      refalrts::alloc_chars(vm, context[36], context[37], ", expected compound symbol", 26);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[7]);
      refalrts::link_brackets( context[10], context[11] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[28], context[33] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 t.#0/10 e.#0/12 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
      continue;
    // closed e.#0 as range 12
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: t.#0: 10
    //DEBUG: e.#0: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/14 )/15 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } t.#0/10/16 'c'/18 Tile{ HalfReuse: 'o'/1 }"mpound symbol"/19 Tile{ HalfReuse: >/7 AsIs: t.#0/10 } Tile{ AsIs: e.#0/12 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[10], context[11]);
    refalrts::alloc_char(vm, context[18], 'c');
    refalrts::alloc_chars(vm, context[19], context[20], "mpound symbol", 13);
    refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
    refalrts::reinit_char(context[1], 'o');
    refalrts::reinit_close_call(context[7]);
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Include/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Include], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Include/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseInclude*3/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/8 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_ParseInclude_D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Ident/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Ident], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList-Idents/4 } Tile{ HalfReuse: (/7 } )/10 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/8 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_ParseNameListm_Idents]);
    refalrts::reinit_open_bracket(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.new#4/5 # Spec/7 e.new#5/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Spec], context[7] ) )
      continue;
    // closed e.new#5 as range 8
    do {
      // </0 & ParseElement-SwDirective/4 t.new#6/5 # Spec/7 t.new#7/12 e.new#8/10 >/1
      context[10] = context[8];
      context[11] = context[9];
      context[13] = refalrts::tvar_left( context[12], context[10], context[11] );
      if( ! context[13] )
        continue;
      // closed e.new#8 as range 10
      do {
        // </0 & ParseElement-SwDirective/4 t.new#9/5 # Spec/7 (/12 s.new#10/18 s.new#11/19 e.new#12/16 )/13 e.new#13/14 >/1
        context[14] = context[10];
        context[15] = context[11];
        context[16] = 0;
        context[17] = 0;
        if( ! refalrts::brackets_term( context[16], context[17], context[12] ) )
          continue;
        // closed e.new#13 as range 14
        if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
          continue;
        if( ! refalrts::svar_left( context[19], context[16], context[17] ) )
          continue;
        // closed e.new#12 as range 16
        do {
          // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 (/12 # TkName/18 s.LnNum#1/19 e.2#0/20 )/13 e.#0/22 >/1
          context[20] = context[16];
          context[21] = context[17];
          context[22] = context[14];
          context[23] = context[15];
          if( ! refalrts::ident_term( identifiers[ident_TkName], context[18] ) )
            continue;
          // closed e.2#0 as range 20
          // closed e.#0 as range 22
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 19
          //DEBUG: e.2#0: 20
          //DEBUG: e.#0: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </24 Tile{ HalfReuse: & ParseSpec$1=1/18 AsIs: s.LnNum#1/19 } (/25 Tile{ AsIs: e.2#0/20 } Tile{ AsIs: )/13 } Tile{ AsIs: </0 Reuse: & DoParsePattern@1/4 AsIs: t.ErrorList#1/5 HalfReuse: (/7 HalfReuse: )/12 } Tile{ AsIs: e.#0/22 } >/26 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_open_bracket(vm, context[25]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::reinit_name(context[18], functions[efunc_gen_ParseSpec_S1A1]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParsePattern_Z1]);
          refalrts::reinit_open_bracket(context[7]);
          refalrts::reinit_close_bracket(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[12] );
          refalrts::link_brackets( context[25], context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[26] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[0], context[12] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[20], context[21] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_elem( res, context[24] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 (/12 # TkError/18 s.LineNumber#1/19 e.2#0/20 )/13 e.#0/22 >/1
          context[20] = context[16];
          context[21] = context[17];
          context[22] = context[14];
          context[23] = context[15];
          if( ! refalrts::ident_term( identifiers[ident_TkError], context[18] ) )
            continue;
          // closed e.2#0 as range 20
          // closed e.#0 as range 22
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LineNumber#1: 19
          //DEBUG: e.2#0: 20
          //DEBUG: e.#0: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } )/24 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/19/25 e.2#0/20/26 Tile{ HalfReuse: >/7 AsIs: (/12 AsIs: # TkError/18 AsIs: s.LineNumber#1/19 AsIs: e.2#0/20 AsIs: )/13 } Tile{ AsIs: e.#0/22 } Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::copy_stvar(vm, context[25], context[19]);
          refalrts::copy_evar(vm, context[26], context[27], context[20], context[21]);
          refalrts::reinit_open_bracket(context[1]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_close_call(context[7]);
          refalrts::link_brackets( context[12], context[13] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[1], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[7], context[13] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[1] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 (/12 # TkUnexpected/18 s.LineNumber#1/19 e.2#0/20 )/13 e.#0/22 >/1
          context[20] = context[16];
          context[21] = context[17];
          context[22] = context[14];
          context[23] = context[15];
          if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[18] ) )
            continue;
          // closed e.2#0 as range 20
          // closed e.#0 as range 22
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LineNumber#1: 19
          //DEBUG: e.2#0: 20
          //DEBUG: e.#0: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/24 )/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/19/26 'U'/27 Tile{ HalfReuse: 'n'/1 }"known characters \""/28 e.2#0/20/30 '\"'/32 Tile{ HalfReuse: >/7 AsIs: (/12 AsIs: # TkUnexpected/18 AsIs: s.LineNumber#1/19 AsIs: e.2#0/20 AsIs: )/13 } Tile{ AsIs: e.#0/22 } Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::copy_stvar(vm, context[26], context[19]);
          refalrts::alloc_char(vm, context[27], 'U');
          refalrts::alloc_chars(vm, context[28], context[29], "known characters \"", 18);
          refalrts::copy_evar(vm, context[30], context[31], context[20], context[21]);
          refalrts::alloc_char(vm, context[32], '\"');
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_char(context[1], 'n');
          refalrts::reinit_close_call(context[7]);
          refalrts::link_brackets( context[12], context[13] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[24], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[7], context[13] );
          res = refalrts::splice_evar( res, context[28], context[32] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 (/12 s.Unexpected#1/18 s.LineNumber#1/19 e.2#0/20 )/13 e.#0/22 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[14];
        context[23] = context[15];
        // closed e.2#0 as range 20
        // closed e.#0 as range 22
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.Unexpected#1: 18
        //DEBUG: s.LineNumber#1: 19
        //DEBUG: e.2#0: 20
        //DEBUG: e.#0: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/24 )/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/19/26"Unexpected "/27 </29 & SR-StrFromToken/30 s.Unexpected#1/18/31 e.2#0/20/32 Tile{ AsIs: >/1 }", expected function name"/34 Tile{ HalfReuse: >/7 AsIs: (/12 AsIs: s.Unexpected#1/18 AsIs: s.LineNumber#1/19 AsIs: e.2#0/20 AsIs: )/13 } Tile{ AsIs: e.#0/22 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[24]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::copy_stvar(vm, context[26], context[19]);
        refalrts::alloc_chars(vm, context[27], context[28], "Unexpected ", 11);
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_SRm_StrFromToken]);
        refalrts::copy_stvar(vm, context[31], context[18]);
        refalrts::copy_evar(vm, context[32], context[33], context[20], context[21]);
        refalrts::alloc_chars(vm, context[34], context[35], ", expected function name", 24);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_close_call(context[7]);
        refalrts::link_brackets( context[12], context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[26], context[31] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 t.#0/12 e.#0/14 >/1
      context[14] = context[10];
      context[15] = context[11];
      // closed e.#0 as range 14
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: t.#0: 12
      //DEBUG: e.#0: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 )/17 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } t.#0/12/18 'f'/20 Tile{ HalfReuse: 'u'/1 }"nction name"/21 Tile{ HalfReuse: >/7 AsIs: t.#0/12 } Tile{ AsIs: e.#0/14 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::copy_evar(vm, context[18], context[19], context[12], context[13]);
      refalrts::alloc_char(vm, context[20], 'f');
      refalrts::alloc_chars(vm, context[21], context[22], "nction name", 11);
      refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
      refalrts::reinit_char(context[1], 'u');
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[7], context[13] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Spec/7 e.Tail#1/10 >/1
    context[10] = context[8];
    context[11] = context[9];
    // closed e.Tail#1 as range 10
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Spec/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec*2/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # EEnum/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_EEnum], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Enum/12 Tile{ Reuse: # GN-Entry/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Enum]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Entry]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Enum/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Enum], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Enum/12 Tile{ Reuse: # GN-Local/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Enum]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Local]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # ESwap/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ESwap], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Swap/12 Tile{ Reuse: # GN-Entry/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Swap]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Entry]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Swap/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Swap/12 Tile{ Reuse: # GN-Local/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Swap]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Local]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Extern/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Extern], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Declaration/12 Tile{ Reuse: # GN-Entry/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Declaration]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Entry]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Forward/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Forward], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Declaration/12 Tile{ Reuse: # GN-Local/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Declaration]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Local]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Entry/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Entry], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Entry/12 Tile{ Reuse: # GN-Entry/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Entry]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Entry]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 # Meta/7 e.Tail#1/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Meta], context[7] ) )
      continue;
    // closed e.Tail#1 as range 8
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/10 )/11 Tile{ AsIs: t.ErrorList#1/5 } # Meta/12 Tile{ Reuse: # GN-Local/7 AsIs: e.Tail#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Meta]);
    refalrts::update_name(context[4], functions[efunc_ParseNameList]);
    refalrts::update_ident(context[7], identifiers[ident_GNm_Local]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseElement-SwDirective/4 t.ErrorList#1/5 s.Directive#1/7 e.Tail#1/2 >/1
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: s.Directive#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 } (/8 )/9 Tile{ AsIs: t.ErrorList#1/5 } </10 & ASTItemFromDirective*8/11 Tile{ AsIs: s.Directive#1/7 } >/12 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_ASTItemFromDirective_D8]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_ParseNameList]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseElementm_SwDirective("ParseElement-SwDirective", COOKIE1_, COOKIE2_, func_ParseElementm_SwDirective);


static refalrts::FnResult func_gen_ParseSpec_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & ParseSpec$1=2/4 t.ErrorList#2/5 s.LnNum#1/7 (/10 e.Name#1/8 )/11 (/14 e.Pattern#2/12 )/15 t.ErrorList#2/16 e.Tail#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[17] = refalrts::repeated_stvar_left( vm, context[16], context[5], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 8
  // closed e.Pattern#2 as range 12
  // closed e.Tail#3 as range 2
  //DEBUG: t.ErrorList#2: 5
  //DEBUG: s.LnNum#1: 7
  //DEBUG: e.Name#1: 8
  //DEBUG: e.Pattern#2: 12
  //DEBUG: e.Tail#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} t.ErrorList#2/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ HalfReuse: # Spec/14 } Tile{ AsIs: s.LnNum#1/7 AsIs: (/10 AsIs: e.Name#1/8 AsIs: )/11 } Tile{ AsIs: e.Pattern#2/12 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/15 AsIs: t.ErrorList#2/16 } Tile{ AsIs: e.Tail#3/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[14], identifiers[ident_Spec]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[15] );
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSpec_S1A2("ParseSpec$1=2", COOKIE1_, COOKIE2_, func_gen_ParseSpec_S1A2);


static refalrts::FnResult func_gen_ParseSpec_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 67 elems
  refalrts::Iter context[67];
  refalrts::zeros( context, 67 );
  // </0 & ParseSpec$1=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSpec$1=1/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 (/14 e.new#4/12 )/15 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new#4 as range 12
  // closed e.new#5 as range 2
  do {
    // </0 & ParseSpec$1=1/4 s.new#6/5 (/8 e.new#10/16 )/9 t.new#7/10 (/14 e.new#11/18 )/15 t.new#8/22 e.new#9/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.new#10 as range 16
    // closed e.new#11 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    // closed e.new#9 as range 20
    do {
      // </0 & ParseSpec$1=1/4 s.new#12/5 (/8 e.new#18/24 )/9 t.new#13/10 (/14 e.new#19/26 )/15 (/22 s.new#14/32 t.new#15/33 e.new#16/30 )/23 e.new#17/28 >/1
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = 0;
      context[31] = 0;
      if( ! refalrts::brackets_term( context[30], context[31], context[22] ) )
        continue;
      // closed e.new#18 as range 24
      // closed e.new#19 as range 26
      // closed e.new#17 as range 28
      if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
        continue;
      context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      // closed e.new#16 as range 30
      do {
        // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/35 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/37 )/15 (/22 # TkSemicolon/32 t.1#0/33 )/23 e.#0/39 >/1
        context[35] = context[24];
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Name#1 as range 35
        // closed e.Pattern#2 as range 37
        // closed e.#0 as range 39
        //DEBUG: t.ErrorList#2: 10
        //DEBUG: t.1#0: 33
        //DEBUG: s.LnNum#1: 5
        //DEBUG: e.Name#1: 35
        //DEBUG: e.Pattern#2: 37
        //DEBUG: e.#0: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkSemicolon/32 t.1#0/33 )/23 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 } Tile{ HalfReuse: (/0 HalfReuse: # Spec/4 AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/35 AsIs: )/9 } Tile{ AsIs: e.Pattern#2/37 } Tile{ AsIs: )/15 HalfReuse: )/22 } Tile{ AsIs: t.ErrorList#2/10 } Tile{ AsIs: e.#0/39 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::link_brackets( context[14], context[22] );
        refalrts::link_brackets( context[0], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_evar( res, context[15], context[22] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[14] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSpec$1=1/4 s.new#20/5 (/8 e.new#26/35 )/9 t.new#21/10 (/14 e.new#27/37 )/15 (/22 s.new#22/32 s.new#23/33 e.new#24/39 )/23 e.new#25/41 >/1
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[28];
      context[42] = context[29];
      if( ! refalrts::svar_term( context[33], context[33] ) )
        continue;
      // closed e.new#26 as range 35
      // closed e.new#27 as range 37
      // closed e.new#24 as range 39
      // closed e.new#25 as range 41
      do {
        // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/43 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/45 )/15 (/22 # TkError/32 s.LineNumber#1/33 e.2#0/47 )/23 e.#0/49 >/1
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[32] ) )
          continue;
        // closed e.Name#1 as range 43
        // closed e.Pattern#2 as range 45
        // closed e.2#0 as range 47
        // closed e.#0 as range 49
        //DEBUG: t.ErrorList#2: 10
        //DEBUG: s.LnNum#1: 5
        //DEBUG: s.LineNumber#1: 33
        //DEBUG: e.Name#1: 43
        //DEBUG: e.Pattern#2: 45
        //DEBUG: e.2#0: 47
        //DEBUG: e.#0: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec$1=2/4 } t.ErrorList#2/10/51 Tile{ AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/43 AsIs: )/9 } (/53 Tile{ AsIs: e.Pattern#2/45 } )/54 </55 & EL-AddErrorAt/56 Tile{ AsIs: t.ErrorList#2/10 HalfReuse: s.LineNumber1 #33/14 } e.2#0/47/57 Tile{ HalfReuse: >/15 AsIs: (/22 AsIs: # TkError/32 AsIs: s.LineNumber#1/33 AsIs: e.2#0/47 AsIs: )/23 AsIs: e.#0/49 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[51], context[52], context[10], context[11]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_ELm_AddErrorAt]);
        refalrts::copy_evar(vm, context[57], context[58], context[47], context[48]);
        refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_S1A2]);
        refalrts::reinit_svar( context[14], context[33] );
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[55] );
        refalrts::link_brackets( context[53], context[54] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[14] );
        res = refalrts::splice_evar( res, context[54], context[56] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[5], context[9] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/43 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/45 )/15 (/22 # TkUnexpected/32 s.LineNumber#1/33 e.2#0/47 )/23 e.#0/49 >/1
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[32] ) )
          continue;
        // closed e.Name#1 as range 43
        // closed e.Pattern#2 as range 45
        // closed e.2#0 as range 47
        // closed e.#0 as range 49
        //DEBUG: t.ErrorList#2: 10
        //DEBUG: s.LnNum#1: 5
        //DEBUG: s.LineNumber#1: 33
        //DEBUG: e.Name#1: 43
        //DEBUG: e.Pattern#2: 45
        //DEBUG: e.2#0: 47
        //DEBUG: e.#0: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec$1=2/4 } t.ErrorList#2/10/51 Tile{ AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/43 AsIs: )/9 } (/53 Tile{ AsIs: e.Pattern#2/45 } )/54 </55 & EL-AddErrorAt/56 Tile{ AsIs: t.ErrorList#2/10 HalfReuse: s.LineNumber1 #33/14 }"Unknown characters \""/57 e.2#0/47/59 '\"'/61 Tile{ HalfReuse: >/15 AsIs: (/22 AsIs: # TkUnexpected/32 AsIs: s.LineNumber#1/33 AsIs: e.2#0/47 AsIs: )/23 AsIs: e.#0/49 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[51], context[52], context[10], context[11]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[57], context[58], "Unknown characters \"", 20);
        refalrts::copy_evar(vm, context[59], context[60], context[47], context[48]);
        refalrts::alloc_char(vm, context[61], '\"');
        refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_S1A2]);
        refalrts::reinit_svar( context[14], context[33] );
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[55] );
        refalrts::link_brackets( context[53], context[54] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[57], context[61] );
        res = refalrts::splice_evar( res, context[10], context[14] );
        res = refalrts::splice_evar( res, context[54], context[56] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[5], context[9] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/43 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/45 )/15 (/22 s.Unexpected#1/32 s.LineNumber#1/33 e.2#0/47 )/23 e.#0/49 >/1
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      // closed e.Name#1 as range 43
      // closed e.Pattern#2 as range 45
      // closed e.2#0 as range 47
      // closed e.#0 as range 49
      //DEBUG: t.ErrorList#2: 10
      //DEBUG: s.LnNum#1: 5
      //DEBUG: s.Unexpected#1: 32
      //DEBUG: s.LineNumber#1: 33
      //DEBUG: e.Name#1: 43
      //DEBUG: e.Pattern#2: 45
      //DEBUG: e.2#0: 47
      //DEBUG: e.#0: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec$1=2/4 } t.ErrorList#2/10/51 Tile{ AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/43 AsIs: )/9 } (/53 Tile{ AsIs: e.Pattern#2/45 } )/54 </55 & EL-AddErrorAt/56 Tile{ AsIs: t.ErrorList#2/10 HalfReuse: s.LineNumber1 #33/14 }"Unexpected "/57 </59 & SR-StrFromToken/60 s.Unexpected#1/32/61 e.2#0/47/62 >/64", expected ;"/65 Tile{ HalfReuse: >/15 AsIs: (/22 AsIs: s.Unexpected#1/32 AsIs: s.LineNumber#1/33 AsIs: e.2#0/47 AsIs: )/23 AsIs: e.#0/49 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[51], context[52], context[10], context[11]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[57], context[58], "Unexpected ", 11);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_SRm_StrFromToken]);
      refalrts::copy_stvar(vm, context[61], context[32]);
      refalrts::copy_evar(vm, context[62], context[63], context[47], context[48]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::alloc_chars(vm, context[65], context[66], ", expected ;", 12);
      refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_S1A2]);
      refalrts::reinit_svar( context[14], context[33] );
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[59] );
      refalrts::link_brackets( context[53], context[54] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[57], context[66] );
      res = refalrts::splice_evar( res, context[10], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[5], context[9] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/24 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/26 )/15 t.#0/22 e.#0/28 >/1
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    // closed e.Name#1 as range 24
    // closed e.Pattern#2 as range 26
    // closed e.#0 as range 28
    //DEBUG: t.ErrorList#2: 10
    //DEBUG: t.#0: 22
    //DEBUG: s.LnNum#1: 5
    //DEBUG: e.Name#1: 24
    //DEBUG: e.Pattern#2: 26
    //DEBUG: e.#0: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec$1=2/4 } t.ErrorList#2/10/30 Tile{ AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/24 AsIs: )/9 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Pattern#2/26 } )/32 </33 & AddUnexpected*3/34 Tile{ AsIs: t.ErrorList#2/10 } t.#0/22/35 ';'/37 Tile{ HalfReuse: >/15 AsIs: t.#0/22 AsIs: e.#0/28 AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[30], context[31], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_AddUnexpected_D3]);
    refalrts::copy_evar(vm, context[35], context[36], context[22], context[23]);
    refalrts::alloc_char(vm, context[37], ';');
    refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_S1A2]);
    refalrts::reinit_close_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[14], context[32] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[5], context[9] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSpec$1=1/4 s.LnNum#1/5 (/8 e.Name#1/6 )/9 t.ErrorList#2/10 (/14 e.Pattern#2/12 )/15 e.Tail#2/2 >/1
  // closed e.Name#1 as range 6
  // closed e.Pattern#2 as range 12
  // closed e.Tail#2 as range 2
  //DEBUG: t.ErrorList#2: 10
  //DEBUG: s.LnNum#1: 5
  //DEBUG: e.Name#1: 6
  //DEBUG: e.Pattern#2: 12
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSpec$1=2/4 } Tile{ AsIs: t.ErrorList#2/10 } Tile{ AsIs: s.LnNum#1/5 AsIs: (/8 AsIs: e.Name#1/6 AsIs: )/9 } Tile{ AsIs: (/14 AsIs: e.Pattern#2/12 AsIs: )/15 } </16 & Expect*2/17 # TkSemicolon/18 (/19 ';'/20 )/21 t.ErrorList#2/10/22 Tile{ AsIs: e.Tail#2/2 } >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Expect_D2]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_TkSemicolon]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_char(vm, context[20], ';');
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::copy_evar(vm, context[22], context[23], context[10], context[11]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSpec_S1A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[23] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSpec_S1A1("ParseSpec$1=1", COOKIE1_, COOKIE2_, func_gen_ParseSpec_S1A1);


static refalrts::FnResult func_ParseSpec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & ParseSpec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSpec/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & ParseSpec/4 t.new#4/5 (/7 s.new#5/13 s.new#6/14 e.new#7/11 )/8 e.new#8/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
      continue;
    // closed e.new#8 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
      continue;
    // closed e.new#7 as range 11
    do {
      // </0 & ParseSpec/4 t.ErrorList#1/5 (/7 # TkName/13 s.LnNum#1/14 e.Name#1/15 )/8 e.Tail#1/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[13] ) )
        continue;
      // closed e.Name#1 as range 15
      // closed e.Tail#1 as range 17
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 14
      //DEBUG: e.Name#1: 15
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </19 & ParseSpec$1=1/20 Tile{ AsIs: s.LnNum#1/14 } (/21 Tile{ AsIs: e.Name#1/15 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & DoParsePattern@1/4 AsIs: t.ErrorList#1/5 AsIs: (/7 HalfReuse: )/13 } Tile{ AsIs: e.Tail#1/17 } >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_ParseSpec_S1A1]);
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParsePattern_Z1]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseSpec/4 t.ErrorList#1/5 (/7 # TkError/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[13] ) )
        continue;
      // closed e.1#0 as range 15
      // closed e.Tail#1 as range 17
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 14
      //DEBUG: e.1#0: 15
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21 e.1#0/15/22 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 AsIs: # TkError/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_stvar(vm, context[21], context[14]);
      refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseSpec/4 t.ErrorList#1/5 (/7 # TkUnexpected/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[13] ) )
        continue;
      // closed e.1#0 as range 15
      // closed e.Tail#1 as range 17
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 14
      //DEBUG: e.1#0: 15
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21"Unknown characters \""/22 e.1#0/15/24 '\"'/26 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 AsIs: # TkUnexpected/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_stvar(vm, context[21], context[14]);
      refalrts::alloc_chars(vm, context[22], context[23], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
      refalrts::alloc_char(vm, context[26], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[21], context[26] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseSpec/4 t.ErrorList#1/5 (/7 s.Unexpected#1/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[9];
    context[18] = context[10];
    // closed e.1#0 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.Unexpected#1: 13
    //DEBUG: s.LineNumber#1: 14
    //DEBUG: e.1#0: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21"Unexpected "/22 </24 & SR-StrFromToken/25 s.Unexpected#1/13/26 e.1#0/15/27 Tile{ AsIs: >/1 }", expected function name"/29 >/31 Tile{ AsIs: (/7 AsIs: s.Unexpected#1/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::copy_stvar(vm, context[21], context[14]);
    refalrts::alloc_chars(vm, context[22], context[23], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[26], context[13]);
    refalrts::copy_evar(vm, context[27], context[28], context[15], context[16]);
    refalrts::alloc_chars(vm, context[29], context[30], ", expected function name", 24);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[21], context[26] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSpec/4 t.ErrorList#1/5 t.Unexpected#1/7 e.Tail#1/2 >/1
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: t.Unexpected#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 )/10 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 AsIs: t.Unexpected#1/7 }"function name"/11 Tile{ AsIs: >/1 } t.Unexpected#1/7/13 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_chars(vm, context[11], context[12], "function name", 13);
  refalrts::copy_evar(vm, context[13], context[14], context[7], context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseSpec("ParseSpec", COOKIE1_, COOKIE2_, func_ParseSpec);


static refalrts::FnResult func_ParseInclude(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & ParseInclude/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseInclude/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & ParseInclude/4 t.new#4/5 (/7 s.new#5/13 s.new#6/14 e.new#7/11 )/8 e.new#8/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
      continue;
    // closed e.new#8 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
      continue;
    // closed e.new#7 as range 11
    do {
      // </0 & ParseInclude/4 t.new#9/5 (/7 # TkCompound/13 s.new#10/14 e.new#11/15 )/8 t.new#12/19 e.new#13/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[13] ) )
        continue;
      // closed e.new#11 as range 15
      context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
      if( ! context[20] )
        continue;
      // closed e.new#13 as range 17
      do {
        // </0 & ParseInclude/4 t.new#14/5 (/7 # TkCompound/13 s.new#15/14 e.new#16/21 )/8 (/19 s.new#17/27 s.new#18/28 e.new#19/25 )/20 e.new#20/23 >/1
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        context[24] = context[18];
        context[25] = 0;
        context[26] = 0;
        if( ! refalrts::brackets_term( context[25], context[26], context[19] ) )
          continue;
        // closed e.new#16 as range 21
        // closed e.new#20 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        if( ! refalrts::svar_left( context[28], context[25], context[26] ) )
          continue;
        // closed e.new#19 as range 25
        do {
          // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkCompound/13 s.LnNum1#1/14 e.Compound#1/29 )/8 (/19 # TkSemicolon/27 s.LnNum2#1/28 )/20 e.Tail#1/31 >/1
          context[29] = context[21];
          context[30] = context[22];
          context[31] = context[23];
          context[32] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[27] ) )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Compound#1 as range 29
          // closed e.Tail#1 as range 31
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum1#1: 14
          //DEBUG: s.LnNum2#1: 28
          //DEBUG: e.Compound#1: 29
          //DEBUG: e.Tail#1: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & ParseInclude/4 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/27 s.LnNum2#1/28 )/20 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/7 Reuse: # Include/13 AsIs: s.LnNum1#1/14 AsIs: e.Compound#1/29 AsIs: )/8 HalfReuse: )/19 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/31 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::update_ident(context[13], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::link_brackets( context[0], context[19] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[7], context[19] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkCompound/13 s.LnNum#1/14 e.Compound#1/29 )/8 (/19 # TkError/27 s.LineNumber#1/28 e.1#0/31 )/20 e.Tail#1/33 >/1
          context[29] = context[21];
          context[30] = context[22];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[23];
          context[34] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_TkError], context[27] ) )
            continue;
          // closed e.Compound#1 as range 29
          // closed e.1#0 as range 31
          // closed e.Tail#1 as range 33
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 14
          //DEBUG: s.LineNumber#1: 28
          //DEBUG: e.Compound#1: 29
          //DEBUG: e.1#0: 31
          //DEBUG: e.Tail#1: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/7 Reuse: # Include/13 AsIs: s.LnNum#1/14 AsIs: e.Compound#1/29 AsIs: )/8 HalfReuse: )/19 HalfReuse: </27 } Tile{ Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/28/35 e.1#0/31/36 Tile{ AsIs: >/1 } (/38 # TkError/39 Tile{ AsIs: s.LineNumber#1/28 AsIs: e.1#0/31 AsIs: )/20 } Tile{ AsIs: e.Tail#1/33 } Tile{ ]] }
          refalrts::copy_stvar(vm, context[35], context[28]);
          refalrts::copy_evar(vm, context[36], context[37], context[31], context[32]);
          refalrts::alloc_open_bracket(vm, context[38]);
          refalrts::alloc_ident(vm, context[39], identifiers[ident_TkError]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::update_ident(context[13], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::reinit_open_call(context[27]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::link_brackets( context[38], context[20] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[27] );
          refalrts::link_brackets( context[0], context[19] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[28], context[20] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[4], context[6] );
          res = refalrts::splice_evar( res, context[7], context[27] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkCompound/13 s.LnNum#1/14 e.Compound#1/29 )/8 (/19 # TkUnexpected/27 s.LineNumber#1/28 e.1#0/31 )/20 e.Tail#1/33 >/1
          context[29] = context[21];
          context[30] = context[22];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[23];
          context[34] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[27] ) )
            continue;
          // closed e.Compound#1 as range 29
          // closed e.1#0 as range 31
          // closed e.Tail#1 as range 33
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 14
          //DEBUG: s.LineNumber#1: 28
          //DEBUG: e.Compound#1: 29
          //DEBUG: e.1#0: 31
          //DEBUG: e.Tail#1: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/7 Reuse: # Include/13 AsIs: s.LnNum#1/14 AsIs: e.Compound#1/29 AsIs: )/8 HalfReuse: )/19 HalfReuse: </27 } Tile{ Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/28/35"Unknown characters \""/36 e.1#0/31/38 '\"'/40 Tile{ AsIs: >/1 } (/41 # TkUnexpected/42 Tile{ AsIs: s.LineNumber#1/28 AsIs: e.1#0/31 AsIs: )/20 } Tile{ AsIs: e.Tail#1/33 } Tile{ ]] }
          refalrts::copy_stvar(vm, context[35], context[28]);
          refalrts::alloc_chars(vm, context[36], context[37], "Unknown characters \"", 20);
          refalrts::copy_evar(vm, context[38], context[39], context[31], context[32]);
          refalrts::alloc_char(vm, context[40], '\"');
          refalrts::alloc_open_bracket(vm, context[41]);
          refalrts::alloc_ident(vm, context[42], identifiers[ident_TkUnexpected]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::update_ident(context[13], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::reinit_open_call(context[27]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::link_brackets( context[41], context[20] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[27] );
          refalrts::link_brackets( context[0], context[19] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[28], context[20] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[35], context[40] );
          res = refalrts::splice_evar( res, context[4], context[6] );
          res = refalrts::splice_evar( res, context[7], context[27] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkCompound/13 s.LnNum#1/14 e.Compound#1/29 )/8 (/19 s.Unexpected#1/27 s.LineNumber#1/28 e.1#0/31 )/20 e.Tail#1/33 >/1
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[23];
        context[34] = context[24];
        // closed e.Compound#1 as range 29
        // closed e.1#0 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 14
        //DEBUG: s.Unexpected#1: 27
        //DEBUG: s.LineNumber#1: 28
        //DEBUG: e.Compound#1: 29
        //DEBUG: e.1#0: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/35 (/36 # Include/37 Tile{ AsIs: s.LnNum#1/14 } Tile{ AsIs: e.Compound#1/29 } )/38 )/39 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #28/7 HalfReuse: 'U'/13 }"nexpected "/40 </42 & SR-StrFromToken/43 s.Unexpected#1/27/44 e.1#0/31/45 Tile{ AsIs: >/1 }", expected semicolon"/47 Tile{ HalfReuse: >/8 AsIs: (/19 AsIs: s.Unexpected#1/27 AsIs: s.LineNumber#1/28 AsIs: e.1#0/31 AsIs: )/20 } Tile{ AsIs: e.Tail#1/33 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_ident(vm, context[37], identifiers[ident_Include]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_chars(vm, context[40], context[41], "nexpected ", 10);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_SRm_StrFromToken]);
        refalrts::copy_stvar(vm, context[44], context[27]);
        refalrts::copy_evar(vm, context[45], context[46], context[31], context[32]);
        refalrts::alloc_chars(vm, context[47], context[48], ", expected semicolon", 20);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[7], context[28] );
        refalrts::reinit_char(context[13], 'U');
        refalrts::reinit_close_call(context[8]);
        refalrts::link_brackets( context[19], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[35], context[39] );
        refalrts::link_brackets( context[36], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[8], context[20] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[40], context[44] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[35], context[37] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkCompound/13 s.LnNum#1/14 e.Compound#1/21 )/8 t.Unexpected#1/19 e.Tail#1/23 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      // closed e.Compound#1 as range 21
      // closed e.Tail#1 as range 23
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: t.Unexpected#1: 19
      //DEBUG: s.LnNum#1: 14
      //DEBUG: e.Compound#1: 21
      //DEBUG: e.Tail#1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/25 Tile{ AsIs: (/7 Reuse: # Include/13 AsIs: s.LnNum#1/14 AsIs: e.Compound#1/21 AsIs: )/8 } )/26 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: t.Unexpected#1/19 }"semicolon"/27 Tile{ AsIs: >/1 } t.Unexpected#1/19/29 Tile{ AsIs: e.Tail#1/23 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_chars(vm, context[27], context[28], "semicolon", 9);
      refalrts::copy_evar(vm, context[29], context[30], context[19], context[20]);
      refalrts::update_ident(context[13], identifiers[ident_Include]);
      refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkError/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[13] ) )
        continue;
      // closed e.1#0 as range 15
      // closed e.Tail#1 as range 17
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 14
      //DEBUG: e.1#0: 15
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21 e.1#0/15/22 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 AsIs: # TkError/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_stvar(vm, context[21], context[14]);
      refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 # TkUnexpected/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[13] ) )
        continue;
      // closed e.1#0 as range 15
      // closed e.Tail#1 as range 17
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LineNumber#1: 14
      //DEBUG: e.1#0: 15
      //DEBUG: e.Tail#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21"Unknown characters \""/22 e.1#0/15/24 '\"'/26 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 AsIs: # TkUnexpected/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_stvar(vm, context[21], context[14]);
      refalrts::alloc_chars(vm, context[22], context[23], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
      refalrts::alloc_char(vm, context[26], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[21], context[26] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseInclude/4 t.ErrorList#1/5 (/7 s.Unexpected#1/13 s.LineNumber#1/14 e.1#0/15 )/8 e.Tail#1/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[9];
    context[18] = context[10];
    // closed e.1#0 as range 15
    // closed e.Tail#1 as range 17
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.Unexpected#1: 13
    //DEBUG: s.LineNumber#1: 14
    //DEBUG: e.1#0: 15
    //DEBUG: e.Tail#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 )/20 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LineNumber#1/14/21"Unexpected "/22 </24 & SR-StrFromToken/25 s.Unexpected#1/13/26 e.1#0/15/27 Tile{ AsIs: >/1 }", expected compound symbol"/29 >/31 Tile{ AsIs: (/7 AsIs: s.Unexpected#1/13 AsIs: s.LineNumber#1/14 AsIs: e.1#0/15 AsIs: )/8 } Tile{ AsIs: e.Tail#1/17 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::copy_stvar(vm, context[21], context[14]);
    refalrts::alloc_chars(vm, context[22], context[23], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[26], context[13]);
    refalrts::copy_evar(vm, context[27], context[28], context[15], context[16]);
    refalrts::alloc_chars(vm, context[29], context[30], ", expected compound symbol", 26);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[21], context[26] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseInclude/4 t.ErrorList#1/5 t.Unexpected#1/7 e.Tail#1/2 >/1
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: t.Unexpected#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 )/10 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 AsIs: t.Unexpected#1/7 }"compound symbol"/11 Tile{ AsIs: >/1 } t.Unexpected#1/7/13 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_chars(vm, context[11], context[12], "compound symbol", 15);
  refalrts::copy_evar(vm, context[13], context[14], context[7], context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseInclude("ParseInclude", COOKIE1_, COOKIE2_, func_ParseInclude);


static refalrts::FnResult func_ParseNameList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & ParseNameList/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseNameList/4 (/7 e.new#1/5 )/8 t.new#2/9 s.new#3/11 s.new#4/12 t.new#5/13 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#6 as range 2
  do {
    // </0 & ParseNameList/4 (/7 e.new#14/15 )/8 t.new#7/9 s.new#8/11 s.new#9/12 (/13 s.new#10/21 s.new#11/22 e.new#12/19 )/14 e.new#13/17 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    // closed e.new#14 as range 15
    // closed e.new#13 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    // closed e.new#12 as range 19
    do {
      // </0 & ParseNameList/4 (/7 e.new#21/23 )/8 t.new#15/9 s.new#16/11 s.new#17/12 (/13 # TkName/21 s.new#18/22 e.new#19/25 )/14 e.new#20/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[17];
      context[28] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[21] ) )
        continue;
      // closed e.new#21 as range 23
      // closed e.new#19 as range 25
      // closed e.new#20 as range 27
      do {
        // </0 & ParseNameList/4 (/7 e.new#29/29 )/8 t.new#22/9 s.new#23/11 s.new#24/12 (/13 # TkName/21 s.new#25/22 e.new#26/31 )/14 t.new#27/35 e.new#28/33 >/1
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        // closed e.new#29 as range 29
        // closed e.new#26 as range 31
        context[36] = refalrts::tvar_left( context[35], context[33], context[34] );
        if( ! context[36] )
          continue;
        // closed e.new#28 as range 33
        do {
          // </0 & ParseNameList/4 (/7 e.new#39/37 )/8 t.new#30/9 s.new#31/11 s.new#32/12 (/13 # TkName/21 s.new#33/22 e.new#34/39 )/14 (/35 s.new#35/45 s.new#36/46 e.new#37/43 )/36 e.new#38/41 >/1
          context[37] = context[29];
          context[38] = context[30];
          context[39] = context[31];
          context[40] = context[32];
          context[41] = context[33];
          context[42] = context[34];
          context[43] = 0;
          context[44] = 0;
          if( ! refalrts::brackets_term( context[43], context[44], context[35] ) )
            continue;
          // closed e.new#39 as range 37
          // closed e.new#34 as range 39
          // closed e.new#38 as range 41
          if( ! refalrts::svar_left( context[45], context[43], context[44] ) )
            continue;
          if( ! refalrts::svar_left( context[46], context[43], context[44] ) )
            continue;
          // closed e.new#37 as range 43
          do {
            // </0 & ParseNameList/4 (/7 e.new#48/47 )/8 t.new#40/9 s.new#41/11 s.new#42/12 (/13 # TkName/21 s.new#43/22 e.new#44/49 )/14 (/35 s.new#45/45 s.new#46/46 )/36 e.new#47/51 >/1
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[39];
            context[50] = context[40];
            context[51] = context[41];
            context[52] = context[42];
            if( ! refalrts::empty_seq( context[43], context[44] ) )
              continue;
            // closed e.new#48 as range 47
            // closed e.new#44 as range 49
            // closed e.new#47 as range 51
            do {
              // </0 & ParseNameList/4 (/7 e.AST#1/53 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/55 )/14 (/35 # TkComma/45 s.LnNum0#1/46 )/36 e.#0/57 >/1
              context[53] = context[47];
              context[54] = context[48];
              context[55] = context[49];
              context[56] = context[50];
              context[57] = context[51];
              context[58] = context[52];
              if( ! refalrts::ident_term( identifiers[ident_TkComma], context[45] ) )
                continue;
              // closed e.AST#1 as range 53
              // closed e.Name#1 as range 55
              // closed e.#0 as range 57
              //DEBUG: t.ErrorList#1: 9
              //DEBUG: s.ASTItem#1: 11
              //DEBUG: s.ScopeClass#1: 12
              //DEBUG: s.LnNum#1: 22
              //DEBUG: s.LnNum0#1: 46
              //DEBUG: e.AST#1: 53
              //DEBUG: e.Name#1: 55
              //DEBUG: e.#0: 57

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkComma/45 s.LnNum0#1/46 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseNameList/4 AsIs: (/7 AsIs: e.AST#1/53 HalfReuse: (/8 } Tile{ HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/55 } Tile{ AsIs: )/14 HalfReuse: )/35 } Tile{ AsIs: t.ErrorList#1/9 AsIs: s.ASTItem#1/11 } Tile{ HalfReuse: s.ScopeClass1 #12/36 AsIs: e.#0/57 AsIs: >/1 ]] }
              refalrts::reinit_open_bracket(context[8]);
              refalrts::reinit_svar( context[21], context[11] );
              refalrts::reinit_close_bracket(context[35]);
              refalrts::reinit_svar( context[36], context[12] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[7], context[35] );
              refalrts::link_brackets( context[8], context[14] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[36];
              res = refalrts::splice_evar( res, context[9], context[11] );
              res = refalrts::splice_evar( res, context[14], context[35] );
              res = refalrts::splice_evar( res, context[55], context[56] );
              res = refalrts::splice_elem( res, context[12] );
              res = refalrts::splice_evar( res, context[21], context[22] );
              refalrts::splice_to_freelist_open( vm, context[8], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & ParseNameList/4 (/7 e.AST#1/53 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/55 )/14 (/35 # TkSemicolon/45 s.LnNum0#1/46 )/36 e.#0/57 >/1
            context[53] = context[47];
            context[54] = context[48];
            context[55] = context[49];
            context[56] = context[50];
            context[57] = context[51];
            context[58] = context[52];
            if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[45] ) )
              continue;
            // closed e.AST#1 as range 53
            // closed e.Name#1 as range 55
            // closed e.#0 as range 57
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.ASTItem#1: 11
            //DEBUG: s.ScopeClass#1: 12
            //DEBUG: s.LnNum#1: 22
            //DEBUG: s.LnNum0#1: 46
            //DEBUG: e.AST#1: 53
            //DEBUG: e.Name#1: 55
            //DEBUG: e.#0: 57

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & ParseNameList/4 (/7 {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/14 (/35 # TkSemicolon/45 s.LnNum0#1/46 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.AST#1/53 } Tile{ AsIs: (/13 HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/55 } Tile{ AsIs: )/36 } Tile{ AsIs: )/8 AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.#0/57 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_svar( context[21], context[11] );
            refalrts::link_brackets( context[0], context[8] );
            refalrts::link_brackets( context[13], context[36] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[57], context[58] );
            res = refalrts::splice_evar( res, context[8], context[10] );
            res = refalrts::splice_elem( res, context[36] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[13], context[22] );
            res = refalrts::splice_evar( res, context[53], context[54] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList/4 (/7 e.AST#1/47 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/49 )/14 (/35 # TkError/45 s.LineNumber#1/46 e.2#0/51 )/36 e.#0/53 >/1
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[39];
            context[50] = context[40];
            context[51] = context[43];
            context[52] = context[44];
            context[53] = context[41];
            context[54] = context[42];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[45] ) )
              continue;
            // closed e.AST#1 as range 47
            // closed e.Name#1 as range 49
            // closed e.2#0 as range 51
            // closed e.#0 as range 53
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.ASTItem#1: 11
            //DEBUG: s.ScopeClass#1: 12
            //DEBUG: s.LnNum#1: 22
            //DEBUG: s.LineNumber#1: 46
            //DEBUG: e.AST#1: 47
            //DEBUG: e.Name#1: 49
            //DEBUG: e.2#0: 51
            //DEBUG: e.#0: 53

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/47 HalfReuse: (/8 } Tile{ HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/49 } )/55 Tile{ HalfReuse: )/13 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ HalfReuse: s.LineNumber1 #46/1 } e.2#0/51/56 Tile{ HalfReuse: >/14 AsIs: (/35 AsIs: # TkError/45 AsIs: s.LineNumber#1/46 AsIs: e.2#0/51 AsIs: )/36 } Tile{ AsIs: e.#0/53 } Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[55]);
            refalrts::copy_evar(vm, context[56], context[57], context[51], context[52]);
            refalrts::reinit_open_bracket(context[8]);
            refalrts::reinit_svar( context[21], context[11] );
            refalrts::reinit_close_bracket(context[13]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_svar( context[1], context[46] );
            refalrts::reinit_close_call(context[14]);
            refalrts::link_brackets( context[35], context[36] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[13] );
            refalrts::link_brackets( context[8], context[55] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_evar( res, context[14], context[36] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_elem( res, context[55] );
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList/4 (/7 e.AST#1/47 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/49 )/14 (/35 # TkUnexpected/45 s.LineNumber#1/46 e.2#0/51 )/36 e.#0/53 >/1
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[39];
            context[50] = context[40];
            context[51] = context[43];
            context[52] = context[44];
            context[53] = context[41];
            context[54] = context[42];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[45] ) )
              continue;
            // closed e.AST#1 as range 47
            // closed e.Name#1 as range 49
            // closed e.2#0 as range 51
            // closed e.#0 as range 53
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.ASTItem#1: 11
            //DEBUG: s.ScopeClass#1: 12
            //DEBUG: s.LnNum#1: 22
            //DEBUG: s.LineNumber#1: 46
            //DEBUG: e.AST#1: 47
            //DEBUG: e.Name#1: 49
            //DEBUG: e.2#0: 51
            //DEBUG: e.#0: 53

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/47 HalfReuse: (/8 } Tile{ HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/49 } Tile{ HalfReuse: )/13 } )/55 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/46/56"Un"/57 Tile{ HalfReuse: 'k'/1 }"nown characters \""/59 e.2#0/51/61 '\"'/63 Tile{ HalfReuse: >/14 AsIs: (/35 AsIs: # TkUnexpected/45 AsIs: s.LineNumber#1/46 AsIs: e.2#0/51 AsIs: )/36 } Tile{ AsIs: e.#0/53 } Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[55]);
            refalrts::copy_stvar(vm, context[56], context[46]);
            refalrts::alloc_chars(vm, context[57], context[58], "Un", 2);
            refalrts::alloc_chars(vm, context[59], context[60], "nown characters \"", 17);
            refalrts::copy_evar(vm, context[61], context[62], context[51], context[52]);
            refalrts::alloc_char(vm, context[63], '\"');
            refalrts::reinit_open_bracket(context[8]);
            refalrts::reinit_svar( context[21], context[11] );
            refalrts::reinit_close_bracket(context[13]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[1], 'k');
            refalrts::reinit_close_call(context[14]);
            refalrts::link_brackets( context[35], context[36] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[55] );
            refalrts::link_brackets( context[8], context[13] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_evar( res, context[14], context[36] );
            res = refalrts::splice_evar( res, context[59], context[63] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[56], context[58] );
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_elem( res, context[55] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[21], context[22] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseNameList/4 (/7 e.AST#1/47 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/49 )/14 (/35 s.Unexpected#1/45 s.LineNumber#1/46 e.2#0/51 )/36 e.#0/53 >/1
          context[47] = context[37];
          context[48] = context[38];
          context[49] = context[39];
          context[50] = context[40];
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[41];
          context[54] = context[42];
          // closed e.AST#1 as range 47
          // closed e.Name#1 as range 49
          // closed e.2#0 as range 51
          // closed e.#0 as range 53
          //DEBUG: t.ErrorList#1: 9
          //DEBUG: s.ASTItem#1: 11
          //DEBUG: s.ScopeClass#1: 12
          //DEBUG: s.LnNum#1: 22
          //DEBUG: s.Unexpected#1: 45
          //DEBUG: s.LineNumber#1: 46
          //DEBUG: e.AST#1: 47
          //DEBUG: e.Name#1: 49
          //DEBUG: e.2#0: 51
          //DEBUG: e.#0: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/47 HalfReuse: (/8 } Tile{ HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/49 } )/55 )/56 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ HalfReuse: s.LineNumber1 #46/13 }"Unexpected "/57 </59 & SR-StrFromToken/60 s.Unexpected#1/45/61 e.2#0/51/62 Tile{ AsIs: >/1 }", expected comma or semicolon"/64 Tile{ HalfReuse: >/14 AsIs: (/35 AsIs: s.Unexpected#1/45 AsIs: s.LineNumber#1/46 AsIs: e.2#0/51 AsIs: )/36 } Tile{ AsIs: e.#0/53 } Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::alloc_chars(vm, context[57], context[58], "Unexpected ", 11);
          refalrts::alloc_open_call(vm, context[59]);
          refalrts::alloc_name(vm, context[60], functions[efunc_SRm_StrFromToken]);
          refalrts::copy_stvar(vm, context[61], context[45]);
          refalrts::copy_evar(vm, context[62], context[63], context[51], context[52]);
          refalrts::alloc_chars(vm, context[64], context[65], ", expected comma or semicolon", 29);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_svar( context[21], context[11] );
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[13], context[46] );
          refalrts::reinit_close_call(context[14]);
          refalrts::link_brackets( context[35], context[36] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[59] );
          refalrts::link_brackets( context[7], context[56] );
          refalrts::link_brackets( context[8], context[55] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[14], context[36] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_evar( res, context[57], context[61] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[9], context[10] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseNameList/4 (/7 e.AST#1/37 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/39 )/14 t.#0/35 e.#0/41 >/1
        context[37] = context[29];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        // closed e.AST#1 as range 37
        // closed e.Name#1 as range 39
        // closed e.#0 as range 41
        //DEBUG: t.ErrorList#1: 9
        //DEBUG: t.#0: 35
        //DEBUG: s.ASTItem#1: 11
        //DEBUG: s.ScopeClass#1: 12
        //DEBUG: s.LnNum#1: 22
        //DEBUG: e.AST#1: 37
        //DEBUG: e.Name#1: 39
        //DEBUG: e.#0: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } Tile{ AsIs: e.AST#1/37 } Tile{ AsIs: (/13 HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/8 } )/43 Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 } t.#0/35/44"comm"/46 Tile{ HalfReuse: 'a'/1 }" or semicolon"/48 Tile{ HalfReuse: >/14 AsIs: t.#0/35 } Tile{ AsIs: e.#0/41 } Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::copy_evar(vm, context[44], context[45], context[35], context[36]);
        refalrts::alloc_chars(vm, context[46], context[47], "comm", 4);
        refalrts::alloc_chars(vm, context[48], context[49], " or semicolon", 13);
        refalrts::reinit_svar( context[21], context[11] );
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::reinit_char(context[1], 'a');
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[43] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[14], context[36] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[44], context[47] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[13], context[22] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[7] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseNameList/4 (/7 e.AST#1/29 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkName/21 s.LnNum#1/22 e.Name#1/31 )/14 e.Tail#1/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      // closed e.AST#1 as range 29
      // closed e.Name#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LnNum#1: 22
      //DEBUG: e.AST#1: 29
      //DEBUG: e.Name#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList-Tail*3/4 AsIs: (/7 AsIs: e.AST#1/29 HalfReuse: (/8 } Tile{ HalfReuse: s.ASTItem1 #11/21 AsIs: s.LnNum#1/22 } Tile{ AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Name#1/31 } )/35 Tile{ HalfReuse: )/13 } Tile{ AsIs: t.ErrorList#1/9 AsIs: s.ASTItem#1/11 } Tile{ HalfReuse: s.ScopeClass1 #12/14 AsIs: e.Tail#1/33 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_ParseNameListm_Tail_D3]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_svar( context[21], context[11] );
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_svar( context[14], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::link_brackets( context[8], context[35] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[9], context[11] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkError/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[17];
      context[28] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[21] ) )
        continue;
      // closed e.AST#1 as range 23
      // closed e.1#0 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LineNumber#1: 22
      //DEBUG: e.AST#1: 23
      //DEBUG: e.1#0: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29 e.1#0/25/30 Tile{ AsIs: >/1 } Tile{ AsIs: (/13 AsIs: # TkError/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[29], context[22]);
      refalrts::copy_evar(vm, context[30], context[31], context[25], context[26]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkUnexpected/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[17];
      context[28] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[21] ) )
        continue;
      // closed e.AST#1 as range 23
      // closed e.1#0 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LineNumber#1: 22
      //DEBUG: e.AST#1: 23
      //DEBUG: e.1#0: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29"Unknown characters \""/30 e.1#0/25/32 '\"'/34 Tile{ AsIs: >/1 } Tile{ AsIs: (/13 AsIs: # TkUnexpected/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[29], context[22]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[32], context[33], context[25], context[26]);
      refalrts::alloc_char(vm, context[34], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[29], context[34] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseNameList/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 s.Unexpected#1/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[17];
    context[28] = context[18];
    // closed e.AST#1 as range 23
    // closed e.1#0 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.ErrorList#1: 9
    //DEBUG: s.ASTItem#1: 11
    //DEBUG: s.ScopeClass#1: 12
    //DEBUG: s.Unexpected#1: 21
    //DEBUG: s.LineNumber#1: 22
    //DEBUG: e.AST#1: 23
    //DEBUG: e.1#0: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29"Unexpected "/30 </32 & SR-StrFromToken/33 s.Unexpected#1/21/34 e.1#0/25/35 Tile{ AsIs: >/1 }", expected function name"/37 >/39 Tile{ AsIs: (/13 AsIs: s.Unexpected#1/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[29], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[34], context[21]);
    refalrts::copy_evar(vm, context[35], context[36], context[25], context[26]);
    refalrts::alloc_chars(vm, context[37], context[38], ", expected function name", 24);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[13], context[14] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[29], context[34] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseNameList/4 (/7 e.AST#1/5 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 t.Unexpected#1/13 e.Tail#1/2 >/1
  // closed e.AST#1 as range 5
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 9
  //DEBUG: t.Unexpected#1: 13
  //DEBUG: s.ASTItem#1: 11
  //DEBUG: s.ScopeClass#1: 12
  //DEBUG: e.AST#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/5 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: t.Unexpected#1/13 }"function name"/15 Tile{ AsIs: >/1 } t.Unexpected#1/13/17 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "function name", 13);
  refalrts::copy_evar(vm, context[17], context[18], context[13], context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseNameList("ParseNameList", COOKIE1_, COOKIE2_, func_ParseNameList);


static refalrts::FnResult func_ParseNameListm_Tail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & ParseNameList-Tail/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseNameList-Tail/4 (/7 e.new#1/5 )/8 t.new#2/9 s.new#3/11 s.new#4/12 t.new#5/13 e.new#6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#6 as range 2
  do {
    // </0 & ParseNameList-Tail/4 (/7 e.new#14/15 )/8 t.new#7/9 s.new#8/11 s.new#9/12 (/13 s.new#10/21 s.new#11/22 e.new#12/19 )/14 e.new#13/17 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    // closed e.new#14 as range 15
    // closed e.new#13 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    // closed e.new#12 as range 19
    do {
      // </0 & ParseNameList-Tail/4 (/7 e.new#21/23 )/8 t.new#15/9 s.new#16/11 s.new#17/12 (/13 s.new#18/21 s.new#19/22 )/14 e.new#20/25 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.new#21 as range 23
      // closed e.new#20 as range 25
      do {
        // </0 & ParseNameList-Tail/4 (/7 e.AST#1/27 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkComma/21 s.LnNum#1/22 )/14 e.Tail#1/29 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkComma], context[21] ) )
          continue;
        // closed e.AST#1 as range 27
        // closed e.Tail#1 as range 29
        //DEBUG: t.ErrorList#1: 9
        //DEBUG: s.ASTItem#1: 11
        //DEBUG: s.ScopeClass#1: 12
        //DEBUG: s.LnNum#1: 22
        //DEBUG: e.AST#1: 27
        //DEBUG: e.Tail#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/13 # TkComma/21 s.LnNum#1/22 )/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList/4 AsIs: (/7 AsIs: e.AST#1/27 AsIs: )/8 AsIs: t.ErrorList#1/9 AsIs: s.ASTItem#1/11 AsIs: s.ScopeClass#1/12 } Tile{ AsIs: e.Tail#1/29 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_ParseNameList]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseNameList-Tail/4 (/7 e.AST#1/27 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkSemicolon/21 s.LnNum#1/22 )/14 e.Tail#1/29 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[21] ) )
        continue;
      // closed e.AST#1 as range 27
      // closed e.Tail#1 as range 29
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LnNum#1: 22
      //DEBUG: e.AST#1: 27
      //DEBUG: e.Tail#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ParseNameList-Tail/4 {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkSemicolon/21 s.LnNum#1/22 )/14 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/27 AsIs: )/8 AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.Tail#1/29 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Tail/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkError/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[17];
      context[28] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[21] ) )
        continue;
      // closed e.AST#1 as range 23
      // closed e.1#0 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LineNumber#1: 22
      //DEBUG: e.AST#1: 23
      //DEBUG: e.1#0: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29 e.1#0/25/30 Tile{ AsIs: >/1 } Tile{ AsIs: (/13 AsIs: # TkError/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[29], context[22]);
      refalrts::copy_evar(vm, context[30], context[31], context[25], context[26]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Tail/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 # TkUnexpected/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[17];
      context[28] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[21] ) )
        continue;
      // closed e.AST#1 as range 23
      // closed e.1#0 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.ASTItem#1: 11
      //DEBUG: s.ScopeClass#1: 12
      //DEBUG: s.LineNumber#1: 22
      //DEBUG: e.AST#1: 23
      //DEBUG: e.1#0: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29"Unknown characters \""/30 e.1#0/25/32 '\"'/34 Tile{ AsIs: >/1 } Tile{ AsIs: (/13 AsIs: # TkUnexpected/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[29], context[22]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[32], context[33], context[25], context[26]);
      refalrts::alloc_char(vm, context[34], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[29], context[34] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseNameList-Tail/4 (/7 e.AST#1/23 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 (/13 s.Unexpected#1/21 s.LineNumber#1/22 e.1#0/25 )/14 e.Tail#1/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[17];
    context[28] = context[18];
    // closed e.AST#1 as range 23
    // closed e.1#0 as range 25
    // closed e.Tail#1 as range 27
    //DEBUG: t.ErrorList#1: 9
    //DEBUG: s.ASTItem#1: 11
    //DEBUG: s.ScopeClass#1: 12
    //DEBUG: s.Unexpected#1: 21
    //DEBUG: s.LineNumber#1: 22
    //DEBUG: e.AST#1: 23
    //DEBUG: e.1#0: 25
    //DEBUG: e.Tail#1: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/23 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/22/29"Unexpected "/30 </32 & SR-StrFromToken/33 s.Unexpected#1/21/34 e.1#0/25/35 Tile{ AsIs: >/1 }", expected comma or semicolon"/37 >/39 Tile{ AsIs: (/13 AsIs: s.Unexpected#1/21 AsIs: s.LineNumber#1/22 AsIs: e.1#0/25 AsIs: )/14 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[29], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[34], context[21]);
    refalrts::copy_evar(vm, context[35], context[36], context[25], context[26]);
    refalrts::alloc_chars(vm, context[37], context[38], ", expected comma or semicolon", 29);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[13], context[14] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[29], context[34] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseNameList-Tail/4 (/7 e.AST#1/5 )/8 t.ErrorList#1/9 s.ASTItem#1/11 s.ScopeClass#1/12 t.Unexpected#1/13 e.Tail#1/2 >/1
  // closed e.AST#1 as range 5
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 9
  //DEBUG: t.Unexpected#1: 13
  //DEBUG: s.ASTItem#1: 11
  //DEBUG: s.ScopeClass#1: 12
  //DEBUG: e.AST#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ASTItem#1/11 s.ScopeClass#1/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/5 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: t.Unexpected#1/13 }"comma or semicolon"/15 Tile{ AsIs: >/1 } t.Unexpected#1/13/17 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "comma or semicolon", 18);
  refalrts::copy_evar(vm, context[17], context[18], context[13], context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseNameListm_Tail("ParseNameList-Tail", COOKIE1_, COOKIE2_, func_ParseNameListm_Tail);


static refalrts::FnResult func_ParseNameListm_Idents(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & ParseNameList-Idents/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseNameList-Idents/4 (/7 e.new#1/5 )/8 t.new#2/9 t.new#3/11 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & ParseNameList-Idents/4 (/7 e.new#10/13 )/8 t.new#5/9 (/11 s.new#6/19 s.new#7/20 e.new#8/17 )/12 e.new#9/15 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[2];
    context[16] = context[3];
    context[17] = 0;
    context[18] = 0;
    if( ! refalrts::brackets_term( context[17], context[18], context[11] ) )
      continue;
    // closed e.new#10 as range 13
    // closed e.new#9 as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
      continue;
    // closed e.new#8 as range 17
    do {
      // </0 & ParseNameList-Idents/4 (/7 e.new#15/21 )/8 t.new#11/9 (/11 # TkName/19 s.new#12/20 e.new#13/23 )/12 e.new#14/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[19] ) )
        continue;
      // closed e.new#15 as range 21
      // closed e.new#13 as range 23
      // closed e.new#14 as range 25
      do {
        // </0 & ParseNameList-Idents/4 (/7 e.new#21/27 )/8 t.new#16/9 (/11 # TkName/19 s.new#17/20 e.new#18/29 )/12 t.new#19/33 e.new#20/31 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        // closed e.new#21 as range 27
        // closed e.new#18 as range 29
        context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
        if( ! context[34] )
          continue;
        // closed e.new#20 as range 31
        do {
          // </0 & ParseNameList-Idents/4 (/7 e.new#29/35 )/8 t.new#22/9 (/11 # TkName/19 s.new#23/20 e.new#24/37 )/12 (/33 s.new#25/43 s.new#26/44 e.new#27/41 )/34 e.new#28/39 >/1
          context[35] = context[27];
          context[36] = context[28];
          context[37] = context[29];
          context[38] = context[30];
          context[39] = context[31];
          context[40] = context[32];
          context[41] = 0;
          context[42] = 0;
          if( ! refalrts::brackets_term( context[41], context[42], context[33] ) )
            continue;
          // closed e.new#29 as range 35
          // closed e.new#24 as range 37
          // closed e.new#28 as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          if( ! refalrts::svar_left( context[44], context[41], context[42] ) )
            continue;
          // closed e.new#27 as range 41
          do {
            // </0 & ParseNameList-Idents/4 (/7 e.new#36/45 )/8 t.new#30/9 (/11 # TkName/19 s.new#31/20 e.new#32/47 )/12 (/33 s.new#33/43 s.new#34/44 )/34 e.new#35/49 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[39];
            context[50] = context[40];
            if( ! refalrts::empty_seq( context[41], context[42] ) )
              continue;
            // closed e.new#36 as range 45
            // closed e.new#32 as range 47
            // closed e.new#35 as range 49
            do {
              // </0 & ParseNameList-Idents/4 (/7 e.AST#1/51 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/53 )/12 (/33 # TkComma/43 s.LnNum0#1/44 )/34 e.#0/55 >/1
              context[51] = context[45];
              context[52] = context[46];
              context[53] = context[47];
              context[54] = context[48];
              context[55] = context[49];
              context[56] = context[50];
              if( ! refalrts::ident_term( identifiers[ident_TkComma], context[43] ) )
                continue;
              // closed e.AST#1 as range 51
              // closed e.Name#1 as range 53
              // closed e.#0 as range 55
              //DEBUG: t.ErrorList#1: 9
              //DEBUG: s.LnNum#1: 20
              //DEBUG: s.LnNum0#1: 44
              //DEBUG: e.AST#1: 51
              //DEBUG: e.Name#1: 53
              //DEBUG: e.#0: 55

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} # TkComma/43 s.LnNum0#1/44 )/34 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseNameList-Idents/4 AsIs: (/7 AsIs: e.AST#1/51 HalfReuse: (/8 } Tile{ Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/53 AsIs: )/12 HalfReuse: )/33 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.#0/55 } Tile{ AsIs: >/1 ]] }
              refalrts::reinit_open_bracket(context[8]);
              refalrts::update_ident(context[19], identifiers[ident_Ident]);
              refalrts::reinit_close_bracket(context[33]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[7], context[33] );
              refalrts::link_brackets( context[8], context[12] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[55], context[56] );
              res = refalrts::splice_evar( res, context[9], context[10] );
              res = refalrts::splice_evar( res, context[19], context[33] );
              refalrts::splice_to_freelist_open( vm, context[8], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/51 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/53 )/12 (/33 # TkSemicolon/43 s.LnNum0#1/44 )/34 e.#0/55 >/1
            context[51] = context[45];
            context[52] = context[46];
            context[53] = context[47];
            context[54] = context[48];
            context[55] = context[49];
            context[56] = context[50];
            if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[43] ) )
              continue;
            // closed e.AST#1 as range 51
            // closed e.Name#1 as range 53
            // closed e.#0 as range 55
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LnNum0#1: 44
            //DEBUG: e.AST#1: 51
            //DEBUG: e.Name#1: 53
            //DEBUG: e.#0: 55

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & ParseNameList-Idents/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/43 s.LnNum0#1/44 )/34 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.AST#1/51 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/53 AsIs: )/12 HalfReuse: )/33 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.#0/55 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::link_brackets( context[0], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[11], context[33] );
            res = refalrts::splice_evar( res, context[51], context[52] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 # TkError/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[41];
            context[50] = context[42];
            context[51] = context[39];
            context[52] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[43] ) )
              continue;
            // closed e.AST#1 as range 45
            // closed e.Name#1 as range 47
            // closed e.2#0 as range 49
            // closed e.#0 as range 51
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 44
            //DEBUG: e.AST#1: 45
            //DEBUG: e.Name#1: 47
            //DEBUG: e.2#0: 49
            //DEBUG: e.#0: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/47 AsIs: )/12 HalfReuse: )/33 HalfReuse: </43 } Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/53 e.2#0/49/54 Tile{ HalfReuse: >/4 AsIs: (/7 } Tile{ HalfReuse: # TkError/1 } Tile{ AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[53], context[44]);
            refalrts::copy_evar(vm, context[54], context[55], context[49], context[50]);
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::reinit_open_call(context[43]);
            refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_close_call(context[4]);
            refalrts::reinit_ident(context[1], identifiers[ident_TkError]);
            refalrts::link_brackets( context[7], context[34] );
            refalrts::push_stack( vm, context[4] );
            refalrts::push_stack( vm, context[43] );
            refalrts::link_brackets( context[0], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[44], context[34] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[4], context[7] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_elem( res, context[53] );
            res = refalrts::splice_evar( res, context[8], context[10] );
            res = refalrts::splice_evar( res, context[11], context[43] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 # TkUnexpected/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[41];
            context[50] = context[42];
            context[51] = context[39];
            context[52] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[43] ) )
              continue;
            // closed e.AST#1 as range 45
            // closed e.Name#1 as range 47
            // closed e.2#0 as range 49
            // closed e.#0 as range 51
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 44
            //DEBUG: e.AST#1: 45
            //DEBUG: e.Name#1: 47
            //DEBUG: e.2#0: 49
            //DEBUG: e.#0: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/47 AsIs: )/12 HalfReuse: )/33 HalfReuse: </43 } Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/53"Unknown characters \""/54 e.2#0/49/56 Tile{ HalfReuse: '\"'/0 HalfReuse: >/4 AsIs: (/7 } # TkUnexpected/58 Tile{ AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[53], context[44]);
            refalrts::alloc_chars(vm, context[54], context[55], "Unknown characters \"", 20);
            refalrts::copy_evar(vm, context[56], context[57], context[49], context[50]);
            refalrts::alloc_ident(vm, context[58], identifiers[ident_TkUnexpected]);
            refalrts::reinit_open_bracket(context[1]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::reinit_open_call(context[43]);
            refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[0], '\"');
            refalrts::reinit_close_call(context[4]);
            refalrts::link_brackets( context[7], context[34] );
            refalrts::push_stack( vm, context[4] );
            refalrts::push_stack( vm, context[43] );
            refalrts::link_brackets( context[1], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[44], context[34] );
            res = refalrts::splice_elem( res, context[58] );
            res = refalrts::splice_evar( res, context[0], context[7] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_evar( res, context[53], context[55] );
            res = refalrts::splice_evar( res, context[8], context[10] );
            res = refalrts::splice_evar( res, context[11], context[43] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_elem( res, context[1] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 s.Unexpected#1/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
          context[45] = context[35];
          context[46] = context[36];
          context[47] = context[37];
          context[48] = context[38];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[39];
          context[52] = context[40];
          // closed e.AST#1 as range 45
          // closed e.Name#1 as range 47
          // closed e.2#0 as range 49
          // closed e.#0 as range 51
          //DEBUG: t.ErrorList#1: 9
          //DEBUG: s.LnNum#1: 20
          //DEBUG: s.Unexpected#1: 43
          //DEBUG: s.LineNumber#1: 44
          //DEBUG: e.AST#1: 45
          //DEBUG: e.Name#1: 47
          //DEBUG: e.2#0: 49
          //DEBUG: e.#0: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/53 Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 } Tile{ AsIs: e.Name#1/47 } )/54 )/55 </56 Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/57"Unexpected "/58 Tile{ AsIs: </0 Reuse: & SR-StrFromToken/4 HalfReuse: s.Unexpected1 #43/7 } e.2#0/49/60 Tile{ AsIs: >/1 }", expected comma or semicolon"/62 Tile{ HalfReuse: >/12 AsIs: (/33 AsIs: s.Unexpected#1/43 AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::alloc_close_bracket(vm, context[54]);
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::alloc_open_call(vm, context[56]);
          refalrts::copy_stvar(vm, context[57], context[44]);
          refalrts::alloc_chars(vm, context[58], context[59], "Unexpected ", 11);
          refalrts::copy_evar(vm, context[60], context[61], context[49], context[50]);
          refalrts::alloc_chars(vm, context[62], context[63], ", expected comma or semicolon", 29);
          refalrts::update_ident(context[19], identifiers[ident_Ident]);
          refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
          refalrts::update_name(context[4], functions[efunc_SRm_StrFromToken]);
          refalrts::reinit_svar( context[7], context[43] );
          refalrts::reinit_close_call(context[12]);
          refalrts::link_brackets( context[33], context[34] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[53], context[55] );
          refalrts::link_brackets( context[11], context[54] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[12], context[34] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[57], context[59] );
          res = refalrts::splice_evar( res, context[8], context[10] );
          res = refalrts::splice_evar( res, context[54], context[56] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[11], context[20] );
          res = refalrts::splice_evar( res, context[45], context[46] );
          res = refalrts::splice_elem( res, context[53] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseNameList-Idents/4 (/7 e.AST#1/35 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/37 )/12 t.#0/33 e.#0/39 >/1
        context[35] = context[27];
        context[36] = context[28];
        context[37] = context[29];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[32];
        // closed e.AST#1 as range 35
        // closed e.Name#1 as range 37
        // closed e.#0 as range 39
        //DEBUG: t.ErrorList#1: 9
        //DEBUG: t.#0: 33
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.AST#1: 35
        //DEBUG: e.Name#1: 37
        //DEBUG: e.#0: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } Tile{ AsIs: e.AST#1/35 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/37 AsIs: )/12 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: t.#0/33 }"comma or semicolon"/41 Tile{ AsIs: >/1 } t.#0/33/43 Tile{ AsIs: e.#0/39 } Tile{ ]] }
        refalrts::alloc_chars(vm, context[41], context[42], "comma or semicolon", 18);
        refalrts::copy_evar(vm, context[43], context[44], context[33], context[34]);
        refalrts::update_ident(context[19], identifiers[ident_Ident]);
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[7] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseNameList-Idents/4 (/7 e.AST#1/27 )/8 t.ErrorList#1/9 (/11 # TkName/19 s.LnNum#1/20 e.Name#1/29 )/12 e.Tail#1/31 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      // closed e.AST#1 as range 27
      // closed e.Name#1 as range 29
      // closed e.Tail#1 as range 31
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 27
      //DEBUG: e.Name#1: 29
      //DEBUG: e.Tail#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList-Idents-Tail*3/4 AsIs: (/7 AsIs: e.AST#1/27 HalfReuse: (/8 } Tile{ Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/29 AsIs: )/12 } Tile{ HalfReuse: )/11 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_ParseNameListm_Identsm_Tail_D3]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_ident(context[19], identifiers[ident_Ident]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Idents/4 (/7 e.new#15/21 )/8 t.new#11/9 (/11 # TkCompound/19 s.new#12/20 e.new#13/23 )/12 e.new#14/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[19] ) )
        continue;
      // closed e.new#15 as range 21
      // closed e.new#13 as range 23
      // closed e.new#14 as range 25
      do {
        // </0 & ParseNameList-Idents/4 (/7 e.new#21/27 )/8 t.new#16/9 (/11 # TkCompound/19 s.new#17/20 e.new#18/29 )/12 t.new#19/33 e.new#20/31 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        // closed e.new#21 as range 27
        // closed e.new#18 as range 29
        context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
        if( ! context[34] )
          continue;
        // closed e.new#20 as range 31
        do {
          // </0 & ParseNameList-Idents/4 (/7 e.new#29/35 )/8 t.new#22/9 (/11 # TkCompound/19 s.new#23/20 e.new#24/37 )/12 (/33 s.new#25/43 s.new#26/44 e.new#27/41 )/34 e.new#28/39 >/1
          context[35] = context[27];
          context[36] = context[28];
          context[37] = context[29];
          context[38] = context[30];
          context[39] = context[31];
          context[40] = context[32];
          context[41] = 0;
          context[42] = 0;
          if( ! refalrts::brackets_term( context[41], context[42], context[33] ) )
            continue;
          // closed e.new#29 as range 35
          // closed e.new#24 as range 37
          // closed e.new#28 as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          if( ! refalrts::svar_left( context[44], context[41], context[42] ) )
            continue;
          // closed e.new#27 as range 41
          do {
            // </0 & ParseNameList-Idents/4 (/7 e.new#36/45 )/8 t.new#30/9 (/11 # TkCompound/19 s.new#31/20 e.new#32/47 )/12 (/33 s.new#33/43 s.new#34/44 )/34 e.new#35/49 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[39];
            context[50] = context[40];
            if( ! refalrts::empty_seq( context[41], context[42] ) )
              continue;
            // closed e.new#36 as range 45
            // closed e.new#32 as range 47
            // closed e.new#35 as range 49
            do {
              // </0 & ParseNameList-Idents/4 (/7 e.AST#1/51 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/53 )/12 (/33 # TkComma/43 s.LnNum0#1/44 )/34 e.#0/55 >/1
              context[51] = context[45];
              context[52] = context[46];
              context[53] = context[47];
              context[54] = context[48];
              context[55] = context[49];
              context[56] = context[50];
              if( ! refalrts::ident_term( identifiers[ident_TkComma], context[43] ) )
                continue;
              // closed e.AST#1 as range 51
              // closed e.Name#1 as range 53
              // closed e.#0 as range 55
              //DEBUG: t.ErrorList#1: 9
              //DEBUG: s.LnNum#1: 20
              //DEBUG: s.LnNum0#1: 44
              //DEBUG: e.AST#1: 51
              //DEBUG: e.Name#1: 53
              //DEBUG: e.#0: 55

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} # TkComma/43 s.LnNum0#1/44 )/34 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 AsIs: & ParseNameList-Idents/4 AsIs: (/7 AsIs: e.AST#1/51 HalfReuse: (/8 } Tile{ Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/53 AsIs: )/12 HalfReuse: )/33 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.#0/55 } Tile{ AsIs: >/1 ]] }
              refalrts::reinit_open_bracket(context[8]);
              refalrts::update_ident(context[19], identifiers[ident_Ident]);
              refalrts::reinit_close_bracket(context[33]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[7], context[33] );
              refalrts::link_brackets( context[8], context[12] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[55], context[56] );
              res = refalrts::splice_evar( res, context[9], context[10] );
              res = refalrts::splice_evar( res, context[19], context[33] );
              refalrts::splice_to_freelist_open( vm, context[8], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/51 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/53 )/12 (/33 # TkSemicolon/43 s.LnNum0#1/44 )/34 e.#0/55 >/1
            context[51] = context[45];
            context[52] = context[46];
            context[53] = context[47];
            context[54] = context[48];
            context[55] = context[49];
            context[56] = context[50];
            if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[43] ) )
              continue;
            // closed e.AST#1 as range 51
            // closed e.Name#1 as range 53
            // closed e.#0 as range 55
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LnNum0#1: 44
            //DEBUG: e.AST#1: 51
            //DEBUG: e.Name#1: 53
            //DEBUG: e.#0: 55

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & ParseNameList-Idents/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/43 s.LnNum0#1/44 )/34 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.AST#1/51 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/53 AsIs: )/12 HalfReuse: )/33 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.#0/55 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::link_brackets( context[0], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[11], context[33] );
            res = refalrts::splice_evar( res, context[51], context[52] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 # TkError/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[41];
            context[50] = context[42];
            context[51] = context[39];
            context[52] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[43] ) )
              continue;
            // closed e.AST#1 as range 45
            // closed e.Name#1 as range 47
            // closed e.2#0 as range 49
            // closed e.#0 as range 51
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 44
            //DEBUG: e.AST#1: 45
            //DEBUG: e.Name#1: 47
            //DEBUG: e.2#0: 49
            //DEBUG: e.#0: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/47 AsIs: )/12 HalfReuse: )/33 HalfReuse: </43 } Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/53 e.2#0/49/54 Tile{ HalfReuse: >/4 AsIs: (/7 } Tile{ HalfReuse: # TkError/1 } Tile{ AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[53], context[44]);
            refalrts::copy_evar(vm, context[54], context[55], context[49], context[50]);
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::reinit_open_call(context[43]);
            refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_close_call(context[4]);
            refalrts::reinit_ident(context[1], identifiers[ident_TkError]);
            refalrts::link_brackets( context[7], context[34] );
            refalrts::push_stack( vm, context[4] );
            refalrts::push_stack( vm, context[43] );
            refalrts::link_brackets( context[0], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[44], context[34] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[4], context[7] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_elem( res, context[53] );
            res = refalrts::splice_evar( res, context[8], context[10] );
            res = refalrts::splice_evar( res, context[11], context[43] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 # TkUnexpected/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
            context[45] = context[35];
            context[46] = context[36];
            context[47] = context[37];
            context[48] = context[38];
            context[49] = context[41];
            context[50] = context[42];
            context[51] = context[39];
            context[52] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[43] ) )
              continue;
            // closed e.AST#1 as range 45
            // closed e.Name#1 as range 47
            // closed e.2#0 as range 49
            // closed e.#0 as range 51
            //DEBUG: t.ErrorList#1: 9
            //DEBUG: s.LnNum#1: 20
            //DEBUG: s.LineNumber#1: 44
            //DEBUG: e.AST#1: 45
            //DEBUG: e.Name#1: 47
            //DEBUG: e.2#0: 49
            //DEBUG: e.#0: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/47 AsIs: )/12 HalfReuse: )/33 HalfReuse: </43 } Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/53"Unknown characters \""/54 e.2#0/49/56 Tile{ HalfReuse: '\"'/0 HalfReuse: >/4 AsIs: (/7 } # TkUnexpected/58 Tile{ AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[53], context[44]);
            refalrts::alloc_chars(vm, context[54], context[55], "Unknown characters \"", 20);
            refalrts::copy_evar(vm, context[56], context[57], context[49], context[50]);
            refalrts::alloc_ident(vm, context[58], identifiers[ident_TkUnexpected]);
            refalrts::reinit_open_bracket(context[1]);
            refalrts::update_ident(context[19], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::reinit_open_call(context[43]);
            refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[0], '\"');
            refalrts::reinit_close_call(context[4]);
            refalrts::link_brackets( context[7], context[34] );
            refalrts::push_stack( vm, context[4] );
            refalrts::push_stack( vm, context[43] );
            refalrts::link_brackets( context[1], context[33] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[44], context[34] );
            res = refalrts::splice_elem( res, context[58] );
            res = refalrts::splice_evar( res, context[0], context[7] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_evar( res, context[53], context[55] );
            res = refalrts::splice_evar( res, context[8], context[10] );
            res = refalrts::splice_evar( res, context[11], context[43] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_elem( res, context[1] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseNameList-Idents/4 (/7 e.AST#1/45 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/47 )/12 (/33 s.Unexpected#1/43 s.LineNumber#1/44 e.2#0/49 )/34 e.#0/51 >/1
          context[45] = context[35];
          context[46] = context[36];
          context[47] = context[37];
          context[48] = context[38];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[39];
          context[52] = context[40];
          // closed e.AST#1 as range 45
          // closed e.Name#1 as range 47
          // closed e.2#0 as range 49
          // closed e.#0 as range 51
          //DEBUG: t.ErrorList#1: 9
          //DEBUG: s.LnNum#1: 20
          //DEBUG: s.Unexpected#1: 43
          //DEBUG: s.LineNumber#1: 44
          //DEBUG: e.AST#1: 45
          //DEBUG: e.Name#1: 47
          //DEBUG: e.2#0: 49
          //DEBUG: e.#0: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/53 Tile{ AsIs: e.AST#1/45 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 } Tile{ AsIs: e.Name#1/47 } )/54 )/55 </56 Tile{ HalfReuse: & EL-AddErrorAt/8 AsIs: t.ErrorList#1/9 } s.LineNumber#1/44/57"Unexpected "/58 Tile{ AsIs: </0 Reuse: & SR-StrFromToken/4 HalfReuse: s.Unexpected1 #43/7 } e.2#0/49/60 Tile{ AsIs: >/1 }", expected comma or semicolon"/62 Tile{ HalfReuse: >/12 AsIs: (/33 AsIs: s.Unexpected#1/43 AsIs: s.LineNumber#1/44 AsIs: e.2#0/49 AsIs: )/34 } Tile{ AsIs: e.#0/51 } Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::alloc_close_bracket(vm, context[54]);
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::alloc_open_call(vm, context[56]);
          refalrts::copy_stvar(vm, context[57], context[44]);
          refalrts::alloc_chars(vm, context[58], context[59], "Unexpected ", 11);
          refalrts::copy_evar(vm, context[60], context[61], context[49], context[50]);
          refalrts::alloc_chars(vm, context[62], context[63], ", expected comma or semicolon", 29);
          refalrts::update_ident(context[19], identifiers[ident_Ident]);
          refalrts::reinit_name(context[8], functions[efunc_ELm_AddErrorAt]);
          refalrts::update_name(context[4], functions[efunc_SRm_StrFromToken]);
          refalrts::reinit_svar( context[7], context[43] );
          refalrts::reinit_close_call(context[12]);
          refalrts::link_brackets( context[33], context[34] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[53], context[55] );
          refalrts::link_brackets( context[11], context[54] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[12], context[34] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[57], context[59] );
          res = refalrts::splice_evar( res, context[8], context[10] );
          res = refalrts::splice_evar( res, context[54], context[56] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[11], context[20] );
          res = refalrts::splice_evar( res, context[45], context[46] );
          res = refalrts::splice_elem( res, context[53] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseNameList-Idents/4 (/7 e.AST#1/35 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/37 )/12 t.#0/33 e.#0/39 >/1
        context[35] = context[27];
        context[36] = context[28];
        context[37] = context[29];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[32];
        // closed e.AST#1 as range 35
        // closed e.Name#1 as range 37
        // closed e.#0 as range 39
        //DEBUG: t.ErrorList#1: 9
        //DEBUG: t.#0: 33
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.AST#1: 35
        //DEBUG: e.Name#1: 37
        //DEBUG: e.#0: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } Tile{ AsIs: e.AST#1/35 } Tile{ AsIs: (/11 Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/37 AsIs: )/12 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: t.#0/33 }"comma or semicolon"/41 Tile{ AsIs: >/1 } t.#0/33/43 Tile{ AsIs: e.#0/39 } Tile{ ]] }
        refalrts::alloc_chars(vm, context[41], context[42], "comma or semicolon", 18);
        refalrts::copy_evar(vm, context[43], context[44], context[33], context[34]);
        refalrts::update_ident(context[19], identifiers[ident_Ident]);
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[7] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseNameList-Idents/4 (/7 e.AST#1/27 )/8 t.ErrorList#1/9 (/11 # TkCompound/19 s.LnNum#1/20 e.Name#1/29 )/12 e.Tail#1/31 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      // closed e.AST#1 as range 27
      // closed e.Name#1 as range 29
      // closed e.Tail#1 as range 31
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 27
      //DEBUG: e.Name#1: 29
      //DEBUG: e.Tail#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList-Idents-Tail*3/4 AsIs: (/7 AsIs: e.AST#1/27 HalfReuse: (/8 } Tile{ Reuse: # Ident/19 AsIs: s.LnNum#1/20 AsIs: e.Name#1/29 AsIs: )/12 } Tile{ HalfReuse: )/11 } Tile{ AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_ParseNameListm_Identsm_Tail_D3]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_ident(context[19], identifiers[ident_Ident]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Idents/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 # TkError/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[19] ) )
        continue;
      // closed e.AST#1 as range 21
      // closed e.1#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 21
      //DEBUG: e.1#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27 e.1#0/23/28 Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # TkError/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[27], context[20]);
      refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Idents/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 # TkUnexpected/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[19] ) )
        continue;
      // closed e.AST#1 as range 21
      // closed e.1#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 21
      //DEBUG: e.1#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27"Unknown characters \""/28 e.1#0/23/30 '\"'/32 Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # TkUnexpected/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[27], context[20]);
      refalrts::alloc_chars(vm, context[28], context[29], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
      refalrts::alloc_char(vm, context[32], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[27], context[32] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseNameList-Idents/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 s.Unexpected#1/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[15];
    context[26] = context[16];
    // closed e.AST#1 as range 21
    // closed e.1#0 as range 23
    // closed e.Tail#1 as range 25
    //DEBUG: t.ErrorList#1: 9
    //DEBUG: s.Unexpected#1: 19
    //DEBUG: s.LineNumber#1: 20
    //DEBUG: e.AST#1: 21
    //DEBUG: e.1#0: 23
    //DEBUG: e.Tail#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27"Unexpected "/28 </30 & SR-StrFromToken/31 s.Unexpected#1/19/32 e.1#0/23/33 Tile{ AsIs: >/1 }", expected identifier name or compound symbol"/35 >/37 Tile{ AsIs: (/11 AsIs: s.Unexpected#1/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[27], context[20]);
    refalrts::alloc_chars(vm, context[28], context[29], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[32], context[19]);
    refalrts::copy_evar(vm, context[33], context[34], context[23], context[24]);
    refalrts::alloc_chars(vm, context[35], context[36], ", expected identifier name or compound symbol", 45);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[27], context[32] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseNameList-Idents/4 (/7 e.AST#1/5 )/8 t.ErrorList#1/9 t.Unexpected#1/11 e.Tail#1/2 >/1
  // closed e.AST#1 as range 5
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 9
  //DEBUG: t.Unexpected#1: 11
  //DEBUG: e.AST#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/5 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 AsIs: t.Unexpected#1/11 }"identifier name or compound symbol"/13 Tile{ AsIs: >/1 } t.Unexpected#1/11/15 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[13], context[14], "identifier name or compound symbol", 34);
  refalrts::copy_evar(vm, context[15], context[16], context[11], context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseNameListm_Idents("ParseNameList-Idents", COOKIE1_, COOKIE2_, func_ParseNameListm_Idents);


static refalrts::FnResult func_ParseNameListm_Identsm_Tail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & ParseNameList-Idents-Tail/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseNameList-Idents-Tail/4 (/7 e.new#1/5 )/8 t.new#2/9 t.new#3/11 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & ParseNameList-Idents-Tail/4 (/7 e.new#10/13 )/8 t.new#5/9 (/11 s.new#6/19 s.new#7/20 e.new#8/17 )/12 e.new#9/15 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[2];
    context[16] = context[3];
    context[17] = 0;
    context[18] = 0;
    if( ! refalrts::brackets_term( context[17], context[18], context[11] ) )
      continue;
    // closed e.new#10 as range 13
    // closed e.new#9 as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
      continue;
    // closed e.new#8 as range 17
    do {
      // </0 & ParseNameList-Idents-Tail/4 (/7 e.new#15/21 )/8 t.new#11/9 (/11 s.new#12/19 s.new#13/20 )/12 e.new#14/23 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[16];
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.new#15 as range 21
      // closed e.new#14 as range 23
      do {
        // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/25 )/8 t.ErrorList#1/9 (/11 # TkComma/19 s.LnNum#1/20 )/12 e.Tail#1/27 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_TkComma], context[19] ) )
          continue;
        // closed e.AST#1 as range 25
        // closed e.Tail#1 as range 27
        //DEBUG: t.ErrorList#1: 9
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.AST#1: 25
        //DEBUG: e.Tail#1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 # TkComma/19 s.LnNum#1/20 )/12 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseNameList-Idents/4 AsIs: (/7 AsIs: e.AST#1/25 AsIs: )/8 AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_ParseNameListm_Idents]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/25 )/8 t.ErrorList#1/9 (/11 # TkSemicolon/19 s.LnNum#1/20 )/12 e.Tail#1/27 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[19] ) )
        continue;
      // closed e.AST#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.AST#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ParseNameList-Idents-Tail/4 {REMOVED TILE} (/11 # TkSemicolon/19 s.LnNum#1/20 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/25 AsIs: )/8 AsIs: t.ErrorList#1/9 } Tile{ AsIs: e.Tail#1/27 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 # TkError/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[19] ) )
        continue;
      // closed e.AST#1 as range 21
      // closed e.1#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 21
      //DEBUG: e.1#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27 e.1#0/23/28 Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # TkError/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[27], context[20]);
      refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 # TkUnexpected/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[19] ) )
        continue;
      // closed e.AST#1 as range 21
      // closed e.1#0 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList#1: 9
      //DEBUG: s.LineNumber#1: 20
      //DEBUG: e.AST#1: 21
      //DEBUG: e.1#0: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27"Unknown characters \""/28 e.1#0/23/30 '\"'/32 Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # TkUnexpected/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[27], context[20]);
      refalrts::alloc_chars(vm, context[28], context[29], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
      refalrts::alloc_char(vm, context[32], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[27], context[32] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/21 )/8 t.ErrorList#1/9 (/11 s.Unexpected#1/19 s.LineNumber#1/20 e.1#0/23 )/12 e.Tail#1/25 >/1
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[15];
    context[26] = context[16];
    // closed e.AST#1 as range 21
    // closed e.1#0 as range 23
    // closed e.Tail#1 as range 25
    //DEBUG: t.ErrorList#1: 9
    //DEBUG: s.Unexpected#1: 19
    //DEBUG: s.LineNumber#1: 20
    //DEBUG: e.AST#1: 21
    //DEBUG: e.1#0: 23
    //DEBUG: e.Tail#1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/21 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/9 } s.LineNumber#1/20/27"Unexpected "/28 </30 & SR-StrFromToken/31 s.Unexpected#1/19/32 e.1#0/23/33 Tile{ AsIs: >/1 }", expected comma or semicolon"/35 >/37 Tile{ AsIs: (/11 AsIs: s.Unexpected#1/19 AsIs: s.LineNumber#1/20 AsIs: e.1#0/23 AsIs: )/12 } Tile{ AsIs: e.Tail#1/25 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[27], context[20]);
    refalrts::alloc_chars(vm, context[28], context[29], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[32], context[19]);
    refalrts::copy_evar(vm, context[33], context[34], context[23], context[24]);
    refalrts::alloc_chars(vm, context[35], context[36], ", expected comma or semicolon", 29);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[27], context[32] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseNameList-Idents-Tail/4 (/7 e.AST#1/5 )/8 t.ErrorList#1/9 t.Unexpected#1/11 e.Tail#1/2 >/1
  // closed e.AST#1 as range 5
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 9
  //DEBUG: t.Unexpected#1: 11
  //DEBUG: e.AST#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.AST#1/5 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/9 AsIs: t.Unexpected#1/11 }"comma or semicolon"/13 Tile{ AsIs: >/1 } t.Unexpected#1/11/15 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[13], context[14], "comma or semicolon", 18);
  refalrts::copy_evar(vm, context[15], context[16], context[11], context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseNameListm_Identsm_Tail("ParseNameList-Idents-Tail", COOKIE1_, COOKIE2_, func_ParseNameListm_Identsm_Tail);


static refalrts::FnResult func_gen_ParseFunction_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ParseFunction$1=1/4 s.LnNum#1/5 s.ScopeClass#1/6 (/9 e.Name#1/7 )/10 (/13 e.Block#2/11 )/14 t.ErrorList#2/15 e.Tail#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Name#1 as range 7
  // closed e.Block#2 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#2 as range 2
  //DEBUG: s.LnNum#1: 5
  //DEBUG: s.ScopeClass#1: 6
  //DEBUG: e.Name#1: 7
  //DEBUG: e.Block#2: 11
  //DEBUG: t.ErrorList#2: 15
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } Tile{ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.LnNum#1/5 AsIs: s.ScopeClass#1/6 AsIs: (/9 AsIs: e.Name#1/7 AsIs: )/10 } Tile{ AsIs: e.Block#2/11 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/14 AsIs: t.ErrorList#2/15 } Tile{ AsIs: e.Tail#2/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Function]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseFunction_S1A1("ParseFunction$1=1", COOKIE1_, COOKIE2_, func_gen_ParseFunction_S1A1);


static refalrts::FnResult func_ParseFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & ParseFunction/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseFunction/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 t.new#4/12 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & ParseFunction/4 s.new#6/5 (/8 e.new#12/14 )/9 t.new#7/10 (/12 s.new#8/20 s.new#9/21 e.new#10/18 )/13 e.new#11/16 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new#12 as range 14
    // closed e.new#11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    // closed e.new#10 as range 18
    do {
      // </0 & ParseFunction/4 s.ScopeClass#1/5 (/8 e.Name#1/22 )/9 t.ErrorList#1/10 (/12 # TkOpenBlock/20 s.LnNum#1/21 )/13 e.Tail#1/24 >/1
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.Name#1 as range 22
      // closed e.Tail#1 as range 24
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: s.ScopeClass#1: 5
      //DEBUG: s.LnNum#1: 21
      //DEBUG: e.Name#1: 22
      //DEBUG: e.Tail#1: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 } Tile{ HalfReuse: & ParseFunction$1=1/0 HalfReuse: s.LnNum1 #21/4 AsIs: s.ScopeClass#1/5 AsIs: (/8 AsIs: e.Name#1/22 AsIs: )/9 } Tile{ HalfReuse: </12 HalfReuse: & ParseBlock/20 } Tile{ AsIs: t.ErrorList#1/10 } Tile{ AsIs: e.Tail#1/24 } >/26 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[0], functions[efunc_gen_ParseFunction_S1A1]);
      refalrts::reinit_svar( context[4], context[21] );
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[20], functions[efunc_ParseBlock]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[12], context[20] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseFunction/4 s.ScopeClass#1/5 (/8 e.Name#1/22 )/9 t.ErrorList#1/10 (/12 # TkError/20 s.LineNumber#1/21 e.1#0/24 )/13 e.Tail#1/26 >/1
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[16];
      context[27] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.Name#1 as range 22
      // closed e.1#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: s.ScopeClass#1: 5
      //DEBUG: s.LineNumber#1: 21
      //DEBUG: e.Name#1: 22
      //DEBUG: e.1#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.ScopeClass#1/5 {REMOVED TILE} e.Name#1/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & EL-AddErrorAt/9 AsIs: t.ErrorList#1/10 } s.LineNumber#1/21/28 e.1#0/24/29 Tile{ AsIs: >/1 } Tile{ AsIs: (/12 AsIs: # TkError/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/24 AsIs: )/13 } Tile{ AsIs: e.Tail#1/26 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[28], context[21]);
      refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[12], context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      res = refalrts::splice_elem( res, context[8] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseFunction/4 s.ScopeClass#1/5 (/8 e.Name#1/22 )/9 t.ErrorList#1/10 (/12 # TkUnexpected/20 s.LineNumber#1/21 e.1#0/24 )/13 e.Tail#1/26 >/1
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[16];
      context[27] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[20] ) )
        continue;
      // closed e.Name#1 as range 22
      // closed e.1#0 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: s.ScopeClass#1: 5
      //DEBUG: s.LineNumber#1: 21
      //DEBUG: e.Name#1: 22
      //DEBUG: e.1#0: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.ScopeClass#1/5 {REMOVED TILE} e.Name#1/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } </28 Tile{ HalfReuse: & EL-AddErrorAt/9 AsIs: t.ErrorList#1/10 } Tile{ HalfReuse: s.LineNumber1 #21/8 }"Unknown characters \""/29 e.1#0/24/31 '\"'/33 Tile{ AsIs: >/1 } Tile{ AsIs: (/12 AsIs: # TkUnexpected/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/24 AsIs: )/13 } Tile{ AsIs: e.Tail#1/26 } Tile{ ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "Unknown characters \"", 20);
      refalrts::copy_evar(vm, context[31], context[32], context[24], context[25]);
      refalrts::alloc_char(vm, context[33], '\"');
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[9], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[29], context[33] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseFunction/4 s.ScopeClass#1/5 (/8 e.Name#1/22 )/9 t.ErrorList#1/10 (/12 s.Unexpected#1/20 s.LineNumber#1/21 e.1#0/24 )/13 e.Tail#1/26 >/1
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[16];
    context[27] = context[17];
    // closed e.Name#1 as range 22
    // closed e.1#0 as range 24
    // closed e.Tail#1 as range 26
    //DEBUG: t.ErrorList#1: 10
    //DEBUG: s.ScopeClass#1: 5
    //DEBUG: s.Unexpected#1: 20
    //DEBUG: s.LineNumber#1: 21
    //DEBUG: e.Name#1: 22
    //DEBUG: e.1#0: 24
    //DEBUG: e.Tail#1: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.ScopeClass#1/5 {REMOVED TILE} e.Name#1/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } </28 Tile{ HalfReuse: & EL-AddErrorAt/9 AsIs: t.ErrorList#1/10 } s.LineNumber#1/21/29 Tile{ HalfReuse: 'U'/8 }"nexpected "/30 </32 & SR-StrFromToken/33 s.Unexpected#1/20/34 e.1#0/24/35 >/37", expected open brace"/38 Tile{ AsIs: >/1 } Tile{ AsIs: (/12 AsIs: s.Unexpected#1/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/24 AsIs: )/13 } Tile{ AsIs: e.Tail#1/26 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::copy_stvar(vm, context[29], context[21]);
    refalrts::alloc_chars(vm, context[30], context[31], "nexpected ", 10);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[34], context[20]);
    refalrts::copy_evar(vm, context[35], context[36], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_chars(vm, context[38], context[39], ", expected open brace", 21);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[9], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[8], 'U');
    refalrts::link_brackets( context[12], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[30], context[39] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseFunction/4 s.ScopeClass#1/5 (/8 e.Name#1/6 )/9 t.ErrorList#1/10 t.Unexpected#1/12 e.Tail#1/2 >/1
  // closed e.Name#1 as range 6
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 10
  //DEBUG: t.Unexpected#1: 12
  //DEBUG: s.ScopeClass#1: 5
  //DEBUG: e.Name#1: 6
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.ScopeClass#1/5 {REMOVED TILE} e.Name#1/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } </14 Tile{ HalfReuse: & AddUnexpected*3/9 AsIs: t.ErrorList#1/10 AsIs: t.Unexpected#1/12 } 'o'/15 Tile{ HalfReuse: 'p'/8 }"en brace"/16 Tile{ AsIs: >/1 } t.Unexpected#1/12/18 Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_char(vm, context[15], 'o');
  refalrts::alloc_chars(vm, context[16], context[17], "en brace", 8);
  refalrts::copy_evar(vm, context[18], context[19], context[12], context[13]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_name(context[9], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::reinit_char(context[8], 'p');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseFunction("ParseFunction", COOKIE1_, COOKIE2_, func_ParseFunction);


static refalrts::FnResult func_ParseBlock(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & ParseBlock/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseBlock/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ParseBlock/4 t.new#3/5 (/11 s.new#4/13 t.new#5/14 e.new#6/9 )/12 e.new#7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[7], context[8] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    // closed e.new#7 as range 7
    if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
      continue;
    context[15] = refalrts::tvar_left( context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    // closed e.new#6 as range 9
    do {
      // </0 & ParseBlock/4 t.new#8/5 (/11 # TkNativeBlock/13 t.new#10/14 e.new#11/16 )/12 e.new#9/18 >/1
      context[16] = context[9];
      context[17] = context[10];
      context[18] = context[7];
      context[19] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkNativeBlock], context[13] ) )
        continue;
      // closed e.new#11 as range 16
      // closed e.new#9 as range 18
      do {
        // </0 & ParseBlock/4 t.new#12/5 (/11 # TkNativeBlock/13 t.new#15/14 e.new#16/20 )/12 t.new#13/24 e.new#14/22 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        // closed e.new#16 as range 20
        context[25] = refalrts::tvar_left( context[24], context[22], context[23] );
        if( ! context[25] )
          continue;
        // closed e.new#14 as range 22
        do {
          // </0 & ParseBlock/4 t.new#17/5 (/11 # TkNativeBlock/13 t.new#22/14 e.new#23/26 )/12 (/24 s.new#18/32 t.new#19/33 e.new#20/30 )/25 e.new#21/28 >/1
          context[26] = context[20];
          context[27] = context[21];
          context[28] = context[22];
          context[29] = context[23];
          context[30] = 0;
          context[31] = 0;
          if( ! refalrts::brackets_term( context[30], context[31], context[24] ) )
            continue;
          // closed e.new#23 as range 26
          // closed e.new#21 as range 28
          if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
            continue;
          context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
          if( ! context[34] )
            continue;
          // closed e.new#20 as range 30
          do {
            // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/35 )/12 (/24 # TkCloseBlock/32 t.1#0/33 )/25 e.#0/37 >/1
            context[35] = context[26];
            context[36] = context[27];
            context[37] = context[28];
            context[38] = context[29];
            if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[32] ) )
              continue;
            if( ! refalrts::empty_seq( context[30], context[31] ) )
              continue;
            // closed e.Block#1 as range 35
            // closed e.#0 as range 37
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: t.SrcPos#1: 14
            //DEBUG: t.1#0: 33
            //DEBUG: e.Block#1: 35
            //DEBUG: e.#0: 37

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & ParseBlock/4 {REMOVED TILE} {REMOVED TILE} (/24 # TkCloseBlock/32 t.1#0/33 )/25 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # NativeBody/13 AsIs: t.SrcPos#1/14 AsIs: e.Block#1/35 AsIs: )/12 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.#0/37 } Tile{ ]] }
            refalrts::update_ident(context[13], identifiers[ident_NativeBody]);
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[11], context[12] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseBlock/4 t.new#24/5 (/11 # TkNativeBlock/13 t.new#29/14 e.new#30/35 )/12 (/24 s.new#25/32 s.new#26/33 e.new#27/37 )/25 e.new#28/39 >/1
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[30];
          context[38] = context[31];
          context[39] = context[28];
          context[40] = context[29];
          if( ! refalrts::svar_term( context[33], context[33] ) )
            continue;
          // closed e.new#30 as range 35
          // closed e.new#27 as range 37
          // closed e.new#28 as range 39
          do {
            // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/41 )/12 (/24 # TkError/32 s.LineNumber#1/33 e.2#0/43 )/25 e.#0/45 >/1
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            context[44] = context[38];
            context[45] = context[39];
            context[46] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[32] ) )
              continue;
            // closed e.Block#1 as range 41
            // closed e.2#0 as range 43
            // closed e.#0 as range 45
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: t.SrcPos#1: 14
            //DEBUG: s.LineNumber#1: 33
            //DEBUG: e.Block#1: 41
            //DEBUG: e.2#0: 43
            //DEBUG: e.#0: 45

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # NativeBody/13 AsIs: t.SrcPos#1/14 AsIs: e.Block#1/41 AsIs: )/12 HalfReuse: </24 HalfReuse: & EL-AddErrorAt/32 } Tile{ AsIs: t.ErrorList#1/5 } s.LineNumber#1/33/47 e.2#0/43/48 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/0 HalfReuse: # TkError/4 } Tile{ AsIs: s.LineNumber#1/33 AsIs: e.2#0/43 AsIs: )/25 } Tile{ AsIs: e.#0/45 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[47], context[33]);
            refalrts::copy_evar(vm, context[48], context[49], context[43], context[44]);
            refalrts::update_ident(context[13], identifiers[ident_NativeBody]);
            refalrts::reinit_open_call(context[24]);
            refalrts::reinit_name(context[32], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_ident(context[4], identifiers[ident_TkError]);
            refalrts::link_brackets( context[0], context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[24] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_evar( res, context[33], context[25] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[48], context[49] );
            res = refalrts::splice_elem( res, context[47] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[11], context[32] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/41 )/12 (/24 # TkUnexpected/32 s.LineNumber#1/33 e.2#0/43 )/25 e.#0/45 >/1
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            context[44] = context[38];
            context[45] = context[39];
            context[46] = context[40];
            if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[32] ) )
              continue;
            // closed e.Block#1 as range 41
            // closed e.2#0 as range 43
            // closed e.#0 as range 45
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: t.SrcPos#1: 14
            //DEBUG: s.LineNumber#1: 33
            //DEBUG: e.Block#1: 41
            //DEBUG: e.2#0: 43
            //DEBUG: e.#0: 45

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # NativeBody/13 AsIs: t.SrcPos#1/14 AsIs: e.Block#1/41 AsIs: )/12 HalfReuse: </24 HalfReuse: & EL-AddErrorAt/32 } Tile{ AsIs: t.ErrorList#1/5 } s.LineNumber#1/33/47"Un"/48 Tile{ HalfReuse: 'k'/0 HalfReuse: 'n'/4 }"own characters \""/50 e.2#0/43/52 '\"'/54 Tile{ AsIs: >/1 } (/55 # TkUnexpected/56 Tile{ AsIs: s.LineNumber#1/33 AsIs: e.2#0/43 AsIs: )/25 } Tile{ AsIs: e.#0/45 } Tile{ ]] }
            refalrts::copy_stvar(vm, context[47], context[33]);
            refalrts::alloc_chars(vm, context[48], context[49], "Un", 2);
            refalrts::alloc_chars(vm, context[50], context[51], "own characters \"", 16);
            refalrts::copy_evar(vm, context[52], context[53], context[43], context[44]);
            refalrts::alloc_char(vm, context[54], '\"');
            refalrts::alloc_open_bracket(vm, context[55]);
            refalrts::alloc_ident(vm, context[56], identifiers[ident_TkUnexpected]);
            refalrts::update_ident(context[13], identifiers[ident_NativeBody]);
            refalrts::reinit_open_call(context[24]);
            refalrts::reinit_name(context[32], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[0], 'k');
            refalrts::reinit_char(context[4], 'n');
            refalrts::link_brackets( context[55], context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[24] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_evar( res, context[33], context[25] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[50], context[54] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[47], context[49] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_evar( res, context[11], context[32] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/41 )/12 (/24 s.Unexpected#1/32 s.LineNumber#1/33 e.2#0/43 )/25 e.#0/45 >/1
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[37];
          context[44] = context[38];
          context[45] = context[39];
          context[46] = context[40];
          // closed e.Block#1 as range 41
          // closed e.2#0 as range 43
          // closed e.#0 as range 45
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: t.SrcPos#1: 14
          //DEBUG: s.Unexpected#1: 32
          //DEBUG: s.LineNumber#1: 33
          //DEBUG: e.Block#1: 41
          //DEBUG: e.2#0: 43
          //DEBUG: e.#0: 45

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/47 # NativeBody/48 Tile{ AsIs: t.SrcPos#1/14 } Tile{ AsIs: e.Block#1/41 } )/49 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #33/11 HalfReuse: 'U'/13 }"nexpected "/50 </52 & SR-StrFromToken/53 s.Unexpected#1/32/54 e.2#0/43/55 Tile{ AsIs: >/1 }", expected }"/57 Tile{ HalfReuse: >/12 AsIs: (/24 AsIs: s.Unexpected#1/32 AsIs: s.LineNumber#1/33 AsIs: e.2#0/43 AsIs: )/25 } Tile{ AsIs: e.#0/45 } Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[47]);
          refalrts::alloc_ident(vm, context[48], identifiers[ident_NativeBody]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_chars(vm, context[50], context[51], "nexpected ", 10);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_SRm_StrFromToken]);
          refalrts::copy_stvar(vm, context[54], context[32]);
          refalrts::copy_evar(vm, context[55], context[56], context[43], context[44]);
          refalrts::alloc_chars(vm, context[57], context[58], ", expected }", 12);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[11], context[33] );
          refalrts::reinit_char(context[13], 'U');
          refalrts::reinit_close_call(context[12]);
          refalrts::link_brackets( context[24], context[25] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[52] );
          refalrts::link_brackets( context[47], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[45], context[46] );
          res = refalrts::splice_evar( res, context[12], context[25] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[50], context[54] );
          res = refalrts::splice_evar( res, context[0], context[13] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[14], context[15] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/26 )/12 t.#0/24 e.#0/28 >/1
        context[26] = context[20];
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        // closed e.Block#1 as range 26
        // closed e.#0 as range 28
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: t.SrcPos#1: 14
        //DEBUG: t.#0: 24
        //DEBUG: e.Block#1: 26
        //DEBUG: e.#0: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # NativeBody/13 AsIs: t.SrcPos#1/14 AsIs: e.Block#1/26 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: t.#0/24 } '}'/30 Tile{ AsIs: >/1 } t.#0/24/31 Tile{ AsIs: e.#0/28 } Tile{ ]] }
        refalrts::alloc_char(vm, context[30], '}');
        refalrts::copy_evar(vm, context[31], context[32], context[24], context[25]);
        refalrts::update_ident(context[13], identifiers[ident_NativeBody]);
        refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkNativeBlock/13 t.SrcPos#1/14 e.Block#1/20 )/12 e.Tokens#1/22 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      // closed e.Block#1 as range 20
      // closed e.Tokens#1 as range 22
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: t.SrcPos#1: 14
      //DEBUG: e.Block#1: 20
      //DEBUG: e.Tokens#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # NativeBody/13 AsIs: t.SrcPos#1/14 AsIs: e.Block#1/20 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Expect*2/4 } # TkCloseBlock/24 (/25 '}'/26 )/27 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tokens#1/22 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[24], identifiers[ident_TkCloseBlock]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_char(vm, context[26], '}');
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::update_ident(context[13], identifiers[ident_NativeBody]);
      refalrts::update_name(context[4], functions[efunc_gen_Expect_D2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[27] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseBlock/4 t.new#8/5 (/11 s.new#10/13 s.new#11/14 )/12 e.new#9/16 >/1
    context[16] = context[7];
    context[17] = context[8];
    if( ! refalrts::svar_term( context[14], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    // closed e.new#9 as range 16
    do {
      // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkCloseBlock/13 s.LnNumber#1/14 )/12 e.#0/18 >/1
      context[18] = context[16];
      context[19] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[13] ) )
        continue;
      // closed e.#0 as range 18
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNumber#1: 14
      //DEBUG: e.#0: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} s.LnNumber#1/14 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 Reuse: # Sentences/13 } Tile{ HalfReuse: )/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.#0/18 } Tile{ ]] }
      refalrts::update_ident(context[13], identifiers[ident_Sentences]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::link_brackets( context[11], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[4], context[6] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseBlock/4 t.ErrorList#1/5 (/11 # TkEOF/13 s.LnNum#1/14 )/12 e.#0/18 >/1
    context[18] = context[16];
    context[19] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[13] ) )
      continue;
    // closed e.#0 as range 18
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LnNum#1: 14
    //DEBUG: e.#0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 # Sentences/21 )/22 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 } s.LnNum#1/14/23"Unexpected EOF, expected \"}\""/24 Tile{ AsIs: >/1 } Tile{ AsIs: (/11 AsIs: # TkEOF/13 AsIs: s.LnNum#1/14 AsIs: )/12 } Tile{ AsIs: e.#0/18 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Sentences]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::copy_stvar(vm, context[23], context[14]);
    refalrts::alloc_chars(vm, context[24], context[25], "Unexpected EOF, expected \"}\"", 28);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[20], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseBlock/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & DoParseBlock$3=1@1/8 Tile{ AsIs: </0 Reuse: & ParseSentence/4 AsIs: t.ErrorList#1/5 AsIs: e.Tokens#1/2 AsIs: >/1 } >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoParseBlock_S3A1Z1]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_ParseSentence]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseBlock("ParseBlock", COOKIE1_, COOKIE2_, func_ParseBlock);


static refalrts::FnResult func_Expect(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & Expect/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Expect/4 s.new#1/5 (/8 e.new#2/6 )/9 t.new#3/10 t.new#4/12 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & Expect/4 s.new#6/5 (/8 e.new#12/14 )/9 t.new#7/10 (/12 s.new#8/20 t.new#9/21 e.new#10/18 )/13 e.new#11/16 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new#12 as range 14
    // closed e.new#11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new#10 as range 18
    do {
      // </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/23 )/9 t.ErrorList#1/10 (/12 s.Expected#1/20 t.SrcPos#1/21 )/13 e.Tokens#1/25 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[17];
      if( ! refalrts::repeated_stvar_term( vm, context[20], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.ExpectedText#1 as range 23
      // closed e.Tokens#1 as range 25
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: t.SrcPos#1: 21
      //DEBUG: s.Expected#1: 5
      //DEBUG: e.ExpectedText#1: 23
      //DEBUG: e.Tokens#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/23 )/9 {REMOVED TILE} (/12 s.Expected#1/20 t.SrcPos#1/21 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#1/10 } Tile{ AsIs: e.Tokens#1/25 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Expect/4 s.new#13/5 (/8 e.new#19/23 )/9 t.new#14/10 (/12 s.new#15/20 s.new#16/21 e.new#17/25 )/13 e.new#18/27 >/1
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[16];
    context[28] = context[17];
    if( ! refalrts::svar_term( context[21], context[21] ) )
      continue;
    // closed e.new#19 as range 23
    // closed e.new#17 as range 25
    // closed e.new#18 as range 27
    do {
      // </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/29 )/9 t.ErrorList#1/10 (/12 # TkError/20 s.LineNumber#1/21 e.1#0/31 )/13 e.Tokens#1/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.ExpectedText#1 as range 29
      // closed e.1#0 as range 31
      // closed e.Tokens#1 as range 33
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: s.Expected#1: 5
      //DEBUG: s.LineNumber#1: 21
      //DEBUG: e.ExpectedText#1: 29
      //DEBUG: e.1#0: 31
      //DEBUG: e.Tokens#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Expected#1/5 (/8 e.ExpectedText#1/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/10 } Tile{ HalfReuse: s.LineNumber1 #21/9 } e.1#0/31/35 Tile{ AsIs: >/1 } Tile{ AsIs: (/12 AsIs: # TkError/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/31 AsIs: )/13 } Tile{ AsIs: e.Tokens#1/33 } Tile{ ]] }
      refalrts::copy_evar(vm, context[35], context[36], context[31], context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/29 )/9 t.ErrorList#1/10 (/12 # TkUnexpected/20 s.LineNumber#1/21 e.1#0/31 )/13 e.Tokens#1/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[20] ) )
        continue;
      // closed e.ExpectedText#1 as range 29
      // closed e.1#0 as range 31
      // closed e.Tokens#1 as range 33
      //DEBUG: t.ErrorList#1: 10
      //DEBUG: s.Expected#1: 5
      //DEBUG: s.LineNumber#1: 21
      //DEBUG: e.ExpectedText#1: 29
      //DEBUG: e.1#0: 31
      //DEBUG: e.Tokens#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Expected#1/5 {REMOVED TILE} e.ExpectedText#1/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/10 } s.LineNumber#1/21/35 Tile{ HalfReuse: 'U'/8 } Tile{ HalfReuse: 'n'/9 }"known characters \""/36 e.1#0/31/38 '\"'/40 Tile{ AsIs: >/1 } Tile{ AsIs: (/12 AsIs: # TkUnexpected/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/31 AsIs: )/13 } Tile{ AsIs: e.Tokens#1/33 } Tile{ ]] }
      refalrts::copy_stvar(vm, context[35], context[21]);
      refalrts::alloc_chars(vm, context[36], context[37], "known characters \"", 18);
      refalrts::copy_evar(vm, context[38], context[39], context[31], context[32]);
      refalrts::alloc_char(vm, context[40], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_char(context[9], 'n');
      refalrts::link_brackets( context[12], context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[36], context[40] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/29 )/9 t.ErrorList#1/10 (/12 s.Unexpected#1/20 s.LineNumber#1/21 e.1#0/31 )/13 e.Tokens#1/33 >/1
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    context[32] = context[26];
    context[33] = context[27];
    context[34] = context[28];
    // closed e.ExpectedText#1 as range 29
    // closed e.1#0 as range 31
    // closed e.Tokens#1 as range 33
    //DEBUG: t.ErrorList#1: 10
    //DEBUG: s.Expected#1: 5
    //DEBUG: s.Unexpected#1: 20
    //DEBUG: s.LineNumber#1: 21
    //DEBUG: e.ExpectedText#1: 29
    //DEBUG: e.1#0: 31
    //DEBUG: e.Tokens#1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Expected#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#1/10 } s.LineNumber#1/21/35"Unexpected "/36 </38 & SR-StrFromToken/39 s.Unexpected#1/20/40 e.1#0/31/41 Tile{ AsIs: >/1 }", expected"/43 Tile{ HalfReuse: ' '/8 AsIs: e.ExpectedText#1/29 HalfReuse: >/9 } Tile{ AsIs: (/12 AsIs: s.Unexpected#1/20 AsIs: s.LineNumber#1/21 AsIs: e.1#0/31 AsIs: )/13 } Tile{ AsIs: e.Tokens#1/33 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[35], context[21]);
    refalrts::alloc_chars(vm, context[36], context[37], "Unexpected ", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_SRm_StrFromToken]);
    refalrts::copy_stvar(vm, context[40], context[20]);
    refalrts::copy_evar(vm, context[41], context[42], context[31], context[32]);
    refalrts::alloc_chars(vm, context[43], context[44], ", expected", 10);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_call(context[9]);
    refalrts::link_brackets( context[12], context[13] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[35], context[40] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Expect/4 s.Expected#1/5 (/8 e.ExpectedText#1/6 )/9 t.ErrorList#1/10 t.Unexpected#1/12 e.Tokens#1/2 >/1
  // closed e.ExpectedText#1 as range 6
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 10
  //DEBUG: t.Unexpected#1: 12
  //DEBUG: s.Expected#1: 5
  //DEBUG: e.ExpectedText#1: 6
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Expected#1/5 (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#1/10 AsIs: t.Unexpected#1/12 } Tile{ AsIs: e.ExpectedText#1/6 } Tile{ AsIs: >/1 } t.Unexpected#1/12/14 Tile{ AsIs: e.Tokens#1/2 } Tile{ ]] }
  refalrts::copy_evar(vm, context[14], context[15], context[12], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Expect("Expect", COOKIE1_, COOKIE2_, func_Expect);


static refalrts::FnResult func_gen_DoParseBlock_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoParseBlock$3=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseBlock$3=1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 t.new#3/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & DoParseBlock$3=1/4 (/7 e.new#9/15 )/8 (/11 e.new#10/17 )/12 t.new#5/13 (/23 s.new#6/25 s.new#7/26 )/24 e.new#8/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#9 as range 15
    // closed e.new#10 as range 17
    // closed e.new#8 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    do {
      // </0 & DoParseBlock$3=1/4 (/7 e.Sentences#1/27 )/8 (/11 e.Sentence#2/29 )/12 t.ErrorList#2/13 (/23 # TkCloseBlock/25 s.LnNumber#1/26 )/24 e.#0/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[25] ) )
        continue;
      // closed e.Sentences#1 as range 27
      // closed e.Sentence#2 as range 29
      // closed e.#0 as range 31
      //DEBUG: t.ErrorList#2: 13
      //DEBUG: s.LnNumber#1: 26
      //DEBUG: e.Sentences#1: 27
      //DEBUG: e.Sentence#2: 29
      //DEBUG: e.#0: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoParseBlock$3=1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumber#1/26 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/23 Reuse: # Sentences/25 } Tile{ AsIs: e.Sentences#1/27 } Tile{ AsIs: (/11 AsIs: e.Sentence#2/29 AsIs: )/12 } Tile{ AsIs: )/24 } Tile{ AsIs: t.ErrorList#2/13 } Tile{ AsIs: e.#0/31 } Tile{ ]] }
      refalrts::update_ident(context[25], identifiers[ident_Sentences]);
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseBlock$3=1/4 (/7 e.Sentences#1/27 )/8 (/11 e.Sentence#2/29 )/12 t.ErrorList#2/13 (/23 # TkEOF/25 s.LnNum#1/26 )/24 e.#0/31 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[25] ) )
      continue;
    // closed e.Sentences#1 as range 27
    // closed e.Sentence#2 as range 29
    // closed e.#0 as range 31
    //DEBUG: t.ErrorList#2: 13
    //DEBUG: s.LnNum#1: 26
    //DEBUG: e.Sentences#1: 27
    //DEBUG: e.Sentence#2: 29
    //DEBUG: e.#0: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Sentences/4 } Tile{ AsIs: e.Sentences#1/27 } Tile{ AsIs: (/11 AsIs: e.Sentence#2/29 AsIs: )/12 } Tile{ AsIs: )/8 } </33 & EL-AddErrorAt/34 Tile{ AsIs: t.ErrorList#2/13 } s.LnNum#1/26/35 Tile{ HalfReuse: 'U'/7 }"nexpected EOF, expected \"}\""/36 Tile{ AsIs: >/1 } Tile{ AsIs: (/23 AsIs: # TkEOF/25 AsIs: s.LnNum#1/26 AsIs: )/24 } Tile{ AsIs: e.#0/31 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_ELm_AddErrorAt]);
    refalrts::copy_stvar(vm, context[35], context[26]);
    refalrts::alloc_chars(vm, context[36], context[37], "nexpected EOF, expected \"}\"", 27);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Sentences]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::link_brackets( context[23], context[24] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseBlock$3=1/4 (/7 e.Sentences#1/5 )/8 (/11 e.Sentence#2/9 )/12 t.ErrorList#2/13 e.Tail#2/2 >/1
  // closed e.Sentences#1 as range 5
  // closed e.Sentence#2 as range 9
  // closed e.Tail#2 as range 2
  //DEBUG: t.ErrorList#2: 13
  //DEBUG: e.Sentences#1: 5
  //DEBUG: e.Sentence#2: 9
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseBlock$3=1/4 AsIs: (/7 AsIs: e.Sentences#1/5 HalfReuse: (/8 } Tile{ AsIs: e.Sentence#2/9 } Tile{ HalfReuse: )/11 } )/15 </16 Tile{ HalfReuse: & ParseSentence/12 AsIs: t.ErrorList#2/13 AsIs: e.Tail#2/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_name(context[12], functions[efunc_ParseSentence]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[7], context[15] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseBlock_S3A1("DoParseBlock$3=1", COOKIE1_, COOKIE2_, func_gen_DoParseBlock_S3A1);


static refalrts::FnResult func_DoParseBlock(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoParseBlock/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseBlock/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoParseBlock/4 t.new#4/5 (/9 e.new#8/11 )/10 (/17 s.new#5/19 s.new#6/20 )/18 e.new#7/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new#8 as range 11
    // closed e.new#7 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    do {
      // </0 & DoParseBlock/4 t.ErrorList#1/5 (/9 e.Sentences#1/21 )/10 (/17 # TkCloseBlock/19 s.LnNumber#1/20 )/18 e.Tail#1/23 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[19] ) )
        continue;
      // closed e.Sentences#1 as range 21
      // closed e.Tail#1 as range 23
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNumber#1: 20
      //DEBUG: e.Sentences#1: 21
      //DEBUG: e.Tail#1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoParseBlock/4 {REMOVED TILE} {REMOVED TILE} (/17 # TkCloseBlock/19 s.LnNumber#1/20 )/18 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # Sentences/9 AsIs: e.Sentences#1/21 AsIs: )/10 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/23 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[9], identifiers[ident_Sentences]);
      refalrts::link_brackets( context[0], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseBlock/4 t.ErrorList#1/5 (/9 e.Sentences#1/21 )/10 (/17 # TkEOF/19 s.LnNum#1/20 )/18 e.Tail#1/23 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[19] ) )
      continue;
    // closed e.Sentences#1 as range 21
    // closed e.Tail#1 as range 23
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LnNum#1: 20
    //DEBUG: e.Sentences#1: 21
    //DEBUG: e.Tail#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/25 # Sentences/26 Tile{ AsIs: e.Sentences#1/21 } )/27 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LnNum1 #20/9 } 'U'/28 Tile{ HalfReuse: 'n'/1 }"expected EOF, expected \"}\""/29 Tile{ HalfReuse: >/10 AsIs: (/17 AsIs: # TkEOF/19 AsIs: s.LnNum#1/20 AsIs: )/18 } Tile{ AsIs: e.Tail#1/23 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_ident(vm, context[26], identifiers[ident_Sentences]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_char(vm, context[28], 'U');
    refalrts::alloc_chars(vm, context[29], context[30], "expected EOF, expected \"}\"", 26);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[20] );
    refalrts::reinit_char(context[1], 'n');
    refalrts::reinit_close_call(context[10]);
    refalrts::link_brackets( context[17], context[18] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[10], context[18] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseBlock/4 t.ErrorList#1/5 (/9 e.Sentences#1/7 )/10 e.Tokens#1/2 >/1
  // closed e.Sentences#1 as range 7
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Sentences#1: 7
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseBlock$3=1/4 } Tile{ AsIs: (/9 AsIs: e.Sentences#1/7 AsIs: )/10 } </11 & ParseSentence/12 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tokens#1/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ParseSentence]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParseBlock_S3A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoParseBlock("DoParseBlock", COOKIE1_, COOKIE2_, func_DoParseBlock);


static refalrts::FnResult func_gen_ParseSentence_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & ParseSentence:1$1=1/4 (/7 e.StartPattern#2/5 )/8 (/11 e.Result#2/9 )/12 (/15 e.Blocks#2/13 )/16 (/19 e.Tokens#2/17 )/20 t.ErrorList#4/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.StartPattern#2 as range 5
  // closed e.Result#2 as range 9
  // closed e.Blocks#2 as range 13
  // closed e.Tokens#2 as range 17
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.StartPattern#2: 5
  //DEBUG: e.Result#2: 9
  //DEBUG: e.Blocks#2: 13
  //DEBUG: e.Tokens#2: 17
  //DEBUG: t.ErrorList#4: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} )/20 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.StartPattern#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.Result#2/9 AsIs: )/12 AsIs: (/15 AsIs: e.Blocks#2/13 AsIs: )/16 HalfReuse: )/19 } Tile{ AsIs: t.ErrorList#4/21 } Tile{ AsIs: e.Tokens#2/17 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::link_brackets( context[4], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[4], context[19] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentence_B1S1A1("ParseSentence:1$1=1", COOKIE1_, COOKIE2_, func_gen_ParseSentence_B1S1A1);


static refalrts::FnResult func_gen_ParseSentence_B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & ParseSentence:1$2=1/4 (/7 e.StartPattern#2/5 )/8 s.Type#2/9 (/12 e.Result#2/10 )/13 (/16 e.Blocks#2/14 )/17 (/20 (/24 e.InnerPattern#4/22 )/25 e.AssignmentsANDCond#4/18 (/32 e.EndResult#4/30 )/33 (/28 e.EndBlocks#4/26 )/29 )/21 t.ErrorList#4/34 e.Tokens#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StartPattern#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[18], context[19] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_right( context[26], context[27], context[18], context[19] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_right( context[30], context[31], context[18], context[19] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.Result#2 as range 10
  // closed e.Blocks#2 as range 14
  // closed e.InnerPattern#4 as range 22
  // closed e.AssignmentsANDCond#4 as range 18
  // closed e.EndResult#4 as range 30
  // closed e.EndBlocks#4 as range 26
  context[35] = refalrts::tvar_left( context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#4 as range 2
  //DEBUG: e.StartPattern#2: 5
  //DEBUG: s.Type#2: 9
  //DEBUG: e.Result#2: 10
  //DEBUG: e.Blocks#2: 14
  //DEBUG: e.InnerPattern#4: 22
  //DEBUG: e.AssignmentsANDCond#4: 18
  //DEBUG: e.EndResult#4: 30
  //DEBUG: e.EndBlocks#4: 26
  //DEBUG: t.ErrorList#4: 34
  //DEBUG: e.Tokens#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.StartPattern#2/5 } Tile{ HalfReuse: )/24 } Tile{ HalfReuse: (/8 AsIs: s.Type#2/9 AsIs: (/12 AsIs: e.Result#2/10 AsIs: )/13 AsIs: (/16 AsIs: e.Blocks#2/14 AsIs: )/17 AsIs: (/20 } Tile{ AsIs: e.InnerPattern#4/22 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/25 AsIs: e.AssignmentsANDCond#4/18 AsIs: (/32 AsIs: e.EndResult#4/30 AsIs: )/33 AsIs: (/28 AsIs: e.EndBlocks#4/26 AsIs: )/29 AsIs: )/21 AsIs: t.ErrorList#4/34 } Tile{ AsIs: e.Tokens#4/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[21] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[8], context[25] );
  refalrts::link_brackets( context[20], context[1] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[4], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[25], context[35] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[8], context[20] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentence_B1S2A1("ParseSentence:1$2=1", COOKIE1_, COOKIE2_, func_gen_ParseSentence_B1S2A1);


static refalrts::FnResult func_gen_ParseSentence_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & ParseSentence=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSentence=1/4 (/7 (/11 e.new#1/9 )/12 s.new#2/21 (/19 e.new#3/17 )/20 (/15 e.new#4/13 )/16 )/8 t.new#5/22 t.new#6/24 e.new#7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 9
  // closed e.new#3 as range 17
  // closed e.new#4 as range 13
  if( ! refalrts::svar_left( context[21], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = refalrts::tvar_left( context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  context[25] = refalrts::tvar_left( context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 2
  do {
    // </0 & ParseSentence=1/4 (/7 (/11 e.new#14/26 )/12 s.new#13/21 (/19 e.new#15/28 )/20 (/15 e.new#16/30 )/16 )/8 t.new#8/22 (/24 s.new#9/36 t.new#10/37 e.new#11/34 )/25 e.new#12/32 >/1
    context[26] = context[9];
    context[27] = context[10];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[2];
    context[33] = context[3];
    context[34] = 0;
    context[35] = 0;
    if( ! refalrts::brackets_term( context[34], context[35], context[24] ) )
      continue;
    // closed e.new#14 as range 26
    // closed e.new#15 as range 28
    // closed e.new#16 as range 30
    // closed e.new#12 as range 32
    if( ! refalrts::svar_left( context[36], context[34], context[35] ) )
      continue;
    context[38] = refalrts::tvar_left( context[37], context[34], context[35] );
    if( ! context[38] )
      continue;
    // closed e.new#11 as range 34
    do {
      // </0 & ParseSentence=1/4 (/7 (/11 e.new#22/39 )/12 s.new#21/21 (/19 e.new#23/41 )/20 (/15 e.new#24/43 )/16 )/8 t.new#17/22 (/24 s.new#18/36 t.new#19/37 )/25 e.new#20/45 >/1
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = context[33];
      if( ! refalrts::empty_seq( context[34], context[35] ) )
        continue;
      // closed e.new#22 as range 39
      // closed e.new#23 as range 41
      // closed e.new#24 as range 43
      // closed e.new#20 as range 45
      do {
        // </0 & ParseSentence=1/4 (/7 (/11 e.new#29/47 )/12 s.new#28/21 (/19 e.new#30/49 )/20 (/15 e.new#31/51 )/16 )/8 t.new#25/22 (/24 # TkSemicolon/36 t.new#26/37 )/25 e.new#27/53 >/1
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[36] ) )
          continue;
        // closed e.new#29 as range 47
        // closed e.new#30 as range 49
        // closed e.new#31 as range 51
        // closed e.new#27 as range 53
        do {
          // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/55 )/12 # Assign/21 (/19 e.Result#2/57 )/20 (/15 e.Blocks#2/59 )/16 )/8 t.ErrorList#2/22 (/24 # TkSemicolon/36 t.0#0/37 )/25 e.Tokens#2/61 >/1
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          if( ! refalrts::ident_term( identifiers[ident_Assign], context[21] ) )
            continue;
          // closed e.StartPattern#2 as range 55
          // closed e.Result#2 as range 57
          // closed e.Blocks#2 as range 59
          // closed e.Tokens#2 as range 61
          //DEBUG: t.ErrorList#2: 22
          //DEBUG: t.0#0: 37
          //DEBUG: e.StartPattern#2: 55
          //DEBUG: e.Result#2: 57
          //DEBUG: e.Blocks#2: 59
          //DEBUG: e.Tokens#2: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & ParseSentence=1/4 {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE} (/24 # TkSemicolon/36 t.0#0/37 )/25 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 } Tile{ AsIs: e.StartPattern#2/55 } Tile{ HalfReuse: )/21 AsIs: (/19 AsIs: e.Result#2/57 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/59 AsIs: )/16 AsIs: )/8 AsIs: t.ErrorList#2/22 } Tile{ AsIs: e.Tokens#2/61 } Tile{ ]] }
          refalrts::reinit_close_bracket(context[21]);
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[19], context[20] );
          refalrts::link_brackets( context[11], context[21] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[21], context[23] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[7], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/55 )/12 # Condition/21 (/19 e.Result#2/57 )/20 (/15 e.Blocks#2/59 )/16 )/8 t.ErrorList#2/22 (/24 # TkSemicolon/36 t.0#0/37 )/25 e.Tokens#2/61 >/1
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          if( ! refalrts::ident_term( identifiers[ident_Condition], context[21] ) )
            continue;
          // closed e.StartPattern#2 as range 55
          // closed e.Result#2 as range 57
          // closed e.Blocks#2 as range 59
          // closed e.Tokens#2 as range 61
          //DEBUG: t.ErrorList#2: 22
          //DEBUG: t.0#0: 37
          //DEBUG: e.StartPattern#2: 55
          //DEBUG: e.Result#2: 57
          //DEBUG: e.Blocks#2: 59
          //DEBUG: e.Tokens#2: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentence:1$1=1/4 AsIs: (/7 } Tile{ AsIs: e.StartPattern#2/55 } Tile{ HalfReuse: )/21 AsIs: (/19 AsIs: e.Result#2/57 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/59 AsIs: )/16 HalfReuse: (/8 } Tile{ AsIs: e.Tokens#2/61 } Tile{ AsIs: )/12 } Tile{ HalfReuse: </24 HalfReuse: & EL-AddErrorAt/36 } Tile{ AsIs: t.ErrorList#2/22 } Tile{ AsIs: t.0#0/37 HalfReuse: 'B'/25 } Tile{ HalfReuse: 'e'/11 }"fore the last result expr must be \"=\""/63 >/65 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_chars(vm, context[63], context[64], "fore the last result expr must be \"=\"", 37);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::update_name(context[4], functions[efunc_gen_ParseSentence_B1S1A1]);
          refalrts::reinit_close_bracket(context[21]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[36], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_char(context[25], 'B');
          refalrts::reinit_char(context[11], 'e');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[24] );
          refalrts::link_brackets( context[8], context[12] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[19], context[20] );
          refalrts::link_brackets( context[7], context[21] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[63], context[65] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_evar( res, context[37], context[25] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          res = refalrts::splice_evar( res, context[24], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[21], context[8] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/55 )/12 s.Type#2/21 (/19 e.Result#2/57 )/20 (/15 e.Blocks#2/59 )/16 )/8 t.ErrorList#2/22 (/24 # TkSemicolon/36 t.0#0/37 )/25 e.Tokens#2/61 >/1
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        context[61] = context[53];
        context[62] = context[54];
        // closed e.StartPattern#2 as range 55
        // closed e.Result#2 as range 57
        // closed e.Blocks#2 as range 59
        // closed e.Tokens#2 as range 61
        //DEBUG: t.ErrorList#2: 22
        //DEBUG: t.0#0: 37
        //DEBUG: s.Type#2: 21
        //DEBUG: e.StartPattern#2: 55
        //DEBUG: e.Result#2: 57
        //DEBUG: e.Blocks#2: 59
        //DEBUG: e.Tokens#2: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ParseSentence:1$1=1/7 AsIs: (/11 AsIs: e.StartPattern#2/55 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/57 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/59 AsIs: )/16 HalfReuse: (/8 } Tile{ AsIs: e.Tokens#2/61 } Tile{ HalfReuse: )/36 } Tile{ AsIs: </0 } Tile{ HalfReuse: & ParseSentence:1$1=1\1*2/24 } Tile{ AsIs: t.ErrorList#2/22 } Tile{ AsIs: t.0#0/37 HalfReuse: s.Type2 #21/25 } >/63 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_ParseSentence_B1S1A1]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::reinit_name(context[24], functions[efunc_gen_ParseSentence_B1S1A1L1D2]);
        refalrts::reinit_svar( context[25], context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[36] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[63] );
        res = refalrts::splice_evar( res, context[37], context[25] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[19], context[8] );
        res = refalrts::splice_evar( res, context[4], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/47 )/12 s.Type#2/21 (/19 e.Result#2/49 )/20 (/15 e.Blocks#2/51 )/16 )/8 t.ErrorList#2/22 (/24 # TkColon/36 t.0#0/37 )/25 e.Tokens#2/53 >/1
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        if( ! refalrts::ident_term( identifiers[ident_TkColon], context[36] ) )
          continue;
        // closed e.StartPattern#2 as range 47
        // closed e.Result#2 as range 49
        // closed e.Blocks#2 as range 51
        // closed e.Tokens#2 as range 53
        //DEBUG: t.ErrorList#2: 22
        //DEBUG: t.0#0: 37
        //DEBUG: s.Type#2: 21
        //DEBUG: e.StartPattern#2: 47
        //DEBUG: e.Result#2: 49
        //DEBUG: e.Blocks#2: 51
        //DEBUG: e.Tokens#2: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} (/24 {REMOVED TILE} t.0#0/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ParseSentence:1$2=1/7 AsIs: (/11 AsIs: e.StartPattern#2/47 AsIs: )/12 AsIs: s.Type#2/21 AsIs: (/19 AsIs: e.Result#2/49 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/51 AsIs: )/16 HalfReuse: </8 } Tile{ HalfReuse: & ParseSentence/36 } Tile{ AsIs: t.ErrorList#2/22 } Tile{ AsIs: e.Tokens#2/53 } Tile{ HalfReuse: >/25 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_ParseSentence_B1S2A1]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[36], functions[efunc_ParseSentence]);
        refalrts::reinit_close_call(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[4], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/47 )/12 s.Type#2/21 (/19 e.Result#2/49 )/20 (/15 e.Blocks#2/51 )/16 )/8 t.ErrorList#2/22 (/24 # TkCloseBlock/36 t.0#0/37 )/25 e.Tokens#2/53 >/1
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[36] ) )
          continue;
        // closed e.StartPattern#2 as range 47
        // closed e.Result#2 as range 49
        // closed e.Blocks#2 as range 51
        // closed e.Tokens#2 as range 53
        //DEBUG: t.ErrorList#2: 22
        //DEBUG: t.0#0: 37
        //DEBUG: s.Type#2: 21
        //DEBUG: e.StartPattern#2: 47
        //DEBUG: e.Result#2: 49
        //DEBUG: e.Blocks#2: 51
        //DEBUG: e.Tokens#2: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/47 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/49 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/51 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#2/22 } t.0#0/37/55"Missed semicolon"/57 Tile{ AsIs: >/1 } Tile{ AsIs: (/24 AsIs: # TkCloseBlock/36 AsIs: t.0#0/37 AsIs: )/25 } Tile{ AsIs: e.Tokens#2/53 } Tile{ ]] }
        refalrts::copy_evar(vm, context[55], context[56], context[37], context[38]);
        refalrts::alloc_chars(vm, context[57], context[58], "Missed semicolon", 16);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::link_brackets( context[24], context[25] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[55], context[58] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[19], context[8] );
        res = refalrts::splice_evar( res, context[7], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSentence=1/4 (/7 (/11 e.new#29/47 )/12 s.new#28/21 (/19 e.new#30/49 )/20 (/15 e.new#31/51 )/16 )/8 t.new#25/22 (/24 # TkEOF/36 t.new#26/37 )/25 e.new#27/53 >/1
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[36] ) )
        continue;
      // closed e.new#29 as range 47
      // closed e.new#30 as range 49
      // closed e.new#31 as range 51
      // closed e.new#27 as range 53
      do {
        // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/55 )/12 s.Type#2/21 (/19 e.Result#2/57 )/20 (/15 e.Blocks#2/59 )/16 )/8 t.ErrorList#2/22 (/24 # TkEOF/36 t.0#0/37 )/25 >/1
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        if( ! refalrts::empty_seq( context[53], context[54] ) )
          continue;
        // closed e.StartPattern#2 as range 55
        // closed e.Result#2 as range 57
        // closed e.Blocks#2 as range 59
        //DEBUG: t.ErrorList#2: 22
        //DEBUG: t.0#0: 37
        //DEBUG: s.Type#2: 21
        //DEBUG: e.StartPattern#2: 55
        //DEBUG: e.Result#2: 57
        //DEBUG: e.Blocks#2: 59

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/55 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/57 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/59 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#2/22 } t.0#0/37/61"Unexpected EOF in function"/63 Tile{ AsIs: >/1 } Tile{ AsIs: (/24 AsIs: # TkEOF/36 AsIs: t.0#0/37 AsIs: )/25 } Tile{ ]] }
        refalrts::copy_evar(vm, context[61], context[62], context[37], context[38]);
        refalrts::alloc_chars(vm, context[63], context[64], "Unexpected EOF in function", 26);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::link_brackets( context[24], context[25] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[61], context[64] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[19], context[8] );
        res = refalrts::splice_evar( res, context[7], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/55 )/12 s.Type#2/21 (/19 e.Result#2/57 )/20 (/15 e.Blocks#2/59 )/16 )/8 t.ErrorList#2/22 (/24 # TkEOF/36 t.0#0/37 )/25 e.Tokens#2/61 >/1
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      context[60] = context[52];
      context[61] = context[53];
      context[62] = context[54];
      // closed e.StartPattern#2 as range 55
      // closed e.Result#2 as range 57
      // closed e.Blocks#2 as range 59
      // closed e.Tokens#2 as range 61
      //DEBUG: t.ErrorList#2: 22
      //DEBUG: t.0#0: 37
      //DEBUG: s.Type#2: 21
      //DEBUG: e.StartPattern#2: 55
      //DEBUG: e.Result#2: 57
      //DEBUG: e.Blocks#2: 59
      //DEBUG: e.Tokens#2: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} s.Type#2/21 {REMOVED TILE} )/8 {REMOVED TILE} (/24 # TkEOF/36 {REMOVED TILE} )/25 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & ParseSentence:1$4=1*1/7 AsIs: (/11 AsIs: e.StartPattern#2/55 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/57 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/59 AsIs: )/16 } Tile{ AsIs: t.ErrorList#2/22 } Tile{ AsIs: t.0#0/37 } Tile{ AsIs: e.Tokens#2/61 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_ParseSentence_B1S4A1D1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[16] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseSentence=1/4 (/7 (/11 e.new#23/39 )/12 s.new#22/21 (/19 e.new#24/41 )/20 (/15 e.new#25/43 )/16 )/8 t.new#17/22 (/24 s.new#18/36 s.new#19/37 e.new#20/45 )/25 e.new#21/47 >/1
    context[39] = context[26];
    context[40] = context[27];
    context[41] = context[28];
    context[42] = context[29];
    context[43] = context[30];
    context[44] = context[31];
    context[45] = context[34];
    context[46] = context[35];
    context[47] = context[32];
    context[48] = context[33];
    if( ! refalrts::svar_term( context[37], context[37] ) )
      continue;
    // closed e.new#23 as range 39
    // closed e.new#24 as range 41
    // closed e.new#25 as range 43
    // closed e.new#20 as range 45
    // closed e.new#21 as range 47
    do {
      // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/49 )/12 s.Type#2/21 (/19 e.Result#2/51 )/20 (/15 e.Blocks#2/53 )/16 )/8 t.ErrorList#2/22 (/24 # TkError/36 s.LineNumber#1/37 e.1#0/55 )/25 e.Tokens#2/57 >/1
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[46];
      context[57] = context[47];
      context[58] = context[48];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[36] ) )
        continue;
      // closed e.StartPattern#2 as range 49
      // closed e.Result#2 as range 51
      // closed e.Blocks#2 as range 53
      // closed e.1#0 as range 55
      // closed e.Tokens#2 as range 57
      //DEBUG: t.ErrorList#2: 22
      //DEBUG: s.Type#2: 21
      //DEBUG: s.LineNumber#1: 37
      //DEBUG: e.StartPattern#2: 49
      //DEBUG: e.Result#2: 51
      //DEBUG: e.Blocks#2: 53
      //DEBUG: e.1#0: 55
      //DEBUG: e.Tokens#2: 57

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} (/24 # TkError/36 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/49 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/51 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/53 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#2/22 } Tile{ AsIs: s.LineNumber#1/37 AsIs: e.1#0/55 HalfReuse: >/25 } Tile{ AsIs: e.Tokens#2/57 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[25]);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[37], context[25] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[19], context[8] );
      res = refalrts::splice_evar( res, context[7], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/49 )/12 s.Type#2/21 (/19 e.Result#2/51 )/20 (/15 e.Blocks#2/53 )/16 )/8 t.ErrorList#2/22 (/24 # TkUnexpected/36 s.LineNumber#1/37 e.1#0/55 )/25 e.Tokens#2/57 >/1
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[46];
      context[57] = context[47];
      context[58] = context[48];
      if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[36] ) )
        continue;
      // closed e.StartPattern#2 as range 49
      // closed e.Result#2 as range 51
      // closed e.Blocks#2 as range 53
      // closed e.1#0 as range 55
      // closed e.Tokens#2 as range 57
      //DEBUG: t.ErrorList#2: 22
      //DEBUG: s.Type#2: 21
      //DEBUG: s.LineNumber#1: 37
      //DEBUG: e.StartPattern#2: 49
      //DEBUG: e.Result#2: 51
      //DEBUG: e.Blocks#2: 53
      //DEBUG: e.1#0: 55
      //DEBUG: e.Tokens#2: 57

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/49 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/51 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/53 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#2/22 HalfReuse: s.LineNumber1 #37/24 HalfReuse: 'U'/36 }"nkn"/59 Tile{ HalfReuse: 'o'/25 }"wn characters \""/61 Tile{ AsIs: e.1#0/55 } '\"'/63 Tile{ AsIs: >/1 } Tile{ AsIs: e.Tokens#2/57 } Tile{ ]] }
      refalrts::alloc_chars(vm, context[59], context[60], "nkn", 3);
      refalrts::alloc_chars(vm, context[61], context[62], "wn characters \"", 15);
      refalrts::alloc_char(vm, context[63], '\"');
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[24], context[37] );
      refalrts::reinit_char(context[36], 'U');
      refalrts::reinit_char(context[25], 'o');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_elem( res, context[63] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[22], context[36] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[19], context[8] );
      res = refalrts::splice_evar( res, context[7], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/49 )/12 s.Type#2/21 (/19 e.Result#2/51 )/20 (/15 e.Blocks#2/53 )/16 )/8 t.ErrorList#2/22 (/24 s.Unexpected#1/36 s.LineNumber#1/37 e.1#0/55 )/25 e.Tokens#2/57 >/1
    context[49] = context[39];
    context[50] = context[40];
    context[51] = context[41];
    context[52] = context[42];
    context[53] = context[43];
    context[54] = context[44];
    context[55] = context[45];
    context[56] = context[46];
    context[57] = context[47];
    context[58] = context[48];
    // closed e.StartPattern#2 as range 49
    // closed e.Result#2 as range 51
    // closed e.Blocks#2 as range 53
    // closed e.1#0 as range 55
    // closed e.Tokens#2 as range 57
    //DEBUG: t.ErrorList#2: 22
    //DEBUG: s.Type#2: 21
    //DEBUG: s.Unexpected#1: 36
    //DEBUG: s.LineNumber#1: 37
    //DEBUG: e.StartPattern#2: 49
    //DEBUG: e.Result#2: 51
    //DEBUG: e.Blocks#2: 53
    //DEBUG: e.1#0: 55
    //DEBUG: e.Tokens#2: 57

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/49 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/51 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/53 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList#2/22 HalfReuse: s.LineNumber1 #37/24 }"Unex"/59 Tile{ HalfReuse: 'p'/25 }"ected "/61 </63 & SR-StrFromToken/64 Tile{ AsIs: s.Unexpected#1/36 } Tile{ AsIs: e.1#0/55 } Tile{ AsIs: >/1 }", expected semicolon"/65 >/67 Tile{ AsIs: e.Tokens#2/57 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[59], context[60], "Unex", 4);
    refalrts::alloc_chars(vm, context[61], context[62], "ected ", 6);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[64], functions[efunc_SRm_StrFromToken]);
    refalrts::alloc_chars(vm, context[65], context[66], ", expected semicolon", 20);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[24], context[37] );
    refalrts::reinit_char(context[25], 'p');
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[63] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[65], context[67] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[61], context[64] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[19], context[8] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSentence=1/4 (/7 (/11 e.StartPattern#2/9 )/12 s.Type#2/21 (/19 e.Result#2/17 )/20 (/15 e.Blocks#2/13 )/16 )/8 t.ErrorList#2/22 t.NextToken#2/24 e.Tokens#2/2 >/1
  // closed e.StartPattern#2 as range 9
  // closed e.Result#2 as range 17
  // closed e.Blocks#2 as range 13
  // closed e.Tokens#2 as range 2
  //DEBUG: t.ErrorList#2: 22
  //DEBUG: t.NextToken#2: 24
  //DEBUG: s.Type#2: 21
  //DEBUG: e.StartPattern#2: 9
  //DEBUG: e.Result#2: 17
  //DEBUG: e.Blocks#2: 13
  //DEBUG: e.Tokens#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#2/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.StartPattern#2/9 AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Result#2/17 AsIs: )/20 AsIs: (/15 AsIs: e.Blocks#2/13 AsIs: )/16 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & AddUnexpected*3/4 } Tile{ AsIs: t.ErrorList#2/22 AsIs: t.NextToken#2/24 }"semicolon"/26 Tile{ AsIs: >/1 } Tile{ AsIs: e.Tokens#2/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[26], context[27], "semicolon", 9);
  refalrts::update_name(context[4], functions[efunc_gen_AddUnexpected_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[19], context[8] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentence_A1("ParseSentence=1", COOKIE1_, COOKIE2_, func_gen_ParseSentence_A1);


static refalrts::FnResult func_ParseSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ParseSentence/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentence=1/4 } </7 & ParseSentencePart=1/8 </9 & DoParsePattern@1/10 Tile{ AsIs: t.ErrorList#1/5 } (/11 )/12 Tile{ AsIs: e.Tokens#1/2 } >/13 >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_ParseSentencePart_A1]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoParsePattern_Z1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentence_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseSentence("ParseSentence", COOKIE1_, COOKIE2_, func_ParseSentence);


static refalrts::FnResult func_gen_ParseSentencePart_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & ParseSentencePart=3/4 (/7 e.Pattern#2/5 )/8 s.Type#3/9 t.ErrorList#4/10 (/14 e.Result#4/12 )/15 (/18 e.Blocks#4/16 )/19 e.Tokens#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.Result#4 as range 12
  // closed e.Blocks#4 as range 16
  // closed e.Tokens#4 as range 2
  //DEBUG: e.Pattern#2: 5
  //DEBUG: s.Type#3: 9
  //DEBUG: t.ErrorList#4: 10
  //DEBUG: e.Result#4: 12
  //DEBUG: e.Blocks#4: 16
  //DEBUG: e.Tokens#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern#2/5 AsIs: )/8 AsIs: s.Type#3/9 } Tile{ AsIs: (/14 AsIs: e.Result#4/12 AsIs: )/15 AsIs: (/18 AsIs: e.Blocks#4/16 AsIs: )/19 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.ErrorList#4/10 } Tile{ AsIs: e.Tokens#4/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[14], context[19] );
  res = refalrts::splice_evar( res, context[4], context[9] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentencePart_A3("ParseSentencePart=3", COOKIE1_, COOKIE2_, func_gen_ParseSentencePart_A3);


static refalrts::FnResult func_gen_ParseSentencePart_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & ParseSentencePart=2/4 (/7 e.Pattern#2/5 )/8 s.Type#3/9 t.ErrorList#3/10 e.Tokens#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#3 as range 2
  //DEBUG: e.Pattern#2: 5
  //DEBUG: s.Type#3: 9
  //DEBUG: t.ErrorList#3: 10
  //DEBUG: e.Tokens#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=3/4 AsIs: (/7 AsIs: e.Pattern#2/5 AsIs: )/8 AsIs: s.Type#3/9 } </12 & ParseResult=1/13 </14 & DoParseResult@1/15 Tile{ AsIs: t.ErrorList#3/10 } (/16 )/17 Tile{ AsIs: e.Tokens#3/2 } >/18 >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_ParseResult_A1]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_DoParseResult_Z1]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentencePart_A2("ParseSentencePart=2", COOKIE1_, COOKIE2_, func_gen_ParseSentencePart_A2);


static refalrts::FnResult func_gen_ParseSentencePart_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & ParseSentencePart=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSentencePart=1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & ParseSentencePart=1/4 t.new#4/5 (/9 e.new#7/11 )/10 t.new#5/15 e.new#6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new#6 as range 13
    do {
      // </0 & ParseSentencePart=1/4 t.new#8/5 (/9 e.new#13/17 )/10 (/15 s.new#9/23 t.new#10/24 e.new#11/21 )/16 e.new#12/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.new#13 as range 17
      // closed e.new#12 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      context[25] = refalrts::tvar_left( context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      // closed e.new#11 as range 21
      do {
        // </0 & ParseSentencePart=1/4 t.new#14/5 (/9 e.new#18/26 )/10 (/15 s.new#15/23 t.new#16/24 )/16 e.new#17/28 >/1
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.new#18 as range 26
        // closed e.new#17 as range 28
        do {
          // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/30 )/10 (/15 # TkReplace/23 t.1#0/24 )/16 e.#0/32 >/1
          context[30] = context[26];
          context[31] = context[27];
          context[32] = context[28];
          context[33] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_TkReplace], context[23] ) )
            continue;
          // closed e.Pattern#2 as range 30
          // closed e.#0 as range 32
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: t.1#0: 24
          //DEBUG: e.Pattern#2: 30
          //DEBUG: e.#0: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1#0/24 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=3@1/4 } Tile{ AsIs: (/9 AsIs: e.Pattern#2/30 AsIs: )/10 HalfReuse: </15 HalfReuse: & ParseResult=1/23 } </34 & DoParseResult@1/35 Tile{ AsIs: t.ErrorList#2/5 } (/36 Tile{ AsIs: )/16 AsIs: e.#0/32 AsIs: >/1 } >/37 >/38 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::alloc_open_bracket(vm, context[36]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A3Z1]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[23], functions[efunc_gen_ParseResult_A1]);
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[34] );
          refalrts::link_brackets( context[36], context[16] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[16], context[1] );
          res = refalrts::splice_elem( res, context[36] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[9], context[23] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/30 )/10 (/15 # TkComma/23 t.1#0/24 )/16 e.#0/32 >/1
        context[30] = context[26];
        context[31] = context[27];
        context[32] = context[28];
        context[33] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_TkComma], context[23] ) )
          continue;
        // closed e.Pattern#2 as range 30
        // closed e.#0 as range 32
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: t.1#0: 24
        //DEBUG: e.Pattern#2: 30
        //DEBUG: e.#0: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1#0/24 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=3@2/4 } Tile{ AsIs: (/9 AsIs: e.Pattern#2/30 AsIs: )/10 HalfReuse: </15 HalfReuse: & ParseResult=1/23 } </34 & DoParseResult@1/35 Tile{ AsIs: t.ErrorList#2/5 } (/36 Tile{ AsIs: )/16 AsIs: e.#0/32 AsIs: >/1 } >/37 >/38 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A3Z2]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[23], functions[efunc_gen_ParseResult_A1]);
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::link_brackets( context[36], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[16], context[1] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[9], context[23] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSentencePart=1/4 t.new#14/5 (/9 e.new#19/26 )/10 (/15 s.new#15/23 s.new#16/24 e.new#17/28 )/16 e.new#18/30 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[19];
      context[31] = context[20];
      if( ! refalrts::svar_term( context[24], context[24] ) )
        continue;
      // closed e.new#19 as range 26
      // closed e.new#17 as range 28
      // closed e.new#18 as range 30
      do {
        // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/32 )/10 (/15 # TkError/23 s.LineNumber#1/24 e.2#0/34 )/16 e.#0/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[23] ) )
          continue;
        // closed e.Pattern#2 as range 32
        // closed e.2#0 as range 34
        // closed e.#0 as range 36
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LineNumber#1: 24
        //DEBUG: e.Pattern#2: 32
        //DEBUG: e.2#0: 34
        //DEBUG: e.#0: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </38 & ParseSentencePart=2/39 (/40 Tile{ AsIs: e.Pattern#2/32 } )/41 # Assign/42 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LineNumber1 #24/9 } e.2#0/34/43 Tile{ HalfReuse: >/10 AsIs: (/15 AsIs: # TkError/23 AsIs: s.LineNumber#1/24 AsIs: e.2#0/34 AsIs: )/16 AsIs: e.#0/36 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_ParseSentencePart_A2]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_ident(vm, context[42], identifiers[ident_Assign]);
        refalrts::copy_evar(vm, context[43], context[44], context[34], context[35]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[24] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[38], context[40] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/32 )/10 (/15 # TkUnexpected/23 s.LineNumber#1/24 e.2#0/34 )/16 e.#0/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[23] ) )
          continue;
        // closed e.Pattern#2 as range 32
        // closed e.2#0 as range 34
        // closed e.#0 as range 36
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LineNumber#1: 24
        //DEBUG: e.Pattern#2: 32
        //DEBUG: e.2#0: 34
        //DEBUG: e.#0: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </38 & ParseSentencePart=2/39 (/40 Tile{ AsIs: e.Pattern#2/32 } )/41 # Assign/42 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LineNumber1 #24/9 }"Unknown characters \""/43 e.2#0/34/45 '\"'/47 Tile{ HalfReuse: >/10 AsIs: (/15 AsIs: # TkUnexpected/23 AsIs: s.LineNumber#1/24 AsIs: e.2#0/34 AsIs: )/16 AsIs: e.#0/36 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_ParseSentencePart_A2]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_ident(vm, context[42], identifiers[ident_Assign]);
        refalrts::alloc_chars(vm, context[43], context[44], "Unknown characters \"", 20);
        refalrts::copy_evar(vm, context[45], context[46], context[34], context[35]);
        refalrts::alloc_char(vm, context[47], '\"');
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[24] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_evar( res, context[43], context[47] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[38], context[40] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/32 )/10 (/15 s.Unexpected#1/23 s.LineNumber#1/24 e.2#0/34 )/16 e.#0/36 >/1
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      // closed e.Pattern#2 as range 32
      // closed e.2#0 as range 34
      // closed e.#0 as range 36
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.Unexpected#1: 23
      //DEBUG: s.LineNumber#1: 24
      //DEBUG: e.Pattern#2: 32
      //DEBUG: e.2#0: 34
      //DEBUG: e.#0: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </38 & ParseSentencePart=2/39 (/40 Tile{ AsIs: e.Pattern#2/32 } )/41 # Assign/42 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LineNumber1 #24/9 }"Unexpected "/43 </45 & SR-StrFromToken/46 s.Unexpected#1/23/47 e.2#0/34/48 >/50", expected \",\" or \"=\""/51 Tile{ HalfReuse: >/10 AsIs: (/15 AsIs: s.Unexpected#1/23 AsIs: s.LineNumber#1/24 AsIs: e.2#0/34 AsIs: )/16 AsIs: e.#0/36 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_ParseSentencePart_A2]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_ident(vm, context[42], identifiers[ident_Assign]);
      refalrts::alloc_chars(vm, context[43], context[44], "Unexpected ", 11);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_SRm_StrFromToken]);
      refalrts::copy_stvar(vm, context[47], context[23]);
      refalrts::copy_evar(vm, context[48], context[49], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_chars(vm, context[51], context[52], ", expected \",\" or \"=\"", 21);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[24] );
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[43], context[52] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[38], context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/17 )/10 t.#0/15 e.#0/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Pattern#2 as range 17
    // closed e.#0 as range 19
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: t.#0: 15
    //DEBUG: e.Pattern#2: 17
    //DEBUG: e.#0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=2/4 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Pattern#2/17 } )/21 # Assign/22 </23 & AddUnexpected*3/24 Tile{ AsIs: t.ErrorList#2/5 } t.#0/15/25"\",\" or \"=\""/27 Tile{ HalfReuse: >/10 AsIs: t.#0/15 AsIs: e.#0/19 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_ident(vm, context[22], identifiers[ident_Assign]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_AddUnexpected_D3]);
    refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
    refalrts::alloc_chars(vm, context[27], context[28], "\",\" or \"=\"", 10);
    refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A2]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSentencePart=1/4 t.ErrorList#2/5 (/9 e.Pattern#2/7 )/10 e.Tokens#2/2 >/1
  // closed e.Pattern#2 as range 7
  // closed e.Tokens#2 as range 2
  //DEBUG: t.ErrorList#2: 5
  //DEBUG: e.Pattern#2: 7
  //DEBUG: e.Tokens#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=2/4 } Tile{ AsIs: (/9 AsIs: e.Pattern#2/7 AsIs: )/10 } </11 & ParseSentencePart=2\1*3/12 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: e.Tokens#2/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_ParseSentencePart_A2L1D3]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentencePart_A1("ParseSentencePart=1", COOKIE1_, COOKIE2_, func_gen_ParseSentencePart_A1);


static refalrts::FnResult func_ParseSentencePart(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ParseSentencePart/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=1/4 } </7 & DoParsePattern@1/8 Tile{ AsIs: t.ErrorList#1/5 } (/9 )/10 Tile{ AsIs: e.Tokens#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoParsePattern_Z1]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseSentencePart("ParseSentencePart", COOKIE1_, COOKIE2_, func_ParseSentencePart);


static refalrts::FnResult func_ParsePattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ParsePattern/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern@1/4 AsIs: t.ErrorList#1/5 } (/7 )/8 Tile{ AsIs: e.Tokens#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParsePattern_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParsePattern("ParsePattern", COOKIE1_, COOKIE2_, func_ParsePattern);


static refalrts::FnResult func_DoParsePattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 74 elems
  refalrts::Iter context[74];
  refalrts::zeros( context, 74 );
  // </0 & DoParsePattern/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParsePattern/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoParsePattern/4 t.new#5/5 (/9 e.new#10/15 )/10 (/13 e.new#11/17 )/14 (/23 s.new#6/25 s.new#7/26 e.new#8/21 )/24 e.new#9/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#10 as range 15
    // closed e.new#11 as range 17
    // closed e.new#9 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new#8 as range 21
    do {
      // </0 & DoParsePattern/4 t.new#12/5 (/9 e.new#17/27 )/10 (/13 e.new#18/29 )/14 (/23 s.new#14/25 s.new#15/26 s.new#16/35 )/24 e.new#13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new#17 as range 27
      // closed e.new#18 as range 29
      // closed e.new#13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkChar/25 s.LnNum#1/26 s.Char#1/35 )/24 e.Tail#1/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[25] ) )
          continue;
        // closed e.MultiBrackets#1 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.Tail#1 as range 40
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.Char#1: 35
        //DEBUG: e.MultiBrackets#1: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.Tail#1: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Char/25 } Tile{ AsIs: s.Char#1/35 } )/42 Tile{ AsIs: )/24 AsIs: e.Tail#1/40 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Char]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[42] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkNumber/25 s.LnNum#1/26 s.Number#1/35 )/24 e.Tail#1/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[25] ) )
        continue;
      // closed e.MultiBrackets#1 as range 36
      // closed e.Scanned#1 as range 38
      // closed e.Tail#1 as range 40
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: s.Number#1: 35
      //DEBUG: e.MultiBrackets#1: 36
      //DEBUG: e.Scanned#1: 38
      //DEBUG: e.Tail#1: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Number/25 } Tile{ AsIs: s.Number#1/35 } )/42 Tile{ AsIs: )/24 AsIs: e.Tail#1/40 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Number]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[42] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkName/25 s.LnNum#1/26 e.Name#1/31 )/24 e.Tail#1/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[25] ) )
        continue;
      // closed e.MultiBrackets#1 as range 27
      // closed e.Scanned#1 as range 29
      // closed e.Name#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBrackets#1: 27
      //DEBUG: e.Scanned#1: 29
      //DEBUG: e.Name#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/29 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Name/25 AsIs: s.LnNum#1/26 AsIs: e.Name#1/31 AsIs: )/24 } )/35 Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[35] );
      refalrts::link_brackets( context[14], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.new#12/5 (/9 e.new#15/27 )/10 (/13 e.new#16/29 )/14 (/23 # TkIdentMarker/25 s.new#14/26 )/24 e.new#13/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#16 as range 29
      // closed e.new#13 as range 31
      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/33 )/10 (/13 e.Scanned#1/35 )/14 (/23 # TkIdentMarker/25 s.LnNumMarker#1/26 )/24 (/41 # TkName/43 s.LnNumName#1/44 e.Name#1/39 )/42 e.Tail#1/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = refalrts::ident_left( identifiers[ident_TkName], context[39], context[40] );
        if( ! context[43] )
          continue;
        // closed e.MultiBrackets#1 as range 33
        // closed e.Scanned#1 as range 35
        // closed e.Tail#1 as range 37
        if( ! refalrts::svar_left( context[44], context[39], context[40] ) )
          continue;
        // closed e.Name#1 as range 39
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNumMarker#1: 26
        //DEBUG: e.MultiBrackets#1: 33
        //DEBUG: e.Scanned#1: 35
        //DEBUG: e.Tail#1: 37
        //DEBUG: s.LnNumName#1: 44
        //DEBUG: e.Name#1: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNumMarker#1/26 {REMOVED TILE} (/41 # TkName/43 s.LnNumName#1/44 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/35 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Identifier/25 } Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/24 } Tile{ AsIs: )/42 AsIs: e.Tail#1/37 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[42] );
        refalrts::link_brackets( context[14], context[24] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[42];
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/33 )/10 (/13 e.Scanned#1/35 )/14 (/23 # TkIdentMarker/25 s.LnNum#1/26 )/24 e.Tail#1/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      // closed e.MultiBrackets#1 as range 33
      // closed e.Scanned#1 as range 35
      // closed e.Tail#1 as range 37
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBrackets#1: 33
      //DEBUG: e.Scanned#1: 35
      //DEBUG: e.Tail#1: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </39 & EL-AddErrorAt/40 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'M'/24 }"is"/41 Tile{ HalfReuse: 's'/23 HalfReuse: 'e'/25 }"d name after \'#\'"/43 >/45 Tile{ AsIs: (/9 AsIs: e.MultiBrackets#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/35 AsIs: )/14 } Tile{ AsIs: e.Tail#1/37 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[41], context[42], "is", 2);
      refalrts::alloc_chars(vm, context[43], context[44], "d name after \'#\'", 16);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::reinit_char(context[24], 'M');
      refalrts::reinit_char(context[23], 's');
      refalrts::reinit_char(context[25], 'e');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[43], context[45] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBrackets#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkCompound/25 s.LnNum#1/26 e.Name#1/31 )/24 e.Tail#1/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[25] ) )
        continue;
      // closed e.MultiBrackets#1 as range 27
      // closed e.Scanned#1 as range 29
      // closed e.Name#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBrackets#1: 27
      //DEBUG: e.Scanned#1: 29
      //DEBUG: e.Name#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/29 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Identifier/25 } Tile{ AsIs: e.Name#1/31 } )/35 Tile{ AsIs: )/24 AsIs: e.Tail#1/33 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Identifier]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[35] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.new#12/5 (/9 e.new#17/27 )/10 (/13 e.new#18/29 )/14 (/23 # TkVariable/25 s.new#14/26 s.new#15/35 e.new#16/31 )/24 e.new#13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[25] ) )
        continue;
      // closed e.new#17 as range 27
      // closed e.new#18 as range 29
      // closed e.new#13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new#16 as range 31
      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkVariable/25 s.LnNumVar#1/26 s.Mode#1/35 e.Index#1/40 )/24 (/46 # TkRedefinition/48 s.LnNumRedef#1/49 )/47 e.Tail#1/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
        if( ! context[46] )
          continue;
        refalrts::bracket_pointers(context[46], context[47]);
        context[48] = refalrts::ident_left( identifiers[ident_TkRedefinition], context[44], context[45] );
        if( ! context[48] )
          continue;
        // closed e.MultiBracket#1 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.Index#1 as range 40
        // closed e.Tail#1 as range 42
        if( ! refalrts::svar_left( context[49], context[44], context[45] ) )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNumVar#1: 26
        //DEBUG: s.Mode#1: 35
        //DEBUG: e.MultiBracket#1: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.Index#1: 40
        //DEBUG: e.Tail#1: 42
        //DEBUG: s.LnNumRedef#1: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNumVar#1/26 {REMOVED TILE} (/46 # TkRedefinition/48 s.LnNumRedef#1/49 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # TkNewVariable/23 HalfReuse: s.LnNumVar1 #26/25 } Tile{ AsIs: s.Mode#1/35 AsIs: e.Index#1/40 AsIs: )/24 } Tile{ AsIs: )/47 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_TkNewVariable]);
        refalrts::reinit_svar( context[25], context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[47] );
        refalrts::link_brackets( context[14], context[24] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[47];
        res = refalrts::splice_evar( res, context[35], context[24] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkVariable/25 s.LnNum#1/26 s.Mode#1/35 e.Index#1/40 )/24 e.Tail#1/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      // closed e.MultiBracket#1 as range 36
      // closed e.Scanned#1 as range 38
      // closed e.Index#1 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: s.Mode#1: 35
      //DEBUG: e.MultiBracket#1: 36
      //DEBUG: e.Scanned#1: 38
      //DEBUG: e.Index#1: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # TkVariable/23 HalfReuse: s.LnNum1 #26/25 } Tile{ AsIs: s.Mode#1/35 } Tile{ AsIs: e.Index#1/40 } )/44 Tile{ AsIs: )/24 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_TkVariable]);
      refalrts::reinit_svar( context[25], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[44] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkRedefinition/25 s.LnNum#1/26 )/24 e.Tail#1/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.MultiBracket#1 as range 27
      // closed e.Scanned#1 as range 29
      // closed e.Tail#1 as range 31
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBracket#1: 27
      //DEBUG: e.Scanned#1: 29
      //DEBUG: e.Tail#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </33 & EL-AddErrorAt/34 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'N'/24 }"ak"/35 Tile{ HalfReuse: 'e'/23 HalfReuse: 'd'/25 }" redefinition sign"/37 >/39 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/29 AsIs: )/14 } Tile{ AsIs: e.Tail#1/31 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[35], context[36], "ak", 2);
      refalrts::alloc_chars(vm, context[37], context[38], " redefinition sign", 18);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::reinit_char(context[24], 'N');
      refalrts::reinit_char(context[23], 'e');
      refalrts::reinit_char(context[25], 'd');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern/4 t.new#12/5 (/9 e.new#17/27 )/10 (/13 e.new#18/29 )/14 (/23 s.new#14/25 s.new#15/26 s.new#16/35 )/24 e.new#13/33 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[19];
    context[34] = context[20];
    // closed e.new#17 as range 27
    // closed e.new#18 as range 29
    // closed e.new#13 as range 33
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    do {
      // </0 & DoParsePattern/4 t.new#19/5 (/9 e.new#23/36 )/10 (/13 e.new#24/38 )/14 (/23 # Open/25 s.new#21/26 s.new#22/35 )/24 e.new#20/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_Open], context[25] ) )
        continue;
      // closed e.new#23 as range 36
      // closed e.new#24 as range 38
      // closed e.new#20 as range 40
      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/42 )/10 (/13 e.Scanned#1/44 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenBracket/35 )/24 e.Tail#1/46 >/1
        context[42] = context[36];
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[35] ) )
          continue;
        // closed e.MultiBracket#1 as range 42
        // closed e.Scanned#1 as range 44
        // closed e.Tail#1 as range 46
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: e.MultiBracket#1: 42
        //DEBUG: e.Scanned#1: 44
        //DEBUG: e.Tail#1: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/42 HalfReuse: (/10 HalfReuse: # Brackets/13 } Tile{ HalfReuse: s.LnNum1 #26/23 Reuse: # TkCloseBracket/25 } Tile{ AsIs: e.Scanned#1/44 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: e.Tail#1/46 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoParsePattern_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
        refalrts::reinit_svar( context[23], context[26] );
        refalrts::update_ident(context[25], identifiers[ident_TkCloseBracket]);
        refalrts::reinit_close_bracket(context[35]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[24] );
        refalrts::link_brackets( context[10], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[35];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[23], context[25] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.new#25/5 (/9 e.new#28/42 )/10 (/13 e.new#29/44 )/14 (/23 # Open/25 s.new#27/26 # TkOpenADT/35 )/24 e.new#26/46 >/1
        context[42] = context[36];
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[35] ) )
          continue;
        // closed e.new#28 as range 42
        // closed e.new#29 as range 44
        // closed e.new#26 as range 46
        do {
          // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNumBracket#1/26 # TkOpenADT/35 )/24 (/56 # TkName/58 s.LnNumName#1/59 e.Name#1/54 )/57 e.Tail#1/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = 0;
          context[55] = 0;
          context[56] = refalrts::brackets_left( context[54], context[55], context[52], context[53] );
          if( ! context[56] )
            continue;
          refalrts::bracket_pointers(context[56], context[57]);
          context[58] = refalrts::ident_left( identifiers[ident_TkName], context[54], context[55] );
          if( ! context[58] )
            continue;
          // closed e.MultiBracket#1 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.Tail#1 as range 52
          if( ! refalrts::svar_left( context[59], context[54], context[55] ) )
            continue;
          // closed e.Name#1 as range 54
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNumBracket#1: 26
          //DEBUG: e.MultiBracket#1: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.Tail#1: 52
          //DEBUG: s.LnNumName#1: 59
          //DEBUG: e.Name#1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumBracket#1/26 {REMOVED TILE} s.LnNumName#1/59 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 } Tile{ HalfReuse: s.LnNumBracket1 #26/23 Reuse: # TkCloseADT/25 } Tile{ AsIs: e.Scanned#1/50 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: (/56 HalfReuse: s.LnNumName1 #59/58 } (/60 Tile{ AsIs: e.Name#1/54 } Tile{ AsIs: )/14 } Tile{ AsIs: )/57 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[60]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
          refalrts::reinit_svar( context[23], context[26] );
          refalrts::update_ident(context[25], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[35]);
          refalrts::reinit_svar( context[58], context[59] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[56], context[57] );
          refalrts::link_brackets( context[60], context[14] );
          refalrts::link_brackets( context[9], context[24] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[57];
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_evar( res, context[35], context[58] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_evar( res, context[23], context[25] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenADT/35 )/24 e.Tail#1/52 >/1
        context[48] = context[42];
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        // closed e.MultiBracket#1 as range 48
        // closed e.Scanned#1 as range 50
        // closed e.Tail#1 as range 52
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: e.MultiBracket#1: 48
        //DEBUG: e.Scanned#1: 50
        //DEBUG: e.Tail#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </54 & DoParsePattern/55 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LnNum1 #26/9 }"Expected name after \"[\""/56 >/58 (/59 Tile{ AsIs: e.MultiBracket#1/48 } (/60 # ADT-Brackets/61 Tile{ HalfReuse: s.LnNum1 #26/10 HalfReuse: # TkCloseADT/13 AsIs: e.Scanned#1/50 AsIs: )/14 HalfReuse: )/23 HalfReuse: (/25 AsIs: s.LnNum#1/26 HalfReuse: (/35 HalfReuse: # UnnamedADT/24 } )/62 )/63 Tile{ AsIs: e.Tail#1/52 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[54]);
        refalrts::alloc_name(vm, context[55], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[56], context[57], "Expected name after \"[\"", 23);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::alloc_open_bracket(vm, context[59]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_ident(vm, context[61], identifiers[ident_ADTm_Brackets]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[26] );
        refalrts::reinit_svar( context[10], context[26] );
        refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
        refalrts::reinit_close_bracket(context[23]);
        refalrts::reinit_open_bracket(context[25]);
        refalrts::reinit_open_bracket(context[35]);
        refalrts::reinit_ident(context[24], identifiers[ident_UnnamedADT]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[54] );
        refalrts::link_brackets( context[25], context[63] );
        refalrts::link_brackets( context[35], context[62] );
        refalrts::link_brackets( context[59], context[23] );
        refalrts::link_brackets( context[60], context[14] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[10], context[24] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[56], context[59] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/42 )/10 (/13 e.Scanned#1/44 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenCall/35 )/24 e.Tail#1/46 >/1
      context[42] = context[36];
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[35] ) )
        continue;
      // closed e.MultiBracket#1 as range 42
      // closed e.Scanned#1 as range 44
      // closed e.Tail#1 as range 46
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBracket#1: 42
      //DEBUG: e.Scanned#1: 44
      //DEBUG: e.Tail#1: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE}
      //RESULT: Tile{ [[ } </48 & DoParsePattern/49 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LnNum1 #26/9 }"Unexpected call bracket in pattern expression"/50 >/52 (/53 Tile{ AsIs: e.MultiBracket#1/42 } (/54 Tile{ Reuse: # Brackets/25 } Tile{ HalfReuse: s.LnNum1 #26/10 HalfReuse: # TkCloseCall/13 AsIs: e.Scanned#1/44 AsIs: )/14 HalfReuse: )/23 } Tile{ HalfReuse: (/35 AsIs: )/24 AsIs: e.Tail#1/46 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[50], context[51], "Unexpected call bracket in pattern expression", 45);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::update_ident(context[25], identifiers[ident_Brackets]);
      refalrts::reinit_svar( context[10], context[26] );
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseCall]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_bracket(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[35], context[24] );
      refalrts::link_brackets( context[53], context[23] );
      refalrts::link_brackets( context[54], context[14] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[10], context[23] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[50], context[53] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern/4 t.new#19/5 (/9 e.new#23/36 )/10 (/13 e.new#24/38 )/14 (/23 # Close/25 s.new#21/26 s.new#22/35 )/24 e.new#20/40 >/1
    context[36] = context[27];
    context[37] = context[28];
    context[38] = context[29];
    context[39] = context[30];
    context[40] = context[33];
    context[41] = context[34];
    if( ! refalrts::ident_term( identifiers[ident_Close], context[25] ) )
      continue;
    // closed e.new#23 as range 36
    // closed e.new#24 as range 38
    // closed e.new#20 as range 40
    do {
      // </0 & DoParsePattern/4 t.new#25/5 (/9 e.new#29/42 (/50 s.new#30/52 s.new#31/53 s.new#32/54 e.new#33/48 )/51 )/10 (/13 e.new#34/44 )/14 (/23 # Close/25 s.new#27/26 s.new#28/35 )/24 e.new#26/46 >/1
      context[42] = context[36];
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_right( context[48], context[49], context[42], context[43] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      // closed e.new#29 as range 42
      // closed e.new#34 as range 44
      // closed e.new#26 as range 46
      if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
        continue;
      if( ! refalrts::svar_left( context[53], context[48], context[49] ) )
        continue;
      if( ! refalrts::svar_left( context[54], context[48], context[49] ) )
        continue;
      // closed e.new#33 as range 48
      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 s.BracketsSign#1/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.ClosedLnNum#1/26 s.CloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::repeated_stvar_term( vm, context[35], context[54] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.BracketsSign#1: 52
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.ClosedLnNum#1: 26
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketsSign#1/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} )/51 {REMOVED TILE} {REMOVED TILE} # Close/25 s.ClosedLnNum#1/26 s.CloseBracket#1/35 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/55 HalfReuse: )/50 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Scanned#1/57 } Tile{ HalfReuse: (/10 HalfReuse: s.BracketsSign1 #52/13 AsIs: e.InnerScanned#1/59 AsIs: )/14 } Tile{ AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[50]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_svar( context[13], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[10], context[14] );
        refalrts::link_brackets( context[9], context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_evar( res, context[10], context[14] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[50], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkOpenBracket/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"(\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkOpenBracket/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"(\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkCloseBracket/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \")\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkCloseBracket/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \")\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkOpenCall/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"<\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkOpenCall/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"<\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkCloseCall/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \">\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkCloseCall/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \">\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkOpenADT/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"[\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkOpenADT/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"[\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # TkCloseADT/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"]\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # TkCloseADT/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"]\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # Brackets/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"(\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # Brackets/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"(\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # ADT-Brackets/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"[\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # ADT-Brackets/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"[\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 # CallBrackets/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
        context[55] = context[42];
        context[56] = context[43];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[52] ) )
          continue;
        // closed e.MultiBracket#1 as range 55
        // closed e.Scanned#1 as range 57
        // closed e.InnerScanned#1 as range 59
        // closed e.Tail#1 as range 61
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.InnerLnNum#1: 53
        //DEBUG: s.CloseBracket#1: 54
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OtherCloseBracket#1: 35
        //DEBUG: e.MultiBracket#1: 55
        //DEBUG: e.Scanned#1: 57
        //DEBUG: e.InnerScanned#1: 59
        //DEBUG: e.Tail#1: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \"<\""/65 >/67 (/68 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: # CallBrackets/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"<\"", 22);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[68], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/55 (/50 s.BracketsSign#1/52 s.InnerLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/57 )/51 )/10 (/13 e.InnerScanned#1/59 )/14 (/23 # Close/25 s.LnNum#1/26 s.OtherCloseBracket#1/35 )/24 e.Tail#1/61 >/1
      context[55] = context[42];
      context[56] = context[43];
      context[57] = context[48];
      context[58] = context[49];
      context[59] = context[44];
      context[60] = context[45];
      context[61] = context[46];
      context[62] = context[47];
      // closed e.MultiBracket#1 as range 55
      // closed e.Scanned#1 as range 57
      // closed e.InnerScanned#1 as range 59
      // closed e.Tail#1 as range 61
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.BracketsSign#1: 52
      //DEBUG: s.InnerLnNum#1: 53
      //DEBUG: s.CloseBracket#1: 54
      //DEBUG: s.LnNum#1: 26
      //DEBUG: s.OtherCloseBracket#1: 35
      //DEBUG: e.MultiBracket#1: 55
      //DEBUG: e.Scanned#1: 57
      //DEBUG: e.InnerScanned#1: 59
      //DEBUG: e.Tail#1: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </63 & DoParsePattern/64 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #53/9 }"Unbalanced bracket \""/65 </67 & StrFromBracket*9/68 s.BracketsSign#1/52/69 >/70 '\"'/71 >/72 (/73 Tile{ AsIs: e.MultiBracket#1/55 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/57 } Tile{ AsIs: (/50 AsIs: s.BracketsSign#1/52 } Tile{ AsIs: e.InnerScanned#1/59 } Tile{ AsIs: )/51 } Tile{ AsIs: )/14 AsIs: (/23 AsIs: # Close/25 AsIs: s.LnNum#1/26 AsIs: s.OtherCloseBracket#1/35 AsIs: )/24 AsIs: e.Tail#1/61 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[65], context[66], "Unbalanced bracket \"", 20);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::copy_stvar(vm, context[69], context[52]);
      refalrts::alloc_close_call(vm, context[70]);
      refalrts::alloc_char(vm, context[71], '\"');
      refalrts::alloc_close_call(vm, context[72]);
      refalrts::alloc_open_bracket(vm, context[73]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[53] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::link_brackets( context[73], context[10] );
      refalrts::push_stack( vm, context[72] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[67] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[65], context[73] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern/4 t.new#25/5 (/9 )/10 (/13 e.new#29/42 )/14 (/23 # Close/25 s.new#27/26 s.new#28/35 )/24 e.new#26/44 >/1
    context[42] = context[38];
    context[43] = context[39];
    context[44] = context[40];
    context[45] = context[41];
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    // closed e.new#29 as range 42
    // closed e.new#26 as range 44
    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkOpenBracket/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"(\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkCloseBracket/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \")\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \")\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkOpenCall/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"<\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkCloseCall/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \">\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \">\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkOpenADT/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"[\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # TkCloseADT/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"]\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"]\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # Brackets/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"(\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # ADT-Brackets/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"[\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 # CallBrackets/35 )/24 e.Tail#1/48 >/1
      context[46] = context[42];
      context[47] = context[43];
      context[48] = context[44];
      context[49] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[35] ) )
        continue;
      // closed e.Scanned#1 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.Scanned#1: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'U'/35 HalfReuse: 'n'/24 }"ba"/52 Tile{ HalfReuse: 'l'/23 HalfReuse: 'a'/25 }"nced bracket \"<\""/54 >/56 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[52], context[53], "ba", 2);
      refalrts::alloc_chars(vm, context[54], context[55], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_char(context[35], 'U');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[23], 'l');
      refalrts::reinit_char(context[25], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/46 )/14 (/23 # Close/25 s.LnNum#1/26 s.CloseBracket#1/35 )/24 e.Tail#1/48 >/1
    context[46] = context[42];
    context[47] = context[43];
    context[48] = context[44];
    context[49] = context[45];
    // closed e.Scanned#1 as range 46
    // closed e.Tail#1 as range 48
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LnNum#1: 26
    //DEBUG: s.CloseBracket#1: 35
    //DEBUG: e.Scanned#1: 46
    //DEBUG: e.Tail#1: 48

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern/4 } </50 & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 }"Unb"/52 Tile{ HalfReuse: 'a'/23 HalfReuse: 'l'/25 }"anced bracket \""/54 </56 & StrFromBracket*9/57 Tile{ AsIs: s.CloseBracket#1/35 HalfReuse: >/24 } '\"'/58 >/59 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/46 AsIs: )/14 } Tile{ AsIs: e.Tail#1/48 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[52], context[53], "Unb", 3);
    refalrts::alloc_chars(vm, context[54], context[55], "anced bracket \"", 15);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::alloc_char(vm, context[58], '\"');
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::reinit_char(context[23], 'a');
    refalrts::reinit_char(context[25], 'l');
    refalrts::reinit_close_call(context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[35], context[24] );
    res = refalrts::splice_evar( res, context[54], context[57] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParsePattern/4 t.new#5/5 (/9 e.new#7/15 (/23 s.new#8/25 s.new#9/26 s.new#10/27 e.new#11/21 )/24 )/10 (/13 e.new#12/17 )/14 e.new#6/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[15], context[16] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#7 as range 15
    // closed e.new#12 as range 17
    // closed e.new#6 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
      continue;
    // closed e.new#11 as range 21
    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenBracket/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"(\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenBracket/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseBracket/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \")\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseBracket/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenCall/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"<\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenCall/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseCall/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \">\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseCall/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenADT/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"[\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenADT/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseADT/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"]\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseADT/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # Brackets/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"(\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # Brackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # ADT-Brackets/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"[\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # ADT-Brackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # CallBrackets/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.InnerLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \"<\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # CallBrackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 s.BracketsSign#1/25 s.InnerLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
    context[28] = context[15];
    context[29] = context[16];
    context[30] = context[21];
    context[31] = context[22];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[20];
    // closed e.MultiBracket#1 as range 28
    // closed e.Scanned#1 as range 30
    // closed e.InnerScanned#1 as range 32
    // closed e.Tail#1 as range 34
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.BracketsSign#1: 25
    //DEBUG: s.InnerLnNum#1: 26
    //DEBUG: s.CloseBracket#1: 27
    //DEBUG: e.MultiBracket#1: 28
    //DEBUG: e.Scanned#1: 30
    //DEBUG: e.InnerScanned#1: 32
    //DEBUG: e.Tail#1: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.InnerLnNum1 #26/9 }"Unbalanced bracket \""/38 </40 & StrFromBracket*9/41 s.BracketsSign#1/25/42 >/43 '\"'/44 >/45 (/46 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: s.BracketsSign#1/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
    refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[42], context[25]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_char(vm, context[44], '\"');
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[26] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[46], context[10] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[40] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[38], context[46] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParsePattern/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Pattern#1/11 )/14 e.Tail#1/2 >/1
  if( ! refalrts::empty_seq( context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern#1 as range 11
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Pattern#1: 11
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoParsePattern/4 {REMOVED TILE} (/9 )/10 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: (/13 AsIs: e.Pattern#1/11 AsIs: )/14 } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoParsePattern("DoParsePattern", COOKIE1_, COOKIE2_, func_DoParsePattern);


static refalrts::FnResult func_StrFromBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & StrFromBracket/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & StrFromBracket/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & StrFromBracket/4 # TkOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '('/1 ]] }
    refalrts::reinit_char(context[1], '(');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # TkCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: ')'/1 ]] }
    refalrts::reinit_char(context[1], ')');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # TkOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '<'/1 ]] }
    refalrts::reinit_char(context[1], '<');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # TkCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkCloseCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '>'/1 ]] }
    refalrts::reinit_char(context[1], '>');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # TkOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '['/1 ]] }
    refalrts::reinit_char(context[1], '[');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # TkCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # TkCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: ']'/1 ]] }
    refalrts::reinit_char(context[1], ']');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # Brackets/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # Brackets/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '('/1 ]] }
    refalrts::reinit_char(context[1], '(');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrFromBracket/4 # ADT-Brackets/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # ADT-Brackets/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '['/1 ]] }
    refalrts::reinit_char(context[1], '[');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StrFromBracket/4 # CallBrackets/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & StrFromBracket/4 # CallBrackets/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '<'/1 ]] }
  refalrts::reinit_char(context[1], '<');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StrFromBracket("StrFromBracket", COOKIE1_, COOKIE2_, func_StrFromBracket);


static refalrts::FnResult func_gen_ParseResult_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ParseResult=2/4 (/7 e.Result#2/5 )/8 t.ErrorList#3/9 (/13 e.Blocks#3/11 )/14 e.Tail#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Result#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Blocks#3 as range 11
  // closed e.Tail#3 as range 2
  //DEBUG: e.Result#2: 5
  //DEBUG: t.ErrorList#3: 9
  //DEBUG: e.Blocks#3: 11
  //DEBUG: e.Tail#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ParseResult=2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#3/9 } Tile{ AsIs: (/7 AsIs: e.Result#2/5 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Blocks#3/11 AsIs: )/14 } Tile{ AsIs: e.Tail#3/2 } Tile{ ]] }
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseResult_A2("ParseResult=2", COOKIE1_, COOKIE2_, func_gen_ParseResult_A2);


static refalrts::FnResult func_gen_ParseResult_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ParseResult=1/4 t.ErrorList#2/5 (/9 e.Result#2/7 )/10 e.Tail#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Result#2 as range 7
  // closed e.Tail#2 as range 2
  //DEBUG: t.ErrorList#2: 5
  //DEBUG: e.Result#2: 7
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseResult=2/4 } Tile{ AsIs: (/9 AsIs: e.Result#2/7 AsIs: )/10 } </11 & ParseBlocks/12 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: e.Tail#2/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ParseBlocks]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseResult_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseResult_A1("ParseResult=1", COOKIE1_, COOKIE2_, func_gen_ParseResult_A1);


static refalrts::FnResult func_ParseResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ParseResult/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseResult=1/4 } </7 & DoParseResult@1/8 Tile{ AsIs: t.ErrorList#1/5 } (/9 )/10 Tile{ AsIs: e.Tokens#1/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoParseResult_Z1]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseResult_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseResult("ParseResult", COOKIE1_, COOKIE2_, func_ParseResult);


static refalrts::FnResult func_gen_ParseBlocks_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ParseBlocks$1=2/4 (/7 e.Block#2/5 )/8 t.ErrorList#3/9 (/13 e.Blocks#3/11 )/14 e.Tail#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Block#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Blocks#3 as range 11
  // closed e.Tail#3 as range 2
  //DEBUG: e.Block#2: 5
  //DEBUG: t.ErrorList#3: 9
  //DEBUG: e.Blocks#3: 11
  //DEBUG: e.Tail#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#3/9 } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Block#2/5 AsIs: )/8 } Tile{ AsIs: e.Blocks#3/11 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#3/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::link_brackets( context[4], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseBlocks_S1A2("ParseBlocks$1=2", COOKIE1_, COOKIE2_, func_gen_ParseBlocks_S1A2);


static refalrts::FnResult func_gen_ParseBlocks_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ParseBlocks$1=1/4 (/7 e.Block#2/5 )/8 t.ErrorList#2/9 e.Tail#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Block#2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#2 as range 2
  //DEBUG: e.Block#2: 5
  //DEBUG: t.ErrorList#2: 9
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseBlocks$1=2/4 AsIs: (/7 AsIs: e.Block#2/5 AsIs: )/8 } </11 & ParseBlocks/12 Tile{ AsIs: t.ErrorList#2/9 AsIs: e.Tail#2/2 AsIs: >/1 } >/13 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ParseBlocks]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseBlocks_S1A2]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseBlocks_S1A1("ParseBlocks$1=1", COOKIE1_, COOKIE2_, func_gen_ParseBlocks_S1A1);


static refalrts::FnResult func_ParseBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ParseBlocks/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseBlocks/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ParseBlocks/4 t.ErrorList#1/5 (/11 # TkColon/13 s.ColonPos#1/19 )/12 (/16 # TkOpenBlock/18 s.OpenBlockPos#1/20 )/17 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[7], context[8] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    context[13] = refalrts::ident_left( identifiers[ident_TkColon], context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[7], context[8] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left( identifiers[ident_TkOpenBlock], context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 7
    if( ! refalrts::svar_left( context[19], context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[14], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: e.Tail#1: 7
    //DEBUG: s.ColonPos#1: 19
    //DEBUG: s.OpenBlockPos#1: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ColonPos#1/19 )/12 (/16 # TkOpenBlock/18 s.OpenBlockPos#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseBlocks$1=1/4 } Tile{ HalfReuse: </11 HalfReuse: & ParseBlock/13 } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/7 } Tile{ HalfReuse: >/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_ParseBlocks_S1A1]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseBlocks/4 t.ErrorList#1/5 e.Tokens#1/2 >/1
  // closed e.Tokens#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Tokens#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#1/5 } Tile{ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.Tokens#1/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ParseBlocks("ParseBlocks", COOKIE1_, COOKIE2_, func_ParseBlocks);


static refalrts::FnResult func_DoParseResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & DoParseResult/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 2
  do {
    // </0 & DoParseResult/4 t.new#5/5 (/9 e.new#10/15 )/10 (/13 e.new#11/17 )/14 (/23 s.new#6/25 s.new#7/26 e.new#8/21 )/24 e.new#9/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#10 as range 15
    // closed e.new#11 as range 17
    // closed e.new#9 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new#8 as range 21
    do {
      // </0 & DoParseResult/4 t.new#12/5 (/9 e.new#17/27 )/10 (/13 e.new#18/29 )/14 (/23 s.new#14/25 s.new#15/26 s.new#16/35 )/24 e.new#13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new#17 as range 27
      // closed e.new#18 as range 29
      // closed e.new#13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkChar/25 s.LnNum#1/26 s.Char#1/35 )/24 e.Tail#1/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[25] ) )
          continue;
        // closed e.MultiBracket#1 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.Tail#1 as range 40
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.Char#1: 35
        //DEBUG: e.MultiBracket#1: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.Tail#1: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Char/25 } Tile{ AsIs: s.Char#1/35 } )/42 Tile{ AsIs: )/24 AsIs: e.Tail#1/40 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Char]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[42] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkNumber/25 s.LnNum#1/26 s.Number#1/35 )/24 e.Tail#1/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 36
      // closed e.Scanned#1 as range 38
      // closed e.Tail#1 as range 40
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: s.Number#1: 35
      //DEBUG: e.MultiBracket#1: 36
      //DEBUG: e.Scanned#1: 38
      //DEBUG: e.Tail#1: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Number/25 } Tile{ AsIs: s.Number#1/35 } )/42 Tile{ AsIs: )/24 AsIs: e.Tail#1/40 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Number]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[42] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkName/25 s.LnNum#1/26 e.Name#1/31 )/24 e.Tail#1/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 27
      // closed e.Scanned#1 as range 29
      // closed e.Name#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBracket#1: 27
      //DEBUG: e.Scanned#1: 29
      //DEBUG: e.Name#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/29 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Name/25 AsIs: s.LnNum#1/26 AsIs: e.Name#1/31 AsIs: )/24 } )/35 Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[35] );
      refalrts::link_brackets( context[14], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.new#12/5 (/9 e.new#15/27 )/10 (/13 e.new#16/29 )/14 (/23 # TkIdentMarker/25 s.new#14/26 )/24 e.new#13/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.new#15 as range 27
      // closed e.new#16 as range 29
      // closed e.new#13 as range 31
      do {
        // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.Scanned#1/35 )/14 (/23 # TkIdentMarker/25 s.MarkerLnNum#1/26 )/24 (/41 # TkName/43 s.NameLnNum#1/44 e.Name#1/39 )/42 e.Tail#1/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = refalrts::ident_left( identifiers[ident_TkName], context[39], context[40] );
        if( ! context[43] )
          continue;
        // closed e.MultiBracket#1 as range 33
        // closed e.Scanned#1 as range 35
        // closed e.Tail#1 as range 37
        if( ! refalrts::svar_left( context[44], context[39], context[40] ) )
          continue;
        // closed e.Name#1 as range 39
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.MarkerLnNum#1: 26
        //DEBUG: e.MultiBracket#1: 33
        //DEBUG: e.Scanned#1: 35
        //DEBUG: e.Tail#1: 37
        //DEBUG: s.NameLnNum#1: 44
        //DEBUG: e.Name#1: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.MarkerLnNum#1/26 {REMOVED TILE} (/41 # TkName/43 s.NameLnNum#1/44 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/35 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Identifier/25 } Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/24 } Tile{ AsIs: )/42 AsIs: e.Tail#1/37 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[42] );
        refalrts::link_brackets( context[14], context[24] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[42];
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.Scanned#1/35 )/14 (/23 # TkIdentMarker/25 s.LnNum#1/26 )/24 e.Tail#1/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      // closed e.MultiBracket#1 as range 33
      // closed e.Scanned#1 as range 35
      // closed e.Tail#1 as range 37
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBracket#1: 33
      //DEBUG: e.Scanned#1: 35
      //DEBUG: e.Tail#1: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </39 & EL-AddErrorAt/40 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/26 HalfReuse: 'M'/24 }"is"/41 Tile{ HalfReuse: 's'/23 HalfReuse: 'e'/25 }"d name after \"#\""/43 >/45 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/35 AsIs: )/14 } Tile{ AsIs: e.Tail#1/37 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[41], context[42], "is", 2);
      refalrts::alloc_chars(vm, context[43], context[44], "d name after \"#\"", 16);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::reinit_char(context[24], 'M');
      refalrts::reinit_char(context[23], 's');
      refalrts::reinit_char(context[25], 'e');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[43], context[45] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[26], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkCompound/25 s.LnNum#1/26 e.Name#1/31 )/24 e.Tail#1/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 27
      // closed e.Scanned#1 as range 29
      // closed e.Name#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: e.MultiBracket#1: 27
      //DEBUG: e.Scanned#1: 29
      //DEBUG: e.Name#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/29 HalfReuse: (/14 HalfReuse: # Symbol/23 Reuse: # Identifier/25 } Tile{ AsIs: e.Name#1/31 } )/35 Tile{ AsIs: )/24 AsIs: e.Tail#1/33 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Identifier]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[35] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.new#12/5 (/9 e.new#18/27 )/10 (/13 e.new#19/29 )/14 (/23 s.new#14/25 s.new#15/26 s.new#16/35 e.new#17/31 )/24 e.new#13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new#18 as range 27
      // closed e.new#19 as range 29
      // closed e.new#13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new#17 as range 31
      do {
        // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/36 )/10 (/13 e.Scanned#1/38 )/14 (/23 # TkVariable/25 s.LnNum#1/26 s.Mode#1/35 e.Index#1/40 )/24 e.Tail#1/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[25] ) )
          continue;
        // closed e.MultiBracket#1 as range 36
        // closed e.Scanned#1 as range 38
        // closed e.Index#1 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.Mode#1: 35
        //DEBUG: e.MultiBracket#1: 36
        //DEBUG: e.Scanned#1: 38
        //DEBUG: e.Index#1: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/38 HalfReuse: (/14 HalfReuse: # TkVariable/23 HalfReuse: s.LnNum1 #26/25 } Tile{ AsIs: s.Mode#1/35 } Tile{ AsIs: e.Index#1/40 } )/44 Tile{ AsIs: )/24 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_TkVariable]);
        refalrts::reinit_svar( context[25], context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[44] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult/4 t.new#20/5 (/9 e.new#25/36 )/10 (/13 e.new#26/38 )/14 (/23 s.new#22/25 s.new#23/26 s.new#24/35 )/24 e.new#21/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.new#25 as range 36
      // closed e.new#26 as range 38
      // closed e.new#21 as range 40
      do {
        // </0 & DoParseResult/4 t.new#27/5 (/9 e.new#31/42 )/10 (/13 e.new#32/44 )/14 (/23 # Open/25 s.new#29/26 s.new#30/35 )/24 e.new#28/46 >/1
        context[42] = context[36];
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[25] ) )
          continue;
        // closed e.new#31 as range 42
        // closed e.new#32 as range 44
        // closed e.new#28 as range 46
        do {
          // </0 & DoParseResult/4 t.new#33/5 (/9 e.new#36/48 )/10 (/13 e.new#37/50 )/14 (/23 # Open/25 s.new#35/26 # TkOpenADT/35 )/24 e.new#34/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[35] ) )
            continue;
          // closed e.new#36 as range 48
          // closed e.new#37 as range 50
          // closed e.new#34 as range 52
          do {
            // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/54 )/10 (/13 e.Scanned#1/56 )/14 (/23 # Open/25 s.LnNumADT#1/26 # TkOpenADT/35 )/24 (/62 # TkName/64 s.LnNumName#1/65 e.Name#1/60 )/63 e.Tail#1/58 >/1
            context[54] = context[48];
            context[55] = context[49];
            context[56] = context[50];
            context[57] = context[51];
            context[58] = context[52];
            context[59] = context[53];
            context[60] = 0;
            context[61] = 0;
            context[62] = refalrts::brackets_left( context[60], context[61], context[58], context[59] );
            if( ! context[62] )
              continue;
            refalrts::bracket_pointers(context[62], context[63]);
            context[64] = refalrts::ident_left( identifiers[ident_TkName], context[60], context[61] );
            if( ! context[64] )
              continue;
            // closed e.MultiBracket#1 as range 54
            // closed e.Scanned#1 as range 56
            // closed e.Tail#1 as range 58
            if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
              continue;
            // closed e.Name#1 as range 60
            //DEBUG: t.ErrorList#1: 5
            //DEBUG: s.LnNumADT#1: 26
            //DEBUG: e.MultiBracket#1: 54
            //DEBUG: e.Scanned#1: 56
            //DEBUG: e.Tail#1: 58
            //DEBUG: s.LnNumName#1: 65
            //DEBUG: e.Name#1: 60

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumADT#1/26 {REMOVED TILE} s.LnNumName#1/65 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/54 HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 } Tile{ HalfReuse: s.LnNumADT1 #26/23 Reuse: # TkCloseADT/25 } Tile{ AsIs: e.Scanned#1/56 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: (/62 HalfReuse: s.LnNumName1 #65/64 } (/66 Tile{ AsIs: e.Name#1/60 } Tile{ AsIs: )/14 } Tile{ AsIs: )/63 AsIs: e.Tail#1/58 AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[66]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
            refalrts::reinit_svar( context[23], context[26] );
            refalrts::update_ident(context[25], identifiers[ident_TkCloseADT]);
            refalrts::reinit_close_bracket(context[35]);
            refalrts::reinit_svar( context[64], context[65] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[62], context[63] );
            refalrts::link_brackets( context[66], context[14] );
            refalrts::link_brackets( context[9], context[24] );
            refalrts::link_brackets( context[10], context[35] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[63];
            res = refalrts::splice_elem( res, context[14] );
            res = refalrts::splice_evar( res, context[60], context[61] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_evar( res, context[35], context[64] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            res = refalrts::splice_evar( res, context[23], context[25] );
            refalrts::splice_to_freelist_open( vm, context[13], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/54 )/10 (/13 e.Scanned#1/56 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenADT/35 )/24 e.Tail#1/58 >/1
          context[54] = context[48];
          context[55] = context[49];
          context[56] = context[50];
          context[57] = context[51];
          context[58] = context[52];
          context[59] = context[53];
          // closed e.MultiBracket#1 as range 54
          // closed e.Scanned#1 as range 56
          // closed e.Tail#1 as range 58
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 26
          //DEBUG: e.MultiBracket#1: 54
          //DEBUG: e.Scanned#1: 56
          //DEBUG: e.Tail#1: 58

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </60 & DoParseResult/61 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LnNum1 #26/9 }"Expected name after \"[\""/62 >/64 (/65 Tile{ AsIs: e.MultiBracket#1/54 } (/66 # ADT-Brackets/67 Tile{ HalfReuse: s.LnNum1 #26/10 HalfReuse: # TkCloseADT/13 AsIs: e.Scanned#1/56 AsIs: )/14 HalfReuse: )/23 HalfReuse: (/25 AsIs: s.LnNum#1/26 HalfReuse: (/35 HalfReuse: # UnnamedADT/24 } )/68 )/69 Tile{ AsIs: e.Tail#1/58 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[60]);
          refalrts::alloc_name(vm, context[61], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[62], context[63], "Expected name after \"[\"", 23);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::alloc_ident(vm, context[67], identifiers[ident_ADTm_Brackets]);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[26] );
          refalrts::reinit_svar( context[10], context[26] );
          refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[23]);
          refalrts::reinit_open_bracket(context[25]);
          refalrts::reinit_open_bracket(context[35]);
          refalrts::reinit_ident(context[24], identifiers[ident_UnnamedADT]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[60] );
          refalrts::link_brackets( context[25], context[69] );
          refalrts::link_brackets( context[35], context[68] );
          refalrts::link_brackets( context[65], context[23] );
          refalrts::link_brackets( context[66], context[14] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[10], context[24] );
          res = refalrts::splice_evar( res, context[66], context[67] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[62], context[65] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenBracket/35 )/24 e.Tail#1/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[35] ) )
            continue;
          // closed e.MultiBracket#1 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.Tail#1 as range 52
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 26
          //DEBUG: e.MultiBracket#1: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.Tail#1: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: # Brackets/13 } Tile{ HalfReuse: s.LnNum1 #26/23 Reuse: # TkCloseBracket/25 } Tile{ AsIs: e.Scanned#1/50 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
          refalrts::reinit_svar( context[23], context[26] );
          refalrts::update_ident(context[25], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[24] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_evar( res, context[23], context[25] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenCall/35 )/24 e.Tail#1/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[35] ) )
            continue;
          // closed e.MultiBracket#1 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.Tail#1 as range 52
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 26
          //DEBUG: e.MultiBracket#1: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.Tail#1: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: # CallBrackets/13 } Tile{ HalfReuse: s.LnNum1 #26/23 Reuse: # TkCloseCall/25 } Tile{ AsIs: e.Scanned#1/50 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
          refalrts::reinit_svar( context[23], context[26] );
          refalrts::update_ident(context[25], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[24] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_evar( res, context[23], context[25] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenBracket/35 )/24 e.Tail#1/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[35] ) )
            continue;
          // closed e.MultiBracket#1 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.Tail#1 as range 52
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 26
          //DEBUG: e.MultiBracket#1: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.Tail#1: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: </13 } Tile{ HalfReuse: & DoParseResult$10\1*2/14 HalfReuse: # TkOpenBracket/23 HalfReuse: >/25 AsIs: s.LnNum#1/26 } # TkCloseBracket/54 Tile{ AsIs: e.Scanned#1/50 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[54], identifiers[ident_TkCloseBracket]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[14], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::reinit_ident(context[23], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_call(context[25]);
          refalrts::reinit_close_bracket(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[24] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_evar( res, context[14], context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 # TkOpenCall/35 )/24 e.Tail#1/52 >/1
          context[48] = context[42];
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[35] ) )
            continue;
          // closed e.MultiBracket#1 as range 48
          // closed e.Scanned#1 as range 50
          // closed e.Tail#1 as range 52
          //DEBUG: t.ErrorList#1: 5
          //DEBUG: s.LnNum#1: 26
          //DEBUG: e.MultiBracket#1: 48
          //DEBUG: e.Scanned#1: 50
          //DEBUG: e.Tail#1: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: </13 } Tile{ HalfReuse: & DoParseResult$10\1*2/14 HalfReuse: # TkOpenCall/23 HalfReuse: >/25 AsIs: s.LnNum#1/26 } # TkCloseCall/54 Tile{ AsIs: e.Scanned#1/50 } Tile{ HalfReuse: )/35 AsIs: )/24 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[54], identifiers[ident_TkCloseCall]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[14], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::reinit_ident(context[23], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_call(context[25]);
          refalrts::reinit_close_bracket(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[24] );
          refalrts::link_brackets( context[10], context[35] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_evar( res, context[14], context[26] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/48 )/10 (/13 e.Scanned#1/50 )/14 (/23 # Open/25 s.LnNum#1/26 s.OpenBracket#1/35 )/24 e.Tail#1/52 >/1
        context[48] = context[42];
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        // closed e.MultiBracket#1 as range 48
        // closed e.Scanned#1 as range 50
        // closed e.Tail#1 as range 52
        //DEBUG: t.ErrorList#1: 5
        //DEBUG: s.LnNum#1: 26
        //DEBUG: s.OpenBracket#1: 35
        //DEBUG: e.MultiBracket#1: 48
        //DEBUG: e.Scanned#1: 50
        //DEBUG: e.Tail#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/48 HalfReuse: (/10 HalfReuse: </13 } Tile{ HalfReuse: & DoParseResult$10\1*2/14 HalfReuse: s.OpenBracket1 #35/23 HalfReuse: >/25 AsIs: s.LnNum#1/26 } </54 & DoParseResult$10\2*2/55 Tile{ AsIs: s.OpenBracket#1/35 } >/56 Tile{ AsIs: e.Scanned#1/50 } )/57 Tile{ AsIs: )/24 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[54]);
        refalrts::alloc_name(vm, context[55], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::alloc_close_call(vm, context[56]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[14], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::reinit_svar( context[23], context[35] );
        refalrts::reinit_close_call(context[25]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[24] );
        refalrts::link_brackets( context[10], context[57] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[14], context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/42 (/50 s.BracketsSign#1/52 s.OpenLnNum#1/53 s.CloseBracket#1/54 e.Scanned#1/48 )/51 )/10 (/13 e.InnerScanned#1/44 )/14 (/23 # Close/25 s.LnNum#1/26 s.CloseBracket#1/35 )/24 e.Tail#1/46 >/1
      context[42] = context[36];
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[25] ) )
        continue;
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_right( context[48], context[49], context[42], context[43] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      // closed e.MultiBracket#1 as range 42
      // closed e.InnerScanned#1 as range 44
      // closed e.Tail#1 as range 46
      if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
        continue;
      if( ! refalrts::svar_left( context[53], context[48], context[49] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[54], context[35], context[48], context[49] ) )
        continue;
      // closed e.Scanned#1 as range 48
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 26
      //DEBUG: s.CloseBracket#1: 35
      //DEBUG: e.MultiBracket#1: 42
      //DEBUG: e.InnerScanned#1: 44
      //DEBUG: e.Tail#1: 46
      //DEBUG: s.BracketsSign#1: 52
      //DEBUG: s.OpenLnNum#1: 53
      //DEBUG: e.Scanned#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/52 s.OpenLnNum#1/53 s.CloseBracket#1/54 {REMOVED TILE} )/51 {REMOVED TILE} {REMOVED TILE} # Close/25 s.LnNum#1/26 s.CloseBracket#1/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 AsIs: t.ErrorList#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/42 HalfReuse: )/50 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Scanned#1/48 } Tile{ HalfReuse: (/10 HalfReuse: s.BracketsSign1 #52/13 AsIs: e.InnerScanned#1/44 AsIs: )/14 } Tile{ AsIs: )/24 AsIs: e.Tail#1/46 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[50]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_svar( context[13], context[52] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[10], context[14] );
      refalrts::link_brackets( context[9], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_evar( res, context[10], context[14] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[50], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/27 )/10 (/13 e.Scanned#1/29 )/14 (/23 # TkOpenBlock/25 s.LnNum#1/26 )/24 e.Tail#1/31 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[25] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.MultiBracket#1 as range 27
    // closed e.Scanned#1 as range 29
    // closed e.Tail#1 as range 31
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LnNum#1: 26
    //DEBUG: e.MultiBracket#1: 27
    //DEBUG: e.Scanned#1: 29
    //DEBUG: e.Tail#1: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 } Tile{ HalfReuse: & Fetch@1/14 AsIs: (/23 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.ErrorList#1/5 } Tile{ AsIs: e.Tail#1/31 } Tile{ HalfReuse: >/25 } Tile{ AsIs: )/24 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/27 AsIs: )/10 } Tile{ AsIs: e.Scanned#1/29 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Fetch_Z1]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[14], context[23] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult/4 t.new#5/5 (/9 e.new#7/15 (/23 s.new#8/25 s.new#9/26 s.new#10/27 e.new#11/21 )/24 )/10 (/13 e.new#12/17 )/14 e.new#6/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[15], context[16] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#7 as range 15
    // closed e.new#12 as range 17
    // closed e.new#6 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
      continue;
    // closed e.new#11 as range 21
    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenBracket/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"(\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenBracket/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseBracket/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \")\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseBracket/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenCall/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"<\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenCall/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseCall/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \">\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseCall/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkOpenADT/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"[\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkOpenADT/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # TkCloseADT/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"]\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # TkCloseADT/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # Brackets/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"(\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # Brackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # ADT-Brackets/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"[\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # ADT-Brackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 # CallBrackets/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
      context[28] = context[15];
      context[29] = context[16];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[17];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[25] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Scanned#1 as range 30
      // closed e.InnerScanned#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.OpenLnNum#1: 26
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Scanned#1: 30
      //DEBUG: e.InnerScanned#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \"<\""/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: # CallBrackets/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 e.MultiBracket#1/28 (/23 s.BracketsSign#1/25 s.OpenLnNum#1/26 s.CloseBracket#1/27 e.Scanned#1/30 )/24 )/10 (/13 e.InnerScanned#1/32 )/14 e.Tail#1/34 >/1
    context[28] = context[15];
    context[29] = context[16];
    context[30] = context[21];
    context[31] = context[22];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[20];
    // closed e.MultiBracket#1 as range 28
    // closed e.Scanned#1 as range 30
    // closed e.InnerScanned#1 as range 32
    // closed e.Tail#1 as range 34
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.BracketsSign#1: 25
    //DEBUG: s.OpenLnNum#1: 26
    //DEBUG: s.CloseBracket#1: 27
    //DEBUG: e.MultiBracket#1: 28
    //DEBUG: e.Scanned#1: 30
    //DEBUG: e.InnerScanned#1: 32
    //DEBUG: e.Tail#1: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/26 s.CloseBracket#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & DoParseResult/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.OpenLnNum1 #26/9 }"Unbalanced bracket \""/38 </40 & StrFromBracket*9/41 s.BracketsSign#1/25/42 >/43 '\"'/44 >/45 (/46 Tile{ AsIs: e.MultiBracket#1/28 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Scanned#1/30 } Tile{ AsIs: (/23 AsIs: s.BracketsSign#1/25 } Tile{ AsIs: e.InnerScanned#1/32 } Tile{ AsIs: )/24 } Tile{ AsIs: )/14 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[38], context[39], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[42], context[25]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_char(vm, context[44], '\"');
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[26] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[46], context[10] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[40] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[38], context[46] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult/4 t.new#5/5 (/9 )/10 (/13 e.new#7/11 )/14 e.new#6/2 >/1
  if( ! refalrts::empty_seq( context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 11
  // closed e.new#6 as range 2
  do {
    // </0 & DoParseResult/4 t.new#8/5 (/9 )/10 (/13 e.new#12/15 )/14 (/21 # Close/23 s.new#9/24 s.new#10/25 )/22 e.new#11/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = refalrts::ident_left( identifiers[ident_Close], context[19], context[20] );
    if( ! context[23] )
      continue;
    // closed e.new#12 as range 15
    // closed e.new#11 as range 17
    if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkOpenBracket/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"(\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkCloseBracket/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \")\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \")\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkOpenCall/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"<\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkCloseCall/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \">\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \">\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkOpenADT/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"[\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # TkCloseADT/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"]\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"]\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # Brackets/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"(\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # ADT-Brackets/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"[\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 # CallBrackets/25 )/22 e.Tail#1/28 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[25] ) )
        continue;
      // closed e.Scanned#1 as range 26
      // closed e.Tail#1 as range 28
      //DEBUG: t.ErrorList#1: 5
      //DEBUG: s.LnNum#1: 24
      //DEBUG: e.Scanned#1: 26
      //DEBUG: e.Tail#1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 HalfReuse: 'U'/25 HalfReuse: 'n'/22 }"ba"/32 Tile{ HalfReuse: 'l'/21 HalfReuse: 'a'/23 }"nced bracket \"<\""/34 >/36 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[32], context[33], "ba", 2);
      refalrts::alloc_chars(vm, context[34], context[35], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_char(context[25], 'U');
      refalrts::reinit_char(context[22], 'n');
      refalrts::reinit_char(context[21], 'l');
      refalrts::reinit_char(context[23], 'a');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Scanned#1/26 )/14 (/21 # Close/23 s.LnNum#1/24 s.CloseBracket#1/25 )/22 e.Tail#1/28 >/1
    context[26] = context[15];
    context[27] = context[16];
    context[28] = context[17];
    context[29] = context[18];
    // closed e.Scanned#1 as range 26
    // closed e.Tail#1 as range 28
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LnNum#1: 24
    //DEBUG: s.CloseBracket#1: 25
    //DEBUG: e.Scanned#1: 26
    //DEBUG: e.Tail#1: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult/4 } </30 & EL-AddErrorAt/31 Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: s.LnNum#1/24 }"Unb"/32 Tile{ HalfReuse: 'a'/21 HalfReuse: 'l'/23 }"anced bracket \""/34 </36 & StrFromBracket*9/37 Tile{ AsIs: s.CloseBracket#1/25 HalfReuse: >/22 } '\"'/38 >/39 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned#1/26 AsIs: )/14 } Tile{ AsIs: e.Tail#1/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[32], context[33], "Unb", 3);
    refalrts::alloc_chars(vm, context[34], context[35], "anced bracket \"", 15);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::alloc_char(vm, context[38], '\"');
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::reinit_char(context[21], 'a');
    refalrts::reinit_char(context[23], 'l');
    refalrts::reinit_close_call(context[22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[25], context[22] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult/4 t.ErrorList#1/5 (/9 )/10 (/13 e.Result#1/11 )/14 e.Tail#1/2 >/1
  // closed e.Result#1 as range 11
  // closed e.Tail#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: e.Result#1: 11
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoParseResult/4 {REMOVED TILE} (/9 )/10 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#1/5 } Tile{ AsIs: (/13 AsIs: e.Result#1/11 AsIs: )/14 } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoParseResult("DoParseResult", COOKIE1_, COOKIE2_, func_DoParseResult);


static refalrts::FnResult func_AddUnexpected(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & AddUnexpected/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddUnexpected/4 t.new#1/5 (/9 s.new#2/11 s.new#3/12 e.new#4/7 )/10 e.new#5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#5 as range 2
  if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 7
  do {
    // </0 & AddUnexpected/4 t.ErrorList#1/5 (/9 # TkError/11 s.LineNumber#1/12 e.Message#1/13 )/10 e.Expected#1/15 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkError], context[11] ) )
      continue;
    // closed e.Message#1 as range 13
    // closed e.Expected#1 as range 15
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LineNumber#1: 12
    //DEBUG: e.Message#1: 13
    //DEBUG: e.Expected#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # TkError/11 s.LineNumber#1/12 {REMOVED TILE} )/10 e.Expected#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #12/9 } Tile{ AsIs: e.Message#1/13 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddUnexpected/4 t.ErrorList#1/5 (/9 # TkUnexpected/11 s.LineNumber#1/12 e.Unexpected#1/13 )/10 e.Expected#1/15 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[11] ) )
      continue;
    // closed e.Unexpected#1 as range 13
    // closed e.Expected#1 as range 15
    //DEBUG: t.ErrorList#1: 5
    //DEBUG: s.LineNumber#1: 12
    //DEBUG: e.Unexpected#1: 13
    //DEBUG: e.Expected#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.LineNumber#1/12 {REMOVED TILE} {REMOVED TILE} e.Expected#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #12/9 HalfReuse: 'U'/11 } 'n'/17 Tile{ HalfReuse: 'k'/10 }"nown characters \""/18 Tile{ AsIs: e.Unexpected#1/13 } '\"'/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[17], 'n');
    refalrts::alloc_chars(vm, context[18], context[19], "nown characters \"", 17);
    refalrts::alloc_char(vm, context[20], '\"');
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[12] );
    refalrts::reinit_char(context[11], 'U');
    refalrts::reinit_char(context[10], 'k');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddUnexpected/4 t.ErrorList#1/5 (/9 s.Unexpected#1/11 s.LineNumber#1/12 e.Info#1/7 )/10 e.Expected#1/2 >/1
  // closed e.Info#1 as range 7
  // closed e.Expected#1 as range 2
  //DEBUG: t.ErrorList#1: 5
  //DEBUG: s.Unexpected#1: 11
  //DEBUG: s.LineNumber#1: 12
  //DEBUG: e.Info#1: 7
  //DEBUG: e.Expected#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.LineNumber#1/12 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#1/5 HalfReuse: s.LineNumber1 #12/9 }"Unexpected "/13 </15 & SR-StrFromToken/16 Tile{ AsIs: s.Unexpected#1/11 } Tile{ AsIs: e.Info#1/7 } >/17", expected"/18 Tile{ HalfReuse: ' '/10 AsIs: e.Expected#1/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[13], context[14], "Unexpected ", 11);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_SRm_StrFromToken]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_chars(vm, context[18], context[19], ", expected", 10);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_svar( context[9], context[12] );
  refalrts::reinit_char(context[10], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::splice_to_freelist_open( vm, context[9], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddUnexpected("AddUnexpected", COOKIE1_, COOKIE2_, func_AddUnexpected);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@2/4 t.new#1/5 t.new#2/7 t.new#3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn#1/5 t.Acc#1/7 t.Next#1/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: s.Fn#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 t.Acc#1/7 t.Next#1/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn#0/5 t.Acc#1/7 t.Next#1/9 >/1
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: t.Next#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@1/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@1/4 (/7 s.new#3/13 s.new#4/14 )/8 e.new#5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new#5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      do {
        // </0 & Map@1/4 (/7 # TkOpenBracket/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[13] ) )
          continue;
        // closed e.Tail#1 as range 15
        //DEBUG: s.LnNum#1: 14
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Open/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkOpenBracket/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Open]);
        refalrts::reinit_svar( context[7], context[14] );
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 # TkCloseBracket/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[13] ) )
          continue;
        // closed e.Tail#1 as range 15
        //DEBUG: s.LnNum#1: 14
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Close/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkCloseBracket/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Close]);
        refalrts::reinit_svar( context[7], context[14] );
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 # TkOpenADT/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[13] ) )
          continue;
        // closed e.Tail#1 as range 15
        //DEBUG: s.LnNum#1: 14
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Open/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkOpenADT/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Open]);
        refalrts::reinit_svar( context[7], context[14] );
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 # TkCloseADT/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[13] ) )
          continue;
        // closed e.Tail#1 as range 15
        //DEBUG: s.LnNum#1: 14
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Close/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkCloseADT/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Close]);
        refalrts::reinit_svar( context[7], context[14] );
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 # TkOpenCall/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[13] ) )
          continue;
        // closed e.Tail#1 as range 15
        //DEBUG: s.LnNum#1: 14
        //DEBUG: e.Tail#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Open/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkOpenCall/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Open]);
        refalrts::reinit_svar( context[7], context[14] );
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@1/4 (/7 # TkCloseCall/13 s.LnNum#1/14 )/8 e.Tail#1/15 >/1
      context[15] = context[9];
      context[16] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[13] ) )
        continue;
      // closed e.Tail#1 as range 15
      //DEBUG: s.LnNum#1: 14
      //DEBUG: e.Tail#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/14 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Close/4 HalfReuse: s.LnNum1 #14/7 AsIs: # TkCloseCall/13 } )/17 </18 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail#1/15 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Close]);
      refalrts::reinit_svar( context[7], context[14] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[0], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next#1/7 } Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items#0/2 >/1
  // closed e.items#0 as range 2
  //DEBUG: e.items#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & PrepareBracket@0/4 AsIs: e.items#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareBracket_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_DoParsePattern_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & DoParsePattern@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParsePattern@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoParsePattern@1/4 t.new#4/5 (/9 e.new#9/11 )/10 (/17 s.new#5/19 s.new#6/20 e.new#7/15 )/18 e.new#8/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new#9 as range 11
    // closed e.new#8 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    // closed e.new#7 as range 15
    do {
      // </0 & DoParsePattern@1/4 t.new#10/5 (/9 e.new#15/21 )/10 (/17 s.new#12/19 s.new#13/20 s.new#14/27 )/18 e.new#11/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      // closed e.new#15 as range 21
      // closed e.new#11 as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/28 )/10 (/17 # TkChar/19 s.LnNum#1/20 s.Char#1/27 )/18 e.Tail#1/30 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[25];
        context[31] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[19] ) )
          continue;
        // closed e.MultiBrackets#1 as range 28
        // closed e.Tail#1 as range 30
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.Char#1: 27
        //DEBUG: e.MultiBrackets#1: 28
        //DEBUG: e.Tail#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/32 # Char/33 Tile{ AsIs: s.Char#1/27 } )/34 Tile{ AsIs: )/18 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[33], identifiers[ident_Char]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[19], context[34] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/28 )/10 (/17 # TkNumber/19 s.LnNum#1/20 s.Number#1/27 )/18 e.Tail#1/30 >/1
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[19] ) )
        continue;
      // closed e.MultiBrackets#1 as range 28
      // closed e.Tail#1 as range 30
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.Number#1: 27
      //DEBUG: e.MultiBrackets#1: 28
      //DEBUG: e.Tail#1: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/32 # Number/33 Tile{ AsIs: s.Number#1/27 } )/34 Tile{ AsIs: )/18 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Number]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[34] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[19], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/21 )/10 (/17 # TkName/19 s.LnNum#1/20 e.Name#1/23 )/18 e.Tail#1/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[19] ) )
        continue;
      // closed e.MultiBrackets#1 as range 21
      // closed e.Name#1 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBrackets#1: 21
      //DEBUG: e.Name#1: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/21 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/27 # Name/28 Tile{ AsIs: s.LnNum#1/20 } Tile{ AsIs: e.Name#1/23 } )/29 Tile{ AsIs: )/18 AsIs: e.Tail#1/25 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[29] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.new#10/5 (/9 e.new#13/21 )/10 (/17 # TkIdentMarker/19 s.new#12/20 )/18 e.new#11/23 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new#13 as range 21
      // closed e.new#11 as range 23
      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/25 )/10 (/17 # TkIdentMarker/19 s.LnNumMarker#1/20 )/18 (/31 # TkName/33 s.LnNumName#1/34 e.Name#1/29 )/32 e.Tail#1/27 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        context[33] = refalrts::ident_left( identifiers[ident_TkName], context[29], context[30] );
        if( ! context[33] )
          continue;
        // closed e.MultiBrackets#1 as range 25
        // closed e.Tail#1 as range 27
        if( ! refalrts::svar_left( context[34], context[29], context[30] ) )
          continue;
        // closed e.Name#1 as range 29
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNumMarker#1: 20
        //DEBUG: e.MultiBrackets#1: 25
        //DEBUG: e.Tail#1: 27
        //DEBUG: s.LnNumName#1: 34
        //DEBUG: e.Name#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNumMarker#1/20 {REMOVED TILE} {REMOVED TILE} s.LnNumName#1/34 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/25 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } Tile{ HalfReuse: # Symbol/31 Reuse: # Identifier/33 } Tile{ AsIs: e.Name#1/29 } Tile{ AsIs: )/18 } Tile{ AsIs: )/32 AsIs: e.Tail#1/27 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::reinit_ident(context[31], identifiers[ident_Symbol]);
        refalrts::update_ident(context[33], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[32] );
        refalrts::link_brackets( context[19], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/25 )/10 (/17 # TkIdentMarker/19 s.LnNum#1/20 )/18 e.Tail#1/27 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.MultiBrackets#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBrackets#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 } </29 & EL-AddErrorAt/30 Tile{ AsIs: t.ErrorList0#1/5 } Tile{ AsIs: s.LnNum#1/20 HalfReuse: 'M'/18 }"issed name after \'#\'"/31 >/33 Tile{ AsIs: (/9 AsIs: e.MultiBrackets#1/25 AsIs: )/10 AsIs: (/17 HalfReuse: )/19 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[31], context[32], "issed name after \'#\'", 20);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_char(context[18], 'M');
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[19] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[19] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[20], context[18] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBrackets#1/21 )/10 (/17 # TkCompound/19 s.LnNum#1/20 e.Name#1/23 )/18 e.Tail#1/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[19] ) )
        continue;
      // closed e.MultiBrackets#1 as range 21
      // closed e.Name#1 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBrackets#1: 21
      //DEBUG: e.Name#1: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBrackets#1/21 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/27 # Identifier/28 Tile{ AsIs: e.Name#1/23 } )/29 Tile{ AsIs: )/18 AsIs: e.Tail#1/25 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Identifier]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[29] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[19], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.new#10/5 (/9 e.new#15/21 )/10 (/17 # TkVariable/19 s.new#12/20 s.new#13/27 e.new#14/23 )/18 e.new#11/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[19] ) )
        continue;
      // closed e.new#15 as range 21
      // closed e.new#11 as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e.new#14 as range 23
      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/28 )/10 (/17 # TkVariable/19 s.LnNumVar#1/20 s.Mode#1/27 e.Index#1/30 )/18 (/36 # TkRedefinition/38 s.LnNumRedef#1/39 )/37 e.Tail#1/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
        if( ! context[36] )
          continue;
        refalrts::bracket_pointers(context[36], context[37]);
        context[38] = refalrts::ident_left( identifiers[ident_TkRedefinition], context[34], context[35] );
        if( ! context[38] )
          continue;
        // closed e.MultiBracket#1 as range 28
        // closed e.Index#1 as range 30
        // closed e.Tail#1 as range 32
        if( ! refalrts::svar_left( context[39], context[34], context[35] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNumVar#1: 20
        //DEBUG: s.Mode#1: 27
        //DEBUG: e.MultiBracket#1: 28
        //DEBUG: e.Index#1: 30
        //DEBUG: e.Tail#1: 32
        //DEBUG: s.LnNumRedef#1: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumRedef#1/39 )/37 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } Tile{ Reuse: # TkNewVariable/38 } Tile{ AsIs: s.LnNumVar#1/20 AsIs: s.Mode#1/27 AsIs: e.Index#1/30 AsIs: )/18 HalfReuse: )/36 } Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::update_ident(context[38], identifiers[ident_TkNewVariable]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[36] );
        refalrts::link_brackets( context[19], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[20], context[36] );
        res = refalrts::splice_elem( res, context[38] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/28 )/10 (/17 # TkVariable/19 s.LnNum#1/20 s.Mode#1/27 e.Index#1/30 )/18 e.Tail#1/32 >/1
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[25];
      context[33] = context[26];
      // closed e.MultiBracket#1 as range 28
      // closed e.Index#1 as range 30
      // closed e.Tail#1 as range 32
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.Mode#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Index#1: 30
      //DEBUG: e.Tail#1: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # TkVariable/34 Tile{ AsIs: s.LnNum#1/20 AsIs: s.Mode#1/27 AsIs: e.Index#1/30 AsIs: )/18 } )/35 Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[34], identifiers[ident_TkVariable]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[35] );
      refalrts::link_brackets( context[19], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[20], context[18] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/21 )/10 (/17 # TkRedefinition/19 s.LnNum#1/20 )/18 e.Tail#1/23 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.MultiBracket#1 as range 21
      // closed e.Tail#1 as range 23
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBracket#1: 21
      //DEBUG: e.Tail#1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 } </25 & EL-AddErrorAt/26 Tile{ AsIs: t.ErrorList0#1/5 } Tile{ AsIs: s.LnNum#1/20 HalfReuse: 'N'/18 }"aked redefinition sign"/27 >/29 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/21 AsIs: )/10 AsIs: (/17 HalfReuse: )/19 } Tile{ AsIs: e.Tail#1/23 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[27], context[28], "aked redefinition sign", 22);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
      refalrts::reinit_char(context[18], 'N');
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[19] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[9], context[19] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[20], context[18] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern@1/4 t.new#10/5 (/9 e.new#15/21 )/10 (/17 s.new#12/19 s.new#13/20 s.new#14/27 )/18 e.new#11/25 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[13];
    context[26] = context[14];
    // closed e.new#15 as range 21
    // closed e.new#11 as range 25
    if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    do {
      // </0 & DoParsePattern@1/4 t.new#16/5 (/9 e.new#20/28 )/10 (/17 # Open/19 s.new#18/20 s.new#19/27 )/18 e.new#17/30 >/1
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_Open], context[19] ) )
        continue;
      // closed e.new#20 as range 28
      // closed e.new#17 as range 30
      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/32 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenBracket/27 )/18 e.Tail#1/34 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[27] ) )
          continue;
        // closed e.MultiBracket#1 as range 32
        // closed e.Tail#1 as range 34
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.MultiBracket#1: 32
        //DEBUG: e.Tail#1: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParsePattern@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/32 HalfReuse: (/10 HalfReuse: # Brackets/17 HalfReuse: s.LnNum1 #20/19 } # TkCloseBracket/36 Tile{ HalfReuse: )/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[36], identifiers[ident_TkCloseBracket]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
        refalrts::reinit_svar( context[19], context[20] );
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::link_brackets( context[10], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_elem( res, context[36] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.new#21/5 (/9 e.new#24/32 )/10 (/17 # Open/19 s.new#23/20 # TkOpenADT/27 )/18 e.new#22/34 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[27] ) )
          continue;
        // closed e.new#24 as range 32
        // closed e.new#22 as range 34
        do {
          // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNumBracket#1/20 # TkOpenADT/27 )/18 (/42 # TkName/44 s.LnNumName#1/45 e.Name#1/40 )/43 e.Tail#1/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          context[40] = 0;
          context[41] = 0;
          context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          refalrts::bracket_pointers(context[42], context[43]);
          context[44] = refalrts::ident_left( identifiers[ident_TkName], context[40], context[41] );
          if( ! context[44] )
            continue;
          // closed e.MultiBracket#1 as range 36
          // closed e.Tail#1 as range 38
          if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
            continue;
          // closed e.Name#1 as range 40
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNumBracket#1: 20
          //DEBUG: e.MultiBracket#1: 36
          //DEBUG: e.Tail#1: 38
          //DEBUG: s.LnNumName#1: 45
          //DEBUG: e.Name#1: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.LnNumBracket#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: # ADT-Brackets/17 HalfReuse: s.LnNumBracket1 #20/19 } Tile{ Reuse: # TkCloseADT/27 AsIs: )/18 HalfReuse: )/42 HalfReuse: (/44 AsIs: s.LnNumName#1/45 } (/46 Tile{ AsIs: e.Name#1/40 } )/47 Tile{ AsIs: )/43 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[46]);
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[17], identifiers[ident_ADTm_Brackets]);
          refalrts::reinit_svar( context[19], context[20] );
          refalrts::update_ident(context[27], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[42]);
          refalrts::reinit_open_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[44], context[43] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[9], context[42] );
          refalrts::link_brackets( context[10], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_elem( res, context[47] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[27], context[45] );
          refalrts::splice_to_freelist_open( vm, context[19], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenADT/27 )/18 e.Tail#1/38 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        // closed e.MultiBracket#1 as range 36
        // closed e.Tail#1 as range 38
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.MultiBracket#1: 36
        //DEBUG: e.Tail#1: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </40 & DoParsePattern/41 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 }"Expected name after \"[\""/42 >/44 (/45 Tile{ AsIs: e.MultiBracket#1/36 } Tile{ AsIs: (/17 Reuse: # ADT-Brackets/19 AsIs: s.LnNum#1/20 Reuse: # TkCloseADT/27 AsIs: )/18 } Tile{ AsIs: )/10 } (/46 s.LnNum#1/20/47 (/48 # UnnamedADT/49 )/50 )/51 Tile{ AsIs: e.Tail#1/38 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[42], context[43], "Expected name after \"[\"", 23);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_open_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::copy_stvar(vm, context[47], context[20]);
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_ident(vm, context[49], identifiers[ident_UnnamedADT]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::update_ident(context[19], identifiers[ident_ADTm_Brackets]);
        refalrts::update_ident(context[27], identifiers[ident_TkCloseADT]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[40] );
        refalrts::link_brackets( context[46], context[51] );
        refalrts::link_brackets( context[48], context[50] );
        refalrts::link_brackets( context[45], context[10] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[46], context[51] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[42], context[45] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/32 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenCall/27 )/18 e.Tail#1/34 >/1
      context[32] = context[28];
      context[33] = context[29];
      context[34] = context[30];
      context[35] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[27] ) )
        continue;
      // closed e.MultiBracket#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBracket#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 }"Unexpected call bracket in pattern expression"/38 >/40 (/41 Tile{ AsIs: e.MultiBracket#1/32 } Tile{ AsIs: (/17 Reuse: # Brackets/19 AsIs: s.LnNum#1/20 Reuse: # TkCloseCall/27 AsIs: )/18 } Tile{ AsIs: )/10 } (/42 )/43 Tile{ AsIs: e.Tail#1/34 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "Unexpected call bracket in pattern expression", 45);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::update_ident(context[19], identifiers[ident_Brackets]);
      refalrts::update_ident(context[27], identifiers[ident_TkCloseCall]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[41], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern@1/4 t.new#16/5 (/9 e.new#20/28 )/10 (/17 # Close/19 s.new#18/20 s.new#19/27 )/18 e.new#17/30 >/1
    context[28] = context[21];
    context[29] = context[22];
    context[30] = context[25];
    context[31] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_Close], context[19] ) )
      continue;
    // closed e.new#20 as range 28
    // closed e.new#17 as range 30
    do {
      // </0 & DoParsePattern@1/4 t.new#21/5 (/9 e.new#25/32 (/38 s.new#26/40 s.new#27/41 s.new#28/42 e.new#29/36 )/39 )/10 (/17 # Close/19 s.new#23/20 s.new#24/27 )/18 e.new#22/34 >/1
      context[32] = context[28];
      context[33] = context[29];
      context[34] = context[30];
      context[35] = context[31];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[32], context[33] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.new#25 as range 32
      // closed e.new#22 as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[36], context[37] ) )
        continue;
      // closed e.new#29 as range 36
      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 s.BracketsSign#1/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.ClosedLnNum#1/20 s.CloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::repeated_stvar_term( vm, context[27], context[42] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.BracketsSign#1: 40
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.ClosedLnNum#1: 20
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketsSign#1/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ClosedLnNum#1/20 s.CloseBracket#1/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/43 HalfReuse: )/38 } Tile{ HalfReuse: (/39 } Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/17 HalfReuse: s.BracketsSign1 #40/19 } Tile{ AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoParsePattern]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::reinit_open_bracket(context[39]);
        refalrts::reinit_svar( context[19], context[40] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[39], context[18] );
        refalrts::link_brackets( context[17], context[10] );
        refalrts::link_brackets( context[9], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[39] );
        refalrts::splice_to_freelist_open( vm, context[38], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkOpenBracket/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"(\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkOpenBracket/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"(\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkCloseBracket/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \")\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkCloseBracket/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \")\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkOpenCall/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"<\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkOpenCall/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"<\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkCloseCall/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \">\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkCloseCall/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \">\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkOpenADT/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"[\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkOpenADT/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"[\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # TkCloseADT/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"]\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # TkCloseADT/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"]\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # Brackets/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"(\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # Brackets/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"(\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # ADT-Brackets/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"[\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # ADT-Brackets/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"[\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 # CallBrackets/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[34];
        context[48] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[40] ) )
          continue;
        // closed e.MultiBracket#1 as range 43
        // closed e.Scanned#1 as range 45
        // closed e.Tail#1 as range 47
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.InnerLnNum#1: 41
        //DEBUG: s.CloseBracket#1: 42
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OtherCloseBracket#1: 27
        //DEBUG: e.MultiBracket#1: 43
        //DEBUG: e.Scanned#1: 45
        //DEBUG: e.Tail#1: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \"<\""/51 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/43 } )/55 (/56 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: # CallBrackets/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
        refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"<\"", 22);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[51], context[54] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/43 (/38 s.BracketsSign#1/40 s.InnerLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/45 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.OtherCloseBracket#1/27 )/18 e.Tail#1/47 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[36];
      context[46] = context[37];
      context[47] = context[34];
      context[48] = context[35];
      // closed e.MultiBracket#1 as range 43
      // closed e.Scanned#1 as range 45
      // closed e.Tail#1 as range 47
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.BracketsSign#1: 40
      //DEBUG: s.InnerLnNum#1: 41
      //DEBUG: s.CloseBracket#1: 42
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.OtherCloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 43
      //DEBUG: e.Scanned#1: 45
      //DEBUG: e.Tail#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </49 & DoParsePattern/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #41/9 }"Unbalanced bracket \""/51 </53 & StrFromBracket*9/54 s.BracketsSign#1/40/55 >/56 '\"'/57 >/58 (/59 Tile{ AsIs: e.MultiBracket#1/43 } )/60 (/61 Tile{ AsIs: e.Scanned#1/45 } Tile{ AsIs: (/38 AsIs: s.BracketsSign#1/40 } Tile{ AsIs: )/39 AsIs: )/10 AsIs: (/17 AsIs: # Close/19 AsIs: s.LnNum#1/20 AsIs: s.OtherCloseBracket#1/27 AsIs: )/18 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[51], context[52], "Unbalanced bracket \"", 20);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::copy_stvar(vm, context[55], context[40]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_char(vm, context[57], '\"');
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_close_bracket(vm, context[60]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[41] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[61], context[10] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[59], context[60] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[53] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[39];
      res = refalrts::splice_evar( res, context[38], context[40] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[51], context[59] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern@1/4 t.new#21/5 (/9 )/10 (/17 # Close/19 s.new#23/20 s.new#24/27 )/18 e.new#22/32 >/1
    context[32] = context[30];
    context[33] = context[31];
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    // closed e.new#22 as range 32
    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenBracket/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"(\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"(\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseBracket/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \")\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \")\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenCall/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"<\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"<\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseCall/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \">\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \">\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenADT/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"[\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"[\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseADT/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"]\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"]\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # Brackets/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"(\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"(\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # ADT-Brackets/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"[\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"[\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # CallBrackets/27 )/18 e.Tail#1/34 >/1
      context[34] = context[32];
      context[35] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[27] ) )
        continue;
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"<\""/38 >/40 (/41 )/42 Tile{ HalfReuse: (/27 AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"<\"", 19);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[27], context[18] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 s.CloseBracket#1/27 )/18 e.Tail#1/34 >/1
    context[34] = context[32];
    context[35] = context[33];
    // closed e.Tail#1 as range 34
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: s.LnNum#1: 20
    //DEBUG: s.CloseBracket#1: 27
    //DEBUG: e.Tail#1: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & DoParsePattern/37 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \""/38 </40 & StrFromBracket*9/41 Tile{ AsIs: s.CloseBracket#1/27 } >/42 '\"'/43 >/44 (/45 )/46 (/47 Tile{ AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_DoParsePattern]);
    refalrts::alloc_chars(vm, context[38], context[39], "alanced bracket \"", 17);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_char(vm, context[43], '\"');
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[20] );
    refalrts::reinit_char(context[10], 'U');
    refalrts::reinit_char(context[17], 'n');
    refalrts::reinit_char(context[19], 'b');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[47], context[18] );
    refalrts::link_brackets( context[45], context[46] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[40] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[42], context[47] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_evar( res, context[0], context[19] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParsePattern@1/4 t.new#4/5 (/9 e.new#6/11 (/17 s.new#7/19 s.new#8/20 s.new#9/21 e.new#10/15 )/18 )/10 e.new#5/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new#6 as range 11
    // closed e.new#5 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[15], context[16] ) )
      continue;
    // closed e.new#10 as range 15
    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenBracket/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"(\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenBracket/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseBracket/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \")\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseBracket/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenCall/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"<\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenCall/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseCall/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \">\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseCall/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenADT/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"[\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenADT/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseADT/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"]\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseADT/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # Brackets/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"(\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # Brackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # ADT-Brackets/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"[\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # ADT-Brackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # CallBrackets/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.InnerLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \"<\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # CallBrackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 s.BracketsSign#1/19 s.InnerLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[15];
    context[25] = context[16];
    context[26] = context[13];
    context[27] = context[14];
    // closed e.MultiBracket#1 as range 22
    // closed e.Scanned#1 as range 24
    // closed e.Tail#1 as range 26
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: s.BracketsSign#1: 19
    //DEBUG: s.InnerLnNum#1: 20
    //DEBUG: s.CloseBracket#1: 21
    //DEBUG: e.MultiBracket#1: 22
    //DEBUG: e.Scanned#1: 24
    //DEBUG: e.Tail#1: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </28 & DoParsePattern/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.InnerLnNum1 #20/9 }"Unbalanced bracket \""/30 </32 & StrFromBracket*9/33 s.BracketsSign#1/19/34 >/35 '\"'/36 >/37 (/38 Tile{ AsIs: e.MultiBracket#1/22 } )/39 (/40 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: s.BracketsSign#1/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_DoParsePattern]);
    refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[34], context[19]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_char(vm, context[36], '\"');
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[20] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[40], context[10] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[30], context[38] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 )/10 e.Tail#1/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.Tail#1 as range 11
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParsePattern@1/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: )/10 } Tile{ AsIs: e.Tail#1/11 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParsePattern@1/4 t.ErrorList0#1/5 (/9 e.dyn#0/7 )/10 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.dyn#2 as range 2
  //DEBUG: t.ErrorList0#1: 5
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParsePattern@0/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 } (/11 )/12 Tile{ AsIs: e.dyn#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParsePattern_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParsePattern_Z1("DoParsePattern@1", COOKIE1_, COOKIE2_, func_gen_DoParsePattern_Z1);


static refalrts::FnResult func_gen_ParseSentencePart_A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & ParseSentencePart=3@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSentencePart=3@1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ParseSentencePart=3@1/4 (/7 e.Pattern0#2/9 )/8 t.ErrorList#4/13 (/17 e.Result#4/15 )/18 (/21 e.Blocks#4/19 )/22 e.Tokens#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Pattern0#2 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[11], context[12] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Result#4 as range 15
    // closed e.Blocks#4 as range 19
    // closed e.Tokens#4 as range 11
    //DEBUG: e.Pattern0#2: 9
    //DEBUG: t.ErrorList#4: 13
    //DEBUG: e.Result#4: 15
    //DEBUG: e.Blocks#4: 19
    //DEBUG: e.Tokens#4: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern0#2/9 AsIs: )/8 } Tile{ HalfReuse: # Assign/1 } Tile{ AsIs: (/17 AsIs: e.Result#4/15 AsIs: )/18 AsIs: (/21 AsIs: e.Blocks#4/19 AsIs: )/22 } Tile{ HalfReuse: )/0 } Tile{ AsIs: t.ErrorList#4/13 } Tile{ AsIs: e.Tokens#4/11 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[1], identifiers[ident_Assign]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::link_brackets( context[4], context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSentencePart=3@1/4 (/7 e.Pattern0#2/5 )/8 e.dyn#0/2 >/1
  // closed e.Pattern0#2 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Pattern0#2: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=3@0/4 AsIs: (/7 AsIs: e.Pattern0#2/5 AsIs: )/8 } # Assign/9 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Assign]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentencePart_A3Z1("ParseSentencePart=3@1", COOKIE1_, COOKIE2_, func_gen_ParseSentencePart_A3Z1);


static refalrts::FnResult func_gen_ParseSentencePart_A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & ParseSentencePart=3@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseSentencePart=3@2/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ParseSentencePart=3@2/4 (/7 e.Pattern0#2/9 )/8 t.ErrorList#4/13 (/17 e.Result#4/15 )/18 (/21 e.Blocks#4/19 )/22 e.Tokens#4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Pattern0#2 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[11], context[12] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Result#4 as range 15
    // closed e.Blocks#4 as range 19
    // closed e.Tokens#4 as range 11
    //DEBUG: e.Pattern0#2: 9
    //DEBUG: t.ErrorList#4: 13
    //DEBUG: e.Result#4: 15
    //DEBUG: e.Blocks#4: 19
    //DEBUG: e.Tokens#4: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern0#2/9 AsIs: )/8 } Tile{ HalfReuse: # Condition/1 } Tile{ AsIs: (/17 AsIs: e.Result#4/15 AsIs: )/18 AsIs: (/21 AsIs: e.Blocks#4/19 AsIs: )/22 } Tile{ HalfReuse: )/0 } Tile{ AsIs: t.ErrorList#4/13 } Tile{ AsIs: e.Tokens#4/11 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[1], identifiers[ident_Condition]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::link_brackets( context[4], context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseSentencePart=3@2/4 (/7 e.Pattern0#2/5 )/8 e.dyn#0/2 >/1
  // closed e.Pattern0#2 as range 5
  // closed e.dyn#0 as range 2
  //DEBUG: e.Pattern0#2: 5
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseSentencePart=3@0/4 AsIs: (/7 AsIs: e.Pattern0#2/5 AsIs: )/8 } # Condition/9 Tile{ AsIs: e.dyn#0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Condition]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseSentencePart_A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseSentencePart_A3Z2("ParseSentencePart=3@2", COOKIE1_, COOKIE2_, func_gen_ParseSentencePart_A3Z2);


static refalrts::FnResult func_gen_DoParseResult_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & DoParseResult@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@1/4 t.new#1/5 (/9 e.new#2/7 )/10 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 2
  do {
    // </0 & DoParseResult@1/4 t.new#4/5 (/9 e.new#9/11 )/10 (/17 s.new#5/19 s.new#6/20 e.new#7/15 )/18 e.new#8/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new#9 as range 11
    // closed e.new#8 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    // closed e.new#7 as range 15
    do {
      // </0 & DoParseResult@1/4 t.new#10/5 (/9 e.new#15/21 )/10 (/17 s.new#12/19 s.new#13/20 s.new#14/27 )/18 e.new#11/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      // closed e.new#15 as range 21
      // closed e.new#11 as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/28 )/10 (/17 # TkChar/19 s.LnNum#1/20 s.Char#1/27 )/18 e.Tail#1/30 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[25];
        context[31] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[19] ) )
          continue;
        // closed e.MultiBracket#1 as range 28
        // closed e.Tail#1 as range 30
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.Char#1: 27
        //DEBUG: e.MultiBracket#1: 28
        //DEBUG: e.Tail#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/32 # Char/33 Tile{ AsIs: s.Char#1/27 } )/34 Tile{ AsIs: )/18 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[33], identifiers[ident_Char]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[19], context[34] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/28 )/10 (/17 # TkNumber/19 s.LnNum#1/20 s.Number#1/27 )/18 e.Tail#1/30 >/1
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Tail#1 as range 30
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.Number#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Tail#1: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/32 # Number/33 Tile{ AsIs: s.Number#1/27 } )/34 Tile{ AsIs: )/18 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Number]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[34] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[19], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/21 )/10 (/17 # TkName/19 s.LnNum#1/20 e.Name#1/23 )/18 e.Tail#1/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 21
      // closed e.Name#1 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBracket#1: 21
      //DEBUG: e.Name#1: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/21 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/27 # Name/28 Tile{ AsIs: s.LnNum#1/20 } Tile{ AsIs: e.Name#1/23 } )/29 Tile{ AsIs: )/18 AsIs: e.Tail#1/25 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[29] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.new#10/5 (/9 e.new#13/21 )/10 (/17 # TkIdentMarker/19 s.new#12/20 )/18 e.new#11/23 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new#13 as range 21
      // closed e.new#11 as range 23
      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/25 )/10 (/17 # TkIdentMarker/19 s.MarkerLnNum#1/20 )/18 (/31 # TkName/33 s.NameLnNum#1/34 e.Name#1/29 )/32 e.Tail#1/27 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        context[33] = refalrts::ident_left( identifiers[ident_TkName], context[29], context[30] );
        if( ! context[33] )
          continue;
        // closed e.MultiBracket#1 as range 25
        // closed e.Tail#1 as range 27
        if( ! refalrts::svar_left( context[34], context[29], context[30] ) )
          continue;
        // closed e.Name#1 as range 29
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.MarkerLnNum#1: 20
        //DEBUG: e.MultiBracket#1: 25
        //DEBUG: e.Tail#1: 27
        //DEBUG: s.NameLnNum#1: 34
        //DEBUG: e.Name#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.MarkerLnNum#1/20 {REMOVED TILE} {REMOVED TILE} s.NameLnNum#1/34 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/25 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } Tile{ HalfReuse: # Symbol/31 Reuse: # Identifier/33 } Tile{ AsIs: e.Name#1/29 } Tile{ AsIs: )/18 } Tile{ AsIs: )/32 AsIs: e.Tail#1/27 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::reinit_ident(context[31], identifiers[ident_Symbol]);
        refalrts::update_ident(context[33], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[32] );
        refalrts::link_brackets( context[19], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/25 )/10 (/17 # TkIdentMarker/19 s.LnNum#1/20 )/18 e.Tail#1/27 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.MultiBracket#1 as range 25
      // closed e.Tail#1 as range 27
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBracket#1: 25
      //DEBUG: e.Tail#1: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </29 & EL-AddErrorAt/30 Tile{ AsIs: t.ErrorList0#1/5 } Tile{ AsIs: s.LnNum#1/20 HalfReuse: 'M'/18 }"issed name after \"#\""/31 >/33 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/25 AsIs: )/10 AsIs: (/17 HalfReuse: )/19 } Tile{ AsIs: e.Tail#1/27 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[31], context[32], "issed name after \"#\"", 20);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_char(context[18], 'M');
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[19] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[19] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[20], context[18] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/21 )/10 (/17 # TkCompound/19 s.LnNum#1/20 e.Name#1/23 )/18 e.Tail#1/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 21
      // closed e.Name#1 as range 23
      // closed e.Tail#1 as range 25
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: e.MultiBracket#1: 21
      //DEBUG: e.Name#1: 23
      //DEBUG: e.Tail#1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/21 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # Symbol/27 # Identifier/28 Tile{ AsIs: e.Name#1/23 } )/29 Tile{ AsIs: )/18 AsIs: e.Tail#1/25 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Identifier]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[29] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[19], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.new#10/5 (/9 e.new#16/21 )/10 (/17 s.new#12/19 s.new#13/20 s.new#14/27 e.new#15/23 )/18 e.new#11/25 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[13];
      context[26] = context[14];
      // closed e.new#16 as range 21
      // closed e.new#11 as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e.new#15 as range 23
      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/28 )/10 (/17 # TkVariable/19 s.LnNum#1/20 s.Mode#1/27 e.Index#1/30 )/18 e.Tail#1/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[19] ) )
          continue;
        // closed e.MultiBracket#1 as range 28
        // closed e.Index#1 as range 30
        // closed e.Tail#1 as range 32
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.Mode#1: 27
        //DEBUG: e.MultiBracket#1: 28
        //DEBUG: e.Index#1: 30
        //DEBUG: e.Tail#1: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: (/17 HalfReuse: (/19 } # TkVariable/34 Tile{ AsIs: s.LnNum#1/20 AsIs: s.Mode#1/27 AsIs: e.Index#1/30 AsIs: )/18 } )/35 Tile{ AsIs: e.Tail#1/32 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[34], identifiers[ident_TkVariable]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_open_bracket(context[19]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[35] );
        refalrts::link_brackets( context[19], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[20], context[18] );
        res = refalrts::splice_elem( res, context[34] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@1/4 t.new#17/5 (/9 e.new#22/28 )/10 (/17 s.new#19/19 s.new#20/20 s.new#21/27 )/18 e.new#18/30 >/1
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new#22 as range 28
      // closed e.new#18 as range 30
      do {
        // </0 & DoParseResult@1/4 t.new#23/5 (/9 e.new#27/32 )/10 (/17 # Open/19 s.new#25/20 s.new#26/27 )/18 e.new#24/34 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[19] ) )
          continue;
        // closed e.new#27 as range 32
        // closed e.new#24 as range 34
        do {
          // </0 & DoParseResult@1/4 t.new#28/5 (/9 e.new#31/36 )/10 (/17 # Open/19 s.new#30/20 # TkOpenADT/27 )/18 e.new#29/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[27] ) )
            continue;
          // closed e.new#31 as range 36
          // closed e.new#29 as range 38
          do {
            // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/40 )/10 (/17 # Open/19 s.LnNumADT#1/20 # TkOpenADT/27 )/18 (/46 # TkName/48 s.LnNumName#1/49 e.Name#1/44 )/47 e.Tail#1/42 >/1
            context[40] = context[36];
            context[41] = context[37];
            context[42] = context[38];
            context[43] = context[39];
            context[44] = 0;
            context[45] = 0;
            context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
            if( ! context[46] )
              continue;
            refalrts::bracket_pointers(context[46], context[47]);
            context[48] = refalrts::ident_left( identifiers[ident_TkName], context[44], context[45] );
            if( ! context[48] )
              continue;
            // closed e.MultiBracket#1 as range 40
            // closed e.Tail#1 as range 42
            if( ! refalrts::svar_left( context[49], context[44], context[45] ) )
              continue;
            // closed e.Name#1 as range 44
            //DEBUG: t.ErrorList0#1: 5
            //DEBUG: s.LnNumADT#1: 20
            //DEBUG: e.MultiBracket#1: 40
            //DEBUG: e.Tail#1: 42
            //DEBUG: s.LnNumName#1: 49
            //DEBUG: e.Name#1: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.LnNumADT#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/40 HalfReuse: (/10 HalfReuse: # ADT-Brackets/17 HalfReuse: s.LnNumADT1 #20/19 } Tile{ Reuse: # TkCloseADT/27 AsIs: )/18 HalfReuse: )/46 HalfReuse: (/48 AsIs: s.LnNumName#1/49 } (/50 Tile{ AsIs: e.Name#1/44 } )/51 Tile{ AsIs: )/47 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[50]);
            refalrts::alloc_close_bracket(vm, context[51]);
            refalrts::update_name(context[4], functions[efunc_DoParseResult]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::reinit_ident(context[17], identifiers[ident_ADTm_Brackets]);
            refalrts::reinit_svar( context[19], context[20] );
            refalrts::update_ident(context[27], identifiers[ident_TkCloseADT]);
            refalrts::reinit_close_bracket(context[46]);
            refalrts::reinit_open_bracket(context[48]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[48], context[47] );
            refalrts::link_brackets( context[50], context[51] );
            refalrts::link_brackets( context[9], context[46] );
            refalrts::link_brackets( context[10], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[47];
            res = refalrts::splice_elem( res, context[51] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_elem( res, context[50] );
            res = refalrts::splice_evar( res, context[27], context[49] );
            refalrts::splice_to_freelist_open( vm, context[19], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/40 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenADT/27 )/18 e.Tail#1/42 >/1
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          context[43] = context[39];
          // closed e.MultiBracket#1 as range 40
          // closed e.Tail#1 as range 42
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: e.MultiBracket#1: 40
          //DEBUG: e.Tail#1: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 }"Expected name after \"[\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/40 } Tile{ AsIs: (/17 Reuse: # ADT-Brackets/19 AsIs: s.LnNum#1/20 Reuse: # TkCloseADT/27 AsIs: )/18 } Tile{ AsIs: )/10 } (/50 s.LnNum#1/20/51 (/52 # UnnamedADT/53 )/54 )/55 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[44]);
          refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[46], context[47], "Expected name after \"[\"", 23);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::alloc_open_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::copy_stvar(vm, context[51], context[20]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_ident(vm, context[53], identifiers[ident_UnnamedADT]);
          refalrts::alloc_close_bracket(vm, context[54]);
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[20] );
          refalrts::update_ident(context[19], identifiers[ident_ADTm_Brackets]);
          refalrts::update_ident(context[27], identifiers[ident_TkCloseADT]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::link_brackets( context[50], context[55] );
          refalrts::link_brackets( context[52], context[54] );
          refalrts::link_brackets( context[49], context[10] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[50], context[55] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_evar( res, context[17], context[18] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[46], context[49] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenBracket/27 )/18 e.Tail#1/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[27] ) )
            continue;
          // closed e.MultiBracket#1 as range 36
          // closed e.Tail#1 as range 38
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: e.MultiBracket#1: 36
          //DEBUG: e.Tail#1: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: # Brackets/17 HalfReuse: s.LnNum1 #20/19 } # TkCloseBracket/40 Tile{ HalfReuse: )/27 AsIs: )/18 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[40], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
          refalrts::reinit_svar( context[19], context[20] );
          refalrts::reinit_close_bracket(context[27]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[18] );
          refalrts::link_brackets( context[10], context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[40] );
          refalrts::splice_to_freelist_open( vm, context[19], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenCall/27 )/18 e.Tail#1/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[27] ) )
            continue;
          // closed e.MultiBracket#1 as range 36
          // closed e.Tail#1 as range 38
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: e.MultiBracket#1: 36
          //DEBUG: e.Tail#1: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: # CallBrackets/17 HalfReuse: s.LnNum1 #20/19 } # TkCloseCall/40 Tile{ HalfReuse: )/27 AsIs: )/18 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[40], identifiers[ident_TkCloseCall]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[17], identifiers[ident_CallBrackets]);
          refalrts::reinit_svar( context[19], context[20] );
          refalrts::reinit_close_bracket(context[27]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[18] );
          refalrts::link_brackets( context[10], context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[40] );
          refalrts::splice_to_freelist_open( vm, context[19], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenBracket/27 )/18 e.Tail#1/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[27] ) )
            continue;
          // closed e.MultiBracket#1 as range 36
          // closed e.Tail#1 as range 38
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: e.MultiBracket#1: 36
          //DEBUG: e.Tail#1: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: </17 HalfReuse: & DoParseResult$10\1*2/19 } # TkOpenBracket/40 >/41 Tile{ AsIs: s.LnNum#1/20 } # TkCloseBracket/42 Tile{ HalfReuse: )/27 AsIs: )/18 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[40], identifiers[ident_TkOpenBracket]);
          refalrts::alloc_close_call(vm, context[41]);
          refalrts::alloc_ident(vm, context[42], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[19], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::reinit_close_bracket(context[27]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[18] );
          refalrts::link_brackets( context[10], context[27] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 # TkOpenCall/27 )/18 e.Tail#1/38 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[27] ) )
            continue;
          // closed e.MultiBracket#1 as range 36
          // closed e.Tail#1 as range 38
          //DEBUG: t.ErrorList0#1: 5
          //DEBUG: s.LnNum#1: 20
          //DEBUG: e.MultiBracket#1: 36
          //DEBUG: e.Tail#1: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: </17 HalfReuse: & DoParseResult$10\1*2/19 } # TkOpenCall/40 >/41 Tile{ AsIs: s.LnNum#1/20 } # TkCloseCall/42 Tile{ HalfReuse: )/27 AsIs: )/18 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[40], identifiers[ident_TkOpenCall]);
          refalrts::alloc_close_call(vm, context[41]);
          refalrts::alloc_ident(vm, context[42], identifiers[ident_TkCloseCall]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[19], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::reinit_close_bracket(context[27]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[18] );
          refalrts::link_brackets( context[10], context[27] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/36 )/10 (/17 # Open/19 s.LnNum#1/20 s.OpenBracket#1/27 )/18 e.Tail#1/38 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        // closed e.MultiBracket#1 as range 36
        // closed e.Tail#1 as range 38
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: s.OpenBracket#1: 27
        //DEBUG: e.MultiBracket#1: 36
        //DEBUG: e.Tail#1: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@1/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/36 HalfReuse: (/10 HalfReuse: </17 HalfReuse: & DoParseResult$10\1*2/19 } s.OpenBracket#1/27/40 >/41 Tile{ AsIs: s.LnNum#1/20 } </42 & DoParseResult$10\2*2/43 Tile{ AsIs: s.OpenBracket#1/27 } >/44 )/45 Tile{ AsIs: )/18 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[40], context[27]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[19], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::link_brackets( context[10], context[45] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/32 (/38 s.BracketsSign#1/40 s.OpenLnNum#1/41 s.CloseBracket#1/42 e.Scanned#1/36 )/39 )/10 (/17 # Close/19 s.LnNum#1/20 s.CloseBracket#1/27 )/18 e.Tail#1/34 >/1
      context[32] = context[28];
      context[33] = context[29];
      context[34] = context[30];
      context[35] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[19] ) )
        continue;
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[32], context[33] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.MultiBracket#1 as range 32
      // closed e.Tail#1 as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[42], context[27], context[36], context[37] ) )
        continue;
      // closed e.Scanned#1 as range 36
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.CloseBracket#1: 27
      //DEBUG: e.MultiBracket#1: 32
      //DEBUG: e.Tail#1: 34
      //DEBUG: s.BracketsSign#1: 40
      //DEBUG: s.OpenLnNum#1: 41
      //DEBUG: e.Scanned#1: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/40 s.OpenLnNum#1/41 s.CloseBracket#1/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 s.CloseBracket#1/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.MultiBracket#1/32 HalfReuse: )/38 } Tile{ HalfReuse: (/39 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/17 HalfReuse: s.BracketsSign1 #40/19 } Tile{ AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_svar( context[19], context[40] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[39], context[18] );
      refalrts::link_brackets( context[17], context[10] );
      refalrts::link_brackets( context[9], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::splice_to_freelist_open( vm, context[38], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/21 )/10 (/17 # TkOpenBlock/19 s.LnNum#1/20 )/18 e.Tail#1/23 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.MultiBracket#1 as range 21
    // closed e.Tail#1 as range 23
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: s.LnNum#1: 20
    //DEBUG: e.MultiBracket#1: 21
    //DEBUG: e.Tail#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@2/4 } Tile{ AsIs: (/17 HalfReuse: </19 } Tile{ HalfReuse: & ParseBlock/9 } Tile{ AsIs: t.ErrorList0#1/5 } Tile{ AsIs: e.Tail#1/23 } Tile{ HalfReuse: >/10 } Tile{ AsIs: )/18 } Tile{ AsIs: e.MultiBracket#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[9], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[19] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@1/4 t.new#4/5 (/9 e.new#6/11 (/17 s.new#7/19 s.new#8/20 s.new#9/21 e.new#10/15 )/18 )/10 e.new#5/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new#6 as range 11
    // closed e.new#5 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[15], context[16] ) )
      continue;
    // closed e.new#10 as range 15
    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenBracket/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"(\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenBracket/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseBracket/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \")\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseBracket/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenCall/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"<\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenCall/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseCall/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \">\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseCall/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkOpenADT/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"[\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkOpenADT/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # TkCloseADT/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"]\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # TkCloseADT/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # Brackets/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"(\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # Brackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # ADT-Brackets/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"[\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # ADT-Brackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 # CallBrackets/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
      context[22] = context[11];
      context[23] = context[12];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[13];
      context[27] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
        continue;
      // closed e.MultiBracket#1 as range 22
      // closed e.Scanned#1 as range 24
      // closed e.Tail#1 as range 26
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.OpenLnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.MultiBracket#1: 22
      //DEBUG: e.Scanned#1: 24
      //DEBUG: e.Tail#1: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \"<\""/30 >/32 (/33 Tile{ AsIs: e.MultiBracket#1/22 } )/34 (/35 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: # CallBrackets/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[35], context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.MultiBracket#1/22 (/17 s.BracketsSign#1/19 s.OpenLnNum#1/20 s.CloseBracket#1/21 e.Scanned#1/24 )/18 )/10 e.Tail#1/26 >/1
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[15];
    context[25] = context[16];
    context[26] = context[13];
    context[27] = context[14];
    // closed e.MultiBracket#1 as range 22
    // closed e.Scanned#1 as range 24
    // closed e.Tail#1 as range 26
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: s.BracketsSign#1: 19
    //DEBUG: s.OpenLnNum#1: 20
    //DEBUG: s.CloseBracket#1: 21
    //DEBUG: e.MultiBracket#1: 22
    //DEBUG: e.Scanned#1: 24
    //DEBUG: e.Tail#1: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/20 s.CloseBracket#1/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </28 & DoParseResult/29 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.OpenLnNum1 #20/9 }"Unbalanced bracket \""/30 </32 & StrFromBracket*9/33 s.BracketsSign#1/19/34 >/35 '\"'/36 >/37 (/38 Tile{ AsIs: e.MultiBracket#1/22 } )/39 (/40 Tile{ AsIs: e.Scanned#1/24 } Tile{ AsIs: (/17 AsIs: s.BracketsSign#1/19 } Tile{ AsIs: )/18 AsIs: )/10 AsIs: e.Tail#1/26 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[30], context[31], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[34], context[19]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_char(vm, context[36], '\"');
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[20] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[40], context[10] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[30], context[38] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@1/4 t.new#4/5 (/9 )/10 e.new#5/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#5 as range 11
    do {
      // </0 & DoParseResult@1/4 t.new#6/5 (/9 )/10 (/17 # Close/19 s.new#7/20 s.new#8/21 )/18 e.new#9/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = refalrts::ident_left( identifiers[ident_Close], context[15], context[16] );
      if( ! context[19] )
        continue;
      // closed e.new#9 as range 13
      if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
        continue;
      if( ! refalrts::svar_left( context[21], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenBracket/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"(\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseBracket/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \")\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \")\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenCall/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"<\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseCall/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \">\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \">\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkOpenADT/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"[\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # TkCloseADT/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"]\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"]\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # Brackets/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"(\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # ADT-Brackets/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"[\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 # CallBrackets/21 )/18 e.Tail#1/22 >/1
        context[22] = context[13];
        context[23] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
          continue;
        // closed e.Tail#1 as range 22
        //DEBUG: t.ErrorList0#1: 5
        //DEBUG: s.LnNum#1: 20
        //DEBUG: e.Tail#1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \"<\""/26 >/28 (/29 )/30 Tile{ HalfReuse: (/21 AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[20] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_char(context[17], 'n');
        refalrts::reinit_char(context[19], 'b');
        refalrts::reinit_open_bracket(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[21], context[18] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 (/17 # Close/19 s.LnNum#1/20 s.CloseBracket#1/21 )/18 e.Tail#1/22 >/1
      context[22] = context[13];
      context[23] = context[14];
      // closed e.Tail#1 as range 22
      //DEBUG: t.ErrorList0#1: 5
      //DEBUG: s.LnNum#1: 20
      //DEBUG: s.CloseBracket#1: 21
      //DEBUG: e.Tail#1: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.LnNum#1/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </24 & DoParseResult/25 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0#1/5 HalfReuse: s.LnNum1 #20/9 HalfReuse: 'U'/10 HalfReuse: 'n'/17 HalfReuse: 'b'/19 }"alanced bracket \""/26 </28 & StrFromBracket*9/29 Tile{ AsIs: s.CloseBracket#1/21 } >/30 '\"'/31 >/32 (/33 )/34 (/35 Tile{ AsIs: )/18 AsIs: e.Tail#1/22 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[26], context[27], "alanced bracket \"", 17);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_char(vm, context[31], '\"');
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[20] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[17], 'n');
      refalrts::reinit_char(context[19], 'b');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[35], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[35] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[26], context[29] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 )/10 e.Tail#1/13 >/1
    context[13] = context[11];
    context[14] = context[12];
    // closed e.Tail#1 as range 13
    //DEBUG: t.ErrorList0#1: 5
    //DEBUG: e.Tail#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@1/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: )/10 } Tile{ AsIs: e.Tail#1/13 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@1/4 t.ErrorList0#1/5 (/9 e.dyn#0/7 )/10 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.dyn#2 as range 2
  //DEBUG: t.ErrorList0#1: 5
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.ErrorList0#1/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 } (/11 )/12 Tile{ AsIs: e.dyn#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z1("DoParseResult@1", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z1);


static refalrts::FnResult func_gen_DoParseResult_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 87 elems
  refalrts::Iter context[87];
  refalrts::zeros( context, 87 );
  // </0 & DoParseResult@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@2/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 (/17 e.new#4/15 )/18 e.new#5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 15
  // closed e.new#5 as range 2
  do {
    // </0 & DoParseResult@2/4 t.new#6/5 (/9 e.new#11/19 )/10 (/13 e.new#12/21 )/14 (/17 e.new#13/23 )/18 (/29 s.new#7/31 s.new#8/32 e.new#9/27 )/30 e.new#10/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new#11 as range 19
    // closed e.new#12 as range 21
    // closed e.new#13 as range 23
    // closed e.new#10 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    // closed e.new#9 as range 27
    do {
      // </0 & DoParseResult@2/4 t.new#14/5 (/9 e.new#19/33 )/10 (/13 e.new#20/35 )/14 (/17 e.new#21/37 )/18 (/29 s.new#16/31 s.new#17/32 s.new#18/43 )/30 e.new#15/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#19 as range 33
      // closed e.new#20 as range 35
      // closed e.new#21 as range 37
      // closed e.new#15 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.Scanned0#1/46 )/14 (/17 e.Block#2/48 )/18 (/29 # TkChar/31 s.LnNum#1/32 s.Char#1/43 )/30 e.Tail#1/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[31] ) )
          continue;
        // closed e.MultiBracket#1 as range 44
        // closed e.Scanned0#1 as range 46
        // closed e.Block#2 as range 48
        // closed e.Tail#1 as range 50
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.Char#1: 43
        //DEBUG: e.MultiBracket#1: 44
        //DEBUG: e.Scanned0#1: 46
        //DEBUG: e.Block#2: 48
        //DEBUG: e.Tail#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/46 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/48 AsIs: )/18 HalfReuse: )/29 Reuse: # Symbol/31 } (/52 # Char/53 Tile{ AsIs: s.Char#1/43 AsIs: )/30 AsIs: e.Tail#1/50 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[52]);
        refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::update_ident(context[31], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[52], context[30] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[43];
        res = refalrts::splice_evar( res, context[52], context[53] );
        refalrts::splice_to_freelist_open( vm, context[31], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.Scanned0#1/46 )/14 (/17 e.Block#2/48 )/18 (/29 # TkNumber/31 s.LnNum#1/32 s.Number#1/43 )/30 e.Tail#1/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 44
      // closed e.Scanned0#1 as range 46
      // closed e.Block#2 as range 48
      // closed e.Tail#1 as range 50
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: s.Number#1: 43
      //DEBUG: e.MultiBracket#1: 44
      //DEBUG: e.Scanned0#1: 46
      //DEBUG: e.Block#2: 48
      //DEBUG: e.Tail#1: 50

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/46 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/48 AsIs: )/18 HalfReuse: )/29 Reuse: # Symbol/31 } (/52 # Number/53 Tile{ AsIs: s.Number#1/43 AsIs: )/30 AsIs: e.Tail#1/50 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_ident(vm, context[53], identifiers[ident_Number]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::update_ident(context[31], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[52], context[30] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[52], context[53] );
      refalrts::splice_to_freelist_open( vm, context[31], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.Scanned0#1/35 )/14 (/17 e.Block#2/37 )/18 (/29 # TkName/31 s.LnNum#1/32 e.Name#1/39 )/30 e.Tail#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 33
      // closed e.Scanned0#1 as range 35
      // closed e.Block#2 as range 37
      // closed e.Name#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 33
      //DEBUG: e.Scanned0#1: 35
      //DEBUG: e.Block#2: 37
      //DEBUG: e.Name#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/35 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/37 AsIs: )/18 HalfReuse: )/29 Reuse: # Symbol/31 } (/43 # Name/44 Tile{ AsIs: s.LnNum#1/32 AsIs: e.Name#1/39 AsIs: )/30 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Name]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::update_ident(context[31], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[43], context[30] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[32];
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.new#14/5 (/9 e.new#17/33 )/10 (/13 e.new#18/35 )/14 (/17 e.new#19/37 )/18 (/29 # TkIdentMarker/31 s.new#16/32 )/30 e.new#15/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new#17 as range 33
      // closed e.new#18 as range 35
      // closed e.new#19 as range 37
      // closed e.new#15 as range 39
      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/41 )/10 (/13 e.Scanned0#1/43 )/14 (/17 e.Block#2/45 )/18 (/29 # TkIdentMarker/31 s.MarkerLnNum#1/32 )/30 (/51 # TkName/53 s.NameLnNum#1/54 e.Name#1/49 )/52 e.Tail#1/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = 0;
        context[50] = 0;
        context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
        if( ! context[51] )
          continue;
        refalrts::bracket_pointers(context[51], context[52]);
        context[53] = refalrts::ident_left( identifiers[ident_TkName], context[49], context[50] );
        if( ! context[53] )
          continue;
        // closed e.MultiBracket#1 as range 41
        // closed e.Scanned0#1 as range 43
        // closed e.Block#2 as range 45
        // closed e.Tail#1 as range 47
        if( ! refalrts::svar_left( context[54], context[49], context[50] ) )
          continue;
        // closed e.Name#1 as range 49
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.MarkerLnNum#1: 32
        //DEBUG: e.MultiBracket#1: 41
        //DEBUG: e.Scanned0#1: 43
        //DEBUG: e.Block#2: 45
        //DEBUG: e.Tail#1: 47
        //DEBUG: s.NameLnNum#1: 54
        //DEBUG: e.Name#1: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.MarkerLnNum#1/32 )/30 {REMOVED TILE} s.NameLnNum#1/54 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/41 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/43 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/45 AsIs: )/18 HalfReuse: )/29 Reuse: # Symbol/31 } Tile{ AsIs: (/51 Reuse: # Identifier/53 } Tile{ AsIs: e.Name#1/49 } Tile{ AsIs: )/52 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::update_ident(context[31], identifiers[ident_Symbol]);
        refalrts::update_ident(context[53], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[51], context[52] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[52];
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[51], context[53] );
        refalrts::splice_to_freelist_open( vm, context[31], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/41 )/10 (/13 e.Scanned0#1/43 )/14 (/17 e.Block#2/45 )/18 (/29 # TkIdentMarker/31 s.LnNum#1/32 )/30 e.Tail#1/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      // closed e.MultiBracket#1 as range 41
      // closed e.Scanned0#1 as range 43
      // closed e.Block#2 as range 45
      // closed e.Tail#1 as range 47
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 41
      //DEBUG: e.Scanned0#1: 43
      //DEBUG: e.Block#2: 45
      //DEBUG: e.Tail#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </49 & EL-AddErrorAt/50 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/32 HalfReuse: 'M'/30 } Tile{ HalfReuse: 'i'/31 }"ssed name after \"#\""/51 >/53 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/41 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/43 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/45 AsIs: )/18 HalfReuse: )/29 } Tile{ AsIs: e.Tail#1/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[51], context[52], "ssed name after \"#\"", 19);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_char(context[30], 'M');
      refalrts::reinit_char(context[31], 'i');
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[9], context[29] );
      res = refalrts::splice_evar( res, context[51], context[53] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.Scanned0#1/35 )/14 (/17 e.Block#2/37 )/18 (/29 # TkCompound/31 s.LnNum#1/32 e.Name#1/39 )/30 e.Tail#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 33
      // closed e.Scanned0#1 as range 35
      // closed e.Block#2 as range 37
      // closed e.Name#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 33
      //DEBUG: e.Scanned0#1: 35
      //DEBUG: e.Block#2: 37
      //DEBUG: e.Name#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/35 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/37 AsIs: )/18 HalfReuse: )/29 Reuse: # Symbol/31 } (/43 # Identifier/44 Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/30 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Identifier]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::update_ident(context[31], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[43], context[30] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::splice_to_freelist_open( vm, context[31], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.new#14/5 (/9 e.new#20/33 )/10 (/13 e.new#21/35 )/14 (/17 e.new#22/37 )/18 (/29 s.new#16/31 s.new#17/32 s.new#18/43 e.new#19/39 )/30 e.new#15/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#20 as range 33
      // closed e.new#21 as range 35
      // closed e.new#22 as range 37
      // closed e.new#15 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new#19 as range 39
      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.Scanned0#1/46 )/14 (/17 e.Block#2/48 )/18 (/29 # TkVariable/31 s.LnNum#1/32 s.Mode#1/43 e.Index#1/50 )/30 e.Tail#1/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[31] ) )
          continue;
        // closed e.MultiBracket#1 as range 44
        // closed e.Scanned0#1 as range 46
        // closed e.Block#2 as range 48
        // closed e.Index#1 as range 50
        // closed e.Tail#1 as range 52
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.Mode#1: 43
        //DEBUG: e.MultiBracket#1: 44
        //DEBUG: e.Scanned0#1: 46
        //DEBUG: e.Block#2: 48
        //DEBUG: e.Index#1: 50
        //DEBUG: e.Tail#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/46 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/48 AsIs: )/18 HalfReuse: )/29 AsIs: # TkVariable/31 } (/54 Tile{ AsIs: s.LnNum#1/32 AsIs: s.Mode#1/43 AsIs: e.Index#1/50 AsIs: )/30 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[54], context[30] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_elem( res, context[54] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@2/4 t.new#23/5 (/9 e.new#28/44 )/10 (/13 e.new#29/46 )/14 (/17 e.new#30/48 )/18 (/29 s.new#25/31 s.new#26/32 s.new#27/43 )/30 e.new#24/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.new#28 as range 44
      // closed e.new#29 as range 46
      // closed e.new#30 as range 48
      // closed e.new#24 as range 50
      do {
        // </0 & DoParseResult@2/4 t.new#31/5 (/9 e.new#35/52 )/10 (/13 e.new#36/54 )/14 (/17 e.new#37/56 )/18 (/29 # Open/31 s.new#33/32 s.new#34/43 )/30 e.new#32/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[31] ) )
          continue;
        // closed e.new#35 as range 52
        // closed e.new#36 as range 54
        // closed e.new#37 as range 56
        // closed e.new#32 as range 58
        do {
          // </0 & DoParseResult@2/4 t.new#38/5 (/9 e.new#41/60 )/10 (/13 e.new#42/62 )/14 (/17 e.new#43/64 )/18 (/29 # Open/31 s.new#40/32 # TkOpenADT/43 )/30 e.new#39/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[43] ) )
            continue;
          // closed e.new#41 as range 60
          // closed e.new#42 as range 62
          // closed e.new#43 as range 64
          // closed e.new#39 as range 66
          do {
            // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/68 )/10 (/13 e.Scanned0#1/70 )/14 (/17 e.Block#2/72 )/18 (/29 # Open/31 s.LnNumADT#1/32 # TkOpenADT/43 )/30 (/78 # TkName/80 s.LnNumName#1/81 e.Name#1/76 )/79 e.Tail#1/74 >/1
            context[68] = context[60];
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            context[73] = context[65];
            context[74] = context[66];
            context[75] = context[67];
            context[76] = 0;
            context[77] = 0;
            context[78] = refalrts::brackets_left( context[76], context[77], context[74], context[75] );
            if( ! context[78] )
              continue;
            refalrts::bracket_pointers(context[78], context[79]);
            context[80] = refalrts::ident_left( identifiers[ident_TkName], context[76], context[77] );
            if( ! context[80] )
              continue;
            // closed e.MultiBracket#1 as range 68
            // closed e.Scanned0#1 as range 70
            // closed e.Block#2 as range 72
            // closed e.Tail#1 as range 74
            if( ! refalrts::svar_left( context[81], context[76], context[77] ) )
              continue;
            // closed e.Name#1 as range 76
            //DEBUG: t.ErrorList#2: 5
            //DEBUG: s.LnNumADT#1: 32
            //DEBUG: e.MultiBracket#1: 68
            //DEBUG: e.Scanned0#1: 70
            //DEBUG: e.Block#2: 72
            //DEBUG: e.Tail#1: 74
            //DEBUG: s.LnNumName#1: 81
            //DEBUG: e.Name#1: 76

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkName/80 s.LnNumName#1/81 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@4/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/68 HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 } Tile{ AsIs: s.LnNumADT#1/32 Reuse: # TkCloseADT/43 } Tile{ AsIs: e.Scanned0#1/70 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/72 AsIs: )/18 HalfReuse: )/29 HalfReuse: )/31 } Tile{ HalfReuse: s.LnNumName1 #81/30 AsIs: (/78 } Tile{ AsIs: e.Name#1/76 } Tile{ AsIs: )/79 AsIs: e.Tail#1/74 AsIs: >/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z4]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
            refalrts::update_ident(context[43], identifiers[ident_TkCloseADT]);
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
            refalrts::reinit_close_bracket(context[29]);
            refalrts::reinit_close_bracket(context[31]);
            refalrts::reinit_svar( context[30], context[81] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[78], context[79] );
            refalrts::link_brackets( context[9], context[31] );
            refalrts::link_brackets( context[10], context[29] );
            refalrts::link_brackets( context[14], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[79];
            res = refalrts::splice_evar( res, context[76], context[77] );
            res = refalrts::splice_evar( res, context[30], context[78] );
            res = refalrts::splice_evar( res, context[14], context[31] );
            res = refalrts::splice_evar( res, context[70], context[71] );
            res = refalrts::splice_evar( res, context[32], context[43] );
            refalrts::splice_to_freelist_open( vm, context[13], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/68 )/10 (/13 e.Scanned0#1/70 )/14 (/17 e.Block#2/72 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenADT/43 )/30 e.Tail#1/74 >/1
          context[68] = context[60];
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          context[73] = context[65];
          context[74] = context[66];
          context[75] = context[67];
          // closed e.MultiBracket#1 as range 68
          // closed e.Scanned0#1 as range 70
          // closed e.Block#2 as range 72
          // closed e.Tail#1 as range 74
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 68
          //DEBUG: e.Scanned0#1: 70
          //DEBUG: e.Block#2: 72
          //DEBUG: e.Tail#1: 74

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </76 & DoParseResult/77 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LnNum1 #32/9 }"Expected name after \"[\""/78 >/80 (/81 Tile{ AsIs: e.MultiBracket#1/68 } (/82 # ADT-Brackets/83 Tile{ HalfReuse: s.LnNum1 #32/10 HalfReuse: # TkCloseADT/13 AsIs: e.Scanned0#1/70 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/72 AsIs: )/18 HalfReuse: )/29 HalfReuse: )/31 } (/84 Tile{ AsIs: s.LnNum#1/32 } (/85 # UnnamedADT/86 Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/74 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[76]);
          refalrts::alloc_name(vm, context[77], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[78], context[79], "Expected name after \"[\"", 23);
          refalrts::alloc_close_call(vm, context[80]);
          refalrts::alloc_open_bracket(vm, context[81]);
          refalrts::alloc_open_bracket(vm, context[82]);
          refalrts::alloc_ident(vm, context[83], identifiers[ident_ADTm_Brackets]);
          refalrts::alloc_open_bracket(vm, context[84]);
          refalrts::alloc_open_bracket(vm, context[85]);
          refalrts::alloc_ident(vm, context[86], identifiers[ident_UnnamedADT]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[32] );
          refalrts::reinit_svar( context[10], context[32] );
          refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::reinit_close_bracket(context[31]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[76] );
          refalrts::link_brackets( context[84], context[30] );
          refalrts::link_brackets( context[85], context[43] );
          refalrts::link_brackets( context[81], context[31] );
          refalrts::link_brackets( context[82], context[29] );
          refalrts::link_brackets( context[14], context[18] );
          refalrts::push_stack( vm, context[80] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[84] );
          res = refalrts::splice_evar( res, context[10], context[31] );
          res = refalrts::splice_evar( res, context[82], context[83] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[78], context[81] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[76], context[77] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.Scanned0#1/62 )/14 (/17 e.Block#2/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenBracket/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.Scanned0#1 as range 62
          // closed e.Block#2 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.Scanned0#1: 62
          //DEBUG: e.Block#2: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: # Brackets/13 } Tile{ AsIs: s.LnNum#1/32 } Tile{ Reuse: # TkCloseBracket/31 } Tile{ AsIs: e.Scanned0#1/62 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
          refalrts::update_ident(context[31], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[14], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[14], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.Scanned0#1/62 )/14 (/17 e.Block#2/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenCall/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.Scanned0#1 as range 62
          // closed e.Block#2 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.Scanned0#1: 62
          //DEBUG: e.Block#2: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: # CallBrackets/13 } Tile{ AsIs: s.LnNum#1/32 } Tile{ Reuse: # TkCloseCall/31 } Tile{ AsIs: e.Scanned0#1/62 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
          refalrts::update_ident(context[31], identifiers[ident_TkCloseCall]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[14], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[14], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.Scanned0#1/62 )/14 (/17 e.Block#2/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenBracket/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.Scanned0#1 as range 62
          // closed e.Block#2 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.Scanned0#1: 62
          //DEBUG: e.Block#2: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ HalfReuse: # TkOpenBracket/29 HalfReuse: >/31 AsIs: s.LnNum#1/32 } # TkCloseBracket/69 Tile{ AsIs: e.Scanned0#1/62 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::alloc_ident(vm, context[69], identifiers[ident_TkCloseBracket]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[29], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_call(context[31]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[14], context[18] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[14], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.Scanned0#1/62 )/14 (/17 e.Block#2/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenCall/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.Scanned0#1 as range 62
          // closed e.Block#2 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.Scanned0#1: 62
          //DEBUG: e.Block#2: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ HalfReuse: # TkOpenCall/29 HalfReuse: >/31 AsIs: s.LnNum#1/32 } # TkCloseCall/69 Tile{ AsIs: e.Scanned0#1/62 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::alloc_ident(vm, context[69], identifiers[ident_TkCloseCall]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[29], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_call(context[31]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[14], context[18] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[14], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.Scanned0#1/62 )/14 (/17 e.Block#2/64 )/18 (/29 # Open/31 s.LnNum#1/32 s.OpenBracket#1/43 )/30 e.Tail#1/66 >/1
        context[60] = context[52];
        context[61] = context[53];
        context[62] = context[54];
        context[63] = context[55];
        context[64] = context[56];
        context[65] = context[57];
        context[66] = context[58];
        context[67] = context[59];
        // closed e.MultiBracket#1 as range 60
        // closed e.Scanned0#1 as range 62
        // closed e.Block#2 as range 64
        // closed e.Tail#1 as range 66
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.OpenBracket#1: 43
        //DEBUG: e.MultiBracket#1: 60
        //DEBUG: e.Scanned0#1: 62
        //DEBUG: e.Block#2: 64
        //DEBUG: e.Tail#1: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ AsIs: s.OpenBracket#1/43 } Tile{ HalfReuse: >/31 AsIs: s.LnNum#1/32 } </69 & DoParseResult$10\2*2/70 s.OpenBracket#1/43/71 >/72 Tile{ AsIs: e.Scanned0#1/62 } Tile{ HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/64 AsIs: )/18 HalfReuse: )/29 } Tile{ AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::alloc_open_call(vm, context[69]);
        refalrts::alloc_name(vm, context[70], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::copy_stvar(vm, context[71], context[43]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_close_call(context[31]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[30] );
        refalrts::link_brackets( context[10], context[29] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[69], context[72] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_elem( res, context[68] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/52 (/62 s.BracketsSign#1/64 s.OpenLnNum#1/65 s.CloseBracket#1/66 e.Scanned#1/60 )/63 )/10 (/13 e.Scanned0#1/54 )/14 (/17 e.Block#2/56 )/18 (/29 # Close/31 s.LnNum#1/32 s.CloseBracket#1/43 )/30 e.Tail#1/58 >/1
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[31] ) )
        continue;
      context[60] = 0;
      context[61] = 0;
      context[62] = refalrts::brackets_right( context[60], context[61], context[52], context[53] );
      if( ! context[62] )
        continue;
      refalrts::bracket_pointers(context[62], context[63]);
      // closed e.MultiBracket#1 as range 52
      // closed e.Scanned0#1 as range 54
      // closed e.Block#2 as range 56
      // closed e.Tail#1 as range 58
      if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
        continue;
      if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[66], context[43], context[60], context[61] ) )
        continue;
      // closed e.Scanned#1 as range 60
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: s.CloseBracket#1: 43
      //DEBUG: e.MultiBracket#1: 52
      //DEBUG: e.Scanned0#1: 54
      //DEBUG: e.Block#2: 56
      //DEBUG: e.Tail#1: 58
      //DEBUG: s.BracketsSign#1: 64
      //DEBUG: s.OpenLnNum#1: 65
      //DEBUG: e.Scanned#1: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/64 s.OpenLnNum#1/65 s.CloseBracket#1/66 {REMOVED TILE} {REMOVED TILE} # Close/31 s.LnNum#1/32 s.CloseBracket#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@3/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/52 HalfReuse: )/62 } Tile{ HalfReuse: (/30 } Tile{ AsIs: e.Scanned#1/60 } Tile{ AsIs: )/63 HalfReuse: s.BracketsSign1 #64/10 AsIs: (/13 AsIs: e.Scanned0#1/54 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/56 AsIs: )/18 HalfReuse: )/29 } Tile{ AsIs: e.Tail#1/58 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z3]);
      refalrts::reinit_close_bracket(context[62]);
      refalrts::reinit_open_bracket(context[30]);
      refalrts::reinit_svar( context[10], context[64] );
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[30], context[63] );
      refalrts::link_brackets( context[9], context[62] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[63], context[29] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[62], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.Scanned0#1/35 )/14 (/17 e.Block#2/37 )/18 (/29 # TkOpenBlock/31 s.LnNum#1/32 )/30 e.Tail#1/39 >/1
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.MultiBracket#1 as range 33
    // closed e.Scanned0#1 as range 35
    // closed e.Block#2 as range 37
    // closed e.Tail#1 as range 39
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: s.LnNum#1: 32
    //DEBUG: e.MultiBracket#1: 33
    //DEBUG: e.Scanned0#1: 35
    //DEBUG: e.Block#2: 37
    //DEBUG: e.Tail#1: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Fetch@3/18 AsIs: (/29 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.ErrorList#2/5 } Tile{ AsIs: e.Tail#1/39 } Tile{ HalfReuse: >/17 } Tile{ AsIs: )/30 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/35 AsIs: )/14 } Tile{ AsIs: e.Block#2/37 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[31]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Fetch_Z3]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[18], context[29] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@2/4 t.new#6/5 (/9 e.new#8/19 (/29 s.new#9/31 s.new#10/32 s.new#11/33 e.new#12/27 )/30 )/10 (/13 e.new#13/21 )/14 (/17 e.new#14/23 )/18 e.new#7/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_right( context[27], context[28], context[19], context[20] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new#8 as range 19
    // closed e.new#13 as range 21
    // closed e.new#14 as range 23
    // closed e.new#7 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[27], context[28] ) )
      continue;
    // closed e.new#12 as range 27
    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenBracket/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"(\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenBracket/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenBracket]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseBracket/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \")\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseBracket/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \")\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseBracket]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenCall/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"<\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenCall/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenCall]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseCall/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \">\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseCall/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \">\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseCall]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenADT/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"[\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenADT/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenADT]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseADT/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"]\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseADT/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"]\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # Brackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"(\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # Brackets/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"(\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # ADT-Brackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"[\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"[\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 # CallBrackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbal"/46 Tile{ HalfReuse: 'a'/31 }"nced bracket \"<\""/48 >/50 Tile{ AsIs: (/29 } Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/51 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: # CallBrackets/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/52 )/53 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbal", 5);
      refalrts::alloc_chars(vm, context[48], context[49], "nced bracket \"<\"", 16);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::reinit_char(context[31], 'a');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[10], context[52] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 (/29 s.BracketsSign#1/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 e.Tail#1/42 >/1
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[27];
    context[37] = context[28];
    context[38] = context[21];
    context[39] = context[22];
    context[40] = context[23];
    context[41] = context[24];
    context[42] = context[25];
    context[43] = context[26];
    // closed e.MultiBracket#1 as range 34
    // closed e.Scanned#1 as range 36
    // closed e.Scanned0#1 as range 38
    // closed e.Block#2 as range 40
    // closed e.Tail#1 as range 42
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: s.BracketsSign#1: 31
    //DEBUG: s.OpenLnNum#1: 32
    //DEBUG: s.CloseBracket#1: 33
    //DEBUG: e.MultiBracket#1: 34
    //DEBUG: e.Scanned#1: 36
    //DEBUG: e.Scanned0#1: 38
    //DEBUG: e.Block#2: 40
    //DEBUG: e.Tail#1: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \""/46 </48 Tile{ HalfReuse: & StrFromBracket*9/29 AsIs: s.BracketsSign#1/31 } >/49 '\"'/50 >/51 (/52 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/30 } (/53 Tile{ AsIs: e.Scanned#1/36 } Tile{ HalfReuse: (/10 HalfReuse: s.BracketsSign1 #31/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 } )/54 )/55 Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_char(vm, context[50], '\"');
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[32] );
    refalrts::reinit_name(context[29], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_svar( context[13], context[31] );
    refalrts::reinit_open_bracket(context[14]);
    refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[53], context[55] );
    refalrts::link_brackets( context[10], context[54] );
    refalrts::link_brackets( context[14], context[18] );
    refalrts::link_brackets( context[52], context[30] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[10], context[18] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[49], context[52] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_evar( res, context[46], context[48] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@2/4 t.new#6/5 (/9 )/10 (/13 e.new#8/19 )/14 (/17 e.new#9/21 )/18 e.new#7/23 >/1
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[2];
    context[24] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#8 as range 19
    // closed e.new#9 as range 21
    // closed e.new#7 as range 23
    do {
      // </0 & DoParseResult@2/4 t.new#10/5 (/9 )/10 (/13 e.new#14/25 )/14 (/17 e.new#15/27 )/18 (/33 # Close/35 s.new#11/36 s.new#12/37 )/34 e.new#13/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = refalrts::ident_left( identifiers[ident_Close], context[31], context[32] );
      if( ! context[35] )
        continue;
      // closed e.new#14 as range 25
      // closed e.new#15 as range 27
      // closed e.new#13 as range 29
      if( ! refalrts::svar_left( context[36], context[31], context[32] ) )
        continue;
      if( ! refalrts::svar_left( context[37], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenBracket/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"(\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseBracket/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \")\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \")\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenCall/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"<\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseCall/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \">\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \">\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenADT/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"[\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseADT/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"]\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"]\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # Brackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"(\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # ADT-Brackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"[\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 # CallBrackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
          continue;
        // closed e.Scanned0#1 as range 38
        // closed e.Block#2 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.Scanned0#1: 38
        //DEBUG: e.Block#2: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 HalfReuse: 'U'/37 HalfReuse: 'n'/34 } Tile{ HalfReuse: 'b'/35 }"alanced bracket \"<\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[37], 'U');
        refalrts::reinit_char(context[34], 'n');
        refalrts::reinit_char(context[35], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[33] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[36], context[34] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/38 )/14 (/17 e.Block#2/40 )/18 (/33 # Close/35 s.LnNum#1/36 s.CloseBracket#1/37 )/34 e.Tail#1/42 >/1
      context[38] = context[25];
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      // closed e.Scanned0#1 as range 38
      // closed e.Block#2 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNum#1: 36
      //DEBUG: s.CloseBracket#1: 37
      //DEBUG: e.Scanned0#1: 38
      //DEBUG: e.Block#2: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/36 } 'U'/46 Tile{ HalfReuse: 'n'/35 }"balanced bracket \""/47 </49 & StrFromBracket*9/50 Tile{ AsIs: s.CloseBracket#1/37 HalfReuse: >/34 } '\"'/51 >/52 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/38 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/40 AsIs: )/18 HalfReuse: )/33 } Tile{ AsIs: e.Tail#1/42 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_char(vm, context[46], 'U');
      refalrts::alloc_chars(vm, context[47], context[48], "balanced bracket \"", 18);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_char(vm, context[51], '\"');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_char(context[35], 'n');
      refalrts::reinit_close_call(context[34]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[9], context[33] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[37], context[34] );
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 )/10 (/13 e.Scanned0#1/25 )/14 (/17 e.Block#2/27 )/18 e.Tail#1/29 >/1
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    // closed e.Scanned0#1 as range 25
    // closed e.Block#2 as range 27
    // closed e.Tail#1 as range 29
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: e.Scanned0#1: 25
    //DEBUG: e.Block#2: 27
    //DEBUG: e.Tail#1: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@2/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: (/13 AsIs: e.Scanned0#1/25 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/27 AsIs: )/18 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail#1/29 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[14]);
    refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
    refalrts::link_brackets( context[13], context[10] );
    refalrts::link_brackets( context[14], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[13], context[18] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@2/4 t.ErrorList#2/5 (/9 e.dyn#0/7 )/10 (/13 e.Scanned0#1/11 )/14 (/17 e.Block#2/15 )/18 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.Scanned0#1 as range 11
  // closed e.Block#2 as range 15
  // closed e.dyn#2 as range 2
  //DEBUG: t.ErrorList#2: 5
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.Scanned0#1: 11
  //DEBUG: e.Block#2: 15
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Scanned0#1/11 HalfReuse: (/14 HalfReuse: # Closure/17 AsIs: e.Block#2/15 AsIs: )/18 } )/19 Tile{ AsIs: e.dyn#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_ident(context[17], identifiers[ident_Closure]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[19] );
  refalrts::link_brackets( context[14], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z2("DoParseResult@2", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z2);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Fetch@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & Fetch@1/4 (/7 (/21 e.0#0/19 )/22 t.0#0/23 e.1#0/13 )/8 (/11 e.MultiBracket#1/15 )/12 e.Scanned#1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[13], context[14] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.0#0 as range 19
    // closed e.MultiBracket#1 as range 15
    // closed e.Scanned#1 as range 17
    context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
    if( ! context[24] )
      continue;
    // closed e.1#0 as range 13
    //DEBUG: e.0#0: 19
    //DEBUG: e.MultiBracket#1: 15
    //DEBUG: e.Scanned#1: 17
    //DEBUG: t.0#0: 23
    //DEBUG: e.1#0: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@2/4 } Tile{ AsIs: t.0#0/23 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/15 AsIs: )/12 } Tile{ HalfReuse: (/8 } Tile{ AsIs: e.Scanned#1/17 } Tile{ HalfReuse: )/7 AsIs: (/21 AsIs: e.0#0/19 AsIs: )/22 } Tile{ AsIs: e.1#0/13 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z2]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[8], context[7] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[7], context[22] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@1/4 (/7 e.Argument#1/13 )/8 (/11 e.MultiBracket#1/15 )/12 e.Scanned#1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Argument#1 as range 13
    // closed e.MultiBracket#1 as range 15
    // closed e.Scanned#1 as range 17
    //DEBUG: e.Argument#1: 13
    //DEBUG: e.MultiBracket#1: 15
    //DEBUG: e.Scanned#1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult$12\1*1/4 AsIs: (/7 } Tile{ AsIs: e.MultiBracket#1/15 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Scanned#1/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Argument#1/13 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 e.Scanned#1/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.Scanned#1 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.Scanned#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/13 Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Scanned#1/2 } )/14 {*}/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[14] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@3/4 t.new#1/5 e.new#2/2 t.new#3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn#1/5 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    //DEBUG: t.X#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/9 AsIs: t.X#0/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure#1/13 e.Bounded#1/11 )/6 e.X#0/9 t.X#0/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X#0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded#1 as range 11
    //DEBUG: t.X#0: 7
    //DEBUG: e.X#0: 9
    //DEBUG: t.Closure#1: 13
    //DEBUG: e.Bounded#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure#1/13 } Tile{ AsIs: e.Bounded#1/11 } Tile{ AsIs: e.X#0/9 } Tile{ AsIs: t.X#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn#0/5 e.X#0/2 t.X#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply@4/4 t.new#1/5 e.new#2/2 t.new#3/9 t.new#4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn#1/5 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.X#0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn#1/5 AsIs: e.X#0/11 AsIs: t.X#0/9 AsIs: t.X0#0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure#1/15 e.Bounded#1/13 )/6 e.X#0/11 t.X#0/9 t.X0#0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X#0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded#1 as range 13
    //DEBUG: t.X#0: 9
    //DEBUG: t.X0#0: 7
    //DEBUG: e.X#0: 11
    //DEBUG: t.Closure#1: 15
    //DEBUG: e.Bounded#1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure#1/15 } Tile{ AsIs: e.Bounded#1/13 } Tile{ AsIs: e.X#0/11 } Tile{ AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn#0/5 e.X#0/2 t.X#0/9 t.X0#0/7 >/1
  // closed e.X#0 as range 2
  //DEBUG: t.dyn#0: 5
  //DEBUG: t.X#0: 9
  //DEBUG: t.X0#0: 7
  //DEBUG: e.X#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn#0/5 AsIs: e.X#0/2 AsIs: t.X#0/9 AsIs: t.X0#0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_ParseFunction_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ParseFunction$1=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ParseFunction$1=1@1/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 2
  do {
    // </0 & ParseFunction$1=1@1/4 s.LnNum0#1/5 (/8 e.Name0#1/10 )/9 (/16 e.Block#2/14 )/17 t.ErrorList#2/18 e.Tail#2/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name0#1 as range 10
    // closed e.Block#2 as range 14
    context[19] = refalrts::tvar_left( context[18], context[12], context[13] );
    if( ! context[19] )
      continue;
    // closed e.Tail#2 as range 12
    //DEBUG: s.LnNum0#1: 5
    //DEBUG: e.Name0#1: 10
    //DEBUG: e.Block#2: 14
    //DEBUG: t.ErrorList#2: 18
    //DEBUG: e.Tail#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/16 } Tile{ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.LnNum0#1/5 } # GN-Entry/20 Tile{ AsIs: (/8 AsIs: e.Name0#1/10 AsIs: )/9 } Tile{ AsIs: e.Block#2/14 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/17 AsIs: t.ErrorList#2/18 } Tile{ AsIs: e.Tail#2/12 } Tile{ ]] }
    refalrts::alloc_ident(vm, context[20], identifiers[ident_GNm_Entry]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ParseFunction$1=1@1/4 s.LnNum0#1/5 (/8 e.Name0#1/6 )/9 e.dyn#0/2 >/1
  // closed e.Name0#1 as range 6
  // closed e.dyn#0 as range 2
  //DEBUG: s.LnNum0#1: 5
  //DEBUG: e.Name0#1: 6
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ParseFunction$1=1@0/4 AsIs: s.LnNum0#1/5 } # GN-Entry/10 Tile{ AsIs: (/8 AsIs: e.Name0#1/6 AsIs: )/9 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[10], identifiers[ident_GNm_Entry]);
  refalrts::update_name(context[4], functions[efunc_gen_ParseFunction_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ParseFunction_S1A1Z1("ParseFunction$1=1@1", COOKIE1_, COOKIE2_, func_gen_ParseFunction_S1A1Z1);


static refalrts::FnResult func_gen_DoParseBlock_S3A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoParseBlock$3=1@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & DoParseBlock$3=1@1/4 (/9 e.new#1/7 )/10 t.new#2/11 e.new#3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new#1 as range 7
    context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
    if( ! context[12] )
      continue;
    // closed e.new#3 as range 5
    do {
      // </0 & DoParseBlock$3=1@1/4 (/9 e.new#8/13 )/10 t.new#4/11 (/19 s.new#5/21 s.new#6/22 )/20 e.new#7/15 >/1
      context[13] = context[7];
      context[14] = context[8];
      context[15] = context[5];
      context[16] = context[6];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.new#8 as range 13
      // closed e.new#7 as range 15
      if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
        continue;
      if( ! refalrts::svar_left( context[22], context[17], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      do {
        // </0 & DoParseBlock$3=1@1/4 (/9 e.Sentence#2/23 )/10 t.ErrorList#2/11 (/19 # TkCloseBlock/21 s.LnNumber#1/22 )/20 e.#0/25 >/1
        context[23] = context[13];
        context[24] = context[14];
        context[25] = context[15];
        context[26] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[21] ) )
          continue;
        // closed e.Sentence#2 as range 23
        // closed e.#0 as range 25
        //DEBUG: t.ErrorList#2: 11
        //DEBUG: s.LnNumber#1: 22
        //DEBUG: e.Sentence#2: 23
        //DEBUG: e.#0: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/19 # TkCloseBlock/21 s.LnNumber#1/22 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Sentences/4 AsIs: (/9 AsIs: e.Sentence#2/23 AsIs: )/10 } Tile{ AsIs: )/20 } Tile{ AsIs: t.ErrorList#2/11 } Tile{ AsIs: e.#0/25 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Sentences]);
        refalrts::link_brackets( context[0], context[20] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_elem( res, context[20] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseBlock$3=1@1/4 (/9 e.Sentence#2/23 )/10 t.ErrorList#2/11 (/19 # TkEOF/21 s.LnNum#1/22 )/20 e.#0/25 >/1
      context[23] = context[13];
      context[24] = context[14];
      context[25] = context[15];
      context[26] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[21] ) )
        continue;
      // closed e.Sentence#2 as range 23
      // closed e.#0 as range 25
      //DEBUG: t.ErrorList#2: 11
      //DEBUG: s.LnNum#1: 22
      //DEBUG: e.Sentence#2: 23
      //DEBUG: e.#0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Sentences/4 AsIs: (/9 AsIs: e.Sentence#2/23 AsIs: )/10 } )/27 </28 & EL-AddErrorAt/29 Tile{ AsIs: t.ErrorList#2/11 } s.LnNum#1/22/30"Unexpected EOF, expected \"}\""/31 Tile{ AsIs: >/1 } Tile{ AsIs: (/19 AsIs: # TkEOF/21 AsIs: s.LnNum#1/22 AsIs: )/20 } Tile{ AsIs: e.#0/25 } Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_stvar(vm, context[30], context[22]);
      refalrts::alloc_chars(vm, context[31], context[32], "Unexpected EOF, expected \"}\"", 28);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Sentences]);
      refalrts::link_brackets( context[19], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[0], context[27] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseBlock$3=1@1/4 (/9 e.Sentence#2/13 )/10 t.ErrorList#2/11 e.Tail#2/15 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[5];
    context[16] = context[6];
    // closed e.Sentence#2 as range 13
    // closed e.Tail#2 as range 15
    //DEBUG: t.ErrorList#2: 11
    //DEBUG: e.Sentence#2: 13
    //DEBUG: e.Tail#2: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseBlock$3=1/4 AsIs: (/9 } (/17 Tile{ AsIs: e.Sentence#2/13 } )/18 )/19 </20 Tile{ HalfReuse: & ParseSentence/10 AsIs: t.ErrorList#2/11 AsIs: e.Tail#2/15 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoParseBlock_S3A1]);
    refalrts::reinit_name(context[10], functions[efunc_ParseSentence]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[9], context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseBlock$3=1@1/4 e.dyn#0/2 >/1
  // closed e.dyn#0 as range 2
  //DEBUG: e.dyn#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoParseBlock$3=1@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn#0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoParseBlock_S3A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseBlock_S3A1Z1("DoParseBlock$3=1@1", COOKIE1_, COOKIE2_, func_gen_DoParseBlock_S3A1Z1);


static refalrts::FnResult func_gen_Fetch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Fetch@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@2/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & Fetch@2/4 (/7 (/15 e.0#0/13 )/16 t.0#0/17 e.1#0/9 )/8 e.MultiBracket#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.0#0 as range 13
    // closed e.MultiBracket#1 as range 11
    context[18] = refalrts::tvar_left( context[17], context[9], context[10] );
    if( ! context[18] )
      continue;
    // closed e.1#0 as range 9
    //DEBUG: e.0#0: 13
    //DEBUG: e.MultiBracket#1: 11
    //DEBUG: t.0#0: 17
    //DEBUG: e.1#0: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & DoParseResult/20 Tile{ AsIs: t.0#0/17 } (/21 Tile{ AsIs: e.MultiBracket#1/11 } Tile{ HalfReuse: )/0 HalfReuse: (/4 AsIs: (/7 HalfReuse: # Closure/15 AsIs: e.0#0/13 AsIs: )/16 } Tile{ AsIs: )/8 } Tile{ AsIs: e.1#0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_DoParseResult]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[15], identifiers[ident_Closure]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::link_brackets( context[21], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@2/4 (/7 e.Argument#1/9 )/8 e.MultiBracket#1/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Argument#1 as range 9
    // closed e.MultiBracket#1 as range 11
    //DEBUG: e.Argument#1: 9
    //DEBUG: e.MultiBracket#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult$12\1*1/4 AsIs: (/7 } Tile{ AsIs: e.MultiBracket#1/11 } Tile{ AsIs: )/8 } (/13 )/14 Tile{ AsIs: e.Argument#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@2/4 (/7 e.arg#0/5 )/8 e.MultiBracket#1/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/9 & DoParseResult$12\1@0/10 Tile{ AsIs: (/7 } Tile{ AsIs: e.MultiBracket#1/2 } Tile{ AsIs: )/8 } (/11 )/12 {*}/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z2("Fetch@2", COOKIE1_, COOKIE2_, func_gen_Fetch_Z2);


static refalrts::FnResult func_gen_DoParseResult_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 88 elems
  refalrts::Iter context[88];
  refalrts::zeros( context, 88 );
  // </0 & DoParseResult@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@3/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 s.new#4/15 (/18 e.new#5/16 )/19 e.new#6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new#5 as range 16
  // closed e.new#6 as range 2
  do {
    // </0 & DoParseResult@3/4 t.new#7/5 (/9 e.new#13/20 )/10 (/13 e.new#14/22 )/14 s.new#8/15 (/18 e.new#15/24 )/19 (/30 s.new#9/32 s.new#10/33 e.new#11/28 )/31 e.new#12/26 >/1
    context[20] = context[7];
    context[21] = context[8];
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.new#13 as range 20
    // closed e.new#14 as range 22
    // closed e.new#15 as range 24
    // closed e.new#12 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    // closed e.new#11 as range 28
    do {
      // </0 & DoParseResult@3/4 t.new#16/5 (/9 e.new#22/34 )/10 (/13 e.new#23/36 )/14 s.new#17/15 (/18 e.new#24/38 )/19 (/30 s.new#19/32 s.new#20/33 s.new#21/44 )/31 e.new#18/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      // closed e.new#22 as range 34
      // closed e.new#23 as range 36
      // closed e.new#24 as range 38
      // closed e.new#18 as range 42
      if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 (/13 e.X#0/47 )/14 s.X#0/15 (/18 e.X0#0/49 )/19 (/30 # TkChar/32 s.LnNum#1/33 s.Char#1/44 )/31 e.Tail#1/51 >/1
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[42];
        context[52] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[32] ) )
          continue;
        // closed e.MultiBracket#1 as range 45
        // closed e.X#0 as range 47
        // closed e.X0#0 as range 49
        // closed e.Tail#1 as range 51
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.Char#1: 44
        //DEBUG: e.MultiBracket#1: 45
        //DEBUG: e.X#0: 47
        //DEBUG: e.X0#0: 49
        //DEBUG: e.Tail#1: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/47 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/49 } Tile{ AsIs: )/19 HalfReuse: )/30 Reuse: # Symbol/32 } Tile{ AsIs: (/18 } # Char/53 Tile{ AsIs: s.Char#1/44 AsIs: )/31 AsIs: e.Tail#1/51 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::update_ident(context[32], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[18], context[31] );
        refalrts::link_brackets( context[13], context[30] );
        refalrts::link_brackets( context[14], context[19] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[44];
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[32] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 (/13 e.X#0/47 )/14 s.X#0/15 (/18 e.X0#0/49 )/19 (/30 # TkNumber/32 s.LnNum#1/33 s.Number#1/44 )/31 e.Tail#1/51 >/1
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[42];
      context[52] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 45
      // closed e.X#0 as range 47
      // closed e.X0#0 as range 49
      // closed e.Tail#1 as range 51
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 33
      //DEBUG: s.Number#1: 44
      //DEBUG: e.MultiBracket#1: 45
      //DEBUG: e.X#0: 47
      //DEBUG: e.X0#0: 49
      //DEBUG: e.Tail#1: 51

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/47 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/49 } Tile{ AsIs: )/19 HalfReuse: )/30 Reuse: # Symbol/32 } Tile{ AsIs: (/18 } # Number/53 Tile{ AsIs: s.Number#1/44 AsIs: )/31 AsIs: e.Tail#1/51 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[53], identifiers[ident_Number]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::update_ident(context[32], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 (/13 e.X#0/36 )/14 s.X#0/15 (/18 e.X0#0/38 )/19 (/30 # TkName/32 s.LnNum#1/33 e.Name#1/40 )/31 e.Tail#1/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.X#0 as range 36
      // closed e.X0#0 as range 38
      // closed e.Name#1 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.X#0: 36
      //DEBUG: e.X0#0: 38
      //DEBUG: e.Name#1: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/36 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/38 } Tile{ HalfReuse: )/18 } )/44 Tile{ HalfReuse: # Symbol/19 AsIs: (/30 Reuse: # Name/32 AsIs: s.LnNum#1/33 AsIs: e.Name#1/40 AsIs: )/31 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_ident(context[19], identifiers[ident_Symbol]);
      refalrts::update_ident(context[32], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[13], context[44] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.new#16/5 (/9 e.new#20/34 )/10 (/13 e.new#21/36 )/14 s.new#17/15 (/18 e.new#22/38 )/19 (/30 # TkIdentMarker/32 s.new#19/33 )/31 e.new#18/40 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      context[41] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.new#20 as range 34
      // closed e.new#21 as range 36
      // closed e.new#22 as range 38
      // closed e.new#18 as range 40
      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/42 )/10 (/13 e.X#0/44 )/14 s.X#0/15 (/18 e.X0#0/46 )/19 (/30 # TkIdentMarker/32 s.MarkerLnNum#1/33 )/31 (/52 # TkName/54 s.NameLnNum#1/55 e.Name#1/50 )/53 e.Tail#1/48 >/1
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::brackets_left( context[50], context[51], context[48], context[49] );
        if( ! context[52] )
          continue;
        refalrts::bracket_pointers(context[52], context[53]);
        context[54] = refalrts::ident_left( identifiers[ident_TkName], context[50], context[51] );
        if( ! context[54] )
          continue;
        // closed e.MultiBracket#1 as range 42
        // closed e.X#0 as range 44
        // closed e.X0#0 as range 46
        // closed e.Tail#1 as range 48
        if( ! refalrts::svar_left( context[55], context[50], context[51] ) )
          continue;
        // closed e.Name#1 as range 50
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.MarkerLnNum#1: 33
        //DEBUG: e.MultiBracket#1: 42
        //DEBUG: e.X#0: 44
        //DEBUG: e.X0#0: 46
        //DEBUG: e.Tail#1: 48
        //DEBUG: s.NameLnNum#1: 55
        //DEBUG: e.Name#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/18 {REMOVED TILE} {REMOVED TILE} # TkIdentMarker/32 s.MarkerLnNum#1/33 {REMOVED TILE} s.NameLnNum#1/55 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/42 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/44 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/46 } Tile{ AsIs: )/19 HalfReuse: )/30 } Tile{ HalfReuse: # Symbol/31 AsIs: (/52 Reuse: # Identifier/54 } Tile{ AsIs: e.Name#1/50 } Tile{ AsIs: )/53 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::reinit_ident(context[31], identifiers[ident_Symbol]);
        refalrts::update_ident(context[54], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[52], context[53] );
        refalrts::link_brackets( context[13], context[30] );
        refalrts::link_brackets( context[14], context[19] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[53];
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[31], context[54] );
        res = refalrts::splice_evar( res, context[19], context[30] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/42 )/10 (/13 e.X#0/44 )/14 s.X#0/15 (/18 e.X0#0/46 )/19 (/30 # TkIdentMarker/32 s.LnNum#1/33 )/31 e.Tail#1/48 >/1
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      // closed e.MultiBracket#1 as range 42
      // closed e.X#0 as range 44
      // closed e.X0#0 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 42
      //DEBUG: e.X#0: 44
      //DEBUG: e.X0#0: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
      //RESULT: Tile{ [[ } </50 & DoParseResult/51 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #33/19 HalfReuse: 'M'/30 HalfReuse: 'i'/32 } Tile{ HalfReuse: 's'/18 }"sed name after \"#\""/52 >/54 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/42 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/44 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/46 } )/55 Tile{ AsIs: )/31 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[52], context[53], "sed name after \"#\"", 18);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[19], context[33] );
      refalrts::reinit_char(context[30], 'M');
      refalrts::reinit_char(context[32], 'i');
      refalrts::reinit_char(context[18], 's');
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[13], context[31] );
      refalrts::link_brackets( context[14], context[55] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 (/13 e.X#0/36 )/14 s.X#0/15 (/18 e.X0#0/38 )/19 (/30 # TkCompound/32 s.LnNum#1/33 e.Name#1/40 )/31 e.Tail#1/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.X#0 as range 36
      // closed e.X0#0 as range 38
      // closed e.Name#1 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.X#0: 36
      //DEBUG: e.X0#0: 38
      //DEBUG: e.Name#1: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/36 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/38 } Tile{ AsIs: )/19 HalfReuse: )/30 Reuse: # Symbol/32 } Tile{ AsIs: (/18 } # Identifier/44 Tile{ AsIs: e.Name#1/40 } Tile{ AsIs: )/31 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Identifier]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::update_ident(context[32], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.new#16/5 (/9 e.new#23/34 )/10 (/13 e.new#24/36 )/14 s.new#17/15 (/18 e.new#25/38 )/19 (/30 s.new#19/32 s.new#20/33 s.new#21/44 e.new#22/40 )/31 e.new#18/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      // closed e.new#23 as range 34
      // closed e.new#24 as range 36
      // closed e.new#25 as range 38
      // closed e.new#18 as range 42
      if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
        continue;
      // closed e.new#22 as range 40
      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 (/13 e.X#0/47 )/14 s.X#0/15 (/18 e.X0#0/49 )/19 (/30 # TkVariable/32 s.LnNum#1/33 s.Mode#1/44 e.Index#1/51 )/31 e.Tail#1/53 >/1
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[32] ) )
          continue;
        // closed e.MultiBracket#1 as range 45
        // closed e.X#0 as range 47
        // closed e.X0#0 as range 49
        // closed e.Index#1 as range 51
        // closed e.Tail#1 as range 53
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.Mode#1: 44
        //DEBUG: e.MultiBracket#1: 45
        //DEBUG: e.X#0: 47
        //DEBUG: e.X0#0: 49
        //DEBUG: e.Index#1: 51
        //DEBUG: e.Tail#1: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/47 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/49 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 HalfReuse: # TkVariable/30 HalfReuse: (/32 AsIs: s.LnNum#1/33 AsIs: s.Mode#1/44 AsIs: e.Index#1/51 AsIs: )/31 AsIs: e.Tail#1/53 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[18]);
        refalrts::reinit_ident(context[30], identifiers[ident_TkVariable]);
        refalrts::reinit_open_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[32], context[31] );
        refalrts::link_brackets( context[13], context[19] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[19];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@3/4 t.new#26/5 (/9 e.new#32/45 )/10 (/13 e.new#33/47 )/14 s.new#27/15 (/18 e.new#34/49 )/19 (/30 s.new#29/32 s.new#30/33 s.new#31/44 )/31 e.new#28/51 >/1
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[42];
      context[52] = context[43];
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.new#32 as range 45
      // closed e.new#33 as range 47
      // closed e.new#34 as range 49
      // closed e.new#28 as range 51
      do {
        // </0 & DoParseResult@3/4 t.new#35/5 (/9 e.new#40/53 )/10 (/13 e.new#41/55 )/14 s.new#36/15 (/18 e.new#42/57 )/19 (/30 # Open/32 s.new#38/33 s.new#39/44 )/31 e.new#37/59 >/1
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[32] ) )
          continue;
        // closed e.new#40 as range 53
        // closed e.new#41 as range 55
        // closed e.new#42 as range 57
        // closed e.new#37 as range 59
        do {
          // </0 & DoParseResult@3/4 t.new#43/5 (/9 e.new#47/61 )/10 (/13 e.new#48/63 )/14 s.new#44/15 (/18 e.new#49/65 )/19 (/30 # Open/32 s.new#46/33 # TkOpenADT/44 )/31 e.new#45/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[44] ) )
            continue;
          // closed e.new#47 as range 61
          // closed e.new#48 as range 63
          // closed e.new#49 as range 65
          // closed e.new#45 as range 67
          do {
            // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/69 )/10 (/13 e.X#0/71 )/14 s.X#0/15 (/18 e.X0#0/73 )/19 (/30 # Open/32 s.LnNumADT#1/33 # TkOpenADT/44 )/31 (/79 # TkName/81 s.LnNumName#1/82 e.Name#1/77 )/80 e.Tail#1/75 >/1
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            context[73] = context[65];
            context[74] = context[66];
            context[75] = context[67];
            context[76] = context[68];
            context[77] = 0;
            context[78] = 0;
            context[79] = refalrts::brackets_left( context[77], context[78], context[75], context[76] );
            if( ! context[79] )
              continue;
            refalrts::bracket_pointers(context[79], context[80]);
            context[81] = refalrts::ident_left( identifiers[ident_TkName], context[77], context[78] );
            if( ! context[81] )
              continue;
            // closed e.MultiBracket#1 as range 69
            // closed e.X#0 as range 71
            // closed e.X0#0 as range 73
            // closed e.Tail#1 as range 75
            if( ! refalrts::svar_left( context[82], context[77], context[78] ) )
              continue;
            // closed e.Name#1 as range 77
            //DEBUG: t.X#0: 5
            //DEBUG: s.X#0: 15
            //DEBUG: s.LnNumADT#1: 33
            //DEBUG: e.MultiBracket#1: 69
            //DEBUG: e.X#0: 71
            //DEBUG: e.X0#0: 73
            //DEBUG: e.Tail#1: 75
            //DEBUG: s.LnNumName#1: 82
            //DEBUG: e.Name#1: 77

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 s.X#0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumName#1/82 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@4/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/69 HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 } Tile{ AsIs: s.LnNumADT#1/33 Reuse: # TkCloseADT/44 } Tile{ AsIs: e.X#0/71 } Tile{ HalfReuse: (/81 } Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/73 AsIs: )/19 HalfReuse: )/30 HalfReuse: )/32 } Tile{ HalfReuse: s.LnNumName1 #82/31 AsIs: (/79 } Tile{ AsIs: e.Name#1/77 } Tile{ AsIs: )/80 AsIs: e.Tail#1/75 AsIs: >/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z4]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
            refalrts::update_ident(context[44], identifiers[ident_TkCloseADT]);
            refalrts::reinit_open_bracket(context[81]);
            refalrts::reinit_svar( context[18], context[15] );
            refalrts::reinit_close_bracket(context[30]);
            refalrts::reinit_close_bracket(context[32]);
            refalrts::reinit_svar( context[31], context[82] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[79], context[80] );
            refalrts::link_brackets( context[9], context[32] );
            refalrts::link_brackets( context[10], context[30] );
            refalrts::link_brackets( context[81], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[80];
            res = refalrts::splice_evar( res, context[77], context[78] );
            res = refalrts::splice_evar( res, context[31], context[79] );
            res = refalrts::splice_evar( res, context[18], context[32] );
            res = refalrts::splice_elem( res, context[81] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_evar( res, context[33], context[44] );
            refalrts::splice_to_freelist_open( vm, context[13], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/69 )/10 (/13 e.X#0/71 )/14 s.X#0/15 (/18 e.X0#0/73 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenADT/44 )/31 e.Tail#1/75 >/1
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          context[73] = context[65];
          context[74] = context[66];
          context[75] = context[67];
          context[76] = context[68];
          // closed e.MultiBracket#1 as range 69
          // closed e.X#0 as range 71
          // closed e.X0#0 as range 73
          // closed e.Tail#1 as range 75
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 15
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 69
          //DEBUG: e.X#0: 71
          //DEBUG: e.X0#0: 73
          //DEBUG: e.Tail#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </77 & DoParseResult/78 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #33/9 }"Expected name after \"[\""/79 >/81 (/82 Tile{ AsIs: e.MultiBracket#1/69 } (/83 # ADT-Brackets/84 Tile{ HalfReuse: s.LnNum1 #33/10 HalfReuse: # TkCloseADT/13 AsIs: e.X#0/71 HalfReuse: (/14 } Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/73 AsIs: )/19 HalfReuse: )/30 HalfReuse: )/32 } (/85 Tile{ AsIs: s.LnNum#1/33 } (/86 # UnnamedADT/87 Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/75 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[77]);
          refalrts::alloc_name(vm, context[78], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[79], context[80], "Expected name after \"[\"", 23);
          refalrts::alloc_close_call(vm, context[81]);
          refalrts::alloc_open_bracket(vm, context[82]);
          refalrts::alloc_open_bracket(vm, context[83]);
          refalrts::alloc_ident(vm, context[84], identifiers[ident_ADTm_Brackets]);
          refalrts::alloc_open_bracket(vm, context[85]);
          refalrts::alloc_open_bracket(vm, context[86]);
          refalrts::alloc_ident(vm, context[87], identifiers[ident_UnnamedADT]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[33] );
          refalrts::reinit_svar( context[10], context[33] );
          refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_svar( context[18], context[15] );
          refalrts::reinit_close_bracket(context[30]);
          refalrts::reinit_close_bracket(context[32]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[77] );
          refalrts::link_brackets( context[85], context[31] );
          refalrts::link_brackets( context[86], context[44] );
          refalrts::link_brackets( context[82], context[32] );
          refalrts::link_brackets( context[83], context[30] );
          refalrts::link_brackets( context[14], context[19] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[86], context[87] );
          res = refalrts::splice_elem( res, context[33] );
          res = refalrts::splice_elem( res, context[85] );
          res = refalrts::splice_evar( res, context[18], context[32] );
          res = refalrts::splice_evar( res, context[10], context[14] );
          res = refalrts::splice_evar( res, context[83], context[84] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[79], context[82] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[77], context[78] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 (/13 e.X#0/63 )/14 s.X#0/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenBracket/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 15
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 HalfReuse: # Brackets/13 } Tile{ HalfReuse: s.LnNum1 #33/30 Reuse: # TkCloseBracket/32 } Tile{ AsIs: e.X#0/63 } Tile{ HalfReuse: (/14 } Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
          refalrts::reinit_svar( context[30], context[33] );
          refalrts::update_ident(context[32], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_svar( context[18], context[15] );
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[14], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[30], context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 (/13 e.X#0/63 )/14 s.X#0/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenCall/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 15
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 HalfReuse: # CallBrackets/13 } Tile{ HalfReuse: s.LnNum1 #33/30 Reuse: # TkCloseCall/32 } Tile{ AsIs: e.X#0/63 } Tile{ HalfReuse: (/14 } Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
          refalrts::reinit_svar( context[30], context[33] );
          refalrts::update_ident(context[32], identifiers[ident_TkCloseCall]);
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_svar( context[18], context[15] );
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[14], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[30], context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 (/13 e.X#0/63 )/14 s.X#0/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenBracket/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 15
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/69 Tile{ HalfReuse: # TkOpenBracket/30 HalfReuse: >/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseBracket/14 } Tile{ AsIs: e.X#0/63 } (/70 Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[30], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_call(context[32]);
          refalrts::reinit_ident(context[14], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_svar( context[18], context[15] );
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[70], context[19] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_elem( res, context[70] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[69] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 (/13 e.X#0/63 )/14 s.X#0/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenCall/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 15
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/69 Tile{ HalfReuse: # TkOpenCall/30 HalfReuse: >/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseCall/14 } Tile{ AsIs: e.X#0/63 } (/70 Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[30], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_call(context[32]);
          refalrts::reinit_ident(context[14], identifiers[ident_TkCloseCall]);
          refalrts::reinit_svar( context[18], context[15] );
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[70], context[19] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_elem( res, context[70] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[69] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 (/13 e.X#0/63 )/14 s.X#0/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 s.OpenBracket#1/44 )/31 e.Tail#1/67 >/1
        context[61] = context[53];
        context[62] = context[54];
        context[63] = context[55];
        context[64] = context[56];
        context[65] = context[57];
        context[66] = context[58];
        context[67] = context[59];
        context[68] = context[60];
        // closed e.MultiBracket#1 as range 61
        // closed e.X#0 as range 63
        // closed e.X0#0 as range 65
        // closed e.Tail#1 as range 67
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.OpenBracket#1: 44
        //DEBUG: e.MultiBracket#1: 61
        //DEBUG: e.X#0: 63
        //DEBUG: e.X0#0: 65
        //DEBUG: e.Tail#1: 67

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/69 Tile{ AsIs: s.OpenBracket#1/44 } Tile{ HalfReuse: >/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: </14 } & DoParseResult$10\2*2/70 s.OpenBracket#1/44/71 >/72 Tile{ AsIs: e.X#0/63 } (/73 Tile{ HalfReuse: s.X0 #15/18 AsIs: e.X0#0/65 AsIs: )/19 HalfReuse: )/30 } Tile{ AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::alloc_name(vm, context[70], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::copy_stvar(vm, context[71], context[44]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_close_call(context[32]);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_svar( context[18], context[15] );
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[10], context[30] );
        refalrts::link_brackets( context[73], context[19] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[18], context[30] );
        res = refalrts::splice_elem( res, context[73] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[70], context[72] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[69] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/53 (/63 s.BracketsSign#1/65 s.OpenLnNum#1/66 s.CloseBracket#1/67 e.Scanned#1/61 )/64 )/10 (/13 e.X#0/55 )/14 s.X#0/15 (/18 e.X0#0/57 )/19 (/30 # Close/32 s.LnNum#1/33 s.CloseBracket#1/44 )/31 e.Tail#1/59 >/1
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      context[60] = context[52];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[32] ) )
        continue;
      context[61] = 0;
      context[62] = 0;
      context[63] = refalrts::brackets_right( context[61], context[62], context[53], context[54] );
      if( ! context[63] )
        continue;
      refalrts::bracket_pointers(context[63], context[64]);
      // closed e.MultiBracket#1 as range 53
      // closed e.X#0 as range 55
      // closed e.X0#0 as range 57
      // closed e.Tail#1 as range 59
      if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
        continue;
      if( ! refalrts::svar_left( context[66], context[61], context[62] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[67], context[44], context[61], context[62] ) )
        continue;
      // closed e.Scanned#1 as range 61
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 33
      //DEBUG: s.CloseBracket#1: 44
      //DEBUG: e.MultiBracket#1: 53
      //DEBUG: e.X#0: 55
      //DEBUG: e.X0#0: 57
      //DEBUG: e.Tail#1: 59
      //DEBUG: s.BracketsSign#1: 65
      //DEBUG: s.OpenLnNum#1: 66
      //DEBUG: e.Scanned#1: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/65 s.OpenLnNum#1/66 s.CloseBracket#1/67 {REMOVED TILE} {REMOVED TILE} (/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Close/32 s.LnNum#1/33 s.CloseBracket#1/44 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@3/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/53 HalfReuse: )/63 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/61 } Tile{ AsIs: )/64 HalfReuse: s.BracketsSign1 #65/10 AsIs: (/13 AsIs: e.X#0/55 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/57 } Tile{ AsIs: )/19 } Tile{ AsIs: )/31 AsIs: e.Tail#1/59 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[63]);
      refalrts::reinit_svar( context[10], context[65] );
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[31] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[30], context[64] );
      refalrts::link_brackets( context[9], context[63] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[64], context[15] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[63], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 (/13 e.X#0/36 )/14 s.X#0/15 (/18 e.X0#0/38 )/19 (/30 # TkOpenBlock/32 s.LnNum#1/33 )/31 e.Tail#1/40 >/1
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[27];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    // closed e.MultiBracket#1 as range 34
    // closed e.X#0 as range 36
    // closed e.X0#0 as range 38
    // closed e.Tail#1 as range 40
    //DEBUG: t.X#0: 5
    //DEBUG: s.X#0: 15
    //DEBUG: s.LnNum#1: 33
    //DEBUG: e.MultiBracket#1: 34
    //DEBUG: e.X#0: 36
    //DEBUG: e.X0#0: 38
    //DEBUG: e.Tail#1: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Fetch@4/19 AsIs: (/30 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.X#0/5 } Tile{ AsIs: e.Tail#1/40 } Tile{ HalfReuse: >/18 } Tile{ AsIs: )/31 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/36 AsIs: )/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/38 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[32]);
    refalrts::reinit_name(context[19], functions[efunc_gen_Fetch_Z4]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[19], context[30] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@3/4 t.new#7/5 (/9 e.new#10/20 (/30 s.new#11/32 s.new#12/33 s.new#13/34 e.new#14/28 )/31 )/10 (/13 e.new#15/22 )/14 s.new#8/15 (/18 e.new#16/24 )/19 e.new#9/26 >/1
    context[20] = context[7];
    context[21] = context[8];
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_right( context[28], context[29], context[20], context[21] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.new#10 as range 20
    // closed e.new#15 as range 22
    // closed e.new#16 as range 24
    // closed e.new#9 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[28], context[29] ) )
      continue;
    // closed e.new#14 as range 28
    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenBracket/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"(\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenBracket/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenBracket]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseBracket/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \")\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseBracket/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseBracket]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenCall/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"<\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenCall/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenCall]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseCall/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \">\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseCall/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseCall]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenADT/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"[\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkOpenADT/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkOpenADT]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseADT/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"]\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # TkCloseADT/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_TkCloseADT]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # Brackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"(\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # Brackets/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # ADT-Brackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"[\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # CallBrackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 15
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"<\""/46 >/48 Tile{ AsIs: (/18 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/30 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: # CallBrackets/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/49 )/50 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_open_call(context[32]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[30], context[19] );
      refalrts::link_brackets( context[10], context[50] );
      refalrts::link_brackets( context[14], context[49] );
      refalrts::link_brackets( context[18], context[31] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 s.BracketsSign#1/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
    context[35] = context[20];
    context[36] = context[21];
    context[37] = context[28];
    context[38] = context[29];
    context[39] = context[22];
    context[40] = context[23];
    context[41] = context[24];
    context[42] = context[25];
    context[43] = context[26];
    context[44] = context[27];
    // closed e.MultiBracket#1 as range 35
    // closed e.Scanned#1 as range 37
    // closed e.X#0 as range 39
    // closed e.X0#0 as range 41
    // closed e.Tail#1 as range 43
    //DEBUG: t.X#0: 5
    //DEBUG: s.BracketsSign#1: 32
    //DEBUG: s.OpenLnNum#1: 33
    //DEBUG: s.CloseBracket#1: 34
    //DEBUG: s.X#0: 15
    //DEBUG: e.MultiBracket#1: 35
    //DEBUG: e.Scanned#1: 37
    //DEBUG: e.X#0: 39
    //DEBUG: e.X0#0: 41
    //DEBUG: e.Tail#1: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \""/47 </49 Tile{ HalfReuse: & StrFromBracket*9/30 AsIs: s.BracketsSign#1/32 } >/50 '\"'/51 >/52 (/53 Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/31 } Tile{ AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ HalfReuse: (/10 HalfReuse: s.BracketsSign1 #32/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/54 )/55 Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_char(vm, context[51], '\"');
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::reinit_name(context[30], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_svar( context[13], context[32] );
    refalrts::reinit_open_bracket(context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[10], context[55] );
    refalrts::link_brackets( context[14], context[54] );
    refalrts::link_brackets( context[53], context[31] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[10], context[15] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[50], context[53] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[47], context[49] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@3/4 t.new#7/5 (/9 )/10 (/13 e.new#10/20 )/14 s.new#8/15 (/18 e.new#11/22 )/19 e.new#9/24 >/1
    context[20] = context[11];
    context[21] = context[12];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[2];
    context[25] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#10 as range 20
    // closed e.new#11 as range 22
    // closed e.new#9 as range 24
    do {
      // </0 & DoParseResult@3/4 t.new#12/5 (/9 )/10 (/13 e.new#17/26 )/14 s.new#13/15 (/18 e.new#18/28 )/19 (/34 # Close/36 s.new#14/37 s.new#15/38 )/35 e.new#16/30 >/1
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = refalrts::ident_left( identifiers[ident_Close], context[32], context[33] );
      if( ! context[36] )
        continue;
      // closed e.new#17 as range 26
      // closed e.new#18 as range 28
      // closed e.new#16 as range 30
      if( ! refalrts::svar_left( context[37], context[32], context[33] ) )
        continue;
      if( ! refalrts::svar_left( context[38], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenBracket/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"(\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseBracket/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \")\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \")\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenCall/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"<\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseCall/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \">\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \">\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenADT/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"[\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseADT/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"]\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"]\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # Brackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"(\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # ADT-Brackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"[\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # CallBrackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 15
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } Tile{ HalfReuse: 'b'/18 }"alanced bracket \"<\""/47 >/49 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[19], context[37] );
        refalrts::reinit_char(context[34], 'U');
        refalrts::reinit_char(context[36], 'n');
        refalrts::reinit_char(context[18], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[0], context[6] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/39 )/14 s.X#0/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 s.CloseBracket#1/38 )/35 e.Tail#1/43 >/1
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 15
      //DEBUG: s.LnNum#1: 37
      //DEBUG: s.CloseBracket#1: 38
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #37/19 HalfReuse: 'U'/34 HalfReuse: 'n'/36 } 'b'/47 Tile{ HalfReuse: 'a'/18 }"lanced bracket \""/48 </50 & StrFromBracket*9/51 Tile{ AsIs: s.CloseBracket#1/38 } >/52 '\"'/53 >/54 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/39 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/41 } )/55 Tile{ AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_char(vm, context[47], 'b');
      refalrts::alloc_chars(vm, context[48], context[49], "lanced bracket \"", 16);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_char(vm, context[53], '\"');
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[19], context[37] );
      refalrts::reinit_char(context[34], 'U');
      refalrts::reinit_char(context[36], 'n');
      refalrts::reinit_char(context[18], 'a');
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[13], context[35] );
      refalrts::link_brackets( context[14], context[55] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[48], context[51] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[19], context[36] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@3/4 t.X#0/5 (/9 )/10 (/13 e.X#0/26 )/14 s.X#0/15 (/18 e.X0#0/28 )/19 e.Tail#1/30 >/1
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    // closed e.X#0 as range 26
    // closed e.X0#0 as range 28
    // closed e.Tail#1 as range 30
    //DEBUG: t.X#0: 5
    //DEBUG: s.X#0: 15
    //DEBUG: e.X#0: 26
    //DEBUG: e.X0#0: 28
    //DEBUG: e.Tail#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@3/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/18 {REMOVED TILE} )/19 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.X#0/5 } Tile{ AsIs: (/13 AsIs: e.X#0/26 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/28 } Tile{ HalfReuse: )/9 AsIs: )/10 } Tile{ AsIs: e.Tail#1/30 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[14]);
    refalrts::reinit_close_bracket(context[9]);
    refalrts::link_brackets( context[13], context[10] );
    refalrts::link_brackets( context[14], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@3/4 t.X#0/5 (/9 e.dyn#0/7 )/10 (/13 e.X#0/11 )/14 s.X#0/15 (/18 e.X0#0/16 )/19 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.X#0 as range 11
  // closed e.X0#0 as range 16
  // closed e.dyn#2 as range 2
  //DEBUG: t.X#0: 5
  //DEBUG: s.X#0: 15
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.X#0: 11
  //DEBUG: e.X0#0: 16
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/11 HalfReuse: (/14 AsIs: s.X#0/15 } Tile{ AsIs: e.X0#0/16 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_close_bracket(context[18]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[19] );
  refalrts::link_brackets( context[14], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z3("DoParseResult@3", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z3);


static refalrts::FnResult func_gen_DoParseResult_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & DoParseResult@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@4/4 t.new#1/5 (/9 e.new#2/7 )/10 s.new#3/11 (/14 e.new#4/12 )/15 e.new#5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new#4 as range 12
  // closed e.new#5 as range 2
  do {
    // </0 & DoParseResult@4/4 t.new#6/5 (/9 e.new#12/16 )/10 s.new#7/11 (/14 e.new#13/18 )/15 (/24 s.new#8/26 s.new#9/27 e.new#10/22 )/25 e.new#11/20 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new#12 as range 16
    // closed e.new#13 as range 18
    // closed e.new#11 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    // closed e.new#10 as range 22
    do {
      // </0 & DoParseResult@4/4 t.new#14/5 (/9 e.new#20/28 )/10 s.new#15/11 (/14 e.new#21/30 )/15 (/24 s.new#17/26 s.new#18/27 s.new#19/36 )/25 e.new#16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new#20 as range 28
      // closed e.new#21 as range 30
      // closed e.new#16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/37 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/39 )/15 (/24 # TkChar/26 s.LnNum#1/27 s.Char#1/36 )/25 e.Tail#1/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[26] ) )
          continue;
        // closed e.MultiBracket#1 as range 37
        // closed e.Name0#1 as range 39
        // closed e.Tail#1 as range 41
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 27
        //DEBUG: s.Char#1: 36
        //DEBUG: e.MultiBracket#1: 37
        //DEBUG: e.Name0#1: 39
        //DEBUG: e.Tail#1: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/37 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } (/43 Tile{ AsIs: e.Name0#1/39 } )/44 Tile{ AsIs: )/15 AsIs: (/24 Reuse: # Symbol/26 } # Char/45 Tile{ AsIs: s.Char#1/36 AsIs: )/25 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[43]);
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::alloc_ident(vm, context[45], identifiers[ident_Char]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
        refalrts::update_ident(context[26], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[43], context[44] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[36];
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[15], context[26] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/37 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/39 )/15 (/24 # TkNumber/26 s.LnNum#1/27 s.Number#1/36 )/25 e.Tail#1/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 37
      // closed e.Name0#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 27
      //DEBUG: s.Number#1: 36
      //DEBUG: e.MultiBracket#1: 37
      //DEBUG: e.Name0#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/37 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } (/43 Tile{ AsIs: e.Name0#1/39 } )/44 Tile{ AsIs: )/15 AsIs: (/24 Reuse: # Symbol/26 } # Number/45 Tile{ AsIs: s.Number#1/36 AsIs: )/25 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_ident(vm, context[45], identifiers[ident_Number]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
      refalrts::update_ident(context[26], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[36];
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[15], context[26] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/28 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/30 )/15 (/24 # TkName/26 s.LnNum#1/27 e.Name#1/32 )/25 e.Tail#1/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Name0#1 as range 30
      // closed e.Name#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Name0#1: 30
      //DEBUG: e.Name#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } (/36 Tile{ AsIs: e.Name0#1/30 } )/37 )/38 Tile{ HalfReuse: (/15 HalfReuse: # Symbol/24 Reuse: # Name/26 AsIs: s.LnNum#1/27 AsIs: e.Name#1/32 AsIs: )/25 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_Symbol]);
      refalrts::update_ident(context[26], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[25] );
      refalrts::link_brackets( context[14], context[38] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.new#14/5 (/9 e.new#18/28 )/10 s.new#15/11 (/14 e.new#19/30 )/15 (/24 # TkIdentMarker/26 s.new#17/27 )/25 e.new#16/32 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new#18 as range 28
      // closed e.new#19 as range 30
      // closed e.new#16 as range 32
      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/36 )/15 (/24 # TkIdentMarker/26 s.MarkerLnNum#1/27 )/25 (/42 # TkName/44 s.NameLnNum#1/45 e.Name#1/40 )/43 e.Tail#1/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = 0;
        context[41] = 0;
        context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
        if( ! context[42] )
          continue;
        refalrts::bracket_pointers(context[42], context[43]);
        context[44] = refalrts::ident_left( identifiers[ident_TkName], context[40], context[41] );
        if( ! context[44] )
          continue;
        // closed e.MultiBracket#1 as range 34
        // closed e.Name0#1 as range 36
        // closed e.Tail#1 as range 38
        if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
          continue;
        // closed e.Name#1 as range 40
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.MarkerLnNum#1: 27
        //DEBUG: e.MultiBracket#1: 34
        //DEBUG: e.Name0#1: 36
        //DEBUG: e.Tail#1: 38
        //DEBUG: s.NameLnNum#1: 45
        //DEBUG: e.Name#1: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MarkerLnNum#1/27 {REMOVED TILE} s.NameLnNum#1/45 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name0#1/36 } Tile{ AsIs: )/15 } Tile{ AsIs: )/25 AsIs: (/42 Reuse: # Symbol/44 } Tile{ Reuse: # Identifier/26 } Tile{ AsIs: e.Name#1/40 } Tile{ AsIs: )/43 AsIs: e.Tail#1/38 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
        refalrts::update_ident(context[44], identifiers[ident_Symbol]);
        refalrts::update_ident(context[26], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[42], context[43] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[43];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[25], context[44] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/34 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/36 )/15 (/24 # TkIdentMarker/26 s.LnNum#1/27 )/25 e.Tail#1/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      // closed e.MultiBracket#1 as range 34
      // closed e.Name0#1 as range 36
      // closed e.Tail#1 as range 38
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 27
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Name0#1: 36
      //DEBUG: e.Tail#1: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </40 & DoParseResult/41 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LnNum1 #27/9 } 'M'/42 Tile{ HalfReuse: 'i'/26 }"ssed name after \"#\""/43 >/45 (/46 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/25 } Tile{ HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/36 AsIs: )/15 HalfReuse: )/24 } Tile{ AsIs: e.Tail#1/38 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_DoParseResult]);
      refalrts::alloc_char(vm, context[42], 'M');
      refalrts::alloc_chars(vm, context[43], context[44], "ssed name after \"#\"", 19);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'i');
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[10], context[24] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[46], context[25] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/28 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/30 )/15 (/24 # TkCompound/26 s.LnNum#1/27 e.Name#1/32 )/25 e.Tail#1/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 28
      // closed e.Name0#1 as range 30
      // closed e.Name#1 as range 32
      // closed e.Tail#1 as range 34
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 27
      //DEBUG: e.MultiBracket#1: 28
      //DEBUG: e.Name0#1: 30
      //DEBUG: e.Name#1: 32
      //DEBUG: e.Tail#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } (/36 Tile{ AsIs: e.Name0#1/30 } )/37 Tile{ AsIs: )/15 AsIs: (/24 Reuse: # Symbol/26 } # Identifier/38 Tile{ AsIs: e.Name#1/32 } Tile{ AsIs: )/25 AsIs: e.Tail#1/34 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_Identifier]);
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
      refalrts::update_ident(context[26], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[15], context[26] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.new#14/5 (/9 e.new#21/28 )/10 s.new#15/11 (/14 e.new#22/30 )/15 (/24 s.new#17/26 s.new#18/27 s.new#19/36 e.new#20/32 )/25 e.new#16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new#21 as range 28
      // closed e.new#22 as range 30
      // closed e.new#16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      // closed e.new#20 as range 32
      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/37 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/39 )/15 (/24 # TkVariable/26 s.LnNum#1/27 s.Mode#1/36 e.Index#1/41 )/25 e.Tail#1/43 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[26] ) )
          continue;
        // closed e.MultiBracket#1 as range 37
        // closed e.Name0#1 as range 39
        // closed e.Index#1 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 27
        //DEBUG: s.Mode#1: 36
        //DEBUG: e.MultiBracket#1: 37
        //DEBUG: e.Name0#1: 39
        //DEBUG: e.Index#1: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@5/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/37 AsIs: )/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 } (/45 Tile{ AsIs: e.Name0#1/39 } )/46 Tile{ AsIs: )/15 AsIs: (/24 AsIs: # TkVariable/26 AsIs: s.LnNum#1/27 AsIs: s.Mode#1/36 AsIs: e.Index#1/41 AsIs: )/25 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[45]);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z5]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@4/4 t.new#23/5 (/9 e.new#29/37 )/10 s.new#24/11 (/14 e.new#30/39 )/15 (/24 s.new#26/26 s.new#27/27 s.new#28/36 )/25 e.new#25/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      // closed e.new#29 as range 37
      // closed e.new#30 as range 39
      // closed e.new#25 as range 41
      do {
        // </0 & DoParseResult@4/4 t.new#31/5 (/9 e.new#36/43 )/10 s.new#32/11 (/14 e.new#37/45 )/15 (/24 # Open/26 s.new#34/27 s.new#35/36 )/25 e.new#33/47 >/1
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        context[48] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[26] ) )
          continue;
        // closed e.new#36 as range 43
        // closed e.new#37 as range 45
        // closed e.new#33 as range 47
        do {
          // </0 & DoParseResult@4/4 t.new#38/5 (/9 e.new#42/49 )/10 s.new#39/11 (/14 e.new#43/51 )/15 (/24 # Open/26 s.new#41/27 # TkOpenADT/36 )/25 e.new#40/53 >/1
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[36] ) )
            continue;
          // closed e.new#42 as range 49
          // closed e.new#43 as range 51
          // closed e.new#40 as range 53
          do {
            // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/55 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/57 )/15 (/24 # Open/26 s.LnNumADT#1/27 # TkOpenADT/36 )/25 (/63 # TkName/65 s.LnNumName#1/66 e.Name#1/61 )/64 e.Tail#1/59 >/1
            context[55] = context[49];
            context[56] = context[50];
            context[57] = context[51];
            context[58] = context[52];
            context[59] = context[53];
            context[60] = context[54];
            context[61] = 0;
            context[62] = 0;
            context[63] = refalrts::brackets_left( context[61], context[62], context[59], context[60] );
            if( ! context[63] )
              continue;
            refalrts::bracket_pointers(context[63], context[64]);
            context[65] = refalrts::ident_left( identifiers[ident_TkName], context[61], context[62] );
            if( ! context[65] )
              continue;
            // closed e.MultiBracket#1 as range 55
            // closed e.Name0#1 as range 57
            // closed e.Tail#1 as range 59
            if( ! refalrts::svar_left( context[66], context[61], context[62] ) )
              continue;
            // closed e.Name#1 as range 61
            //DEBUG: t.ErrorList#2: 5
            //DEBUG: s.LnNumName0#1: 11
            //DEBUG: s.LnNumADT#1: 27
            //DEBUG: e.MultiBracket#1: 55
            //DEBUG: e.Name0#1: 57
            //DEBUG: e.Tail#1: 59
            //DEBUG: s.LnNumName#1: 66
            //DEBUG: e.Name#1: 61

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNumName#1/66 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@4/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/55 HalfReuse: (/10 } Tile{ Reuse: # ADT-Brackets/65 } Tile{ AsIs: s.LnNumADT#1/27 Reuse: # TkCloseADT/36 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/57 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ HalfReuse: s.LnNumName1 #66/25 AsIs: (/63 } Tile{ AsIs: e.Name#1/61 } Tile{ AsIs: )/64 AsIs: e.Tail#1/59 AsIs: >/1 ]] }
            refalrts::reinit_open_bracket(context[10]);
            refalrts::update_ident(context[65], identifiers[ident_ADTm_Brackets]);
            refalrts::update_ident(context[36], identifiers[ident_TkCloseADT]);
            refalrts::reinit_close_bracket(context[24]);
            refalrts::reinit_close_bracket(context[26]);
            refalrts::reinit_svar( context[25], context[66] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[63], context[64] );
            refalrts::link_brackets( context[9], context[26] );
            refalrts::link_brackets( context[10], context[24] );
            refalrts::link_brackets( context[14], context[15] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[64];
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[25], context[63] );
            res = refalrts::splice_evar( res, context[11], context[26] );
            res = refalrts::splice_evar( res, context[27], context[36] );
            res = refalrts::splice_elem( res, context[65] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/55 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/57 )/15 (/24 # Open/26 s.LnNum#1/27 # TkOpenADT/36 )/25 e.Tail#1/59 >/1
          context[55] = context[49];
          context[56] = context[50];
          context[57] = context[51];
          context[58] = context[52];
          context[59] = context[53];
          context[60] = context[54];
          // closed e.MultiBracket#1 as range 55
          // closed e.Name0#1 as range 57
          // closed e.Tail#1 as range 59
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNumName0#1: 11
          //DEBUG: s.LnNum#1: 27
          //DEBUG: e.MultiBracket#1: 55
          //DEBUG: e.Name0#1: 57
          //DEBUG: e.Tail#1: 59

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </61 & DoParseResult/62 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.LnNum1 #27/9 }"Expected name after \"[\""/63 >/65 (/66 Tile{ AsIs: e.MultiBracket#1/55 } (/67 # ADT-Brackets/68 Tile{ AsIs: s.LnNum#1/27 } Tile{ HalfReuse: # TkCloseADT/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/57 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } (/69 s.LnNum#1/27/70 (/71 # UnnamedADT/72 Tile{ HalfReuse: )/36 AsIs: )/25 AsIs: e.Tail#1/59 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[61]);
          refalrts::alloc_name(vm, context[62], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[63], context[64], "Expected name after \"[\"", 23);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_ADTm_Brackets]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::copy_stvar(vm, context[70], context[27]);
          refalrts::alloc_open_bracket(vm, context[71]);
          refalrts::alloc_ident(vm, context[72], identifiers[ident_UnnamedADT]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[27] );
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_close_bracket(context[36]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[61] );
          refalrts::link_brackets( context[69], context[25] );
          refalrts::link_brackets( context[71], context[36] );
          refalrts::link_brackets( context[66], context[26] );
          refalrts::link_brackets( context[67], context[24] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[36];
          res = refalrts::splice_evar( res, context[69], context[72] );
          res = refalrts::splice_evar( res, context[10], context[26] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[63], context[66] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/49 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/51 )/15 (/24 # Open/26 s.LnNum#1/27 # TkOpenBracket/36 )/25 e.Tail#1/53 >/1
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[36] ) )
            continue;
          // closed e.MultiBracket#1 as range 49
          // closed e.Name0#1 as range 51
          // closed e.Tail#1 as range 53
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNumName0#1: 11
          //DEBUG: s.LnNum#1: 27
          //DEBUG: e.MultiBracket#1: 49
          //DEBUG: e.Name0#1: 51
          //DEBUG: e.Tail#1: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/49 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/25 } Tile{ AsIs: s.LnNum#1/27 Reuse: # TkCloseBracket/36 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/51 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/53 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[25], identifiers[ident_Brackets]);
          refalrts::update_ident(context[36], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[26] );
          refalrts::link_brackets( context[10], context[24] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[11], context[26] );
          res = refalrts::splice_evar( res, context[27], context[36] );
          res = refalrts::splice_elem( res, context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/49 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/51 )/15 (/24 # Open/26 s.LnNum#1/27 # TkOpenCall/36 )/25 e.Tail#1/53 >/1
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[36] ) )
            continue;
          // closed e.MultiBracket#1 as range 49
          // closed e.Name0#1 as range 51
          // closed e.Tail#1 as range 53
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNumName0#1: 11
          //DEBUG: s.LnNum#1: 27
          //DEBUG: e.MultiBracket#1: 49
          //DEBUG: e.Name0#1: 51
          //DEBUG: e.Tail#1: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/49 HalfReuse: (/10 } Tile{ HalfReuse: # CallBrackets/25 } Tile{ AsIs: s.LnNum#1/27 Reuse: # TkCloseCall/36 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/51 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/53 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[25], identifiers[ident_CallBrackets]);
          refalrts::update_ident(context[36], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[26] );
          refalrts::link_brackets( context[10], context[24] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[11], context[26] );
          res = refalrts::splice_evar( res, context[27], context[36] );
          res = refalrts::splice_elem( res, context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/49 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/51 )/15 (/24 # Open/26 s.LnNum#1/27 # TkOpenBracket/36 )/25 e.Tail#1/53 >/1
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[36] ) )
            continue;
          // closed e.MultiBracket#1 as range 49
          // closed e.Name0#1 as range 51
          // closed e.Tail#1 as range 53
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNumName0#1: 11
          //DEBUG: s.LnNum#1: 27
          //DEBUG: e.MultiBracket#1: 49
          //DEBUG: e.Name0#1: 51
          //DEBUG: e.Tail#1: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/49 HalfReuse: (/10 } </55 Tile{ HalfReuse: & DoParseResult$10\1*2/25 } # TkOpenBracket/56 >/57 Tile{ AsIs: s.LnNum#1/27 Reuse: # TkCloseBracket/36 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/51 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/53 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[55]);
          refalrts::alloc_ident(vm, context[56], identifiers[ident_TkOpenBracket]);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_name(context[25], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_ident(context[36], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[26] );
          refalrts::link_brackets( context[10], context[24] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[55] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[11], context[26] );
          res = refalrts::splice_evar( res, context[27], context[36] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[55] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/49 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/51 )/15 (/24 # Open/26 s.LnNum#1/27 # TkOpenCall/36 )/25 e.Tail#1/53 >/1
          context[49] = context[43];
          context[50] = context[44];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[47];
          context[54] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[36] ) )
            continue;
          // closed e.MultiBracket#1 as range 49
          // closed e.Name0#1 as range 51
          // closed e.Tail#1 as range 53
          //DEBUG: t.ErrorList#2: 5
          //DEBUG: s.LnNumName0#1: 11
          //DEBUG: s.LnNum#1: 27
          //DEBUG: e.MultiBracket#1: 49
          //DEBUG: e.Name0#1: 51
          //DEBUG: e.Tail#1: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/49 HalfReuse: (/10 } </55 Tile{ HalfReuse: & DoParseResult$10\1*2/25 } # TkOpenCall/56 >/57 Tile{ AsIs: s.LnNum#1/27 Reuse: # TkCloseCall/36 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/51 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/53 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[55]);
          refalrts::alloc_ident(vm, context[56], identifiers[ident_TkOpenCall]);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_name(context[25], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_ident(context[36], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[26] );
          refalrts::link_brackets( context[10], context[24] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[55] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[11], context[26] );
          res = refalrts::splice_evar( res, context[27], context[36] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[55] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/49 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/51 )/15 (/24 # Open/26 s.LnNum#1/27 s.OpenBracket#1/36 )/25 e.Tail#1/53 >/1
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        context[54] = context[48];
        // closed e.MultiBracket#1 as range 49
        // closed e.Name0#1 as range 51
        // closed e.Tail#1 as range 53
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 27
        //DEBUG: s.OpenBracket#1: 36
        //DEBUG: e.MultiBracket#1: 49
        //DEBUG: e.Name0#1: 51
        //DEBUG: e.Tail#1: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/49 HalfReuse: (/10 } </55 & DoParseResult$10\1*2/56 s.OpenBracket#1/36/57 >/58 Tile{ AsIs: s.LnNum#1/27 } </59 & DoParseResult$10\2*2/60 Tile{ AsIs: s.OpenBracket#1/36 HalfReuse: >/25 } Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/51 AsIs: )/15 HalfReuse: )/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/53 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::copy_stvar(vm, context[57], context[36]);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::alloc_open_call(vm, context[59]);
        refalrts::alloc_name(vm, context[60], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_call(context[25]);
        refalrts::reinit_close_bracket(context[24]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[26] );
        refalrts::link_brackets( context[10], context[24] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[11], context[26] );
        res = refalrts::splice_evar( res, context[36], context[25] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[55], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/43 (/51 s.BracketsSign#1/53 s.OpenLnNum#1/54 s.CloseBracket#1/55 e.Scanned#1/49 )/52 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/45 )/15 (/24 # Close/26 s.LnNum#1/27 s.CloseBracket#1/36 )/25 e.Tail#1/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[26] ) )
        continue;
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::brackets_right( context[49], context[50], context[43], context[44] );
      if( ! context[51] )
        continue;
      refalrts::bracket_pointers(context[51], context[52]);
      // closed e.MultiBracket#1 as range 43
      // closed e.Name0#1 as range 45
      // closed e.Tail#1 as range 47
      if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
        continue;
      if( ! refalrts::svar_left( context[54], context[49], context[50] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[55], context[36], context[49], context[50] ) )
        continue;
      // closed e.Scanned#1 as range 49
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 27
      //DEBUG: s.CloseBracket#1: 36
      //DEBUG: e.MultiBracket#1: 43
      //DEBUG: e.Name0#1: 45
      //DEBUG: e.Tail#1: 47
      //DEBUG: s.BracketsSign#1: 53
      //DEBUG: s.OpenLnNum#1: 54
      //DEBUG: e.Scanned#1: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/53 s.OpenLnNum#1/54 s.CloseBracket#1/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 s.CloseBracket#1/36 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@6/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.MultiBracket#1/43 HalfReuse: )/51 } Tile{ HalfReuse: (/26 } Tile{ AsIs: e.Scanned#1/49 } Tile{ AsIs: )/25 } Tile{ HalfReuse: (/52 HalfReuse: s.BracketsSign1 #53/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/45 AsIs: )/15 HalfReuse: )/24 } Tile{ AsIs: e.Tail#1/47 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z6]);
      refalrts::reinit_close_bracket(context[51]);
      refalrts::reinit_open_bracket(context[26]);
      refalrts::reinit_open_bracket(context[52]);
      refalrts::reinit_svar( context[10], context[53] );
      refalrts::reinit_close_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[52], context[24] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[26], context[25] );
      refalrts::link_brackets( context[9], context[51] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[52], context[24] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::splice_to_freelist_open( vm, context[51], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/28 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/30 )/15 (/24 # TkOpenBlock/26 s.LnNum#1/27 )/25 e.Tail#1/32 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.MultiBracket#1 as range 28
    // closed e.Name0#1 as range 30
    // closed e.Tail#1 as range 32
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: s.LnNumName0#1: 11
    //DEBUG: s.LnNum#1: 27
    //DEBUG: e.MultiBracket#1: 28
    //DEBUG: e.Name0#1: 30
    //DEBUG: e.Tail#1: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 } Tile{ HalfReuse: & Fetch@5/15 AsIs: (/24 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.ErrorList#2/5 } Tile{ AsIs: e.Tail#1/32 } Tile{ HalfReuse: >/26 } Tile{ AsIs: )/25 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/28 AsIs: )/10 AsIs: s.LnNumName0#1/11 } Tile{ AsIs: e.Name0#1/30 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Fetch_Z5]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[15], context[24] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@4/4 t.new#6/5 (/9 e.new#9/16 (/24 s.new#10/26 s.new#11/27 s.new#12/28 e.new#13/22 )/25 )/10 s.new#7/11 (/14 e.new#14/18 )/15 e.new#8/20 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_right( context[22], context[23], context[16], context[17] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new#9 as range 16
    // closed e.new#14 as range 18
    // closed e.new#8 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[28], context[22], context[23] ) )
      continue;
    // closed e.new#13 as range 22
    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkOpenBracket/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"(\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkOpenBracket/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"(\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkOpenBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkCloseBracket/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \")\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkCloseBracket/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \")\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkCloseBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkOpenCall/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"<\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkOpenCall/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"<\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkOpenCall]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkCloseCall/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \">\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkCloseCall/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \">\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkCloseCall]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkOpenADT/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"[\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkOpenADT/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"[\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkOpenADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # TkCloseADT/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"]\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # TkCloseADT/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"]\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_TkCloseADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # Brackets/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"(\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # Brackets/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"(\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_Brackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # ADT-Brackets/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"[\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # ADT-Brackets/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"[\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_ADTm_Brackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 # CallBrackets/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
      context[29] = context[16];
      context[30] = context[17];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[18];
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[26] ) )
        continue;
      // closed e.MultiBracket#1 as range 29
      // closed e.Scanned#1 as range 31
      // closed e.Name0#1 as range 33
      // closed e.Tail#1 as range 35
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.OpenLnNum#1: 27
      //DEBUG: s.CloseBracket#1: 28
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: e.MultiBracket#1: 29
      //DEBUG: e.Scanned#1: 31
      //DEBUG: e.Name0#1: 33
      //DEBUG: e.Tail#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unba"/39 Tile{ HalfReuse: 'l'/26 }"anced bracket \"<\""/41 >/43 Tile{ AsIs: (/24 } Tile{ AsIs: e.MultiBracket#1/29 } )/44 (/45 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: # CallBrackets/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/46 )/47 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[39], context[40], "Unba", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "anced bracket \"<\"", 17);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[27] );
      refalrts::reinit_char(context[26], 'l');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_ident(context[10], identifiers[ident_CallBrackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[25], context[46] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[24], context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[25], context[15] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.MultiBracket#1/29 (/24 s.BracketsSign#1/26 s.OpenLnNum#1/27 s.CloseBracket#1/28 e.Scanned#1/31 )/25 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/33 )/15 e.Tail#1/35 >/1
    context[29] = context[16];
    context[30] = context[17];
    context[31] = context[22];
    context[32] = context[23];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[21];
    // closed e.MultiBracket#1 as range 29
    // closed e.Scanned#1 as range 31
    // closed e.Name0#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: s.BracketsSign#1: 26
    //DEBUG: s.OpenLnNum#1: 27
    //DEBUG: s.CloseBracket#1: 28
    //DEBUG: s.LnNumName0#1: 11
    //DEBUG: e.MultiBracket#1: 29
    //DEBUG: e.Scanned#1: 31
    //DEBUG: e.Name0#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/27 s.CloseBracket#1/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & DoParseResult/38 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList#2/5 HalfReuse: s.OpenLnNum1 #27/9 }"Unbalanced bracket \""/39 </41 Tile{ HalfReuse: & StrFromBracket*9/24 AsIs: s.BracketsSign#1/26 } >/42 '\"'/43 >/44 (/45 Tile{ AsIs: e.MultiBracket#1/29 } )/46 (/47 Tile{ AsIs: e.Scanned#1/31 } Tile{ HalfReuse: (/25 HalfReuse: s.BracketsSign1 #26/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/33 AsIs: )/15 } )/48 )/49 Tile{ AsIs: e.Tail#1/35 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[39], context[40], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_char(vm, context[43], '\"');
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[27] );
    refalrts::reinit_name(context[24], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::reinit_open_bracket(context[25]);
    refalrts::reinit_svar( context[10], context[26] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[47], context[49] );
    refalrts::link_brackets( context[25], context[48] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[45], context[46] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[41] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[25], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[42], context[45] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@4/4 t.new#6/5 (/9 )/10 s.new#7/11 (/14 e.new#9/16 )/15 e.new#8/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[2];
    context[19] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#9 as range 16
    // closed e.new#8 as range 18
    do {
      // </0 & DoParseResult@4/4 t.new#10/5 (/9 )/10 s.new#11/11 (/14 e.new#15/20 )/15 (/26 # Close/28 s.new#12/29 s.new#13/30 )/27 e.new#14/22 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      context[28] = refalrts::ident_left( identifiers[ident_Close], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.new#15 as range 20
      // closed e.new#14 as range 22
      if( ! refalrts::svar_left( context[29], context[24], context[25] ) )
        continue;
      if( ! refalrts::svar_left( context[30], context[24], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkOpenBracket/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"(\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkCloseBracket/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \")\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \")\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkOpenCall/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"<\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkCloseCall/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \">\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \">\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkOpenADT/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"[\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # TkCloseADT/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"]\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"]\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # Brackets/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"(\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # ADT-Brackets/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"[\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 # CallBrackets/30 )/27 e.Tail#1/33 >/1
        context[31] = context[20];
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[30] ) )
          continue;
        // closed e.Name0#1 as range 31
        // closed e.Tail#1 as range 33
        //DEBUG: t.ErrorList#2: 5
        //DEBUG: s.LnNumName0#1: 11
        //DEBUG: s.LnNum#1: 29
        //DEBUG: e.Name0#1: 31
        //DEBUG: e.Tail#1: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 HalfReuse: 'U'/30 HalfReuse: 'n'/27 } Tile{ HalfReuse: 'b'/28 }"alanced bracket \"<\""/37 >/39 (/40 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[37], context[38], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_char(context[30], 'U');
        refalrts::reinit_char(context[27], 'n');
        refalrts::reinit_char(context[28], 'b');
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[26] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[40], context[9] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[26] );
        res = refalrts::splice_evar( res, context[37], context[40] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[29], context[27] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/31 )/15 (/26 # Close/28 s.LnNum#1/29 s.CloseBracket#1/30 )/27 e.Tail#1/33 >/1
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      // closed e.Name0#1 as range 31
      // closed e.Tail#1 as range 33
      //DEBUG: t.ErrorList#2: 5
      //DEBUG: s.LnNumName0#1: 11
      //DEBUG: s.LnNum#1: 29
      //DEBUG: s.CloseBracket#1: 30
      //DEBUG: e.Name0#1: 31
      //DEBUG: e.Tail#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList#2/5 } Tile{ AsIs: s.LnNum#1/29 } 'U'/37 Tile{ HalfReuse: 'n'/28 }"balanced bracket \""/38 </40 & StrFromBracket*9/41 Tile{ AsIs: s.CloseBracket#1/30 HalfReuse: >/27 } '\"'/42 >/43 (/44 Tile{ HalfReuse: )/9 HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/31 AsIs: )/15 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_char(vm, context[37], 'U');
      refalrts::alloc_chars(vm, context[38], context[39], "balanced bracket \"", 18);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_char(vm, context[42], '\"');
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::update_name(context[4], functions[efunc_DoParseResult]);
      refalrts::reinit_char(context[28], 'n');
      refalrts::reinit_close_call(context[27]);
      refalrts::reinit_close_bracket(context[9]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[26] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[44], context[9] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[9], context[26] );
      res = refalrts::splice_evar( res, context[42], context[44] );
      res = refalrts::splice_evar( res, context[30], context[27] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/20 )/15 e.Tail#1/22 >/1
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    context[23] = context[19];
    // closed e.Name0#1 as range 20
    // closed e.Tail#1 as range 22
    //DEBUG: t.ErrorList#2: 5
    //DEBUG: s.LnNumName0#1: 11
    //DEBUG: e.Name0#1: 20
    //DEBUG: e.Tail#1: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@4/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList#2/5 } Tile{ HalfReuse: (/10 AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/20 AsIs: )/15 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tail#1/22 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[10], context[1] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[10], context[15] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@4/4 t.ErrorList#2/5 (/9 e.dyn#0/7 )/10 s.LnNumName0#1/11 (/14 e.Name0#1/12 )/15 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.Name0#1 as range 12
  // closed e.dyn#2 as range 2
  //DEBUG: t.ErrorList#2: 5
  //DEBUG: s.LnNumName0#1: 11
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.Name0#1: 12
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.ErrorList#2/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 } (/16 Tile{ AsIs: s.LnNumName0#1/11 AsIs: (/14 AsIs: e.Name0#1/12 AsIs: )/15 } )/17 Tile{ AsIs: e.dyn#2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z4("DoParseResult@4", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z4);


static refalrts::FnResult func_gen_Fetch_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Fetch@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@3/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & Fetch@3/4 (/7 (/27 e.0#0/25 )/28 t.0#0/29 e.1#0/17 )/8 (/11 e.MultiBracket#1/19 )/12 (/15 e.Scanned0#1/21 )/16 e.Block#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[17], context[18] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.0#0 as range 25
    // closed e.MultiBracket#1 as range 19
    // closed e.Scanned0#1 as range 21
    // closed e.Block#2 as range 23
    context[30] = refalrts::tvar_left( context[29], context[17], context[18] );
    if( ! context[30] )
      continue;
    // closed e.1#0 as range 17
    //DEBUG: e.0#0: 25
    //DEBUG: e.MultiBracket#1: 19
    //DEBUG: e.Scanned0#1: 21
    //DEBUG: e.Block#2: 23
    //DEBUG: t.0#0: 29
    //DEBUG: e.1#0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoParseResult@2/31 Tile{ AsIs: t.0#0/29 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/19 AsIs: )/12 AsIs: (/15 AsIs: e.Scanned0#1/21 HalfReuse: (/16 } Tile{ HalfReuse: # Closure/8 } Tile{ AsIs: e.Block#2/23 } Tile{ HalfReuse: )/4 HalfReuse: )/7 AsIs: (/27 AsIs: e.0#0/25 AsIs: )/28 } Tile{ AsIs: e.1#0/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoParseResult_Z2]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[8], identifiers[ident_Closure]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[7] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[28] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@3/4 (/7 e.Argument#1/17 )/8 (/11 e.MultiBracket#1/19 )/12 (/15 e.Scanned0#1/21 )/16 e.Block#2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Argument#1 as range 17
    // closed e.MultiBracket#1 as range 19
    // closed e.Scanned0#1 as range 21
    // closed e.Block#2 as range 23
    //DEBUG: e.Argument#1: 17
    //DEBUG: e.MultiBracket#1: 19
    //DEBUG: e.Scanned0#1: 21
    //DEBUG: e.Block#2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoParseResult$12\1*1/8 AsIs: (/11 AsIs: e.MultiBracket#1/19 AsIs: )/12 AsIs: (/15 AsIs: e.Scanned0#1/21 HalfReuse: (/16 } # Closure/25 Tile{ AsIs: e.Block#2/23 } Tile{ HalfReuse: )/4 HalfReuse: )/7 } Tile{ AsIs: e.Argument#1/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Closure]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[7] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@3/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 (/15 e.Scanned0#1/13 )/16 e.Block#2/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.Scanned0#1 as range 13
  // closed e.Block#2 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.Scanned0#1: 13
  //DEBUG: e.Block#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } Tile{ HalfReuse: [*]/7 } Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Scanned0#1/13 HalfReuse: (/16 } # Closure/17 Tile{ AsIs: e.Block#2/2 } )/18 )/19 {*}/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Closure]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_unwrapped_closure(vm, context[20], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[19] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[20] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z3("Fetch@3", COOKIE1_, COOKIE2_, func_gen_Fetch_Z3);


static refalrts::FnResult func_gen_Fetch_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Fetch@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@4/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 s.new#4/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 2
  do {
    // </0 & Fetch@4/4 (/7 (/28 e.0#0/26 )/29 t.0#0/30 e.1#0/18 )/8 (/11 e.MultiBracket#1/20 )/12 (/15 e.X#0/22 )/16 s.X#0/17 e.X0#0/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[18], context[19] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.0#0 as range 26
    // closed e.MultiBracket#1 as range 20
    // closed e.X#0 as range 22
    // closed e.X0#0 as range 24
    context[31] = refalrts::tvar_left( context[30], context[18], context[19] );
    if( ! context[31] )
      continue;
    // closed e.1#0 as range 18
    //DEBUG: s.X#0: 17
    //DEBUG: e.0#0: 26
    //DEBUG: e.MultiBracket#1: 20
    //DEBUG: e.X#0: 22
    //DEBUG: e.X0#0: 24
    //DEBUG: t.0#0: 30
    //DEBUG: e.1#0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoParseResult@3/32 Tile{ AsIs: t.0#0/30 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/20 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/22 HalfReuse: (/16 AsIs: s.X#0/17 AsIs: e.X0#0/24 HalfReuse: )/1 } Tile{ HalfReuse: )/4 HalfReuse: # Closure/7 AsIs: (/28 AsIs: e.0#0/26 AsIs: )/29 } Tile{ AsIs: e.1#0/18 } Tile{ HalfReuse: >/8 } Tile{ ]] }
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoParseResult_Z3]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_Closure]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::link_brackets( context[16], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[4], context[29] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@4/4 (/7 e.Argument#1/18 )/8 (/11 e.MultiBracket#1/20 )/12 (/15 e.X#0/22 )/16 s.X#0/17 e.X0#0/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Argument#1 as range 18
    // closed e.MultiBracket#1 as range 20
    // closed e.X#0 as range 22
    // closed e.X0#0 as range 24
    //DEBUG: s.X#0: 17
    //DEBUG: e.Argument#1: 18
    //DEBUG: e.MultiBracket#1: 20
    //DEBUG: e.X#0: 22
    //DEBUG: e.X0#0: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoParseResult$12\1*1/8 AsIs: (/11 AsIs: e.MultiBracket#1/20 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/22 HalfReuse: (/16 AsIs: s.X#0/17 AsIs: e.X0#0/24 HalfReuse: )/1 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.Argument#1/18 } Tile{ HalfReuse: >/4 } Tile{ ]] }
    refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_close_call(context[4]);
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[7] );
    refalrts::link_brackets( context[16], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@4/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 (/15 e.X#0/13 )/16 s.X#0/17 e.X0#0/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.X#0 as range 13
  // closed e.X0#0 as range 2
  //DEBUG: s.X#0: 17
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.X#0: 13
  //DEBUG: e.X0#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } Tile{ HalfReuse: [*]/7 } Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/13 HalfReuse: (/16 AsIs: s.X#0/17 AsIs: e.X0#0/2 HalfReuse: )/1 } )/18 {*}/19 >/20 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_unwrapped_closure(vm, context[19], context[7]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::link_brackets( context[16], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[19] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z4("Fetch@4", COOKIE1_, COOKIE2_, func_gen_Fetch_Z4);


static refalrts::FnResult func_gen_DoParseResult_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 90 elems
  refalrts::Iter context[90];
  refalrts::zeros( context, 90 );
  // </0 & DoParseResult@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@5/4 t.new#1/5 (/9 e.new#2/7 )/10 s.new#3/11 (/14 e.new#4/12 )/15 (/18 e.new#5/16 )/19 e.new#6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new#2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new#4 as range 12
  // closed e.new#5 as range 16
  // closed e.new#6 as range 2
  do {
    // </0 & DoParseResult@5/4 t.new#7/5 (/9 e.new#13/20 )/10 s.new#8/11 (/14 e.new#14/22 )/15 (/18 e.new#15/24 )/19 (/30 s.new#9/32 s.new#10/33 e.new#11/28 )/31 e.new#12/26 >/1
    context[20] = context[7];
    context[21] = context[8];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.new#13 as range 20
    // closed e.new#14 as range 22
    // closed e.new#15 as range 24
    // closed e.new#12 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    // closed e.new#11 as range 28
    do {
      // </0 & DoParseResult@5/4 t.new#16/5 (/9 e.new#22/34 )/10 s.new#17/11 (/14 e.new#23/36 )/15 (/18 e.new#24/38 )/19 (/30 s.new#19/32 s.new#20/33 s.new#21/44 )/31 e.new#18/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      // closed e.new#22 as range 34
      // closed e.new#23 as range 36
      // closed e.new#24 as range 38
      // closed e.new#18 as range 42
      if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 s.X#0/11 (/14 e.X#0/47 )/15 (/18 e.X0#0/49 )/19 (/30 # TkChar/32 s.LnNum#1/33 s.Char#1/44 )/31 e.Tail#1/51 >/1
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[42];
        context[52] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[32] ) )
          continue;
        // closed e.MultiBracket#1 as range 45
        // closed e.X#0 as range 47
        // closed e.X0#0 as range 49
        // closed e.Tail#1 as range 51
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.Char#1: 44
        //DEBUG: e.MultiBracket#1: 45
        //DEBUG: e.X#0: 47
        //DEBUG: e.X0#0: 49
        //DEBUG: e.Tail#1: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/47 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/49 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 AsIs: (/30 Reuse: # Symbol/32 } # Char/53 Tile{ AsIs: s.Char#1/44 AsIs: )/31 AsIs: e.Tail#1/51 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_close_bracket(context[18]);
        refalrts::update_ident(context[32], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::link_brackets( context[14], context[19] );
        refalrts::link_brackets( context[15], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[44];
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[19], context[32] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 s.X#0/11 (/14 e.X#0/47 )/15 (/18 e.X0#0/49 )/19 (/30 # TkNumber/32 s.LnNum#1/33 s.Number#1/44 )/31 e.Tail#1/51 >/1
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[42];
      context[52] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 45
      // closed e.X#0 as range 47
      // closed e.X0#0 as range 49
      // closed e.Tail#1 as range 51
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 33
      //DEBUG: s.Number#1: 44
      //DEBUG: e.MultiBracket#1: 45
      //DEBUG: e.X#0: 47
      //DEBUG: e.X0#0: 49
      //DEBUG: e.Tail#1: 51

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/47 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/49 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 AsIs: (/30 Reuse: # Symbol/32 } # Number/53 Tile{ AsIs: s.Number#1/44 AsIs: )/31 AsIs: e.Tail#1/51 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[53], identifiers[ident_Number]);
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::update_ident(context[32], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[15], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 s.X#0/11 (/14 e.X#0/36 )/15 (/18 e.X0#0/38 )/19 (/30 # TkName/32 s.LnNum#1/33 e.Name#1/40 )/31 e.Tail#1/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.X#0 as range 36
      // closed e.X0#0 as range 38
      // closed e.Name#1 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.X#0: 36
      //DEBUG: e.X0#0: 38
      //DEBUG: e.Name#1: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/36 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/38 } Tile{ HalfReuse: )/18 } )/44 Tile{ HalfReuse: (/19 HalfReuse: # Symbol/30 Reuse: # Name/32 AsIs: s.LnNum#1/33 AsIs: e.Name#1/40 AsIs: )/31 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::reinit_ident(context[30], identifiers[ident_Symbol]);
      refalrts::update_ident(context[32], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[31] );
      refalrts::link_brackets( context[14], context[44] );
      refalrts::link_brackets( context[15], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.new#16/5 (/9 e.new#20/34 )/10 s.new#17/11 (/14 e.new#21/36 )/15 (/18 e.new#22/38 )/19 (/30 # TkIdentMarker/32 s.new#19/33 )/31 e.new#18/40 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      context[41] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.new#20 as range 34
      // closed e.new#21 as range 36
      // closed e.new#22 as range 38
      // closed e.new#18 as range 40
      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/42 )/10 s.X#0/11 (/14 e.X#0/44 )/15 (/18 e.X0#0/46 )/19 (/30 # TkIdentMarker/32 s.MarkerLnNum#1/33 )/31 (/52 # TkName/54 s.NameLnNum#1/55 e.Name#1/50 )/53 e.Tail#1/48 >/1
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::brackets_left( context[50], context[51], context[48], context[49] );
        if( ! context[52] )
          continue;
        refalrts::bracket_pointers(context[52], context[53]);
        context[54] = refalrts::ident_left( identifiers[ident_TkName], context[50], context[51] );
        if( ! context[54] )
          continue;
        // closed e.MultiBracket#1 as range 42
        // closed e.X#0 as range 44
        // closed e.X0#0 as range 46
        // closed e.Tail#1 as range 48
        if( ! refalrts::svar_left( context[55], context[50], context[51] ) )
          continue;
        // closed e.Name#1 as range 50
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.MarkerLnNum#1: 33
        //DEBUG: e.MultiBracket#1: 42
        //DEBUG: e.X#0: 44
        //DEBUG: e.X0#0: 46
        //DEBUG: e.Tail#1: 48
        //DEBUG: s.NameLnNum#1: 55
        //DEBUG: e.Name#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/18 {REMOVED TILE} {REMOVED TILE} (/30 {REMOVED TILE} s.MarkerLnNum#1/33 {REMOVED TILE} s.NameLnNum#1/55 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/42 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/44 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/46 } Tile{ AsIs: )/19 } Tile{ AsIs: )/31 AsIs: (/52 Reuse: # Symbol/54 } Tile{ Reuse: # Identifier/32 } Tile{ AsIs: e.Name#1/50 } Tile{ AsIs: )/53 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::update_ident(context[54], identifiers[ident_Symbol]);
        refalrts::update_ident(context[32], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[52], context[53] );
        refalrts::link_brackets( context[14], context[31] );
        refalrts::link_brackets( context[15], context[19] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[53];
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[31], context[54] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/42 )/10 s.X#0/11 (/14 e.X#0/44 )/15 (/18 e.X0#0/46 )/19 (/30 # TkIdentMarker/32 s.LnNum#1/33 )/31 e.Tail#1/48 >/1
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      // closed e.MultiBracket#1 as range 42
      // closed e.X#0 as range 44
      // closed e.X0#0 as range 46
      // closed e.Tail#1 as range 48
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 42
      //DEBUG: e.X#0: 44
      //DEBUG: e.X0#0: 46
      //DEBUG: e.Tail#1: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE}
      //RESULT: Tile{ [[ } </50 & DoParseResult/51 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #33/9 } 'M'/52 Tile{ HalfReuse: 'i'/10 }"ssed name after \"#\""/53 >/55 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/42 } Tile{ AsIs: )/15 } Tile{ AsIs: (/30 HalfReuse: s.X0 #11/32 } Tile{ AsIs: e.X#0/44 } Tile{ AsIs: (/18 AsIs: e.X0#0/46 AsIs: )/19 } Tile{ AsIs: )/31 AsIs: e.Tail#1/48 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_DoParseResult]);
      refalrts::alloc_char(vm, context[52], 'M');
      refalrts::alloc_chars(vm, context[53], context[54], "ssed name after \"#\"", 19);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::reinit_char(context[10], 'i');
      refalrts::reinit_svar( context[32], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[53], context[55] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 s.X#0/11 (/14 e.X#0/36 )/15 (/18 e.X0#0/38 )/19 (/30 # TkCompound/32 s.LnNum#1/33 e.Name#1/40 )/31 e.Tail#1/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.X#0 as range 36
      // closed e.X0#0 as range 38
      // closed e.Name#1 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.X#0: 36
      //DEBUG: e.X0#0: 38
      //DEBUG: e.Name#1: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/36 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/38 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 AsIs: (/30 Reuse: # Symbol/32 } # Identifier/44 Tile{ AsIs: e.Name#1/40 } Tile{ AsIs: )/31 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Identifier]);
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::update_ident(context[32], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[14], context[19] );
      refalrts::link_brackets( context[15], context[18] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.new#16/5 (/9 e.new#23/34 )/10 s.new#17/11 (/14 e.new#24/36 )/15 (/18 e.new#25/38 )/19 (/30 s.new#19/32 s.new#20/33 s.new#21/44 e.new#22/40 )/31 e.new#18/42 >/1
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[26];
      context[43] = context[27];
      // closed e.new#23 as range 34
      // closed e.new#24 as range 36
      // closed e.new#25 as range 38
      // closed e.new#18 as range 42
      if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
        continue;
      // closed e.new#22 as range 40
      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/45 )/10 s.X#0/11 (/14 e.X#0/47 )/15 (/18 e.X0#0/49 )/19 (/30 # TkVariable/32 s.LnNum#1/33 s.Mode#1/44 e.Index#1/51 )/31 e.Tail#1/53 >/1
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[32] ) )
          continue;
        // closed e.MultiBracket#1 as range 45
        // closed e.X#0 as range 47
        // closed e.X0#0 as range 49
        // closed e.Index#1 as range 51
        // closed e.Tail#1 as range 53
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.Mode#1: 44
        //DEBUG: e.MultiBracket#1: 45
        //DEBUG: e.X#0: 47
        //DEBUG: e.X0#0: 49
        //DEBUG: e.Index#1: 51
        //DEBUG: e.Tail#1: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@5/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/45 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/47 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/49 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/19 AsIs: (/30 AsIs: # TkVariable/32 AsIs: s.LnNum#1/33 AsIs: s.Mode#1/44 AsIs: e.Index#1/51 AsIs: )/31 AsIs: e.Tail#1/53 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_close_bracket(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::link_brackets( context[14], context[19] );
        refalrts::link_brackets( context[15], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[19];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@5/4 t.new#26/5 (/9 e.new#32/45 )/10 s.new#27/11 (/14 e.new#33/47 )/15 (/18 e.new#34/49 )/19 (/30 s.new#29/32 s.new#30/33 s.new#31/44 )/31 e.new#28/51 >/1
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[42];
      context[52] = context[43];
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.new#32 as range 45
      // closed e.new#33 as range 47
      // closed e.new#34 as range 49
      // closed e.new#28 as range 51
      do {
        // </0 & DoParseResult@5/4 t.new#35/5 (/9 e.new#40/53 )/10 s.new#36/11 (/14 e.new#41/55 )/15 (/18 e.new#42/57 )/19 (/30 # Open/32 s.new#38/33 s.new#39/44 )/31 e.new#37/59 >/1
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[32] ) )
          continue;
        // closed e.new#40 as range 53
        // closed e.new#41 as range 55
        // closed e.new#42 as range 57
        // closed e.new#37 as range 59
        do {
          // </0 & DoParseResult@5/4 t.new#43/5 (/9 e.new#47/61 )/10 s.new#44/11 (/14 e.new#48/63 )/15 (/18 e.new#49/65 )/19 (/30 # Open/32 s.new#46/33 # TkOpenADT/44 )/31 e.new#45/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[44] ) )
            continue;
          // closed e.new#47 as range 61
          // closed e.new#48 as range 63
          // closed e.new#49 as range 65
          // closed e.new#45 as range 67
          do {
            // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/69 )/10 s.X#0/11 (/14 e.X#0/71 )/15 (/18 e.X0#0/73 )/19 (/30 # Open/32 s.LnNumADT#1/33 # TkOpenADT/44 )/31 (/79 # TkName/81 s.LnNumName#1/82 e.Name#1/77 )/80 e.Tail#1/75 >/1
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            context[73] = context[65];
            context[74] = context[66];
            context[75] = context[67];
            context[76] = context[68];
            context[77] = 0;
            context[78] = 0;
            context[79] = refalrts::brackets_left( context[77], context[78], context[75], context[76] );
            if( ! context[79] )
              continue;
            refalrts::bracket_pointers(context[79], context[80]);
            context[81] = refalrts::ident_left( identifiers[ident_TkName], context[77], context[78] );
            if( ! context[81] )
              continue;
            // closed e.MultiBracket#1 as range 69
            // closed e.X#0 as range 71
            // closed e.X0#0 as range 73
            // closed e.Tail#1 as range 75
            if( ! refalrts::svar_left( context[82], context[77], context[78] ) )
              continue;
            // closed e.Name#1 as range 77
            //DEBUG: t.X#0: 5
            //DEBUG: s.X#0: 11
            //DEBUG: s.LnNumADT#1: 33
            //DEBUG: e.MultiBracket#1: 69
            //DEBUG: e.X#0: 71
            //DEBUG: e.X0#0: 73
            //DEBUG: e.Tail#1: 75
            //DEBUG: s.LnNumName#1: 82
            //DEBUG: e.Name#1: 77

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.X#0/11 (/14 {REMOVED TILE} )/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@4/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/69 HalfReuse: (/10 } Tile{ Reuse: # ADT-Brackets/81 } Tile{ AsIs: s.LnNumADT#1/33 Reuse: # TkCloseADT/44 HalfReuse: s.X0 #11/31 } Tile{ AsIs: e.X#0/71 } Tile{ AsIs: (/18 AsIs: e.X0#0/73 AsIs: )/19 HalfReuse: )/30 HalfReuse: )/32 } Tile{ AsIs: s.LnNumName#1/82 } Tile{ AsIs: (/79 } Tile{ AsIs: e.Name#1/77 } Tile{ AsIs: )/80 AsIs: e.Tail#1/75 AsIs: >/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z4]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::update_ident(context[81], identifiers[ident_ADTm_Brackets]);
            refalrts::update_ident(context[44], identifiers[ident_TkCloseADT]);
            refalrts::reinit_svar( context[31], context[11] );
            refalrts::reinit_close_bracket(context[30]);
            refalrts::reinit_close_bracket(context[32]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[79], context[80] );
            refalrts::link_brackets( context[9], context[32] );
            refalrts::link_brackets( context[10], context[30] );
            refalrts::link_brackets( context[18], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[80];
            res = refalrts::splice_evar( res, context[77], context[78] );
            res = refalrts::splice_elem( res, context[79] );
            res = refalrts::splice_elem( res, context[82] );
            res = refalrts::splice_evar( res, context[18], context[32] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_evar( res, context[33], context[31] );
            res = refalrts::splice_elem( res, context[81] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/69 )/10 s.X#0/11 (/14 e.X#0/71 )/15 (/18 e.X0#0/73 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenADT/44 )/31 e.Tail#1/75 >/1
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          context[73] = context[65];
          context[74] = context[66];
          context[75] = context[67];
          context[76] = context[68];
          // closed e.MultiBracket#1 as range 69
          // closed e.X#0 as range 71
          // closed e.X0#0 as range 73
          // closed e.Tail#1 as range 75
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 11
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 69
          //DEBUG: e.X#0: 71
          //DEBUG: e.X0#0: 73
          //DEBUG: e.Tail#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </77 & DoParseResult/78 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #33/9 }"Exp"/79 Tile{ HalfReuse: 'e'/15 }"cted name after \"[\""/81 >/83 (/84 Tile{ AsIs: e.MultiBracket#1/69 } Tile{ AsIs: (/14 } # ADT-Brackets/85 s.LnNum#1/33/86 Tile{ HalfReuse: # TkCloseADT/10 AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/71 } Tile{ AsIs: (/18 AsIs: e.X0#0/73 AsIs: )/19 HalfReuse: )/30 HalfReuse: )/32 } (/87 Tile{ AsIs: s.LnNum#1/33 } (/88 # UnnamedADT/89 Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/75 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[77]);
          refalrts::alloc_name(vm, context[78], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[79], context[80], "Exp", 3);
          refalrts::alloc_chars(vm, context[81], context[82], "cted name after \"[\"", 19);
          refalrts::alloc_close_call(vm, context[83]);
          refalrts::alloc_open_bracket(vm, context[84]);
          refalrts::alloc_ident(vm, context[85], identifiers[ident_ADTm_Brackets]);
          refalrts::copy_stvar(vm, context[86], context[33]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::alloc_open_bracket(vm, context[88]);
          refalrts::alloc_ident(vm, context[89], identifiers[ident_UnnamedADT]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[33] );
          refalrts::reinit_char(context[15], 'e');
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[30]);
          refalrts::reinit_close_bracket(context[32]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[77] );
          refalrts::link_brackets( context[87], context[31] );
          refalrts::link_brackets( context[88], context[44] );
          refalrts::link_brackets( context[84], context[32] );
          refalrts::link_brackets( context[14], context[30] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::push_stack( vm, context[83] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[88], context[89] );
          res = refalrts::splice_elem( res, context[33] );
          res = refalrts::splice_elem( res, context[87] );
          res = refalrts::splice_evar( res, context[18], context[32] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[10], context[11] );
          res = refalrts::splice_evar( res, context[85], context[86] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[81], context[84] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[77], context[78] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 s.X#0/11 (/14 e.X#0/63 )/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenBracket/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 11
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/30 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 } Tile{ Reuse: # Brackets/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseBracket/15 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/63 } Tile{ AsIs: (/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::update_ident(context[32], identifiers[ident_Brackets]);
          refalrts::reinit_ident(context[15], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 s.X#0/11 (/14 e.X#0/63 )/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenCall/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 11
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/30 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 } Tile{ Reuse: # CallBrackets/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseCall/15 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/63 } Tile{ AsIs: (/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::update_ident(context[32], identifiers[ident_CallBrackets]);
          refalrts::reinit_ident(context[15], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 s.X#0/11 (/14 e.X#0/63 )/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenBracket/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 11
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 } Tile{ HalfReuse: </14 } & DoParseResult$10\1*2/69 Tile{ HalfReuse: # TkOpenBracket/30 HalfReuse: >/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseBracket/15 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/63 } Tile{ AsIs: (/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[14]);
          refalrts::reinit_ident(context[30], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_call(context[32]);
          refalrts::reinit_ident(context[15], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_elem( res, context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 s.X#0/11 (/14 e.X#0/63 )/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 # TkOpenCall/44 )/31 e.Tail#1/67 >/1
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[44] ) )
            continue;
          // closed e.MultiBracket#1 as range 61
          // closed e.X#0 as range 63
          // closed e.X0#0 as range 65
          // closed e.Tail#1 as range 67
          //DEBUG: t.X#0: 5
          //DEBUG: s.X#0: 11
          //DEBUG: s.LnNum#1: 33
          //DEBUG: e.MultiBracket#1: 61
          //DEBUG: e.X#0: 63
          //DEBUG: e.X0#0: 65
          //DEBUG: e.Tail#1: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 } Tile{ HalfReuse: </14 } & DoParseResult$10\1*2/69 Tile{ HalfReuse: # TkOpenCall/30 HalfReuse: >/32 AsIs: s.LnNum#1/33 } Tile{ HalfReuse: # TkCloseCall/15 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/63 } Tile{ AsIs: (/18 AsIs: e.X0#0/65 AsIs: )/19 } Tile{ HalfReuse: )/44 AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[14]);
          refalrts::reinit_ident(context[30], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_call(context[32]);
          refalrts::reinit_ident(context[15], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[31] );
          refalrts::link_brackets( context[10], context[44] );
          refalrts::link_brackets( context[18], context[19] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[44];
          res = refalrts::splice_evar( res, context[18], context[19] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_elem( res, context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/61 )/10 s.X#0/11 (/14 e.X#0/63 )/15 (/18 e.X0#0/65 )/19 (/30 # Open/32 s.LnNum#1/33 s.OpenBracket#1/44 )/31 e.Tail#1/67 >/1
        context[61] = context[53];
        context[62] = context[54];
        context[63] = context[55];
        context[64] = context[56];
        context[65] = context[57];
        context[66] = context[58];
        context[67] = context[59];
        context[68] = context[60];
        // closed e.MultiBracket#1 as range 61
        // closed e.X#0 as range 63
        // closed e.X0#0 as range 65
        // closed e.Tail#1 as range 67
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 33
        //DEBUG: s.OpenBracket#1: 44
        //DEBUG: e.MultiBracket#1: 61
        //DEBUG: e.X#0: 63
        //DEBUG: e.X0#0: 65
        //DEBUG: e.Tail#1: 67

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/61 HalfReuse: (/10 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & DoParseResult$10\1*2/14 } Tile{ AsIs: s.OpenBracket#1/44 } Tile{ HalfReuse: >/32 AsIs: s.LnNum#1/33 } </69 & DoParseResult$10\2*2/70 s.OpenBracket#1/44/71 >/72 Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/63 } Tile{ AsIs: (/18 AsIs: e.X0#0/65 AsIs: )/19 HalfReuse: )/30 } Tile{ AsIs: )/31 AsIs: e.Tail#1/67 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[69]);
        refalrts::alloc_name(vm, context[70], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::copy_stvar(vm, context[71], context[44]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[14], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::reinit_close_call(context[32]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[10], context[30] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[18], context[30] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[69], context[72] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/53 (/63 s.BracketsSign#1/65 s.OpenLnNum#1/66 s.CloseBracket#1/67 e.Scanned#1/61 )/64 )/10 s.X#0/11 (/14 e.X#0/55 )/15 (/18 e.X0#0/57 )/19 (/30 # Close/32 s.LnNum#1/33 s.CloseBracket#1/44 )/31 e.Tail#1/59 >/1
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      context[60] = context[52];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[32] ) )
        continue;
      context[61] = 0;
      context[62] = 0;
      context[63] = refalrts::brackets_right( context[61], context[62], context[53], context[54] );
      if( ! context[63] )
        continue;
      refalrts::bracket_pointers(context[63], context[64]);
      // closed e.MultiBracket#1 as range 53
      // closed e.X#0 as range 55
      // closed e.X0#0 as range 57
      // closed e.Tail#1 as range 59
      if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
        continue;
      if( ! refalrts::svar_left( context[66], context[61], context[62] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[67], context[44], context[61], context[62] ) )
        continue;
      // closed e.Scanned#1 as range 61
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 33
      //DEBUG: s.CloseBracket#1: 44
      //DEBUG: e.MultiBracket#1: 53
      //DEBUG: e.X#0: 55
      //DEBUG: e.X0#0: 57
      //DEBUG: e.Tail#1: 59
      //DEBUG: s.BracketsSign#1: 65
      //DEBUG: s.OpenLnNum#1: 66
      //DEBUG: e.Scanned#1: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/65 s.OpenLnNum#1/66 s.CloseBracket#1/67 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/30 # Close/32 s.LnNum#1/33 s.CloseBracket#1/44 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/53 HalfReuse: )/63 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Scanned#1/61 } Tile{ AsIs: )/15 } Tile{ HalfReuse: (/64 HalfReuse: s.BracketsSign1 #65/10 AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/55 } Tile{ AsIs: (/18 AsIs: e.X0#0/57 AsIs: )/19 } Tile{ AsIs: )/31 AsIs: e.Tail#1/59 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z6]);
      refalrts::reinit_close_bracket(context[63]);
      refalrts::reinit_open_bracket(context[64]);
      refalrts::reinit_svar( context[10], context[65] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[64], context[31] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[9], context[63] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[64], context[11] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::splice_to_freelist_open( vm, context[63], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/34 )/10 s.X#0/11 (/14 e.X#0/36 )/15 (/18 e.X0#0/38 )/19 (/30 # TkOpenBlock/32 s.LnNum#1/33 )/31 e.Tail#1/40 >/1
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[27];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    // closed e.MultiBracket#1 as range 34
    // closed e.X#0 as range 36
    // closed e.X0#0 as range 38
    // closed e.Tail#1 as range 40
    //DEBUG: t.X#0: 5
    //DEBUG: s.X#0: 11
    //DEBUG: s.LnNum#1: 33
    //DEBUG: e.MultiBracket#1: 34
    //DEBUG: e.X#0: 36
    //DEBUG: e.X0#0: 38
    //DEBUG: e.Tail#1: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Fetch@6/19 AsIs: (/30 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.X#0/5 } Tile{ AsIs: e.Tail#1/40 } Tile{ HalfReuse: >/18 } Tile{ AsIs: )/31 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/34 AsIs: )/10 AsIs: s.X#0/11 AsIs: (/14 AsIs: e.X#0/36 AsIs: )/15 } Tile{ AsIs: e.X0#0/38 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[32]);
    refalrts::reinit_name(context[19], functions[efunc_gen_Fetch_Z6]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[19], context[30] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@5/4 t.new#7/5 (/9 e.new#10/20 (/30 s.new#11/32 s.new#12/33 s.new#13/34 e.new#14/28 )/31 )/10 s.new#8/11 (/14 e.new#15/22 )/15 (/18 e.new#16/24 )/19 e.new#9/26 >/1
    context[20] = context[7];
    context[21] = context[8];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_right( context[28], context[29], context[20], context[21] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.new#10 as range 20
    // closed e.new#15 as range 22
    // closed e.new#16 as range 24
    // closed e.new#9 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[28], context[29] ) )
      continue;
    // closed e.new#14 as range 28
    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenBracket/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"(\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkOpenBracket/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseBracket/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \")\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkCloseBracket/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenCall/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"<\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkOpenCall/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseCall/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \">\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkCloseCall/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkOpenADT/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"[\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkOpenADT/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # TkCloseADT/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"]\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # TkCloseADT/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # Brackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"(\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # Brackets/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # ADT-Brackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"[\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # ADT-Brackets/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 # CallBrackets/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
      context[35] = context[20];
      context[36] = context[21];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      context[44] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[32] ) )
        continue;
      // closed e.MultiBracket#1 as range 35
      // closed e.Scanned#1 as range 37
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 33
      //DEBUG: s.CloseBracket#1: 34
      //DEBUG: s.X#0: 11
      //DEBUG: e.MultiBracket#1: 35
      //DEBUG: e.Scanned#1: 37
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \"<\""/47 >/49 Tile{ AsIs: (/14 } Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: # CallBrackets/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } (/50 Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[33] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[30], context[10] );
      refalrts::link_brackets( context[50], context[31] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[31], context[10] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.MultiBracket#1/35 (/30 s.BracketsSign#1/32 s.OpenLnNum#1/33 s.CloseBracket#1/34 e.Scanned#1/37 )/31 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 e.Tail#1/43 >/1
    context[35] = context[20];
    context[36] = context[21];
    context[37] = context[28];
    context[38] = context[29];
    context[39] = context[22];
    context[40] = context[23];
    context[41] = context[24];
    context[42] = context[25];
    context[43] = context[26];
    context[44] = context[27];
    // closed e.MultiBracket#1 as range 35
    // closed e.Scanned#1 as range 37
    // closed e.X#0 as range 39
    // closed e.X0#0 as range 41
    // closed e.Tail#1 as range 43
    //DEBUG: t.X#0: 5
    //DEBUG: s.BracketsSign#1: 32
    //DEBUG: s.OpenLnNum#1: 33
    //DEBUG: s.CloseBracket#1: 34
    //DEBUG: s.X#0: 11
    //DEBUG: e.MultiBracket#1: 35
    //DEBUG: e.Scanned#1: 37
    //DEBUG: e.X#0: 39
    //DEBUG: e.X0#0: 41
    //DEBUG: e.Tail#1: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/33 s.CloseBracket#1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #33/9 }"Unbalanced bracket \""/47 </49 & StrFromBracket*9/50 s.BracketsSign#1/32/51 >/52 '\"'/53 >/54 (/55 Tile{ AsIs: e.MultiBracket#1/35 } Tile{ AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.Scanned#1/37 } Tile{ AsIs: (/30 AsIs: s.BracketsSign#1/32 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ AsIs: )/31 AsIs: )/10 } Tile{ AsIs: )/19 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[47], context[48], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[51], context[32]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_char(vm, context[53], '\"');
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[30], context[10] );
    refalrts::link_brackets( context[14], context[31] );
    refalrts::link_brackets( context[55], context[15] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[31], context[10] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[47], context[55] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@5/4 t.new#7/5 (/9 )/10 s.new#8/11 (/14 e.new#10/20 )/15 (/18 e.new#11/22 )/19 e.new#9/24 >/1
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[2];
    context[25] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#10 as range 20
    // closed e.new#11 as range 22
    // closed e.new#9 as range 24
    do {
      // </0 & DoParseResult@5/4 t.new#12/5 (/9 )/10 s.new#13/11 (/14 e.new#17/26 )/15 (/18 e.new#18/28 )/19 (/34 # Close/36 s.new#14/37 s.new#15/38 )/35 e.new#16/30 >/1
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = refalrts::ident_left( identifiers[ident_Close], context[32], context[33] );
      if( ! context[36] )
        continue;
      // closed e.new#17 as range 26
      // closed e.new#18 as range 28
      // closed e.new#16 as range 30
      if( ! refalrts::svar_left( context[37], context[32], context[33] ) )
        continue;
      if( ! refalrts::svar_left( context[38], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenBracket/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"(\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"(\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseBracket/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \")\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \")\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenCall/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"<\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"<\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseCall/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \">\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \">\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkOpenADT/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"[\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"[\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # TkCloseADT/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"]\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"]\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # Brackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"(\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"(\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # ADT-Brackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"[\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"[\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 # CallBrackets/38 )/35 e.Tail#1/43 >/1
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[38] ) )
          continue;
        // closed e.X#0 as range 39
        // closed e.X0#0 as range 41
        // closed e.Tail#1 as range 43
        //DEBUG: t.X#0: 5
        //DEBUG: s.X#0: 11
        //DEBUG: s.LnNum#1: 37
        //DEBUG: e.X#0: 39
        //DEBUG: e.X0#0: 41
        //DEBUG: e.Tail#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE}
        //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nbalanced bracket \"<\""/47 Tile{ HalfReuse: >/15 AsIs: (/18 } Tile{ AsIs: )/19 AsIs: (/34 HalfReuse: s.X0 #11/36 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/14 } Tile{ AsIs: e.X0#0/41 } Tile{ HalfReuse: )/38 AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
        refalrts::alloc_chars(vm, context[47], context[48], "nbalanced bracket \"<\"", 21);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_svar( context[9], context[37] );
        refalrts::reinit_char(context[10], 'U');
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_svar( context[36], context[11] );
        refalrts::reinit_close_bracket(context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[38] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/39 )/15 (/18 e.X0#0/41 )/19 (/34 # Close/36 s.LnNum#1/37 s.CloseBracket#1/38 )/35 e.Tail#1/43 >/1
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.X#0 as range 39
      // closed e.X0#0 as range 41
      // closed e.Tail#1 as range 43
      //DEBUG: t.X#0: 5
      //DEBUG: s.X#0: 11
      //DEBUG: s.LnNum#1: 37
      //DEBUG: s.CloseBracket#1: 38
      //DEBUG: e.X#0: 39
      //DEBUG: e.X0#0: 41
      //DEBUG: e.Tail#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/37 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoParseResult/46 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #37/9 HalfReuse: 'U'/10 }"nb"/47 Tile{ HalfReuse: 'a'/15 }"lanced bracket \""/49 </51 & StrFromBracket*9/52 Tile{ AsIs: s.CloseBracket#1/38 } >/53 '\"'/54 >/55 Tile{ AsIs: (/34 HalfReuse: )/36 } Tile{ AsIs: (/14 } Tile{ AsIs: s.X#0/11 } Tile{ AsIs: e.X#0/39 } Tile{ AsIs: (/18 AsIs: e.X0#0/41 AsIs: )/19 } Tile{ AsIs: )/35 AsIs: e.Tail#1/43 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[47], context[48], "nb", 2);
      refalrts::alloc_chars(vm, context[49], context[50], "lanced bracket \"", 16);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_char(vm, context[54], '\"');
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[37] );
      refalrts::reinit_char(context[10], 'U');
      refalrts::reinit_char(context[15], 'a');
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[14], context[35] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[34], context[36] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[51] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[53], context[55] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[49], context[52] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@5/4 t.X#0/5 (/9 )/10 s.X#0/11 (/14 e.X#0/26 )/15 (/18 e.X0#0/28 )/19 e.Tail#1/30 >/1
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    // closed e.X#0 as range 26
    // closed e.X0#0 as range 28
    // closed e.Tail#1 as range 30
    //DEBUG: t.X#0: 5
    //DEBUG: s.X#0: 11
    //DEBUG: e.X#0: 26
    //DEBUG: e.X0#0: 28
    //DEBUG: e.Tail#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@5/4 {REMOVED TILE} s.X#0/11 (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.X#0/5 AsIs: (/9 HalfReuse: s.X0 #11/10 } Tile{ AsIs: e.X#0/26 } Tile{ AsIs: (/18 AsIs: e.X0#0/28 AsIs: )/19 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Tail#1/30 } Tile{ ]] }
    refalrts::reinit_svar( context[10], context[11] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@5/4 t.X#0/5 (/9 e.dyn#0/7 )/10 s.X#0/11 (/14 e.X#0/12 )/15 (/18 e.X0#0/16 )/19 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.X#0 as range 12
  // closed e.X0#0 as range 16
  // closed e.dyn#2 as range 2
  //DEBUG: t.X#0: 5
  //DEBUG: s.X#0: 11
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.X#0: 12
  //DEBUG: e.X0#0: 16
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.X#0/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 } Tile{ AsIs: (/18 } Tile{ HalfReuse: s.X0 #11/14 AsIs: e.X#0/12 HalfReuse: (/15 } Tile{ AsIs: e.X0#0/16 } )/20 Tile{ AsIs: )/19 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::reinit_svar( context[14], context[11] );
  refalrts::reinit_open_bracket(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z5("DoParseResult@5", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z5);


static refalrts::FnResult func_gen_DoParseResult_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 89 elems
  refalrts::Iter context[89];
  refalrts::zeros( context, 89 );
  // </0 & DoParseResult@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoParseResult@6/4 t.new#1/5 (/9 e.new#2/7 )/10 (/13 e.new#3/11 )/14 (/17 e.new#4/15 )/18 e.new#5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#2 as range 7
  // closed e.new#3 as range 11
  // closed e.new#4 as range 15
  // closed e.new#5 as range 2
  do {
    // </0 & DoParseResult@6/4 t.new#6/5 (/9 e.new#11/19 )/10 (/13 e.new#12/21 )/14 (/17 e.new#13/23 )/18 (/29 s.new#7/31 s.new#8/32 e.new#9/27 )/30 e.new#10/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new#11 as range 19
    // closed e.new#12 as range 21
    // closed e.new#13 as range 23
    // closed e.new#10 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    // closed e.new#9 as range 27
    do {
      // </0 & DoParseResult@6/4 t.new#14/5 (/9 e.new#19/33 )/10 (/13 e.new#20/35 )/14 (/17 e.new#21/37 )/18 (/29 s.new#16/31 s.new#17/32 s.new#18/43 )/30 e.new#15/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#19 as range 33
      // closed e.new#20 as range 35
      // closed e.new#21 as range 37
      // closed e.new#15 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.X#0/46 )/14 (/17 e.X0#0/48 )/18 (/29 # TkChar/31 s.LnNum#1/32 s.Char#1/43 )/30 e.Tail#1/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[31] ) )
          continue;
        // closed e.MultiBracket#1 as range 44
        // closed e.X#0 as range 46
        // closed e.X0#0 as range 48
        // closed e.Tail#1 as range 50
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.Char#1: 43
        //DEBUG: e.MultiBracket#1: 44
        //DEBUG: e.X#0: 46
        //DEBUG: e.X0#0: 48
        //DEBUG: e.Tail#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/46 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/48 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/18 AsIs: (/29 Reuse: # Symbol/31 } # Char/52 Tile{ AsIs: s.Char#1/43 AsIs: )/30 AsIs: e.Tail#1/50 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[52], identifiers[ident_Char]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::update_ident(context[31], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[13], context[18] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[43];
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_evar( res, context[18], context[31] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.X#0/46 )/14 (/17 e.X0#0/48 )/18 (/29 # TkNumber/31 s.LnNum#1/32 s.Number#1/43 )/30 e.Tail#1/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 44
      // closed e.X#0 as range 46
      // closed e.X0#0 as range 48
      // closed e.Tail#1 as range 50
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: s.Number#1: 43
      //DEBUG: e.MultiBracket#1: 44
      //DEBUG: e.X#0: 46
      //DEBUG: e.X0#0: 48
      //DEBUG: e.Tail#1: 50

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/46 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/48 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/18 AsIs: (/29 Reuse: # Symbol/31 } # Number/52 Tile{ AsIs: s.Number#1/43 AsIs: )/30 AsIs: e.Tail#1/50 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[52], identifiers[ident_Number]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::update_ident(context[31], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[18], context[31] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.X#0/35 )/14 (/17 e.X0#0/37 )/18 (/29 # TkName/31 s.LnNum#1/32 e.Name#1/39 )/30 e.Tail#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 33
      // closed e.X#0 as range 35
      // closed e.X0#0 as range 37
      // closed e.Name#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 33
      //DEBUG: e.X#0: 35
      //DEBUG: e.X0#0: 37
      //DEBUG: e.Name#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/35 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/37 } Tile{ HalfReuse: )/17 } )/43 Tile{ HalfReuse: (/18 HalfReuse: # Symbol/29 Reuse: # Name/31 AsIs: s.LnNum#1/32 AsIs: e.Name#1/39 AsIs: )/30 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_ident(context[29], identifiers[ident_Symbol]);
      refalrts::update_ident(context[31], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[30] );
      refalrts::link_brackets( context[13], context[43] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.new#14/5 (/9 e.new#17/33 )/10 (/13 e.new#18/35 )/14 (/17 e.new#19/37 )/18 (/29 # TkIdentMarker/31 s.new#16/32 )/30 e.new#15/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new#17 as range 33
      // closed e.new#18 as range 35
      // closed e.new#19 as range 37
      // closed e.new#15 as range 39
      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/41 )/10 (/13 e.X#0/43 )/14 (/17 e.X0#0/45 )/18 (/29 # TkIdentMarker/31 s.MarkerLnNum#1/32 )/30 (/51 # TkName/53 s.NameLnNum#1/54 e.Name#1/49 )/52 e.Tail#1/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = 0;
        context[50] = 0;
        context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
        if( ! context[51] )
          continue;
        refalrts::bracket_pointers(context[51], context[52]);
        context[53] = refalrts::ident_left( identifiers[ident_TkName], context[49], context[50] );
        if( ! context[53] )
          continue;
        // closed e.MultiBracket#1 as range 41
        // closed e.X#0 as range 43
        // closed e.X0#0 as range 45
        // closed e.Tail#1 as range 47
        if( ! refalrts::svar_left( context[54], context[49], context[50] ) )
          continue;
        // closed e.Name#1 as range 49
        //DEBUG: t.X#0: 5
        //DEBUG: s.MarkerLnNum#1: 32
        //DEBUG: e.MultiBracket#1: 41
        //DEBUG: e.X#0: 43
        //DEBUG: e.X0#0: 45
        //DEBUG: e.Tail#1: 47
        //DEBUG: s.NameLnNum#1: 54
        //DEBUG: e.Name#1: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} s.MarkerLnNum#1/32 {REMOVED TILE} s.NameLnNum#1/54 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/41 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/43 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/45 } Tile{ AsIs: )/18 } Tile{ AsIs: )/30 AsIs: (/51 Reuse: # Symbol/53 } Tile{ Reuse: # Identifier/31 } Tile{ AsIs: e.Name#1/49 } Tile{ AsIs: )/52 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::update_ident(context[53], identifiers[ident_Symbol]);
        refalrts::update_ident(context[31], identifiers[ident_Identifier]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[51], context[52] );
        refalrts::link_brackets( context[13], context[30] );
        refalrts::link_brackets( context[14], context[18] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[52];
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[30], context[53] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/41 )/10 (/13 e.X#0/43 )/14 (/17 e.X0#0/45 )/18 (/29 # TkIdentMarker/31 s.LnNum#1/32 )/30 e.Tail#1/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      // closed e.MultiBracket#1 as range 41
      // closed e.X#0 as range 43
      // closed e.X0#0 as range 45
      // closed e.Tail#1 as range 47
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 41
      //DEBUG: e.X#0: 43
      //DEBUG: e.X0#0: 45
      //DEBUG: e.Tail#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE}
      //RESULT: Tile{ [[ } </49 & DoParseResult/50 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #32/18 HalfReuse: 'M'/29 HalfReuse: 'i'/31 } Tile{ HalfReuse: 's'/17 }"sed name after \"#\""/51 >/53 Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/41 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/43 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/45 } )/54 Tile{ AsIs: )/30 AsIs: e.Tail#1/47 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[51], context[52], "sed name after \"#\"", 18);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[18], context[32] );
      refalrts::reinit_char(context[29], 'M');
      refalrts::reinit_char(context[31], 'i');
      refalrts::reinit_char(context[17], 's');
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[14], context[54] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[51], context[53] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[18], context[31] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.X#0/35 )/14 (/17 e.X0#0/37 )/18 (/29 # TkCompound/31 s.LnNum#1/32 e.Name#1/39 )/30 e.Tail#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 33
      // closed e.X#0 as range 35
      // closed e.X0#0 as range 37
      // closed e.Name#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: e.MultiBracket#1: 33
      //DEBUG: e.X#0: 35
      //DEBUG: e.X0#0: 37
      //DEBUG: e.Name#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/35 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/37 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/18 AsIs: (/29 Reuse: # Symbol/31 } # Identifier/43 Tile{ AsIs: e.Name#1/39 } Tile{ AsIs: )/30 AsIs: e.Tail#1/41 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[43], identifiers[ident_Identifier]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::update_ident(context[31], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[18], context[31] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.new#14/5 (/9 e.new#20/33 )/10 (/13 e.new#21/35 )/14 (/17 e.new#22/37 )/18 (/29 s.new#16/31 s.new#17/32 s.new#18/43 e.new#19/39 )/30 e.new#15/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#20 as range 33
      // closed e.new#21 as range 35
      // closed e.new#22 as range 37
      // closed e.new#15 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new#19 as range 39
      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/44 )/10 (/13 e.X#0/46 )/14 (/17 e.X0#0/48 )/18 (/29 # TkVariable/31 s.LnNum#1/32 s.Mode#1/43 e.Index#1/50 )/30 e.Tail#1/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[31] ) )
          continue;
        // closed e.MultiBracket#1 as range 44
        // closed e.X#0 as range 46
        // closed e.X0#0 as range 48
        // closed e.Index#1 as range 50
        // closed e.Tail#1 as range 52
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.Mode#1: 43
        //DEBUG: e.MultiBracket#1: 44
        //DEBUG: e.X#0: 46
        //DEBUG: e.X0#0: 48
        //DEBUG: e.Index#1: 50
        //DEBUG: e.Tail#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/46 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/48 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/18 AsIs: (/29 AsIs: # TkVariable/31 AsIs: s.LnNum#1/32 AsIs: s.Mode#1/43 AsIs: e.Index#1/50 AsIs: )/30 AsIs: e.Tail#1/52 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[13], context[18] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@6/4 t.new#23/5 (/9 e.new#28/44 )/10 (/13 e.new#29/46 )/14 (/17 e.new#30/48 )/18 (/29 s.new#25/31 s.new#26/32 s.new#27/43 )/30 e.new#24/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.new#28 as range 44
      // closed e.new#29 as range 46
      // closed e.new#30 as range 48
      // closed e.new#24 as range 50
      do {
        // </0 & DoParseResult@6/4 t.new#31/5 (/9 e.new#35/52 )/10 (/13 e.new#36/54 )/14 (/17 e.new#37/56 )/18 (/29 # Open/31 s.new#33/32 s.new#34/43 )/30 e.new#32/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_Open], context[31] ) )
          continue;
        // closed e.new#35 as range 52
        // closed e.new#36 as range 54
        // closed e.new#37 as range 56
        // closed e.new#32 as range 58
        do {
          // </0 & DoParseResult@6/4 t.new#38/5 (/9 e.new#41/60 )/10 (/13 e.new#42/62 )/14 (/17 e.new#43/64 )/18 (/29 # Open/31 s.new#40/32 # TkOpenADT/43 )/30 e.new#39/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[43] ) )
            continue;
          // closed e.new#41 as range 60
          // closed e.new#42 as range 62
          // closed e.new#43 as range 64
          // closed e.new#39 as range 66
          do {
            // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/68 )/10 (/13 e.X#0/70 )/14 (/17 e.X0#0/72 )/18 (/29 # Open/31 s.LnNumADT#1/32 # TkOpenADT/43 )/30 (/78 # TkName/80 s.LnNumName#1/81 e.Name#1/76 )/79 e.Tail#1/74 >/1
            context[68] = context[60];
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            context[73] = context[65];
            context[74] = context[66];
            context[75] = context[67];
            context[76] = 0;
            context[77] = 0;
            context[78] = refalrts::brackets_left( context[76], context[77], context[74], context[75] );
            if( ! context[78] )
              continue;
            refalrts::bracket_pointers(context[78], context[79]);
            context[80] = refalrts::ident_left( identifiers[ident_TkName], context[76], context[77] );
            if( ! context[80] )
              continue;
            // closed e.MultiBracket#1 as range 68
            // closed e.X#0 as range 70
            // closed e.X0#0 as range 72
            // closed e.Tail#1 as range 74
            if( ! refalrts::svar_left( context[81], context[76], context[77] ) )
              continue;
            // closed e.Name#1 as range 76
            //DEBUG: t.X#0: 5
            //DEBUG: s.LnNumADT#1: 32
            //DEBUG: e.MultiBracket#1: 68
            //DEBUG: e.X#0: 70
            //DEBUG: e.X0#0: 72
            //DEBUG: e.Tail#1: 74
            //DEBUG: s.LnNumName#1: 81
            //DEBUG: e.Name#1: 76

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkName/80 s.LnNumName#1/81 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@4/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/68 HalfReuse: (/10 HalfReuse: # ADT-Brackets/13 } Tile{ AsIs: s.LnNumADT#1/32 Reuse: # TkCloseADT/43 } Tile{ AsIs: e.X#0/70 } Tile{ AsIs: (/17 AsIs: e.X0#0/72 AsIs: )/18 HalfReuse: )/29 HalfReuse: )/31 } Tile{ HalfReuse: s.LnNumName1 #81/30 AsIs: (/78 } Tile{ AsIs: e.Name#1/76 } Tile{ AsIs: )/79 AsIs: e.Tail#1/74 AsIs: >/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z4]);
            refalrts::reinit_open_bracket(context[10]);
            refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
            refalrts::update_ident(context[43], identifiers[ident_TkCloseADT]);
            refalrts::reinit_close_bracket(context[29]);
            refalrts::reinit_close_bracket(context[31]);
            refalrts::reinit_svar( context[30], context[81] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[78], context[79] );
            refalrts::link_brackets( context[9], context[31] );
            refalrts::link_brackets( context[10], context[29] );
            refalrts::link_brackets( context[17], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[79];
            res = refalrts::splice_evar( res, context[76], context[77] );
            res = refalrts::splice_evar( res, context[30], context[78] );
            res = refalrts::splice_evar( res, context[17], context[31] );
            res = refalrts::splice_evar( res, context[70], context[71] );
            res = refalrts::splice_evar( res, context[32], context[43] );
            refalrts::splice_to_freelist_open( vm, context[13], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/68 )/10 (/13 e.X#0/70 )/14 (/17 e.X0#0/72 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenADT/43 )/30 e.Tail#1/74 >/1
          context[68] = context[60];
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          context[73] = context[65];
          context[74] = context[66];
          context[75] = context[67];
          // closed e.MultiBracket#1 as range 68
          // closed e.X#0 as range 70
          // closed e.X0#0 as range 72
          // closed e.Tail#1 as range 74
          //DEBUG: t.X#0: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 68
          //DEBUG: e.X#0: 70
          //DEBUG: e.X0#0: 72
          //DEBUG: e.Tail#1: 74

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </76 & DoParseResult/77 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.LnNum1 #32/9 }"Ex"/78 Tile{ HalfReuse: 'p'/14 }"ected name after \"[\""/80 Tile{ HalfReuse: >/10 AsIs: (/13 } Tile{ AsIs: e.MultiBracket#1/68 } (/82 # ADT-Brackets/83 Tile{ AsIs: s.LnNum#1/32 } # TkCloseADT/84 Tile{ AsIs: e.X#0/70 } Tile{ AsIs: (/17 AsIs: e.X0#0/72 AsIs: )/18 HalfReuse: )/29 HalfReuse: )/31 } (/85 s.LnNum#1/32/86 (/87 # UnnamedADT/88 Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/74 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[76]);
          refalrts::alloc_name(vm, context[77], functions[efunc_DoParseResult]);
          refalrts::alloc_chars(vm, context[78], context[79], "Ex", 2);
          refalrts::alloc_chars(vm, context[80], context[81], "ected name after \"[\"", 20);
          refalrts::alloc_open_bracket(vm, context[82]);
          refalrts::alloc_ident(vm, context[83], identifiers[ident_ADTm_Brackets]);
          refalrts::alloc_ident(vm, context[84], identifiers[ident_TkCloseADT]);
          refalrts::alloc_open_bracket(vm, context[85]);
          refalrts::copy_stvar(vm, context[86], context[32]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::alloc_ident(vm, context[88], identifiers[ident_UnnamedADT]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_svar( context[9], context[32] );
          refalrts::reinit_char(context[14], 'p');
          refalrts::reinit_close_call(context[10]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::reinit_close_bracket(context[31]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[76] );
          refalrts::link_brackets( context[85], context[30] );
          refalrts::link_brackets( context[87], context[43] );
          refalrts::link_brackets( context[13], context[31] );
          refalrts::link_brackets( context[82], context[29] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[85], context[88] );
          res = refalrts::splice_evar( res, context[17], context[31] );
          res = refalrts::splice_evar( res, context[70], context[71] );
          res = refalrts::splice_elem( res, context[84] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[82], context[83] );
          res = refalrts::splice_evar( res, context[68], context[69] );
          res = refalrts::splice_evar( res, context[10], context[13] );
          res = refalrts::splice_evar( res, context[80], context[81] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[78], context[79] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[76], context[77] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.X#0/62 )/14 (/17 e.X0#0/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenBracket/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.X#0 as range 62
          // closed e.X0#0 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.X#0: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.X#0: 62
          //DEBUG: e.X0#0: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: # Brackets/13 } Tile{ AsIs: s.LnNum#1/32 } Tile{ Reuse: # TkCloseBracket/31 } Tile{ AsIs: e.X#0/62 } Tile{ AsIs: (/17 AsIs: e.X0#0/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
          refalrts::update_ident(context[31], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[17], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.X#0/62 )/14 (/17 e.X0#0/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenCall/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.X#0 as range 62
          // closed e.X0#0 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.X#0: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.X#0: 62
          //DEBUG: e.X0#0: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: # CallBrackets/13 } Tile{ AsIs: s.LnNum#1/32 } Tile{ Reuse: # TkCloseCall/31 } Tile{ AsIs: e.X#0/62 } Tile{ AsIs: (/17 AsIs: e.X0#0/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_ident(context[13], identifiers[ident_CallBrackets]);
          refalrts::update_ident(context[31], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[17], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[32] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.X#0/62 )/14 (/17 e.X0#0/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenBracket/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.X#0 as range 62
          // closed e.X0#0 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.X#0: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.X#0: 62
          //DEBUG: e.X0#0: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ HalfReuse: # TkOpenBracket/29 HalfReuse: >/31 AsIs: s.LnNum#1/32 } Tile{ HalfReuse: # TkCloseBracket/14 } Tile{ AsIs: e.X#0/62 } Tile{ AsIs: (/17 AsIs: e.X0#0/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[29], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_call(context[31]);
          refalrts::reinit_ident(context[14], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[17], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.X#0/62 )/14 (/17 e.X0#0/64 )/18 (/29 # Open/31 s.LnNum#1/32 # TkOpenCall/43 )/30 e.Tail#1/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[43] ) )
            continue;
          // closed e.MultiBracket#1 as range 60
          // closed e.X#0 as range 62
          // closed e.X0#0 as range 64
          // closed e.Tail#1 as range 66
          //DEBUG: t.X#0: 5
          //DEBUG: s.LnNum#1: 32
          //DEBUG: e.MultiBracket#1: 60
          //DEBUG: e.X#0: 62
          //DEBUG: e.X0#0: 64
          //DEBUG: e.Tail#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ HalfReuse: # TkOpenCall/29 HalfReuse: >/31 AsIs: s.LnNum#1/32 } Tile{ HalfReuse: # TkCloseCall/14 } Tile{ AsIs: e.X#0/62 } Tile{ AsIs: (/17 AsIs: e.X0#0/64 AsIs: )/18 } Tile{ HalfReuse: )/43 AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
          refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_ident(context[29], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_call(context[31]);
          refalrts::reinit_ident(context[14], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[30] );
          refalrts::link_brackets( context[10], context[43] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[43];
          res = refalrts::splice_evar( res, context[17], context[18] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/60 )/10 (/13 e.X#0/62 )/14 (/17 e.X0#0/64 )/18 (/29 # Open/31 s.LnNum#1/32 s.OpenBracket#1/43 )/30 e.Tail#1/66 >/1
        context[60] = context[52];
        context[61] = context[53];
        context[62] = context[54];
        context[63] = context[55];
        context[64] = context[56];
        context[65] = context[57];
        context[66] = context[58];
        context[67] = context[59];
        // closed e.MultiBracket#1 as range 60
        // closed e.X#0 as range 62
        // closed e.X0#0 as range 64
        // closed e.Tail#1 as range 66
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 32
        //DEBUG: s.OpenBracket#1: 43
        //DEBUG: e.MultiBracket#1: 60
        //DEBUG: e.X#0: 62
        //DEBUG: e.X0#0: 64
        //DEBUG: e.Tail#1: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@1/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/60 HalfReuse: (/10 HalfReuse: </13 } & DoParseResult$10\1*2/68 Tile{ AsIs: s.OpenBracket#1/43 } Tile{ HalfReuse: >/31 AsIs: s.LnNum#1/32 } Tile{ HalfReuse: </14 } & DoParseResult$10\2*2/69 s.OpenBracket#1/43/70 >/71 Tile{ AsIs: e.X#0/62 } Tile{ AsIs: (/17 AsIs: e.X0#0/64 AsIs: )/18 HalfReuse: )/29 } Tile{ AsIs: )/30 AsIs: e.Tail#1/66 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[68], functions[efunc_gen_DoParseResult_S10L1D2]);
        refalrts::alloc_name(vm, context[69], functions[efunc_gen_DoParseResult_S10L2D2]);
        refalrts::copy_stvar(vm, context[70], context[43]);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z1]);
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_close_call(context[31]);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[30] );
        refalrts::link_brackets( context[10], context[29] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[17], context[29] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[69], context[71] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_elem( res, context[68] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/52 (/62 s.BracketsSign#1/64 s.OpenLnNum#1/65 s.CloseBracket#1/66 e.Scanned#1/60 )/63 )/10 (/13 e.X#0/54 )/14 (/17 e.X0#0/56 )/18 (/29 # Close/31 s.LnNum#1/32 s.CloseBracket#1/43 )/30 e.Tail#1/58 >/1
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_Close], context[31] ) )
        continue;
      context[60] = 0;
      context[61] = 0;
      context[62] = refalrts::brackets_right( context[60], context[61], context[52], context[53] );
      if( ! context[62] )
        continue;
      refalrts::bracket_pointers(context[62], context[63]);
      // closed e.MultiBracket#1 as range 52
      // closed e.X#0 as range 54
      // closed e.X0#0 as range 56
      // closed e.Tail#1 as range 58
      if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
        continue;
      if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[66], context[43], context[60], context[61] ) )
        continue;
      // closed e.Scanned#1 as range 60
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 32
      //DEBUG: s.CloseBracket#1: 43
      //DEBUG: e.MultiBracket#1: 52
      //DEBUG: e.X#0: 54
      //DEBUG: e.X0#0: 56
      //DEBUG: e.Tail#1: 58
      //DEBUG: s.BracketsSign#1: 64
      //DEBUG: s.OpenLnNum#1: 65
      //DEBUG: e.Scanned#1: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.BracketsSign#1/64 s.OpenLnNum#1/65 s.CloseBracket#1/66 {REMOVED TILE} {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Close/31 s.LnNum#1/32 s.CloseBracket#1/43 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoParseResult@6/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.MultiBracket#1/52 HalfReuse: )/62 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Scanned#1/60 } Tile{ AsIs: )/63 HalfReuse: (/10 HalfReuse: s.BracketsSign1 #64/13 AsIs: e.X#0/54 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/56 } Tile{ AsIs: )/18 } Tile{ AsIs: )/30 AsIs: e.Tail#1/58 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[62]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_svar( context[13], context[64] );
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[30] );
      refalrts::link_brackets( context[14], context[18] );
      refalrts::link_brackets( context[29], context[63] );
      refalrts::link_brackets( context[9], context[62] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[63], context[14] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, context[62], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/33 )/10 (/13 e.X#0/35 )/14 (/17 e.X0#0/37 )/18 (/29 # TkOpenBlock/31 s.LnNum#1/32 )/30 e.Tail#1/39 >/1
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.MultiBracket#1 as range 33
    // closed e.X#0 as range 35
    // closed e.X0#0 as range 37
    // closed e.Tail#1 as range 39
    //DEBUG: t.X#0: 5
    //DEBUG: s.LnNum#1: 32
    //DEBUG: e.MultiBracket#1: 33
    //DEBUG: e.X#0: 35
    //DEBUG: e.X0#0: 37
    //DEBUG: e.Tail#1: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Fetch@7/18 AsIs: (/29 } Tile{ AsIs: </0 Reuse: & ParseBlock/4 AsIs: t.X#0/5 } Tile{ AsIs: e.Tail#1/39 } Tile{ HalfReuse: >/17 } Tile{ AsIs: )/30 } Tile{ AsIs: (/9 AsIs: e.MultiBracket#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/35 AsIs: )/14 } Tile{ AsIs: e.X0#0/37 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[31]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Fetch_Z7]);
    refalrts::update_name(context[4], functions[efunc_ParseBlock]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[18], context[29] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@6/4 t.new#6/5 (/9 e.new#8/19 (/29 s.new#9/31 s.new#10/32 s.new#11/33 e.new#12/27 )/30 )/10 (/13 e.new#13/21 )/14 (/17 e.new#14/23 )/18 e.new#7/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_right( context[27], context[28], context[19], context[20] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new#8 as range 19
    // closed e.new#13 as range 21
    // closed e.new#14 as range 23
    // closed e.new#7 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[27], context[28] ) )
      continue;
    // closed e.new#12 as range 27
    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenBracket/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"(\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkOpenBracket/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseBracket/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \")\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkCloseBracket/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \")\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenCall/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"<\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkOpenCall/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseCall/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \">\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkCloseCall/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \">\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkOpenADT/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"[\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkOpenADT/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # TkCloseADT/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"]\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # TkCloseADT/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"]\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # Brackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"(\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # Brackets/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"(\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # ADT-Brackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"[\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # ADT-Brackets/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"[\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 # CallBrackets/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
      context[34] = context[19];
      context[35] = context[20];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[21];
      context[39] = context[22];
      context[40] = context[23];
      context[41] = context[24];
      context[42] = context[25];
      context[43] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[31] ) )
        continue;
      // closed e.MultiBracket#1 as range 34
      // closed e.Scanned#1 as range 36
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.OpenLnNum#1: 32
      //DEBUG: s.CloseBracket#1: 33
      //DEBUG: e.MultiBracket#1: 34
      //DEBUG: e.Scanned#1: 36
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \"<\""/46 >/48 (/49 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: # CallBrackets/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"<\"", 22);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[9], context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[30] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[30], context[10] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[46], context[49] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.MultiBracket#1/34 (/29 s.BracketsSign#1/31 s.OpenLnNum#1/32 s.CloseBracket#1/33 e.Scanned#1/36 )/30 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 e.Tail#1/42 >/1
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[27];
    context[37] = context[28];
    context[38] = context[21];
    context[39] = context[22];
    context[40] = context[23];
    context[41] = context[24];
    context[42] = context[25];
    context[43] = context[26];
    // closed e.MultiBracket#1 as range 34
    // closed e.Scanned#1 as range 36
    // closed e.X#0 as range 38
    // closed e.X0#0 as range 40
    // closed e.Tail#1 as range 42
    //DEBUG: t.X#0: 5
    //DEBUG: s.BracketsSign#1: 31
    //DEBUG: s.OpenLnNum#1: 32
    //DEBUG: s.CloseBracket#1: 33
    //DEBUG: e.MultiBracket#1: 34
    //DEBUG: e.Scanned#1: 36
    //DEBUG: e.X#0: 38
    //DEBUG: e.X0#0: 40
    //DEBUG: e.Tail#1: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.OpenLnNum#1/32 s.CloseBracket#1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 HalfReuse: s.OpenLnNum1 #32/9 }"Unbalanced bracket \""/46 </48 & StrFromBracket*9/49 s.BracketsSign#1/31/50 >/51 '\"'/52 >/53 (/54 Tile{ AsIs: e.MultiBracket#1/34 } Tile{ AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.Scanned#1/36 } Tile{ AsIs: (/29 AsIs: s.BracketsSign#1/31 } Tile{ AsIs: e.X#0/38 } Tile{ AsIs: (/13 } Tile{ AsIs: e.X0#0/40 } Tile{ AsIs: )/30 AsIs: )/10 } Tile{ AsIs: )/18 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
    refalrts::alloc_chars(vm, context[46], context[47], "Unbalanced bracket \"", 20);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_StrFromBracket_D9]);
    refalrts::copy_stvar(vm, context[50], context[31]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_char(vm, context[52], '\"');
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_svar( context[9], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[29], context[10] );
    refalrts::link_brackets( context[13], context[30] );
    refalrts::link_brackets( context[54], context[14] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[30], context[10] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[46], context[54] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoParseResult@6/4 t.new#6/5 (/9 )/10 (/13 e.new#8/19 )/14 (/17 e.new#9/21 )/18 e.new#7/23 >/1
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[2];
    context[24] = context[3];
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.new#8 as range 19
    // closed e.new#9 as range 21
    // closed e.new#7 as range 23
    do {
      // </0 & DoParseResult@6/4 t.new#10/5 (/9 )/10 (/13 e.new#14/25 )/14 (/17 e.new#15/27 )/18 (/33 # Close/35 s.new#11/36 s.new#12/37 )/34 e.new#13/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = refalrts::ident_left( identifiers[ident_Close], context[31], context[32] );
      if( ! context[35] )
        continue;
      // closed e.new#14 as range 25
      // closed e.new#15 as range 27
      // closed e.new#13 as range 29
      if( ! refalrts::svar_left( context[36], context[31], context[32] ) )
        continue;
      if( ! refalrts::svar_left( context[37], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenBracket/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"(\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseBracket/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \")\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \")\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenCall/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"<\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseCall/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \">\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \">\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkOpenADT/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"[\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # TkCloseADT/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"]\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"]\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # Brackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"(\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"(\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # ADT-Brackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"[\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"[\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 # CallBrackets/37 )/34 e.Tail#1/42 >/1
        context[38] = context[25];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
          continue;
        // closed e.X#0 as range 38
        // closed e.X0#0 as range 40
        // closed e.Tail#1 as range 42
        //DEBUG: t.X#0: 5
        //DEBUG: s.LnNum#1: 36
        //DEBUG: e.X#0: 38
        //DEBUG: e.X0#0: 40
        //DEBUG: e.Tail#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult/4 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } Tile{ HalfReuse: 'b'/17 }"alanced bracket \"<\""/46 >/48 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } Tile{ HalfReuse: )/37 AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[46], context[47], "alanced bracket \"<\"", 19);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_DoParseResult]);
        refalrts::reinit_svar( context[18], context[36] );
        refalrts::reinit_char(context[33], 'U');
        refalrts::reinit_char(context[35], 'n');
        refalrts::reinit_char(context[17], 'b');
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[34] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_evar( res, context[46], context[48] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[18], context[35] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/38 )/14 (/17 e.X0#0/40 )/18 (/33 # Close/35 s.LnNum#1/36 s.CloseBracket#1/37 )/34 e.Tail#1/42 >/1
      context[38] = context[25];
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      // closed e.X#0 as range 38
      // closed e.X0#0 as range 40
      // closed e.Tail#1 as range 42
      //DEBUG: t.X#0: 5
      //DEBUG: s.LnNum#1: 36
      //DEBUG: s.CloseBracket#1: 37
      //DEBUG: e.X#0: 38
      //DEBUG: e.X0#0: 40
      //DEBUG: e.Tail#1: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum#1/36 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </44 & DoParseResult/45 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.X#0/5 } Tile{ HalfReuse: s.LnNum1 #36/18 HalfReuse: 'U'/33 HalfReuse: 'n'/35 } 'b'/46 Tile{ HalfReuse: 'a'/17 }"lanced bracket \""/47 </49 & StrFromBracket*9/50 Tile{ AsIs: s.CloseBracket#1/37 } >/51 '\"'/52 >/53 Tile{ AsIs: (/9 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/38 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/40 } )/54 Tile{ AsIs: )/34 AsIs: e.Tail#1/42 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_DoParseResult]);
      refalrts::alloc_char(vm, context[46], 'b');
      refalrts::alloc_chars(vm, context[47], context[48], "lanced bracket \"", 16);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_StrFromBracket_D9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_char(vm, context[52], '\"');
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_svar( context[18], context[36] );
      refalrts::reinit_char(context[33], 'U');
      refalrts::reinit_char(context[35], 'n');
      refalrts::reinit_char(context[17], 'a');
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[13], context[34] );
      refalrts::link_brackets( context[14], context[54] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[34];
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      res = refalrts::splice_evar( res, context[51], context[53] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[18], context[35] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoParseResult@6/4 t.X#0/5 (/9 )/10 (/13 e.X#0/25 )/14 (/17 e.X0#0/27 )/18 e.Tail#1/29 >/1
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    // closed e.X#0 as range 25
    // closed e.X0#0 as range 27
    // closed e.Tail#1 as range 29
    //DEBUG: t.X#0: 5
    //DEBUG: e.X#0: 25
    //DEBUG: e.X0#0: 27
    //DEBUG: e.Tail#1: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoParseResult@6/4 {REMOVED TILE} )/10 (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.X#0/5 AsIs: (/9 } Tile{ AsIs: e.X#0/25 } Tile{ AsIs: (/17 AsIs: e.X0#0/27 AsIs: )/18 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail#1/29 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[14] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[5], context[9] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoParseResult@6/4 t.X#0/5 (/9 e.dyn#0/7 )/10 (/13 e.X#0/11 )/14 (/17 e.X0#0/15 )/18 e.dyn#2/2 >/1
  // closed e.dyn#0 as range 7
  // closed e.X#0 as range 11
  // closed e.X0#0 as range 15
  // closed e.dyn#2 as range 2
  //DEBUG: t.X#0: 5
  //DEBUG: e.dyn#0: 7
  //DEBUG: e.X#0: 11
  //DEBUG: e.X0#0: 15
  //DEBUG: e.dyn#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult@0/4 AsIs: t.X#0/5 AsIs: (/9 AsIs: e.dyn#0/7 AsIs: )/10 AsIs: (/13 AsIs: e.X#0/11 HalfReuse: (/14 } Tile{ AsIs: e.X0#0/15 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/18 AsIs: e.dyn#2/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_Z0]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_close_bracket(context[17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[14], context[17] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoParseResult_Z6("DoParseResult@6", COOKIE1_, COOKIE2_, func_gen_DoParseResult_Z6);


static refalrts::FnResult func_gen_Fetch_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Fetch@5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@5/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & Fetch@5/4 (/7 (/22 e.0#0/20 )/23 t.0#0/24 e.1#0/14 )/8 (/11 e.MultiBracket#1/16 )/12 s.LnNumName0#1/13 e.Name0#1/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[14], context[15] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.0#0 as range 20
    // closed e.MultiBracket#1 as range 16
    // closed e.Name0#1 as range 18
    context[25] = refalrts::tvar_left( context[24], context[14], context[15] );
    if( ! context[25] )
      continue;
    // closed e.1#0 as range 14
    //DEBUG: s.LnNumName0#1: 13
    //DEBUG: e.0#0: 20
    //DEBUG: e.MultiBracket#1: 16
    //DEBUG: e.Name0#1: 18
    //DEBUG: t.0#0: 24
    //DEBUG: e.1#0: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </26 & DoParseResult@5/27 Tile{ AsIs: t.0#0/24 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/16 AsIs: )/12 AsIs: s.LnNumName0#1/13 } (/28 Tile{ HalfReuse: (/8 } Tile{ AsIs: e.Name0#1/18 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 HalfReuse: # Closure/22 AsIs: e.0#0/20 AsIs: )/23 } Tile{ AsIs: e.1#0/14 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoParseResult_Z5]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_ident(context[22], identifiers[ident_Closure]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[7], context[23] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::link_brackets( context[8], context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[0], context[23] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@5/4 (/7 e.Argument#1/14 )/8 (/11 e.MultiBracket#1/16 )/12 s.LnNumName0#1/13 e.Name0#1/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Argument#1 as range 14
    // closed e.MultiBracket#1 as range 16
    // closed e.Name0#1 as range 18
    //DEBUG: s.LnNumName0#1: 13
    //DEBUG: e.Argument#1: 14
    //DEBUG: e.MultiBracket#1: 16
    //DEBUG: e.Name0#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult$12\1*1/4 AsIs: (/7 } Tile{ AsIs: e.MultiBracket#1/16 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: s.LnNumName0#1/13 } (/20 Tile{ AsIs: e.Name0#1/18 } Tile{ AsIs: )/12 } )/21 Tile{ AsIs: e.Argument#1/14 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[21] );
    refalrts::link_brackets( context[20], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@5/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 s.LnNumName0#1/13 e.Name0#1/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.Name0#1 as range 2
  //DEBUG: s.LnNumName0#1: 13
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.Name0#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/14 Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 } Tile{ AsIs: (/7 } Tile{ AsIs: s.LnNumName0#1/13 } (/15 Tile{ AsIs: e.Name0#1/2 } )/16 )/17 {*}/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_unwrapped_closure(vm, context[18], context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[18] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z5("Fetch@5", COOKIE1_, COOKIE2_, func_gen_Fetch_Z5);


static refalrts::FnResult func_gen_Fetch_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Fetch@6/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@6/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 s.new#3/13 (/16 e.new#4/14 )/17 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new#4 as range 14
  // closed e.new#5 as range 2
  do {
    // </0 & Fetch@6/4 (/7 (/28 e.0#0/26 )/29 t.0#0/30 e.1#0/18 )/8 (/11 e.MultiBracket#1/20 )/12 s.X#0/13 (/16 e.X#0/22 )/17 e.X0#0/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[18], context[19] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.0#0 as range 26
    // closed e.MultiBracket#1 as range 20
    // closed e.X#0 as range 22
    // closed e.X0#0 as range 24
    context[31] = refalrts::tvar_left( context[30], context[18], context[19] );
    if( ! context[31] )
      continue;
    // closed e.1#0 as range 18
    //DEBUG: s.X#0: 13
    //DEBUG: e.0#0: 26
    //DEBUG: e.MultiBracket#1: 20
    //DEBUG: e.X#0: 22
    //DEBUG: e.X0#0: 24
    //DEBUG: t.0#0: 30
    //DEBUG: e.1#0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoParseResult@5/32 Tile{ AsIs: t.0#0/30 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/20 AsIs: )/12 AsIs: s.X#0/13 AsIs: (/16 AsIs: e.X#0/22 HalfReuse: (/17 AsIs: e.X0#0/24 HalfReuse: )/1 } Tile{ HalfReuse: )/4 AsIs: (/7 HalfReuse: # Closure/28 AsIs: e.0#0/26 AsIs: )/29 } Tile{ AsIs: e.1#0/18 } Tile{ HalfReuse: >/8 } Tile{ ]] }
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoParseResult_Z5]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_ident(context[28], identifiers[ident_Closure]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[29] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::link_brackets( context[17], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[4], context[29] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@6/4 (/7 e.Argument#1/18 )/8 (/11 e.MultiBracket#1/20 )/12 s.X#0/13 (/16 e.X#0/22 )/17 e.X0#0/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Argument#1 as range 18
    // closed e.MultiBracket#1 as range 20
    // closed e.X#0 as range 22
    // closed e.X0#0 as range 24
    //DEBUG: s.X#0: 13
    //DEBUG: e.Argument#1: 18
    //DEBUG: e.MultiBracket#1: 20
    //DEBUG: e.X#0: 22
    //DEBUG: e.X0#0: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoParseResult$12\1*1/4 AsIs: (/7 } Tile{ AsIs: e.MultiBracket#1/20 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: s.X0 #13/16 AsIs: e.X#0/22 HalfReuse: (/17 AsIs: e.X0#0/24 HalfReuse: )/1 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Argument#1/18 } >/26 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::reinit_svar( context[16], context[13] );
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[17], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@6/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 s.X#0/13 (/16 e.X#0/14 )/17 e.X0#0/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.X#0 as range 14
  // closed e.X0#0 as range 2
  //DEBUG: s.X#0: 13
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.X#0: 14
  //DEBUG: e.X0#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X#0/13 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } [*]/18 Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 } Tile{ AsIs: (/7 } Tile{ HalfReuse: s.X0 #13/16 AsIs: e.X#0/14 HalfReuse: (/17 AsIs: e.X0#0/2 HalfReuse: )/1 } )/19 {*}/20 >/21 Tile{ ]] }
  refalrts::alloc_closure_head(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_unwrapped_closure(vm, context[20], context[18]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::reinit_svar( context[16], context[13] );
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[19] );
  refalrts::link_brackets( context[17], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[21] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  refalrts::wrap_closure( context[20] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z6("Fetch@6", COOKIE1_, COOKIE2_, func_gen_Fetch_Z6);


static refalrts::FnResult func_gen_Fetch_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Fetch@7/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Fetch@7/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 2
  do {
    // </0 & Fetch@7/4 (/7 (/27 e.0#0/25 )/28 t.0#0/29 e.1#0/17 )/8 (/11 e.MultiBracket#1/19 )/12 (/15 e.X#0/21 )/16 e.X0#0/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[17], context[18] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.0#0 as range 25
    // closed e.MultiBracket#1 as range 19
    // closed e.X#0 as range 21
    // closed e.X0#0 as range 23
    context[30] = refalrts::tvar_left( context[29], context[17], context[18] );
    if( ! context[30] )
      continue;
    // closed e.1#0 as range 17
    //DEBUG: e.0#0: 25
    //DEBUG: e.MultiBracket#1: 19
    //DEBUG: e.X#0: 21
    //DEBUG: e.X0#0: 23
    //DEBUG: t.0#0: 29
    //DEBUG: e.1#0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoParseResult@6/31 Tile{ AsIs: t.0#0/29 } Tile{ AsIs: (/11 AsIs: e.MultiBracket#1/19 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/21 HalfReuse: (/16 AsIs: e.X0#0/23 HalfReuse: )/1 } Tile{ HalfReuse: )/4 AsIs: (/7 HalfReuse: # Closure/27 AsIs: e.0#0/25 AsIs: )/28 } Tile{ AsIs: e.1#0/17 } Tile{ HalfReuse: >/8 } Tile{ ]] }
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoParseResult_Z6]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_ident(context[27], identifiers[ident_Closure]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[28] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::link_brackets( context[16], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[4], context[28] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@7/4 (/7 e.Argument#1/17 )/8 (/11 e.MultiBracket#1/19 )/12 (/15 e.X#0/21 )/16 e.X0#0/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Argument#1 as range 17
    // closed e.MultiBracket#1 as range 19
    // closed e.X#0 as range 21
    // closed e.X0#0 as range 23
    //DEBUG: e.Argument#1: 17
    //DEBUG: e.MultiBracket#1: 19
    //DEBUG: e.X#0: 21
    //DEBUG: e.X0#0: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoParseResult$12\1*1/8 AsIs: (/11 AsIs: e.MultiBracket#1/19 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/21 HalfReuse: (/16 AsIs: e.X0#0/23 HalfReuse: )/1 } Tile{ HalfReuse: )/7 } Tile{ AsIs: e.Argument#1/17 } Tile{ HalfReuse: >/4 } Tile{ ]] }
    refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1D1]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_close_call(context[4]);
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[7] );
    refalrts::link_brackets( context[16], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@7/4 (/7 e.arg#0/5 )/8 (/11 e.MultiBracket#1/9 )/12 (/15 e.X#0/13 )/16 e.X0#0/2 >/1
  // closed e.arg#0 as range 5
  // closed e.MultiBracket#1 as range 9
  // closed e.X#0 as range 13
  // closed e.X0#0 as range 2
  //DEBUG: e.arg#0: 5
  //DEBUG: e.MultiBracket#1: 9
  //DEBUG: e.X#0: 13
  //DEBUG: e.X0#0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 } Tile{ AsIs: e.arg#0/5 } Tile{ HalfReuse: [*]/7 } Tile{ HalfReuse: & DoParseResult$12\1@0/8 AsIs: (/11 AsIs: e.MultiBracket#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.X#0/13 HalfReuse: (/16 AsIs: e.X0#0/2 HalfReuse: )/1 } )/17 {*}/18 >/19 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_unwrapped_closure(vm, context[18], context[7]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoParseResult_S12L1Z0]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[17] );
  refalrts::link_brackets( context[16], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  refalrts::wrap_closure( context[18] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z7("Fetch@7", COOKIE1_, COOKIE2_, func_gen_Fetch_Z7);


//End of file
