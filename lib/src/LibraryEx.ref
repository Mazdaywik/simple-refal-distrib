$INCLUDE "LibraryEx";

*$FROM Library
$EXTERN Open-Auto, Close, Get, Putout, Add, Sub, Arg,
  SymbCompare, ReadBytes, WriteBytes;

$ENTRY Apply;

$ENTRY Map;

$ENTRY Reduce;

$ENTRY Fetch;

$ENTRY MapAccum;

$ENTRY UnBracket;

$ENTRY DelAccumulator;

$ENTRY LoadFile {
  e.FileName
    = <Open-Auto 'r' e.FileName> : t.File
    = <DoLoadFile t.File <Get t.File>>;
}

DoLoadFile {
  t.File 0 = <Close t.File>;

  t.File e.Line 0 = (e.Line) <Close t.File>;

  t.File e.Line = (e.Line) <DoLoadFile t.File <Get t.File>>;
}

$ENTRY SaveFile {
  (e.FileName) e.Lines = <SaveFile-Handle <Open-Auto 'w' e.FileName> e.Lines>;
}

$ENTRY AppendFile {
  (e.FileName) e.Lines = <SaveFile-Handle <Open-Auto 'a' e.FileName> e.Lines>;
}

SaveFile-Handle {
  s.FileHandle e.Lines
    = <Map
        {
          (e.Line) = <Putout s.FileHandle e.Line>;
        }
        e.Lines
      >
      <Close s.FileHandle>;
}

$ENTRY LoadBytes {
  e.FileName = <DoLoadBytes <Open-Auto ('rb') e.FileName>>;
}

DoLoadBytes {
  s.FileHandle
    = <ReadBytes s.FileHandle 4096>
    : {
        /* пусто */ = <Close s.FileHandle>;
        e.Bytes = e.Bytes <DoLoadBytes s.FileHandle>;
      };
}

$ENTRY SaveBytes {
  (e.FileName) e.Bytes
    = <SaveBytes-Handle <Open-Auto ('wb') e.FileName> e.Bytes>;
}

$ENTRY AppendBytes {
  (e.FileName) e.Bytes
    = <SaveBytes-Handle <Open-Auto ('ab') e.FileName> e.Bytes>;
}

SaveBytes-Handle {
  s.FileHandle e.Bytes
    = <WriteBytes s.FileHandle e.Bytes>
      <Close s.FileHandle>;
}

$ENTRY Inc;
$ENTRY Dec;

/**
  <ArgList> == (e.Arg)+
  e.Arg ::= s.CHAR*
*/
$ENTRY ArgList {
  = <DoArgList 0>;
}

DoArgList {
  s.Next = <SwDoArgList <Inc s.Next> <Arg s.Next>>;
}

SwDoArgList {
  s.Next = ;

  s.Next e.Arg = (e.Arg) <DoArgList s.Next>;
}

$ENTRY TermCompare {
  (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;

  (e.Left) s.Right = '>';
  s.Left (e.Right) = '<';

  s.Left s.Right = <SymbCompare s.Left s.Right>;
}

Lexicon {
  (t.FirstLeft e.Left) (t.FirstRight e.Right)
    = <Lexicon-Aux
        <TermCompare t.FirstLeft t.FirstRight>
        (e.Left) (e.Right)
      >;

  () () = '=';

  () (e.Right) = '<';
  (e.Left) () = '>';
}

Lexicon-Aux {
  '<' (e.Left) (e.Right) = '<';
  '=' (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;
  '>' (e.Left) (e.Right) = '>';
}

$ENTRY TermCompare-T {
  (e.Left) (e.Right) = <Lexicon-T () (e.Left) () (e.Right)>;

  (e.Left) s.Right = '>' (e.Left) s.Right;
  s.Left (e.Right) = '<' s.Left (e.Right);

  s.Left s.Right = <SymbCompare s.Left s.Right> s.Left s.Right;
}

Lexicon-T {
  (e.ScannedLeft) (t.FirstLeft e.Left)
  (e.ScannedRight) (t.FirstRight e.Right)
    = <Lexicon-T-Aux
        (e.ScannedLeft) (e.ScannedRight)
        <TermCompare-T t.FirstLeft t.FirstRight>
        (e.Left) (e.Right)
      >;

  (e.ScannedLeft) () (e.ScannedRight) ()
    = '=' (e.ScannedLeft) (e.ScannedRight);

  (e.ScannedLeft) () (e.ScannedRight) (e.Right)
    = '<' (e.ScannedLeft) (e.ScannedRight e.Right);

  (e.ScannedLeft) (e.Left) (e.ScannedRight) ()
    = '>' (e.ScannedLeft e.Left) (e.ScannedRight);
}

Lexicon-T-Aux {
  (e.ScannedLeft) (e.ScannedRight)
  '<' t.NextLeft t.NextRight (e.Left) (e.Right)
    = '<'
      (e.ScannedLeft t.NextLeft e.Left)
      (e.ScannedRight t.NextRight e.Right);

  (e.ScannedLeft) (e.ScannedRight)
  '=' t.NextLeft t.NextRight (e.Left) (e.Right)
    = <Lexicon-T
        (e.ScannedLeft t.NextLeft) (e.Left)
        (e.ScannedRight t.NextRight) (e.Right)
      >;

  (e.ScannedLeft) (e.ScannedRight)
  '>' t.NextLeft t.NextRight (e.Left) (e.Right)
    = '>'
      (e.ScannedLeft t.NextLeft e.Left)
      (e.ScannedRight t.NextRight e.Right);
}

/**
  <Trim s.CHAR*> == s.CHAR*
  <Trim-L s.CHAR*> == s.CHAR*
  <Trim-R s.CHAR*> == s.CHAR*
*/
$ENTRY Trim {
  e.Line = <Trim-L <Trim-R e.Line>>;
}

$ENTRY Trim-L {
  ' ' e.Line = <Trim-L e.Line>;
  '\t' e.Line = <Trim-L e.Line>;
  '\r' e.Line = <Trim-L e.Line>;
  '\n' e.Line = <Trim-L e.Line>;
  e.Line = e.Line;
}

$ENTRY Trim-R {
  e.Line ' ' = <Trim-R e.Line>;
  e.Line '\t' = <Trim-R e.Line>;
  e.Line '\r' = <Trim-R e.Line>;
  e.Line '\n' = <Trim-R e.Line>;
  e.Line = e.Line;
}


$ENTRY Pipe;

$ENTRY Sort {
  /* пусто */ = /* пусто */;

  t.Pivot e.Items
    = <Reduce
        {
          ((e.Less) (e.Equal) (e.Greater)) t.Next
            = <TermCompare t.Next t.Pivot>
            : {
                '<' = ((e.Less t.Next) (e.Equal) (e.Greater));
                '=' = ((e.Less) (e.Equal t.Next) (e.Greater));
                '>' = ((e.Less) (e.Equal) (e.Greater t.Next));
              };
        }
        ( (/* less */) (t.Pivot /* equal */) (/* greater */) )
        e.Items
      >
    : ((e.Less) (e.Equal) (e.Greater))
    = <Sort e.Less> e.Equal <Sort e.Greater>;
}

$ENTRY Min {
  t.X t.Y
    = <TermCompare t.X t.Y>
    : {
        '<' = t.X;
        s.Other = t.Y;
      };

  t.First e.Tail = <Reduce &Min t.First e.Tail>;
}

$ENTRY Max {
  t.X t.Y
    = <TermCompare t.X t.Y>
    : {
        '>' = t.X;
        s.Other = t.Y;
      };

  t.First e.Tail = <Reduce &Max t.First e.Tail>;
}

/**
  <OneOf t.Elem e.SampleElems> == True | False
*/
$ENTRY OneOf {
  t.Sample e.Items-B t.Sample e.Items-E = True;
  t.Sample e.Items = False;
}

/**
  <Unique t.Item*> == t.Item*
*/
$ENTRY Unique {
  e.Uniques t.Repeated e.Items-B t.Repeated e.Items-E
    = e.Uniques <Unique e.Items-B t.Repeated e.Items-E>;

  e.Uniques = e.Uniques;
}

/* Для построения .froms:
//FROM Library
*/
