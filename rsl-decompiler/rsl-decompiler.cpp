// This file automatically generated from 'rsl-decompiler.ref'
// Don't edit! Edit 'rsl-decompiler.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_1018319078_2214093260
#define COOKIE1_ 1018319078U
#define COOKIE2_ 2214093260U

enum efunc {
  efunc_gen_Mu_C1 = 0,
  efunc_u_u_Stepm_Start = 1,
  efunc_u_u_Mum_Aux = 2,
  efunc_u_u_Stepm_End = 3,
  efunc_u_u_FindMuPtr = 4,
  efunc_Add = 5,
  efunc_Div = 6,
  efunc_Mod = 7,
  efunc_Mul = 8,
  efunc_Residue = 9,
  efunc_Sub = 10,
  efunc_gen_u_u_Mum_Aux_S13B1 = 11,
  efunc_Type = 12,
  efunc_gen_Residue_C1 = 13,
  efunc_Map = 14,
  efunc_Apply = 15,
  efunc_Reduce = 16,
  efunc_DoMapAccum = 17,
  efunc_DoMapAccumm_Aux = 18,
  efunc_Fetch = 19,
  efunc_Pipe = 20,
  efunc_gen_Pipe_S2L1 = 21,
  efunc_gen_Pipe_S3L1 = 22,
  efunc_ArgList = 23,
  efunc_Main = 24,
  efunc_gen_Map_Z1 = 25,
  efunc_Prout = 26,
  efunc_SaveFile = 27,
  efunc_FormatWord = 28,
  efunc_gen_Map_Z2 = 29,
  efunc_gen_ProcessFile_A5L1 = 30,
  efunc_Rev = 31,
  efunc_gen_ProcessFile_A5L3 = 32,
  efunc_gen_ProcessFile_A5 = 33,
  efunc_CleanupBuiltins = 34,
  efunc_gen_ProcessFile_A5L2 = 35,
  efunc_DecompileFunction = 36,
  efunc_gen_ProcessFile_A4 = 37,
  efunc_Disassemble = 38,
  efunc_gen_ProcessFile_A3 = 39,
  efunc_DecodeStructure = 40,
  efunc_gen_ProcessFile_A2 = 41,
  efunc_LoadBytes = 42,
  efunc_gen_ProcessFile_A1 = 43,
  efunc_Explode = 44,
  efunc_gen_Map_Z3 = 45,
  efunc_ListOfBuiltin = 46,
  efunc_CleanupBuiltinsm_Aux = 47,
  efunc_gen_CleanupBuiltinsm_Aux_S1C1 = 48,
  efunc_gen_CleanupBuiltinsm_Aux_S1C1B1 = 49,
  efunc_ReadEntryPoints = 50,
  efunc_gen_DecodeStructure_A10 = 51,
  efunc_ReadWords = 52,
  efunc_gen_DecodeStructure_A9 = 53,
  efunc_ReadExterns = 54,
  efunc_gen_DecodeStructure_A8 = 55,
  efunc_ReadEntries = 56,
  efunc_gen_DecodeStructure_A7 = 57,
  efunc_ReadDWord = 58,
  efunc_gen_DecodeStructure_A6 = 59,
  efunc_gen_DecodeStructure_A5 = 60,
  efunc_gen_DecodeStructure_A4 = 61,
  efunc_gen_DecodeStructure_A3 = 62,
  efunc_gen_DecodeStructure_A2 = 63,
  efunc_gen_DecodeStructure_A1 = 64,
  efunc_ReadAsciiz = 65,
  efunc_Chr = 66,
  efunc_MakeDWord = 67,
  efunc_gen_Disassemble_A7 = 68,
  efunc_ResolveFunctions = 69,
  efunc_CheckupEntries = 70,
  efunc_gen_Disassemble_A6 = 71,
  efunc_CheckupFunctionStarts = 72,
  efunc_gen_Disassemble_A5 = 73,
  efunc_MakeFunctionTable = 74,
  efunc_gen_Disassemble_A4 = 75,
  efunc_SplitByFunctions = 76,
  efunc_gen_Disassemble_A3 = 77,
  efunc_ResolveWords = 78,
  efunc_gen_Disassemble_A2 = 79,
  efunc_DecodeCommands = 80,
  efunc_gen_Disassemble_A1 = 81,
  efunc_gen_ResolveWords_A1 = 82,
  efunc_MapAccum = 83,
  efunc_gen_ResolveWords_A1L1 = 84,
  efunc_gen_SplitByFunctions_B1S1C1 = 85,
  efunc_DeclareCommand = 86,
  efunc_gen_SplitByFunctions_C1 = 87,
  efunc_gen_SplitByFunctions_B1 = 88,
  efunc_AddFunctionToTable = 89,
  efunc_gen_MakeFunctionTable_A3 = 90,
  efunc_gen_MapAccum_Z1 = 91,
  efunc_gen_MakeFunctionTable_A1L1 = 92,
  efunc_gen_MakeFunctionTable_A1 = 93,
  efunc_gen_AddFunctionToTable_S2A2B1S1C1 = 94,
  efunc_IsObfuscated = 95,
  efunc_Symb = 96,
  efunc_IncName = 97,
  efunc_gen_AddFunctionToTable_S2C1 = 98,
  efunc_gen_AddFunctionToTable_S2A2 = 99,
  efunc_gen_AddFunctionToTable_S2A2B1 = 100,
  efunc_gen_AddFunctionToTable_S3A1B1D2 = 101,
  efunc_gen_AddFunctionToTable_S3A1 = 102,
  efunc_gen_IncName_S1C1 = 103,
  efunc_gen_IsObfuscated_S1C1 = 104,
  efunc_IsObfuscatedm_Tail = 105,
  efunc_gen_IsObfuscatedm_Tail_B1 = 106,
  efunc_ResolveFunctionsm_Body = 107,
  efunc_gen_ResolveFunctions_A1L1A1 = 108,
  efunc_gen_ResolveFunctions_A1L1 = 109,
  efunc_gen_ResolveFunctions_A1 = 110,
  efunc_First = 111,
  efunc_gen_DecodeCommands_S28A1 = 112,
  efunc_gen_DecodeCommands_S29A1 = 113,
  efunc_gen_DecodeCommands_S30A1 = 114,
  efunc_Len = 115,
  efunc_gen_Len_A1 = 116,
  efunc_Lenw = 117,
  efunc_AllString = 118,
  efunc_Ord = 119,
  efunc_CollectSegments = 120,
  efunc_gen_DecompileFunction_S3A3 = 121,
  efunc_gen_DecompileFunction_S3A2B1D2 = 122,
  efunc_gen_DecompileFunction_S3A2 = 123,
  efunc_Decompilem_Patternm_Hole = 124,
  efunc_gen_DecompileFunction_S3A1 = 125,
  efunc_gen_Decompilem_Patternm_Hole_S7A2 = 126,
  efunc_gen_Decompilem_Patternm_Hole_S8A2 = 127,
  efunc_Decompilem_Patternm_NoHole = 128,
  efunc_gen_Decompilem_Patternm_Hole_S19A2 = 129,
  efunc_gen_Decompilem_Patternm_Hole_S20A2 = 130,
  efunc_gen_Decompilem_Patternm_Hole_S7A1 = 131,
  efunc_gen_Decompilem_Patternm_Hole_S8A1 = 132,
  efunc_gen_Decompilem_Patternm_Hole_S11A1 = 133,
  efunc_gen_Decompilem_Patternm_Hole_S12A1 = 134,
  efunc_gen_Decompilem_Patternm_Hole_S18A1 = 135,
  efunc_gen_Decompilem_Patternm_Hole_S19A1 = 136,
  efunc_gen_Decompilem_Patternm_Hole_S20A1 = 137,
  efunc_gen_Decompilem_Patternm_Hole_S21A1 = 138,
  efunc_gen_Decompilem_Patternm_Hole_S22A1 = 139,
  efunc_gen_Decompilem_Patternm_Hole_S25A1 = 140,
  efunc_gen_Decompilem_Patternm_Hole_S26A1 = 141,
  efunc_gen_Decompilem_Patternm_Hole_S27A1 = 142,
  efunc_Decompilem_Result = 143,
  efunc_gen_Decompilem_Result_S10C1 = 144,
  efunc_gen_Decompilem_Result_S11C1 = 145,
  efunc_gen_Decompilem_Result_S11C2 = 146,
  efunc_gen_Decompilem_Result_S12C1 = 147,
  efunc_gen_Decompilem_Result_S13C1 = 148,
  efunc_gen_Decompilem_Result_S13C2 = 149,
  efunc_DoCollectSegments = 150,
  efunc_FormatExpr = 151,
  efunc_DoFormatExpr = 152,
  efunc_LIMIT = 153,
  efunc_gen_DoFormatExpr_S6A1 = 154,
  efunc_gen_DoFormatExpr_S7A1 = 155,
  efunc_gen_DoFormatExpr_S9A1 = 156,
  efunc_EscapeChar = 157,
  efunc_gen_DoFormatExpr_S10A1 = 158,
  efunc_gen_DoFormatExpr_S12A1 = 159,
  efunc_gen_DoFormatExpr_S13A1 = 160,
  efunc_gen_DoFormatExpr_S14A1 = 161,
  efunc_gen_DoFormatExpr_S19A1 = 162,
  efunc_FormatWordm_Ident = 163,
  efunc_EscapeChars = 164,
  efunc_gen_FormatWord_B1 = 165,
  efunc_gen_Map_Z4 = 166,
  efunc_EscapeCharm_Hex = 167,
  efunc_Compare = 168,
  efunc_gen_EscapeChar_S7B1 = 169,
  efunc_gen_EscapeChar_S7A1 = 170,
  efunc_Hex = 171,
  efunc_gen_EscapeCharm_Hex_A1 = 172,
  efunc_Divmod = 173,
  efunc_ProcessFile = 174,
  efunc_CommentLine = 175,
  efunc_gen_CleanupBuiltins_L1D1 = 176,
  efunc_gen_DoMapAccum_Z1 = 177,
  efunc_gen_DoMapAccumm_Aux_Z1 = 178,
};


enum ident {
  ident_k43_ = 0,
  ident_k47_ = 1,
  ident_k37_ = 2,
  ident_k42_ = 3,
  ident_k63_ = 4,
  ident_m_ = 5,
  ident_ = 6,
  ident_regular = 7,
  ident_Stopk36_k36_ = 8,
  ident_Impk36_k36_ = 9,
  ident_int4fabu_1 = 10,
  ident_Ok = 11,
  ident_CSYM = 12,
  ident_CSYMR = 13,
  ident_NCS = 14,
  ident_True = 15,
  ident_E = 16,
  ident_L = 17,
  ident_False = 18,
  ident_LABEL = 19,
  ident_Local = 20,
  ident_Entry = 21,
  ident_Fail = 22,
  ident_ACT1 = 23,
  ident_SYMS = 24,
  ident_SYMSR = 25,
  ident_TEXT = 26,
  ident_ACTu_EXTRN = 27,
  ident_BL = 28,
  ident_BLR = 29,
  ident_BR = 30,
  ident_CL = 31,
  ident_SYM = 32,
  ident_SYMR = 33,
  ident_EMP = 34,
  ident_MULE = 35,
  ident_MULS = 36,
  ident_PLEN = 37,
  ident_PLENS = 38,
  ident_PLENP = 39,
  ident_PS = 40,
  ident_PSR = 41,
  ident_OEXP = 42,
  ident_OEXPR = 43,
  ident_OVSYM = 44,
  ident_OVSYMR = 45,
  ident_TERM = 46,
  ident_TERMR = 47,
  ident_RDY = 48,
  ident_SETB = 49,
  ident_LEN = 50,
  ident_LENS = 51,
  ident_LENP = 52,
  ident_NS = 53,
  ident_TPLE = 54,
  ident_TPLS = 55,
  ident_TRAN = 56,
  ident_VSYM = 57,
  ident_VSYMR = 58,
  ident_OUTEST = 59,
  ident_ECOND = 60,
  ident_POPVF = 61,
  ident_PUSHVF = 62,
  ident_STLEN = 63,
  ident_NSYM = 64,
  ident_NSYMR = 65,
  ident_NNS = 66,
  ident_BUILTu_IN = 67,
  ident_BUILTu_IN1 = 68,
  ident_RawBytes = 69,
  ident_C = 70,
  ident_t = 71,
  ident_e = 72,
  ident_LB = 73,
  ident_RB = 74,
  ident_Hole = 75,
  ident_W = 76,
  ident_N = 77,
  ident_s = 78,
  ident_Restorem_Hole = 79,
  ident_Restorem_NoHole = 80,
  ident_StartBlock = 81,
  ident_EndOfFunction = 82,
  ident_Pattern = 83,
  ident_StartCondition = 84,
  ident_Result = 85,
  ident_EndCondition = 86,
  ident_NextSentence = 87,
  ident_RK = 88,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Mu/4 t.Function#1/5 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Arg#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Arg#1: 2
  //2: e.Arg#1
  //5: t.Function#1
  //15: t.Function#1

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Mu_C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_u_u_Mum_Aux]);
  refalrts::copy_stvar(vm, context[15], context[5]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_stvar( res, context[15] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & Mu?1/11 s.Function-Ptr#2/12 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    //DEBUG: t.Function#1: 5
    //DEBUG: e.Arg#1: 2
    //DEBUG: s.Function-Ptr#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Function#1/5 {REMOVED TILE} {REMOVED TILE} >/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-End/4 } Tile{ HalfReuse: >/7 HalfReuse: </11 AsIs: s.Function-Ptr#2/12 } Tile{ AsIs: e.Arg#1/2 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_open_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_gen_u_u_Mum_Aux_S13B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & __Mu-Aux$13:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & __Mu-Aux$13:1/4 s.new#1/5 s.new#2/6 t.new#3/7 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & __Mu-Aux$13:1/4 s.new#4/5 s.new#5/6 s.new#6/7 >/1
    if( ! refalrts::svar_term( context[7], context[7] ) )
      continue;
    do {
      // </0 & __Mu-Aux$13:1/4 'F'/5 s.SubType#2/6 s.FnPtr#2/7 >/1
      if( ! refalrts::char_term( 'F', context[5] ) )
        continue;
      //DEBUG: s.SubType#2: 6
      //DEBUG: s.FnPtr#2: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux$13:1/4 'F'/5 s.SubType#2/6 s.FnPtr#2/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.FnPtr2 #7/1 ]] }
      refalrts::reinit_svar( context[1], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & __Mu-Aux$13:1/4 'W'/5 s.SubType#2/6 s.FnName#2/7 >/1
    if( ! refalrts::char_term( 'W', context[5] ) )
      continue;
    //DEBUG: s.SubType#2: 6
    //DEBUG: s.FnName#2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.SubType#2/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __FindMuPtr/4 HalfReuse: <Cookie1>/5 } <Cookie2>/9 Tile{ AsIs: s.FnName#2/7 AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[9], 2214093260UL);
    refalrts::update_name(context[4], functions[efunc_u_u_FindMuPtr]);
    refalrts::reinit_number(context[5], 1018319078UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[9] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & __Mu-Aux$13:1/4 'B'/5 s.0#2/6 (/7 e.FnName#2/9 )/8 >/1
  context[9] = 0;
  context[10] = 0;
  if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::char_term( 'B', context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FnName#2 as range 9
  //DEBUG: s.0#2: 6
  //DEBUG: e.FnName#2: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.0#2/6 {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __FindMuPtr/4 HalfReuse: <Cookie1>/5 } Tile{ HalfReuse: <Cookie2>/7 } Tile{ AsIs: e.FnName#2/9 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_u_u_FindMuPtr]);
  refalrts::reinit_number(context[5], 1018319078UL);
  refalrts::reinit_number(context[7], 2214093260UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  refalrts::splice_to_freelist_open( vm, context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_u_u_Mum_Aux_S13B1("__Mu-Aux$13:1", COOKIE1_, COOKIE2_, func_gen_u_u_Mum_Aux_S13B1);


static refalrts::FnResult func_u_u_Mum_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & __Mu-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & __Mu-Aux/4 t.new#1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & __Mu-Aux/4 s.new#2/5 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    do {
      // </0 & __Mu-Aux/4 '+'/5 >/1
      if( ! refalrts::char_term( '+', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '+'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Add/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Add]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 '/'/5 >/1
      if( ! refalrts::char_term( '/', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '/'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Div/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Div]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 '%'/5 >/1
      if( ! refalrts::char_term( '%', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '%'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Mod/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Mod]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 '*'/5 >/1
      if( ! refalrts::char_term( '*', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '*'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Mul/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Mul]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 '?'/5 >/1
      if( ! refalrts::char_term( '?', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '?'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Residue/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Residue]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 '-'/5 >/1
      if( ! refalrts::char_term( '-', context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 '-'/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Sub/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Sub]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 # +/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_k43_], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # +/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Add/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Add]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 # //5 >/1
      if( ! refalrts::ident_term( identifiers[ident_k47_], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # //5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Div/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Div]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 # %/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_k37_], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # %/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Mod/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Mod]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 # */5 >/1
      if( ! refalrts::ident_term( identifiers[ident_k42_], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # */5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Mul/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Mul]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & __Mu-Aux/4 # ?/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_k63_], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # ?/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: & Residue/1 ]] }
      refalrts::reinit_name(context[1], functions[efunc_Residue]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & __Mu-Aux/4 # -/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_m_], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & __Mu-Aux/4 # -/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: & Sub/1 ]] }
    refalrts::reinit_name(context[1], functions[efunc_Sub]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & __Mu-Aux/4 t.Function#1/5 >/1
  //DEBUG: t.Function#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & __Mu-Aux$13:1/8 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: t.Function#1/5 AsIs: >/1 } >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_u_u_Mum_Aux_S13B1]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Mum_Aux("__Mu-Aux", COOKIE1_, COOKIE2_, func_u_u_Mum_Aux);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Residue/4 t.Function#1/5 e.Arg#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Arg#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Arg#1: 2
  //2: e.Arg#1
  //5: t.Function#1
  //15: t.Function#1

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Residue_C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_u_u_Mum_Aux]);
  refalrts::copy_stvar(vm, context[15], context[5]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_stvar( res, context[15] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & Residue?1/11 s.Function-Ptr#2/12 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    //DEBUG: t.Function#1: 5
    //DEBUG: e.Arg#1: 2
    //DEBUG: s.Function-Ptr#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Function#1/5 {REMOVED TILE} {REMOVED TILE} >/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-End/4 } Tile{ HalfReuse: >/7 HalfReuse: </11 AsIs: s.Function-Ptr#2/12 } Tile{ AsIs: e.Arg#1/2 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_open_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Apply/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Apply/4 s.Fn#1/5 e.Argument#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument#1 as range 7
    //DEBUG: s.Fn#1: 5
    //DEBUG: e.Argument#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 AsIs: s.Fn#1/5 AsIs: e.Argument#1/7 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure#1/9 e.Bounded#1/7 )/6 e.Argument#1/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded#1 as range 7
  //DEBUG: e.Argument#1: 2
  //DEBUG: t.Closure#1: 9
  //DEBUG: e.Bounded#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure#1/9 } Tile{ AsIs: e.Bounded#1/7 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Map/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Map/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & Map/4 t.Fn#1/5 t.Next#1/9 e.Tail#1/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail#1 as range 7
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Next#1: 9
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 AsIs: t.Fn#1/5 AsIs: t.Next#1/9 } >/11 </12 & Map/13 t.Fn#1/5/14 Tile{ AsIs: e.Tail#1/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_Apply]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn#1/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn#1/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Reduce/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Reduce/4 t.new#1/5 t.new#2/7 e.new#3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 t.Next#1/11 e.Tail#1/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail#1 as range 9
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: t.Next#1: 11
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce/14 t.Fn#1/5/15 Tile{ AsIs: </0 Reuse: & Apply/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 AsIs: t.Next#1/11 } >/17 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Reduce]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_Apply]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn#1/5 t.Acc#1/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument#1/2 t.Function#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument#1 as range 2
  //DEBUG: t.Function#1: 5
  //DEBUG: e.Argument#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function#1/5 } Tile{ AsIs: e.Argument#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn#1/5 t.Acc#1/7 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 AsIs: t.Acc#1/7 } (/9 )/10 Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum/4 t.new#1/5 t.new#2/7 (/11 e.new#3/9 )/12 e.new#4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#3 as range 9
  // closed e.new#4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/13 )/12 t.Next#1/17 e.Tail#1/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned#1 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail#1 as range 15
    //DEBUG: t.Fn#1: 5
    //DEBUG: t.Acc#1: 7
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 17
    //DEBUG: e.Tail#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum-Aux/4 AsIs: t.Fn#1/5 } Tile{ AsIs: (/11 AsIs: e.Scanned#1/13 AsIs: )/12 } (/19 </20 & Apply/21 t.Fn#1/5/22 Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: t.Next#1/17 } >/24 )/25 Tile{ AsIs: e.Tail#1/15 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_Apply]);
    refalrts::copy_evar(vm, context[22], context[23], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_DoMapAccumm_Aux]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn#1/5 t.Acc#1/7 (/11 e.Scanned#1/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 9
  //DEBUG: t.Fn#1: 5
  //DEBUG: t.Acc#1: 7
  //DEBUG: e.Scanned#1: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn#1/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_DoMapAccumm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum-Aux/4 t.Fn#1/5 (/9 e.Scanned#1/7 )/10 (/13 t.Acc#1/15 e.StepScanned#1/11 )/14 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned#1 as range 7
  // closed e.Tail#1 as range 2
  context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#1 as range 11
  //DEBUG: t.Fn#1: 5
  //DEBUG: e.Scanned#1: 7
  //DEBUG: e.Tail#1: 2
  //DEBUG: t.Acc#1: 15
  //DEBUG: e.StepScanned#1: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn#1/5 } Tile{ AsIs: t.Acc#1/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned#1/7 } Tile{ AsIs: e.StepScanned#1/11 } Tile{ AsIs: )/14 AsIs: e.Tail#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccumm_Aux("DoMapAccum-Aux", COOKIE1_, COOKIE2_, func_DoMapAccumm_Aux);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr#1 as range 5
  //DEBUG: e.Expr#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc#1/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Dec/4 s.Num#1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num#1/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num#1/2 >/1
  // closed e.Num#1 as range 2
  //DEBUG: e.Num#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num#1/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func#1/5 (/9 e.Funcs#1/7 )/10 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs#1 as range 7
  // closed e.Arg#2 as range 2
  //DEBUG: t.Func#1: 5
  //DEBUG: e.Funcs#1: 7
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func#1/5 } Tile{ AsIs: e.Arg#2/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs#1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg#2 as range 2
  //DEBUG: e.Arg#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Pipe/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Pipe/4 t.Func#1/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func#1: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func#1/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func#1/7 e.Funcs#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs#1 as range 9
    //DEBUG: t.Func#1: 7
    //DEBUG: e.Funcs#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func#1/7 } (/11 Tile{ AsIs: e.Funcs#1/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_Go(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Go/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 HalfReuse: </1 } & ArgList/5 >/6 >/7 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_ArgList]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Go("Go", 0U, 0U, func_Go);


static refalrts::FnResult func_Main(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Main/4 (/7 e.ProgName#1/5 )/8 e.Sources#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ProgName#1 as range 5
  // closed e.Sources#1 as range 2
  //DEBUG: e.ProgName#1: 5
  //DEBUG: e.Sources#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Main/4 (/7 e.ProgName#1/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Sources#1/2 AsIs: >/1 ]] }
  refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Main("Main", COOKIE1_, COOKIE2_, func_Main);


static refalrts::FnResult func_gen_ProcessFile_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & ProcessFile=6/4 (/7 e.InputRSLFile#1/5 )/8 (/11 e.Lines#6/9 )/12 e.OutputName#7/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.InputRSLFile#1 as range 5
  // closed e.Lines#6 as range 9
  // closed e.OutputName#7 as range 2
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.Lines#6: 9
  //DEBUG: e.OutputName#7: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 HalfReuse: 'D'/7 }"ecompiled \""/13 Tile{ AsIs: e.InputRSLFile#1/5 }"\" to \""/15 e.OutputName#7/2/17 '\"'/19 >/20 </21 Tile{ HalfReuse: & SaveFile/8 AsIs: (/11 } Tile{ AsIs: e.OutputName#7/2 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Lines#6/9 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[13], context[14], "ecompiled \"", 11);
  refalrts::alloc_chars(vm, context[15], context[16], "\" to \"", 6);
  refalrts::copy_evar(vm, context[17], context[18], context[2], context[3]);
  refalrts::alloc_char(vm, context[19], '\"');
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_Prout]);
  refalrts::reinit_char(context[7], 'D');
  refalrts::reinit_name(context[8], functions[efunc_SaveFile]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[15], context[21] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A6("ProcessFile=6", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A6);


static refalrts::FnResult func_gen_ProcessFile_A6B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ProcessFile=6:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & ProcessFile=6:1/4 e.ProperName#7/5 '.'/10 'r'/9 's'/8 'l'/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::char_right( 'l', context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = refalrts::char_right( 's', context[5], context[6] );
    if( ! context[8] )
      continue;
    context[9] = refalrts::char_right( 'r', context[5], context[6] );
    if( ! context[9] )
      continue;
    context[10] = refalrts::char_right( '.', context[5], context[6] );
    if( ! context[10] )
      continue;
    // closed e.ProperName#7 as range 5
    //DEBUG: e.ProperName#7: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.ProperName#7/5 } Tile{ HalfReuse: '-'/0 HalfReuse: 'd'/4 }"ecompile"/11 Tile{ Reuse: 'd'/10 Reuse: '.'/9 Reuse: 'r'/8 Reuse: 'e'/7 HalfReuse: 'f'/1 ]] }
    refalrts::alloc_chars(vm, context[11], context[12], "ecompile", 8);
    refalrts::reinit_char(context[0], '-');
    refalrts::reinit_char(context[4], 'd');
    refalrts::update_char(context[10], 'd');
    refalrts::update_char(context[9], '.');
    refalrts::update_char(context[8], 'r');
    refalrts::update_char(context[7], 'e');
    refalrts::reinit_char(context[1], 'f');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ProcessFile=6:1/4 e.FileName#7/2 >/1
  // closed e.FileName#7 as range 2
  //DEBUG: e.FileName#7: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.FileName#7/2 } '.'/5 Tile{ HalfReuse: 'd'/0 HalfReuse: 'e'/4 }"compiled.re"/6 Tile{ HalfReuse: 'f'/1 ]] }
  refalrts::alloc_char(vm, context[5], '.');
  refalrts::alloc_chars(vm, context[6], context[7], "compiled.re", 11);
  refalrts::reinit_char(context[0], 'd');
  refalrts::reinit_char(context[4], 'e');
  refalrts::reinit_char(context[1], 'f');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A6B1("ProcessFile=6:1", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A6B1);


static refalrts::FnResult func_gen_ProcessFile_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ProcessFile=5/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ProcessFile=5/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & ProcessFile=5/4 (/7 e.2#0/9 '.'/16 'r'/15 's'/14 'l'/13 )/8 e.Lines#6/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_right( 'l', context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_right( 's', context[9], context[10] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_right( 'r', context[9], context[10] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_right( '.', context[9], context[10] );
    if( ! context[16] )
      continue;
    // closed e.2#0 as range 9
    // closed e.Lines#6 as range 11
    //DEBUG: e.2#0: 9
    //DEBUG: e.Lines#6: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 HalfReuse: 'D'/7 }"ecompiled \""/17 e.2#0/9/19".rsl\" to \""/21 Tile{ AsIs: e.2#0/9 }"-decompiled.ref\""/23 >/25 </26 & SaveFile/27 (/28 e.2#0/9/29"-decompiled"/31 Tile{ AsIs: '.'/16 AsIs: 'r'/15 Reuse: 'e'/14 Reuse: 'f'/13 AsIs: )/8 AsIs: e.Lines#6/11 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[17], context[18], "ecompiled \"", 11);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_chars(vm, context[21], context[22], ".rsl\" to \"", 10);
    refalrts::alloc_chars(vm, context[23], context[24], "-decompiled.ref\"", 16);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_SaveFile]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[9], context[10]);
    refalrts::alloc_chars(vm, context[31], context[32], "-decompiled", 11);
    refalrts::update_name(context[4], functions[efunc_Prout]);
    refalrts::reinit_char(context[7], 'D');
    refalrts::update_char(context[14], 'e');
    refalrts::update_char(context[13], 'f');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[28], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ProcessFile=5/4 (/7 e.InputRSLFile#1/5 )/8 e.Lines#6/2 >/1
  // closed e.InputRSLFile#1 as range 5
  // closed e.Lines#6 as range 2
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.Lines#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Prout/10"Decompiled \""/11 e.InputRSLFile#1/5/13"\" to \""/15 e.InputRSLFile#1/5/17".decompiled.ref\""/19 >/21 Tile{ AsIs: </0 Reuse: & SaveFile/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 HalfReuse: '.'/8 }"decompiled.ref"/22 )/24 Tile{ AsIs: e.Lines#6/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[11], context[12], "Decompiled \"", 12);
  refalrts::copy_evar(vm, context[13], context[14], context[5], context[6]);
  refalrts::alloc_chars(vm, context[15], context[16], "\" to \"", 6);
  refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
  refalrts::alloc_chars(vm, context[19], context[20], ".decompiled.ref\"", 16);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_chars(vm, context[22], context[23], "decompiled.ref", 14);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_SaveFile]);
  refalrts::reinit_char(context[8], '.');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[24] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A5("ProcessFile=5", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A5);


static refalrts::FnResult func_gen_ProcessFile_A5L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ProcessFile=5\1/4 (/7 e.Extern#6/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Extern#6 as range 5
  //DEBUG: e.Extern#6: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9"$EXTERN"/10 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & FormatWord/7 AsIs: e.Extern#6/5 HalfReuse: >/8 HalfReuse: ';'/1 } )/12 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_chars(vm, context[10], context[11], "$EXTERN", 7);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_FormatWord]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_char(context[1], ';');
  refalrts::link_brackets( context[9], context[12] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A5L1("ProcessFile=5\\1", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A5L1);


static refalrts::FnResult func_gen_ProcessFile_A5L2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ProcessFile=5\2/4 (/7 e.Function#6/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Function#6 as range 5
  //DEBUG: e.Function#6: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ProcessFile=5\2/4 (/7 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Function#6/5 } Tile{ HalfReuse: (/8 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[8], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A5L2("ProcessFile=5\\2", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A5L2);


static refalrts::FnResult func_gen_ProcessFile_A5L3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ProcessFile=5\3/4 (/7 e.ASMLines#6/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ASMLines#6 as range 5
  //DEBUG: e.ASMLines#6: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 } Tile{ AsIs: e.ASMLines#6/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A5L3("ProcessFile=5\\3", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A5L3);


static refalrts::FnResult func_gen_ProcessFile_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & ProcessFile=4/4 (/7 e.InputRSLFile#1/5 )/8 (/11 e.ModuleName#3/9 )/12 (/15 e.Externs#3/13 )/16 (/19 e.ASMFunctions#4/17 )/20 e.RefalFunctions#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.InputRSLFile#1 as range 5
  // closed e.ModuleName#3 as range 9
  // closed e.Externs#3 as range 13
  // closed e.ASMFunctions#4 as range 17
  // closed e.RefalFunctions#5 as range 2
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.ModuleName#3: 9
  //DEBUG: e.Externs#3: 13
  //DEBUG: e.ASMFunctions#4: 17
  //DEBUG: e.RefalFunctions#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=5/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 AsIs: )/8 AsIs: (/11 }"* Module: "/21 </23 & FormatWord/24 Tile{ AsIs: e.ModuleName#3/9 } >/25 )/26 (/27 )/28 </29 & Map/30 & ProcessFile=5\1/31 </32 & Rev/33 Tile{ HalfReuse: </12 HalfReuse: & CleanupBuiltins/15 AsIs: e.Externs#3/13 HalfReuse: >/16 HalfReuse: >/19 } >/34 (/35 )/36 </37 & Map/38 Tile{ HalfReuse: & ProcessFile=5\2/20 AsIs: e.RefalFunctions#5/2 AsIs: >/1 } (/39 )/40 </41 & Map/42 & ProcessFile=5\3/43 Tile{ AsIs: e.ASMFunctions#4/17 } >/44 >/45 Tile{ ]] }
  refalrts::alloc_chars(vm, context[21], context[22], "* Module: ", 10);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_FormatWord]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Map]);
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_ProcessFile_A5L1]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_Rev]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_call(vm, context[37]);
  refalrts::alloc_name(vm, context[38], functions[efunc_Map]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_open_call(vm, context[41]);
  refalrts::alloc_name(vm, context[42], functions[efunc_Map]);
  refalrts::alloc_name(vm, context[43], functions[efunc_gen_ProcessFile_A5L3]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5]);
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_name(context[15], functions[efunc_CleanupBuiltins]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_call(context[19]);
  refalrts::reinit_name(context[20], functions[efunc_gen_ProcessFile_A5L2]);
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[41] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[37] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[44], context[45] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[39], context[43] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[34], context[38] );
  res = refalrts::splice_evar( res, context[12], context[19] );
  res = refalrts::splice_evar( res, context[25], context[33] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A4("ProcessFile=4", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A4);


static refalrts::FnResult func_gen_ProcessFile_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & ProcessFile=3/4 (/7 e.InputRSLFile#1/5 )/8 (/11 e.ModuleName#3/9 )/12 (/15 e.Externs#3/13 )/16 e.ASMFunctions#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.InputRSLFile#1 as range 5
  // closed e.ModuleName#3 as range 9
  // closed e.Externs#3 as range 13
  // closed e.ASMFunctions#4 as range 2
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.ModuleName#3: 9
  //DEBUG: e.Externs#3: 13
  //DEBUG: e.ASMFunctions#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=4/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ModuleName#3/9 AsIs: )/12 AsIs: (/15 AsIs: e.Externs#3/13 AsIs: )/16 } (/17 e.ASMFunctions#4/2/18 )/20 </21 & Map/22 & DecompileFunction/23 Tile{ AsIs: e.ASMFunctions#4/2 } >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Map]);
  refalrts::alloc_name(vm, context[23], functions[efunc_DecompileFunction]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A3("ProcessFile=3", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A3);


static refalrts::FnResult func_gen_ProcessFile_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & ProcessFile=2/4 (/7 e.InputRSLFile#1/5 )/8 (/11 e.ModuleName#3/9 )/12 (/15 s.BytecodeSize#3/33 s.FunctionStarts#3/34 )/16 (/19 e.Entries#3/17 )/20 (/23 e.Externs#3/21 )/24 (/27 e.Words#3/25 )/28 (/31 e.FunctionStarts#3/29 )/32 e.Bytecode#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.InputRSLFile#1 as range 5
  // closed e.ModuleName#3 as range 9
  // closed e.Entries#3 as range 17
  // closed e.Externs#3 as range 21
  // closed e.Words#3 as range 25
  // closed e.FunctionStarts#3 as range 29
  // closed e.Bytecode#3 as range 2
  if( ! refalrts::svar_left( context[33], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[34], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.ModuleName#3: 9
  //DEBUG: e.Entries#3: 17
  //DEBUG: e.Externs#3: 21
  //DEBUG: e.Words#3: 25
  //DEBUG: e.FunctionStarts#3: 29
  //DEBUG: e.Bytecode#3: 2
  //DEBUG: s.BytecodeSize#3: 33
  //DEBUG: s.FunctionStarts#3: 34

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.BytecodeSize#3/33 s.FunctionStarts#3/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=3/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.ModuleName#3/9 AsIs: )/12 AsIs: (/15 } e.Externs#3/21/35 Tile{ AsIs: )/32 } </37 & Disassemble/38 (/39 Tile{ AsIs: e.Words#3/25 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.FunctionStarts#3/29 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.Entries#3/17 AsIs: )/20 AsIs: (/23 AsIs: e.Externs#3/21 AsIs: )/24 HalfReuse: s.BytecodeSize3 #33/27 } Tile{ AsIs: e.Bytecode#3/2 } >/40 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
  refalrts::alloc_open_call(vm, context[37]);
  refalrts::alloc_name(vm, context[38], functions[efunc_Disassemble]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A3]);
  refalrts::reinit_svar( context[27], context[33] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[37] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[31], context[16] );
  refalrts::link_brackets( context[39], context[28] );
  refalrts::link_brackets( context[15], context[32] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[40] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[27] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[28], context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[37], context[39] );
  res = refalrts::splice_evar( res, context[32], context[32] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  refalrts::splice_to_freelist_open( vm, context[15], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A2("ProcessFile=2", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A2);


static refalrts::FnResult func_gen_ProcessFile_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ProcessFile=1/4 (/7 e.InputRSLFile#1/5 )/8 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.InputRSLFile#1 as range 5
  // closed e.Bytes#2 as range 2
  //DEBUG: e.InputRSLFile#1: 5
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=2/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 AsIs: )/8 } </9 & DecodeStructure/10 Tile{ AsIs: e.Bytes#2/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_DecodeStructure]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A1("ProcessFile=1", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A1);


static refalrts::FnResult func_ProcessFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ProcessFile/4 (/7 e.InputRSLFile#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.InputRSLFile#1 as range 5
  //DEBUG: e.InputRSLFile#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=1/4 AsIs: (/7 AsIs: e.InputRSLFile#1/5 AsIs: )/8 HalfReuse: </1 } & LoadBytes/9 e.InputRSLFile#1/5/10 >/12 >/13 Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_LoadBytes]);
  refalrts::copy_evar(vm, context[10], context[11], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ProcessFile("ProcessFile", COOKIE1_, COOKIE2_, func_ProcessFile);


static refalrts::FnResult func_CommentLine(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & CommentLine/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CommentLine/4 (/7 e.new#1/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  do {
    // </0 & CommentLine/4 (/7 e.Line-B#1/11 '\n'/15 e.Line-E#1/13 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[13] = context[9];
      context[14] = context[10];
      context[15] = refalrts::char_left( '\n', context[13], context[14] );
      if( ! context[15] )
        continue;
      // closed e.Line-E#1 as range 13
      //DEBUG: e.Line-B#1: 11
      //DEBUG: e.Line-E#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CommentLine/4 AsIs: (/7 AsIs: e.Line-B#1/11 Reuse: '\\'/15 } 'n'/16 Tile{ AsIs: e.Line-E#1/13 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[16], 'n');
      refalrts::update_char(context[15], '\\');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CommentLine/4 (/7 e.Line-B#1/11 '\r'/15 e.Line-E#1/13 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[13] = context[9];
      context[14] = context[10];
      context[15] = refalrts::char_left( '\r', context[13], context[14] );
      if( ! context[15] )
        continue;
      // closed e.Line-E#1 as range 13
      //DEBUG: e.Line-B#1: 11
      //DEBUG: e.Line-E#1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CommentLine/4 AsIs: (/7 AsIs: e.Line-B#1/11 Reuse: '\\'/15 } 'r'/16 Tile{ AsIs: e.Line-E#1/13 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[16], 'r');
      refalrts::update_char(context[15], '\\');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CommentLine/4 (/7 e.Line#1/5 )/8 >/1
  // closed e.Line#1 as range 5
  //DEBUG: e.Line#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '*'/7 AsIs: e.Line#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_char(context[7], '*');
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CommentLine("CommentLine", COOKIE1_, COOKIE2_, func_CommentLine);


static refalrts::FnResult func_gen_CleanupBuiltins_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & CleanupBuiltins\1/4 (/7 s.No#2/9 s.Func#2/10 s.Type#2/11 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.No#2: 9
  //DEBUG: s.Func#2: 10
  //DEBUG: s.Type#2: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.No#2/9 {REMOVED TILE} s.Type#2/11 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: </4 HalfReuse: & Explode/7 } Tile{ AsIs: s.Func#2/10 } Tile{ HalfReuse: >/8 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_Explode]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[10], context[10] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CleanupBuiltins_L1("CleanupBuiltins\\1", COOKIE1_, COOKIE2_, func_gen_CleanupBuiltins_L1);


static refalrts::FnResult func_CleanupBuiltins(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CleanupBuiltins/4 e.Externs#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Externs#1 as range 2
  //DEBUG: e.Externs#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupBuiltins-Aux/4 } </5 & Map@3/6 </7 & ListOfBuiltin/8 >/9 (/10 0/11 # /12 # regular/13 )/14 (/15 0/16 # Stop$$$$/17 # regular/18 )/19 (/20 0/21 # Imp$$$$/22 # regular/23 )/24 (/25 0/26 # int4fab_1/27 # regular/28 )/29 >/30 (/31 Tile{ AsIs: e.Externs#1/2 } )/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_ListOfBuiltin]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 0UL);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_number(vm, context[16], 0UL);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Stopk36_k36_]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_number(vm, context[21], 0UL);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Impk36_k36_]);
  refalrts::alloc_ident(vm, context[23], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_number(vm, context[26], 0UL);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_int4fabu_1]);
  refalrts::alloc_ident(vm, context[28], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_CleanupBuiltinsm_Aux]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[25], context[29] );
  refalrts::link_brackets( context[20], context[24] );
  refalrts::link_brackets( context[15], context[19] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupBuiltins("CleanupBuiltins", COOKIE1_, COOKIE2_, func_CleanupBuiltins);


static refalrts::FnResult func_gen_CleanupBuiltinsm_Aux_S1C1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & CleanupBuiltins-Aux$1?1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.new#1/5 )/8 e.new#2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 2
  do {
    // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name#1/9 )/8 e.Builtins-B#2/13 (/19 e.Name#1/21 )/20 e.Builtins-E#2/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name#1 as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      if( ! refalrts::repeated_evar_left( vm, context[21], context[22], context[9], context[10], context[17], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.Builtins-E#2 as range 15
      //DEBUG: e.Name#1: 9
      //DEBUG: e.Builtins-B#2: 13
      //DEBUG: e.Builtins-E#2: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name#1/9 )/8 e.Builtins-B#2/13 (/19 e.Name#1/21 )/20 e.Builtins-E#2/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name#1/5 )/8 e.Builtins#2/2 >/1
  // closed e.Name#1 as range 5
  // closed e.Builtins#2 as range 2
  //DEBUG: e.Name#1: 5
  //DEBUG: e.Builtins#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux$1?1:1/4 {REMOVED TILE} e.Builtins#2/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Name#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CleanupBuiltinsm_Aux_S1C1B1("CleanupBuiltins-Aux$1?1:1", COOKIE1_, COOKIE2_, func_gen_CleanupBuiltinsm_Aux_S1C1B1);


static refalrts::FnResult func_CleanupBuiltinsm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CleanupBuiltins-Aux/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CleanupBuiltins-Aux/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & CleanupBuiltins-Aux/4 e.Builtins#1/9 (/7 (/15 e.Name#1/13 )/16 e.Externs#1/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Builtins#1 as range 9
    // closed e.Name#1 as range 13
    // closed e.Externs#1 as range 11
    //DEBUG: e.Builtins#1: 9
    //DEBUG: e.Name#1: 13
    //DEBUG: e.Externs#1: 11
    //9: e.Builtins#1
    //11: e.Externs#1
    //13: e.Name#1
    //23: e.Name#1
    //26: e.Builtins#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_CleanupBuiltinsm_Aux_S1C1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_CleanupBuiltinsm_Aux_S1C1B1]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::copy_evar(vm, context[26], context[27], context[9], context[10]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::link_brackets( context[22], context[25] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & CleanupBuiltins-Aux$1?1/21 e.MaybeName#2/19 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      // closed e.MaybeName#2 as range 19
      //DEBUG: e.Builtins#1: 9
      //DEBUG: e.Name#1: 13
      //DEBUG: e.Externs#1: 11
      //DEBUG: e.MaybeName#2: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/15 e.Name#1/13 )/16 {REMOVED TILE} )/8 </17 & CleanupBuiltins-Aux$1?1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.MaybeName#2/19 } Tile{ AsIs: </0 AsIs: & CleanupBuiltins-Aux/4 AsIs: e.Builtins#1/9 AsIs: (/7 } Tile{ AsIs: e.Externs#1/11 } Tile{ HalfReuse: )/18 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupBuiltins-Aux/4 e.Builtins#1/2 (/7 )/8 >/1
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Builtins#1 as range 2
  //DEBUG: e.Builtins#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux/4 e.Builtins#1/2 (/7 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupBuiltinsm_Aux("CleanupBuiltins-Aux", COOKIE1_, COOKIE2_, func_CleanupBuiltinsm_Aux);


static refalrts::FnResult func_gen_DecodeStructure_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DecodeStructure=10/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/13 s.FunctionStarts#7/14 (/17 e.Entries#8/15 )/18 (/21 e.Externs#9/19 )/22 (/25 e.Words#10/23 )/26 e.FunctionStarts#11/2 (/11 e.Bytes#11/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName#2 as range 5
  // closed e.Bytes#11 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Entries#8 as range 15
  // closed e.Externs#9 as range 19
  // closed e.Words#10 as range 23
  // closed e.FunctionStarts#11 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: e.Bytes#11: 9
  //DEBUG: s.BytecodeSize#3: 13
  //DEBUG: s.FunctionStarts#7: 14
  //DEBUG: e.Entries#8: 15
  //DEBUG: e.Externs#9: 19
  //DEBUG: e.Words#10: 23
  //DEBUG: e.FunctionStarts#11: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 } Tile{ HalfReuse: (/4 } Tile{ AsIs: s.BytecodeSize#3/13 AsIs: s.FunctionStarts#7/14 } Tile{ AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Entries#8/15 AsIs: )/18 AsIs: (/21 AsIs: e.Externs#9/19 AsIs: )/22 AsIs: (/25 AsIs: e.Words#10/23 AsIs: )/26 } Tile{ AsIs: (/11 } Tile{ AsIs: e.FunctionStarts#11/2 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Bytes#11/9 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[4], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A10("DecodeStructure=10", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A10);


static refalrts::FnResult func_gen_DecodeStructure_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DecodeStructure=9/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/13 s.FunctionStarts#7/14 (/17 e.Entries#8/15 )/18 (/21 e.Externs#9/19 )/22 e.Words#10/2 (/11 e.Bytes#10/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName#2 as range 5
  // closed e.Bytes#10 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Entries#8 as range 15
  // closed e.Externs#9 as range 19
  // closed e.Words#10 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: e.Bytes#10: 9
  //DEBUG: s.BytecodeSize#3: 13
  //DEBUG: s.FunctionStarts#7: 14
  //DEBUG: e.Entries#8: 15
  //DEBUG: e.Externs#9: 19
  //DEBUG: e.Words#10: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=10/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/13 AsIs: s.FunctionStarts#7/14 AsIs: (/17 AsIs: e.Entries#8/15 AsIs: )/18 AsIs: (/21 AsIs: e.Externs#9/19 AsIs: )/22 } (/23 Tile{ AsIs: e.Words#10/2 } )/24 </25 & ReadEntryPoints/26 Tile{ HalfReuse: s.FunctionStarts7 #14/11 AsIs: e.Bytes#10/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_ReadEntryPoints]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A10]);
  refalrts::reinit_svar( context[11], context[14] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[24], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A9("DecodeStructure=9", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A9);


static refalrts::FnResult func_gen_DecodeStructure_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeStructure=8/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/13 s.FunctionStarts#7/14 (/17 e.Entries#8/15 )/18 s.Words#6/19 e.Externs#9/2 (/11 e.Bytes#9/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName#2 as range 5
  // closed e.Bytes#9 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Entries#8 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Externs#9 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: e.Bytes#9: 9
  //DEBUG: s.BytecodeSize#3: 13
  //DEBUG: s.FunctionStarts#7: 14
  //DEBUG: e.Entries#8: 15
  //DEBUG: s.Words#6: 19
  //DEBUG: e.Externs#9: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Words#6/19 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=9/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/13 AsIs: s.FunctionStarts#7/14 AsIs: (/17 AsIs: e.Entries#8/15 AsIs: )/18 } (/20 Tile{ AsIs: e.Externs#9/2 } )/21 </22 & ReadWords/23 Tile{ HalfReuse: s.Words6 #19/11 AsIs: e.Bytes#9/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_ReadWords]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A9]);
  refalrts::reinit_svar( context[11], context[19] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[21], context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[18], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A8("DecodeStructure=8", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A8);


static refalrts::FnResult func_gen_DecodeStructure_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecodeStructure=7/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/13 s.FunctionStarts#7/14 s.Words#6/15 s.Externs#5/16 e.Entries#8/2 (/11 e.Bytes#8/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName#2 as range 5
  // closed e.Bytes#8 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries#8 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: e.Bytes#8: 9
  //DEBUG: s.BytecodeSize#3: 13
  //DEBUG: s.FunctionStarts#7: 14
  //DEBUG: s.Words#6: 15
  //DEBUG: s.Externs#5: 16
  //DEBUG: e.Entries#8: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Externs#5/16 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=8/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/13 AsIs: s.FunctionStarts#7/14 } (/17 Tile{ AsIs: e.Entries#8/2 } )/18 Tile{ AsIs: s.Words#6/15 } </19 & ReadExterns/20 Tile{ HalfReuse: s.Externs5 #16/11 AsIs: e.Bytes#8/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_ReadExterns]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A8]);
  refalrts::reinit_svar( context[11], context[16] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A7("DecodeStructure=7", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A7);


static refalrts::FnResult func_gen_DecodeStructure_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DecodeStructure=6/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/9 s.Words#6/10 s.Externs#5/11 s.EntryCount#4/12 s.FunctionStarts#7/13 e.Bytes#7/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#7 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: s.BytecodeSize#3: 9
  //DEBUG: s.Words#6: 10
  //DEBUG: s.Externs#5: 11
  //DEBUG: s.EntryCount#4: 12
  //DEBUG: s.FunctionStarts#7: 13
  //DEBUG: e.Bytes#7: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=7/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/9 } Tile{ AsIs: s.FunctionStarts#7/13 } Tile{ AsIs: s.Words#6/10 AsIs: s.Externs#5/11 } </14 & ReadEntries/15 Tile{ AsIs: s.EntryCount#4/12 } Tile{ AsIs: e.Bytes#7/2 } >/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_ReadEntries]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A6("DecodeStructure=6", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A6);


static refalrts::FnResult func_gen_DecodeStructure_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DecodeStructure=5/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/9 s.Externs#5/10 s.EntryCount#4/11 s.Words#6/12 e.Bytes#6/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#6 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: s.BytecodeSize#3: 9
  //DEBUG: s.Externs#5: 10
  //DEBUG: s.EntryCount#4: 11
  //DEBUG: s.Words#6: 12
  //DEBUG: e.Bytes#6: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=6/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/9 } Tile{ AsIs: s.Words#6/12 } Tile{ AsIs: s.Externs#5/10 AsIs: s.EntryCount#4/11 } </13 & ReadDWord/14 Tile{ AsIs: e.Bytes#6/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_ReadDWord]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A5("DecodeStructure=5", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A5);


static refalrts::FnResult func_gen_DecodeStructure_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DecodeStructure=4/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/9 s.EntryCount#4/10 s.Externs#5/11 e.Bytes#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#5 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: s.BytecodeSize#3: 9
  //DEBUG: s.EntryCount#4: 10
  //DEBUG: s.Externs#5: 11
  //DEBUG: e.Bytes#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=5/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/9 } Tile{ AsIs: s.Externs#5/11 } Tile{ AsIs: s.EntryCount#4/10 } </12 & ReadDWord/13 Tile{ AsIs: e.Bytes#5/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_ReadDWord]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A4("DecodeStructure=4", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A4);


static refalrts::FnResult func_gen_DecodeStructure_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & DecodeStructure=3/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/9 s.EntryCount#4/10 e.Bytes#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#4 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: s.BytecodeSize#3: 9
  //DEBUG: s.EntryCount#4: 10
  //DEBUG: e.Bytes#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=4/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/9 AsIs: s.EntryCount#4/10 } </11 & ReadDWord/12 Tile{ AsIs: e.Bytes#4/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ReadDWord]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A3("DecodeStructure=3", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A3);


static refalrts::FnResult func_gen_DecodeStructure_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & DecodeStructure=2/4 (/7 e.ModuleName#2/5 )/8 s.BytecodeSize#3/9 e.Bytes#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#3 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: s.BytecodeSize#3: 9
  //DEBUG: e.Bytes#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=3/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 AsIs: s.BytecodeSize#3/9 } </10 & ReadDWord/11 Tile{ AsIs: e.Bytes#3/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_ReadDWord]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A2("DecodeStructure=2", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A2);


static refalrts::FnResult func_gen_DecodeStructure_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & DecodeStructure=1/4 (/7 e.ModuleName#2/5 )/8 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName#2 as range 5
  // closed e.Bytes#2 as range 2
  //DEBUG: e.ModuleName#2: 5
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=2/4 AsIs: (/7 AsIs: e.ModuleName#2/5 AsIs: )/8 } </9 & ReadDWord/10 Tile{ AsIs: e.Bytes#2/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_ReadDWord]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A1("DecodeStructure=1", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A1);


static refalrts::FnResult func_DecodeStructure(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & DecodeStructure/4 e.Bytes#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Bytes#1 as range 2
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DecodeStructure=1/6 Tile{ AsIs: </0 Reuse: & ReadAsciiz/4 AsIs: e.Bytes#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DecodeStructure_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ReadAsciiz]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecodeStructure("DecodeStructure", COOKIE1_, COOKIE2_, func_DecodeStructure);


static refalrts::FnResult func_ReadAsciiz(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & ReadAsciiz/4 e.String#1/5 0/9 e.Tail#1/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::number_left( 0UL, context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.Tail#1 as range 7
    //DEBUG: e.String#1: 5
    //DEBUG: e.Tail#1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 Tile{ AsIs: </0 Reuse: & Chr/4 AsIs: e.String#1/5 HalfReuse: >/9 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tail#1/7 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Chr]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[10], context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[5], context[6], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadAsciiz("ReadAsciiz", COOKIE1_, COOKIE2_, func_ReadAsciiz);


static refalrts::FnResult func_ReadDWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ReadDWord/4 s.1#1/5 s.2#1/6 s.3#1/7 s.4#1/8 e.Bytes#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#1 as range 2
  //DEBUG: s.1#1: 5
  //DEBUG: s.2#1: 6
  //DEBUG: s.3#1: 7
  //DEBUG: s.4#1: 8
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeDWord/4 AsIs: s.1#1/5 AsIs: s.2#1/6 AsIs: s.3#1/7 AsIs: s.4#1/8 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Bytes#1/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_MakeDWord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReadDWord("ReadDWord", COOKIE1_, COOKIE2_, func_ReadDWord);


static refalrts::FnResult func_MakeDWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & MakeDWord/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeDWord/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & MakeDWord/4 s.LastByte#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.LastByte#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MakeDWord/4 s.LastByte#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.LastByte1 #5/1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeDWord/4 s.LastByte#1/5 e.Bytes#1/2 >/1
  // closed e.Bytes#1 as range 2
  //DEBUG: s.LastByte#1: 5
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } </6 & Mul/7 </8 & MakeDWord/9 Tile{ AsIs: e.Bytes#1/2 } >/10 256/11 >/12 Tile{ AsIs: s.LastByte#1/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_Mul]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_MakeDWord]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 256UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeDWord("MakeDWord", COOKIE1_, COOKIE2_, func_MakeDWord);


static refalrts::FnResult func_ReadEntries(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & ReadEntries/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ReadEntries/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ReadEntries/4 0/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadEntries/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes#1/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadEntries/4 s.N#1/5 e.Name#1/6 0/10 s.1#1/11 s.2#1/12 s.3#1/13 s.4#1/14 e.Bytes#1/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[8], context[9] ) )
      continue;
    // closed e.Bytes#1 as range 8
    //DEBUG: s.N#1: 5
    //DEBUG: e.Name#1: 6
    //DEBUG: s.1#1: 11
    //DEBUG: s.2#1: 12
    //DEBUG: s.3#1: 13
    //DEBUG: s.4#1: 14
    //DEBUG: e.Bytes#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 </16 & Chr/17 Tile{ AsIs: e.Name#1/6 } >/18 </19 Tile{ HalfReuse: & MakeDWord/10 AsIs: s.1#1/11 AsIs: s.2#1/12 AsIs: s.3#1/13 AsIs: s.4#1/14 } >/20 )/21 </22 & ReadEntries/23 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N#1/5 } 1/24 >/25 Tile{ AsIs: e.Bytes#1/8 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_ReadEntries]);
    refalrts::alloc_number(vm, context[24], 1UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::reinit_name(context[10], functions[efunc_MakeDWord]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[10], context[14] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadEntries("ReadEntries", COOKIE1_, COOKIE2_, func_ReadEntries);


static refalrts::FnResult func_ReadExterns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ReadExterns/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ReadExterns/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ReadExterns/4 0/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadExterns/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes#1/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadExterns/4 s.N#1/5 e.Name#1/6 0/10 e.Bytes#1/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    // closed e.Bytes#1 as range 8
    //DEBUG: s.N#1: 5
    //DEBUG: e.Name#1: 6
    //DEBUG: e.Bytes#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 </12 & Chr/13 Tile{ AsIs: e.Name#1/6 } >/14 )/15 </16 & ReadExterns/17 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N#1/5 } 1/18 Tile{ HalfReuse: >/10 AsIs: e.Bytes#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_ReadExterns]);
    refalrts::alloc_number(vm, context[18], 1UL);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[18], context[18] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadExterns("ReadExterns", COOKIE1_, COOKIE2_, func_ReadExterns);


static refalrts::FnResult func_ReadWords(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ReadWords/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ReadWords/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ReadWords/4 0/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadWords/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes#1/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadWords/4 s.N#1/5 e.Name#1/6 0/10 e.Bytes#1/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    // closed e.Bytes#1 as range 8
    //DEBUG: s.N#1: 5
    //DEBUG: e.Name#1: 6
    //DEBUG: e.Bytes#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 </12 & Sub/13 s.N#1/5/14 1/15 >/16 </17 & Chr/18 Tile{ AsIs: e.Name#1/6 } >/19 )/20 </21 & ReadWords/22 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N#1/5 } 1/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes#1/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Sub]);
    refalrts::copy_stvar(vm, context[14], context[5]);
    refalrts::alloc_number(vm, context[15], 1UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_ReadWords]);
    refalrts::alloc_number(vm, context[23], 1UL);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[23], context[23] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[11], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadWords("ReadWords", COOKIE1_, COOKIE2_, func_ReadWords);


static refalrts::FnResult func_ReadEntryPoints(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ReadEntryPoints/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ReadEntryPoints/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & ReadEntryPoints/4 0/5 e.Bytes#1/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes#1 as range 6
    //DEBUG: e.Bytes#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadEntryPoints/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes#1/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadEntryPoints/4 s.N#1/5 s.1#1/6 s.2#1/7 s.3#1/8 s.4#1/9 e.Bytes#1/2 >/1
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#1 as range 2
  //DEBUG: s.N#1: 5
  //DEBUG: s.1#1: 6
  //DEBUG: s.2#1: 7
  //DEBUG: s.3#1: 8
  //DEBUG: s.4#1: 9
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeDWord/4 } Tile{ AsIs: s.1#1/6 AsIs: s.2#1/7 AsIs: s.3#1/8 AsIs: s.4#1/9 } >/10 </11 & ReadEntryPoints/12 </13 & Sub/14 Tile{ AsIs: s.N#1/5 } 1/15 >/16 Tile{ AsIs: e.Bytes#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ReadEntryPoints]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[15], 1UL);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_MakeDWord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[5], context[5] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReadEntryPoints("ReadEntryPoints", COOKIE1_, COOKIE2_, func_ReadEntryPoints);


static refalrts::FnResult func_gen_Disassemble_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Disassemble=7/4 e.Functions#8/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Functions#8 as range 2
  //DEBUG: e.Functions#8: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Disassemble=7/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Functions#8/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A7("Disassemble=7", COOKIE1_, COOKIE2_, func_gen_Disassemble_A7);


static refalrts::FnResult func_gen_Disassemble_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Disassemble=6/4 (/8 e.Functions#5/6 )/9 (/12 e.FunctionTable#5/10 )/13 # Ok/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_right( identifiers[ident_Ok], context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Functions#5 as range 6
  // closed e.FunctionTable#5 as range 10
  //DEBUG: e.Functions#5: 6
  //DEBUG: e.FunctionTable#5: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=7/4 HalfReuse: </8 } Tile{ HalfReuse: & ResolveFunctions/9 } Tile{ AsIs: e.Functions#5/6 } Tile{ AsIs: (/12 AsIs: e.FunctionTable#5/10 AsIs: )/13 HalfReuse: >/5 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A7]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[9], functions[efunc_ResolveFunctions]);
  refalrts::reinit_close_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A6("Disassemble=6", COOKIE1_, COOKIE2_, func_gen_Disassemble_A6);


static refalrts::FnResult func_gen_Disassemble_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Disassemble=5/4 (/8 e.Functions#5/6 )/9 (/12 e.FunctionTable#5/10 )/13 (/16 e.Entries#1/14 )/17 # Ok/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_right( identifiers[ident_Ok], context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Functions#5 as range 6
  // closed e.FunctionTable#5 as range 10
  // closed e.Entries#1 as range 14
  //DEBUG: e.Functions#5: 6
  //DEBUG: e.FunctionTable#5: 10
  //DEBUG: e.Entries#1: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=6/4 AsIs: (/8 AsIs: e.Functions#5/6 AsIs: )/9 AsIs: (/12 AsIs: e.FunctionTable#5/10 AsIs: )/13 HalfReuse: </16 } & CheckupEntries/18 e.FunctionTable#5/10/19 (/21 Tile{ AsIs: e.Entries#1/14 } Tile{ AsIs: )/17 HalfReuse: >/5 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_CheckupEntries]);
  refalrts::copy_evar(vm, context[19], context[20], context[10], context[11]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A6]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_close_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[21], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A5("Disassemble=5", COOKIE1_, COOKIE2_, func_gen_Disassemble_A5);


static refalrts::FnResult func_gen_Disassemble_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Disassemble=4/4 (/7 e.Entries#1/5 )/8 (/11 e.FunctionStarts#1/9 )/12 (/15 e.FunctionTable#5/13 )/16 e.Functions#5/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries#1 as range 5
  // closed e.FunctionStarts#1 as range 9
  // closed e.FunctionTable#5 as range 13
  // closed e.Functions#5 as range 2
  //DEBUG: e.Entries#1: 5
  //DEBUG: e.FunctionStarts#1: 9
  //DEBUG: e.FunctionTable#5: 13
  //DEBUG: e.Functions#5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=5/4 AsIs: (/7 } Tile{ AsIs: e.Functions#5/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.FunctionTable#5/13 AsIs: )/16 } (/17 Tile{ AsIs: e.Entries#1/5 } Tile{ AsIs: )/8 HalfReuse: </11 } & CheckupFunctionStarts/18 e.FunctionTable#5/13/19 (/21 Tile{ AsIs: e.FunctionStarts#1/9 } )/22 >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_CheckupFunctionStarts]);
  refalrts::copy_evar(vm, context[19], context[20], context[13], context[14]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A5]);
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A4("Disassemble=4", COOKIE1_, COOKIE2_, func_gen_Disassemble_A4);


static refalrts::FnResult func_gen_Disassemble_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Disassemble=3/4 (/7 e.Entries#1/5 )/8 (/11 e.FunctionStarts#1/9 )/12 (/15 e.Externs#1/13 )/16 e.Functions#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries#1 as range 5
  // closed e.FunctionStarts#1 as range 9
  // closed e.Externs#1 as range 13
  // closed e.Functions#4 as range 2
  //DEBUG: e.Entries#1: 5
  //DEBUG: e.FunctionStarts#1: 9
  //DEBUG: e.Externs#1: 13
  //DEBUG: e.Functions#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=4/4 AsIs: (/7 AsIs: e.Entries#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts#1/9 AsIs: )/12 HalfReuse: </15 } & MakeFunctionTable/17 (/18 Tile{ AsIs: e.Externs#1/13 } Tile{ AsIs: )/16 AsIs: e.Functions#4/2 AsIs: >/1 } >/19 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_MakeFunctionTable]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A4]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[18], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[19], context[19] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A3("Disassemble=3", COOKIE1_, COOKIE2_, func_gen_Disassemble_A3);


static refalrts::FnResult func_gen_Disassemble_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Disassemble=2/4 (/7 e.Entries#1/5 )/8 (/11 e.FunctionStarts#1/9 )/12 (/15 e.Externs#1/13 )/16 e.Code#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries#1 as range 5
  // closed e.FunctionStarts#1 as range 9
  // closed e.Externs#1 as range 13
  // closed e.Code#3 as range 2
  //DEBUG: e.Entries#1: 5
  //DEBUG: e.FunctionStarts#1: 9
  //DEBUG: e.Externs#1: 13
  //DEBUG: e.Code#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=3/4 AsIs: (/7 AsIs: e.Entries#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Externs#1/13 AsIs: )/16 } </17 & SplitByFunctions/18 Tile{ AsIs: e.Code#3/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_SplitByFunctions]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A2("Disassemble=2", COOKIE1_, COOKIE2_, func_gen_Disassemble_A2);


static refalrts::FnResult func_gen_Disassemble_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Disassemble=1/4 s.BytecodeSize#1/5 (/8 e.Entries#1/6 )/9 (/12 e.FunctionStarts#1/10 )/13 (/16 e.Externs#1/14 )/17 (/20 e.Words#1/18 )/21 e.Code#2/2 s.BytecodeSize#1/22 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  if( ! refalrts::repeated_stvar_right( vm, context[22], context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries#1 as range 6
  // closed e.FunctionStarts#1 as range 10
  // closed e.Externs#1 as range 14
  // closed e.Words#1 as range 18
  // closed e.Code#2 as range 2
  //DEBUG: s.BytecodeSize#1: 5
  //DEBUG: e.Entries#1: 6
  //DEBUG: e.FunctionStarts#1: 10
  //DEBUG: e.Externs#1: 14
  //DEBUG: e.Words#1: 18
  //DEBUG: e.Code#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.BytecodeSize#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BytecodeSize#1/22 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=2/4 } Tile{ AsIs: (/8 AsIs: e.Entries#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.FunctionStarts#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Externs#1/14 AsIs: )/17 HalfReuse: </20 } & ResolveWords/23 (/24 Tile{ AsIs: e.Words#1/18 } Tile{ AsIs: )/21 } Tile{ AsIs: e.Code#2/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[23], functions[efunc_ResolveWords]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A2]);
  refalrts::reinit_open_call(context[20]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[24], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[8], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A1("Disassemble=1", COOKIE1_, COOKIE2_, func_gen_Disassemble_A1);


static refalrts::FnResult func_Disassemble(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Disassemble/4 (/7 e.Words#1/5 )/8 (/11 e.FunctionStarts#1/9 )/12 (/15 e.Entries#1/13 )/16 (/19 e.Externs#1/17 )/20 s.BytecodeSize#1/21 e.Bytes#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Words#1 as range 5
  // closed e.FunctionStarts#1 as range 9
  // closed e.Entries#1 as range 13
  // closed e.Externs#1 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes#1 as range 2
  //DEBUG: e.Words#1: 5
  //DEBUG: e.FunctionStarts#1: 9
  //DEBUG: e.Entries#1: 13
  //DEBUG: e.Externs#1: 17
  //DEBUG: s.BytecodeSize#1: 21
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BytecodeSize#1/21 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=1/4 HalfReuse: s.BytecodeSize1 #21/7 } (/22 Tile{ AsIs: e.Entries#1/13 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts#1/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Externs#1/17 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Words#1/5 } Tile{ AsIs: )/20 } </23 & DecodeCommands/24 0/25 Tile{ AsIs: e.Bytes#1/2 } >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
  refalrts::alloc_number(vm, context[25], 0UL);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A1]);
  refalrts::reinit_svar( context[7], context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[8], context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Disassemble("Disassemble", COOKIE1_, COOKIE2_, func_Disassemble);


static refalrts::FnResult func_gen_ResolveWords_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveWords=1/4 (/7 e.Words#2/5 )/8 e.Commands#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Words#2 as range 5
  // closed e.Commands#2 as range 2
  //DEBUG: e.Words#2: 5
  //DEBUG: e.Commands#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveWords=1/4 (/7 e.Words#2/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Commands#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveWords_A1("ResolveWords=1", COOKIE1_, COOKIE2_, func_gen_ResolveWords_A1);


static refalrts::FnResult func_gen_ResolveWords_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ResolveWords=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ResolveWords=1\1/4 (/7 e.new#1/5 )/8 t.new#2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ResolveWords=1\1/4 (/7 e.new#6/11 )/8 (/9 s.new#3/15 s.new#4/16 s.new#5/17 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new#6 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    do {
      // </0 & ResolveWords=1\1/4 (/7 e.Words-B#2/20 (/26 s.Id#2/28 e.Word#2/24 )/27 e.Words-E#2/22 )/8 (/9 s.Offset#2/15 # CSYM/16 s.Id#2/17 )/10 >/1
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[18];
        context[23] = context[19];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
          continue;
        // closed e.Word#2 as range 24
        // closed e.Words-E#2 as range 22
        //DEBUG: s.Offset#2: 15
        //DEBUG: s.Id#2: 17
        //DEBUG: e.Words-B#2: 20
        //DEBUG: e.Word#2: 24
        //DEBUG: e.Words-E#2: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id#2/17 )/10 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id#2/28 AsIs: e.Word#2/24 AsIs: )/27 } Tile{ AsIs: e.Words-B#2/20 } Tile{ AsIs: e.Words-E#2/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset#2/15 AsIs: # CSYM/16 } e.Word#2/24/29 Tile{ HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ResolveWords=1\1/4 (/7 e.Words-B#2/20 (/26 s.Id#2/28 e.Word#2/24 )/27 e.Words-E#2/22 )/8 (/9 s.Offset#2/15 # CSYMR/16 s.Id#2/17 )/10 >/1
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[18];
        context[23] = context[19];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
          continue;
        // closed e.Word#2 as range 24
        // closed e.Words-E#2 as range 22
        //DEBUG: s.Offset#2: 15
        //DEBUG: s.Id#2: 17
        //DEBUG: e.Words-B#2: 20
        //DEBUG: e.Word#2: 24
        //DEBUG: e.Words-E#2: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id#2/17 )/10 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id#2/28 AsIs: e.Word#2/24 AsIs: )/27 } Tile{ AsIs: e.Words-B#2/20 } Tile{ AsIs: e.Words-E#2/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset#2/15 AsIs: # CSYMR/16 } e.Word#2/24/29 Tile{ HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ResolveWords=1\1/4 (/7 e.Words-B#2/20 (/26 s.Id#2/28 e.Word#2/24 )/27 e.Words-E#2/22 )/8 (/9 s.Offset#2/15 # NCS/16 s.Id#2/17 )/10 >/1
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_NCS], context[16] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[18];
      context[23] = context[19];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
        continue;
      // closed e.Word#2 as range 24
      // closed e.Words-E#2 as range 22
      //DEBUG: s.Offset#2: 15
      //DEBUG: s.Id#2: 17
      //DEBUG: e.Words-B#2: 20
      //DEBUG: e.Word#2: 24
      //DEBUG: e.Words-E#2: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id#2/17 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id#2/28 AsIs: e.Word#2/24 AsIs: )/27 } Tile{ AsIs: e.Words-B#2/20 } Tile{ AsIs: e.Words-E#2/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset#2/15 AsIs: # NCS/16 } e.Word#2/24/29 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveWords=1\1/4 (/7 e.Words#2/5 )/8 t.Other#2/9 >/1
  // closed e.Words#2 as range 5
  //DEBUG: t.Other#2: 9
  //DEBUG: e.Words#2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveWords=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Words#2/5 AsIs: )/8 AsIs: t.Other#2/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveWords_A1L1("ResolveWords=1\\1", COOKIE1_, COOKIE2_, func_gen_ResolveWords_A1L1);


static refalrts::FnResult func_ResolveWords(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ResolveWords/4 (/7 e.Words#1/5 )/8 e.Commands#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Words#1 as range 5
  // closed e.Commands#1 as range 2
  //DEBUG: e.Words#1: 5
  //DEBUG: e.Commands#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & ResolveWords=1/10 </11 Tile{ HalfReuse: & MapAccum/0 Reuse: & ResolveWords=1\1/4 AsIs: (/7 AsIs: e.Words#1/5 AsIs: )/8 AsIs: e.Commands#1/2 AsIs: >/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ResolveWords_A1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::reinit_name(context[0], functions[efunc_MapAccum]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveWords_A1L1]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveWords("ResolveWords", COOKIE1_, COOKIE2_, func_ResolveWords);


static refalrts::FnResult func_gen_SplitByFunctions_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & SplitByFunctions:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & SplitByFunctions:1/4 t.new#1/5 e.new#2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & SplitByFunctions:1/4 t.DeclareCommand#1/5 e.FuncBody#3/9 t.NextDeclareCommand#3/13 e.Code#3/11 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[7];
      context[12] = context[8];
      context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      // closed e.Code#3 as range 11
      //DEBUG: t.DeclareCommand#1: 5
      //DEBUG: e.FuncBody#3: 9
      //DEBUG: t.NextDeclareCommand#3: 13
      //DEBUG: e.Code#3: 11
      //5: t.DeclareCommand#1
      //9: e.FuncBody#3
      //11: e.Code#3
      //13: t.NextDeclareCommand#3
      //20: t.NextDeclareCommand#3

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_SplitByFunctions_B1S1C1]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DeclareCommand]);
      refalrts::copy_stvar(vm, context[20], context[13]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_stvar( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </15 & SplitByFunctions:1$1?1/19 # True/20 >/16
        context[17] = 0;
        context[18] = 0;
        context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
        context[20] = refalrts::ident_left( identifiers[ident_True], context[17], context[18] );
        if( ! context[20] )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        //DEBUG: t.DeclareCommand#1: 5
        //DEBUG: e.FuncBody#3: 9
        //DEBUG: t.NextDeclareCommand#3: 13
        //DEBUG: e.Code#3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & SplitByFunctions:1$1?1/19 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/16 } Tile{ AsIs: t.DeclareCommand#1/5 } Tile{ AsIs: e.FuncBody#3/9 } Tile{ HalfReuse: )/20 } Tile{ AsIs: </0 Reuse: & SplitByFunctions/4 } Tile{ AsIs: t.NextDeclareCommand#3/13 AsIs: e.Code#3/11 HalfReuse: >/15 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_bracket(context[20]);
        refalrts::update_name(context[4], functions[efunc_SplitByFunctions]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[13], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[16], context[16] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[15], context[16]);
      continue;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[7], context[8] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SplitByFunctions:1/4 t.DeclareCommand#1/5 e.FuncBody#3/2 >/1
  // closed e.FuncBody#3 as range 2
  //DEBUG: t.DeclareCommand#1: 5
  //DEBUG: e.FuncBody#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: t.DeclareCommand#1/5 AsIs: e.FuncBody#3/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SplitByFunctions_B1("SplitByFunctions:1", COOKIE1_, COOKIE2_, func_gen_SplitByFunctions_B1);


static refalrts::FnResult func_SplitByFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & SplitByFunctions/4 t.DeclareCommand#1/5 e.Code#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Code#1 as range 2
  //DEBUG: t.DeclareCommand#1: 5
  //DEBUG: e.Code#1: 2
  //2: e.Code#1
  //5: t.DeclareCommand#1
  //12: t.DeclareCommand#1

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_SplitByFunctions_C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_DeclareCommand]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_stvar( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & SplitByFunctions?1/11 # True/12 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    //DEBUG: t.DeclareCommand#1: 5
    //DEBUG: e.Code#1: 2

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & SplitByFunctions?1/11 # True/12 >/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SplitByFunctions:1/4 AsIs: t.DeclareCommand#1/5 AsIs: e.Code#1/2 HalfReuse: >/7 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_gen_SplitByFunctions_B1]);
    refalrts::reinit_close_call(context[7]);
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_SplitByFunctions("SplitByFunctions", COOKIE1_, COOKIE2_, func_SplitByFunctions);


static refalrts::FnResult func_DeclareCommand(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & DeclareCommand/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DeclareCommand/4 t.new#1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DeclareCommand/4 (/5 s.new#2/9 s.new#3/10 e.new#4/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[7], context[8] ) )
      continue;
    // closed e.new#4 as range 7
    do {
      // </0 & DeclareCommand/4 (/5 s.Offset#1/9 # E/10 e.Name#1/11 )/6 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_E], context[10] ) )
        continue;
      // closed e.Name#1 as range 11
      //DEBUG: s.Offset#1: 9
      //DEBUG: e.Name#1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DeclareCommand/4 (/5 s.Offset#1/9 # E/10 e.Name#1/11 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DeclareCommand/4 (/5 s.Offset#1/9 # L/10 e.Name#1/11 )/6 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_L], context[10] ) )
      continue;
    // closed e.Name#1 as range 11
    //DEBUG: s.Offset#1: 9
    //DEBUG: e.Name#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DeclareCommand/4 (/5 s.Offset#1/9 # L/10 e.Name#1/11 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DeclareCommand/4 t.Other#1/5 >/1
  //DEBUG: t.Other#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/4 AsIs: t.Other#1/5 } Tile{ ]] }
  refalrts::reinit_ident(context[4], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DeclareCommand("DeclareCommand", COOKIE1_, COOKIE2_, func_DeclareCommand);


static refalrts::FnResult func_gen_MakeFunctionTable_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & MakeFunctionTable=3/4 (/7 (/11 e.ForbiddenNames#4/9 )/12 e.Table#4/5 )/8 e.Functions#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ForbiddenNames#4 as range 9
  // closed e.Table#4 as range 5
  // closed e.Functions#4 as range 2
  //DEBUG: e.ForbiddenNames#4: 9
  //DEBUG: e.Table#4: 5
  //DEBUG: e.Functions#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeFunctionTable=3/4 (/7 (/11 e.ForbiddenNames#4/9 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: e.Table#4/5 AsIs: )/8 } Tile{ AsIs: e.Functions#4/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A3("MakeFunctionTable=3", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A3);


static refalrts::FnResult func_gen_MakeFunctionTable_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & MakeFunctionTable=2/4 (/7 e.Functions#2/5 )/8 e.ForbiddenNames#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Functions#2 as range 5
  // closed e.ForbiddenNames#3 as range 2
  //DEBUG: e.Functions#2: 5
  //DEBUG: e.ForbiddenNames#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeFunctionTable=3/4 HalfReuse: </7 } & MapAccum/9 & AddFunctionToTable/10 (/11 (/12 Tile{ AsIs: e.ForbiddenNames#3/2 } Tile{ AsIs: )/8 } )/13 Tile{ AsIs: e.Functions#2/5 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_MapAccum]);
  refalrts::alloc_name(vm, context[10], functions[efunc_AddFunctionToTable]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A2("MakeFunctionTable=2", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A2);


static refalrts::FnResult func_gen_MakeFunctionTable_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & MakeFunctionTable=1/4 (/7 e.Externs#1/5 )/8 (/11 e.Entries#2/9 )/12 e.Functions#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Externs#1 as range 5
  // closed e.Entries#2 as range 9
  // closed e.Functions#2 as range 2
  //DEBUG: e.Externs#1: 5
  //DEBUG: e.Entries#2: 9
  //DEBUG: e.Functions#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeFunctionTable=3/4 HalfReuse: </7 } & MapAccum@1/13 Tile{ HalfReuse: (/8 AsIs: (/11 } Tile{ AsIs: e.Externs#1/5 } Tile{ AsIs: e.Entries#2/9 } )/14 Tile{ AsIs: )/12 AsIs: e.Functions#2/2 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A1("MakeFunctionTable=1", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A1);


static refalrts::FnResult func_gen_MakeFunctionTable_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & MakeFunctionTable=1\1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & MakeFunctionTable=1\1/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  do {
    // </0 & MakeFunctionTable=1\1/4 (/7 e.Entries#2/13 )/8 (/11 (/19 s.Offset#2/21 # E/22 e.Name#2/17 )/20 e.Body#2/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.Entries#2 as range 13
    // closed e.Body#2 as range 15
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    context[22] = refalrts::ident_left( identifiers[ident_E], context[17], context[18] );
    if( ! context[22] )
      continue;
    // closed e.Name#2 as range 17
    //DEBUG: e.Entries#2: 13
    //DEBUG: e.Body#2: 15
    //DEBUG: s.Offset#2: 21
    //DEBUG: e.Name#2: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & MakeFunctionTable=1\1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Entries#2/13 } Tile{ AsIs: (/7 } e.Name#2/17/23 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: (/19 AsIs: s.Offset#2/21 AsIs: # E/22 AsIs: e.Name#2/17 AsIs: )/20 AsIs: e.Body#2/15 AsIs: )/12 } Tile{ ]] }
    refalrts::copy_evar(vm, context[23], context[24], context[17], context[18]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeFunctionTable=1\1/4 (/7 e.Entries#2/5 )/8 (/11 e.OtherFunction#2/9 )/12 >/1
  // closed e.Entries#2 as range 5
  // closed e.OtherFunction#2 as range 9
  //DEBUG: e.Entries#2: 5
  //DEBUG: e.OtherFunction#2: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeFunctionTable=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Entries#2/5 AsIs: )/8 AsIs: (/11 AsIs: e.OtherFunction#2/9 AsIs: )/12 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A1L1("MakeFunctionTable=1\\1", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A1L1);


static refalrts::FnResult func_MakeFunctionTable(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & MakeFunctionTable/4 (/7 e.Externs#1/5 )/8 e.Functions#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Externs#1 as range 5
  // closed e.Functions#1 as range 2
  //DEBUG: e.Externs#1: 5
  //DEBUG: e.Functions#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeFunctionTable=1/4 AsIs: (/7 AsIs: e.Externs#1/5 AsIs: )/8 } </9 & MapAccum/10 & MakeFunctionTable=1\1/11 (/12 )/13 Tile{ AsIs: e.Functions#1/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_MapAccum]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_MakeFunctionTable_A1L1]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeFunctionTable("MakeFunctionTable", COOKIE1_, COOKIE2_, func_MakeFunctionTable);


static refalrts::FnResult func_gen_AddFunctionToTable_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & AddFunctionToTable$2=2/4 (/7 e.ForbiddenNames#1/5 )/8 (/11 e.Table#1/9 )/12 s.NameOffset#1/13 s.CodeOffset#1/14 (/17 e.Command#1/15 )/18 (/21 e.Body#1/19 )/22 e.NewName#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ForbiddenNames#1 as range 5
  // closed e.Table#1 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Command#1 as range 15
  // closed e.Body#1 as range 19
  // closed e.NewName#3 as range 2
  //DEBUG: e.ForbiddenNames#1: 5
  //DEBUG: e.Table#1: 9
  //DEBUG: s.NameOffset#1: 13
  //DEBUG: s.CodeOffset#1: 14
  //DEBUG: e.Command#1: 15
  //DEBUG: e.Body#1: 19
  //DEBUG: e.NewName#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddFunctionToTable/4 AsIs: (/7 } Tile{ HalfReuse: (/8 } Tile{ AsIs: e.ForbiddenNames#1/5 } Tile{ HalfReuse: )/11 AsIs: e.Table#1/9 AsIs: )/12 } Tile{ AsIs: (/17 } (/23 Tile{ AsIs: s.NameOffset#1/13 } # L/24 Tile{ AsIs: e.NewName#3/2 } Tile{ AsIs: )/18 } (/25 Tile{ AsIs: s.CodeOffset#1/14 } Tile{ AsIs: e.Command#1/15 } Tile{ HalfReuse: )/21 AsIs: e.Body#1/19 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_L]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_AddFunctionToTable]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_bracket(context[21]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[25], context[21] );
  refalrts::link_brackets( context[23], context[18] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S2A2("AddFunctionToTable$2=2", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S2A2);


static refalrts::FnResult func_gen_AddFunctionToTable_S2A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & AddFunctionToTable$2=2:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddFunctionToTable$2=2:1/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset#1/5 e.Body-B#3/8 (/14 s.Offset#3/16 # LABEL/17 e.Label#3/18 '$'/22 e.Suf#3/20 )/15 e.Body-E#3/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      // closed e.Body-E#3 as range 10
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      context[17] = refalrts::ident_left( identifiers[ident_LABEL], context[12], context[13] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[20] = context[12];
        context[21] = context[13];
        context[22] = refalrts::char_left( '$', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Suf#3 as range 20
        //DEBUG: s.CodeOffset#1: 5
        //DEBUG: e.Body-B#3: 8
        //DEBUG: e.Body-E#3: 10
        //DEBUG: s.Offset#3: 16
        //DEBUG: e.Label#3: 18
        //DEBUG: e.Suf#3: 20
        //5: s.CodeOffset#1
        //8: e.Body-B#3
        //10: e.Body-E#3
        //16: s.Offset#3
        //18: e.Label#3
        //20: e.Suf#3
        //28: e.Label#3

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_AddFunctionToTable_S2A2B1S1C1]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_IsObfuscated]);
        refalrts::copy_evar(vm, context[28], context[29], context[18], context[19]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[26] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </23 & AddFunctionToTable$2=2:1$1?1/27 # False/28 >/24
          context[25] = 0;
          context[26] = 0;
          context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
          context[28] = refalrts::ident_left( identifiers[ident_False], context[25], context[26] );
          if( ! context[28] )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          //DEBUG: s.CodeOffset#1: 5
          //DEBUG: e.Body-B#3: 8
          //DEBUG: e.Body-E#3: 10
          //DEBUG: s.Offset#3: 16
          //DEBUG: e.Label#3: 18
          //DEBUG: e.Suf#3: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset#1/5 e.Body-B#3/8 (/14 s.Offset#3/16 # LABEL/17 {REMOVED TILE} '$'/22 e.Suf#3/20 )/15 e.Body-E#3/10 </23 & AddFunctionToTable$2=2:1$1?1/27 # False/28 >/24 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Label#3/18 } Tile{ ]] }
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[18], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[23], context[24]);
        continue;
      } while ( refalrts::open_evar_advance( context[18], context[19], context[12], context[13] ) );
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset#1/5 e.Body#3/2 >/1
  // closed e.Body#3 as range 2
  //DEBUG: s.CodeOffset#1: 5
  //DEBUG: e.Body#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Body#3/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } 'F'/6 Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.CodeOffset#1/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[6], 'F');
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S2A2B1("AddFunctionToTable$2=2:1", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S2A2B1);


static refalrts::FnResult func_gen_AddFunctionToTable_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & AddFunctionToTable$3=1/4 (/7 e.ForbiddenNames#1/5 )/8 (/11 e.Name#1/9 )/12 (/15 e.Table#1/13 )/16 s.CodeOffset#1/17 s.NameOffset#1/18 s.DeclareCommand#1/19 (/22 e.Command#1/20 )/23 (/26 e.Body#1/24 )/27 s.Type#2/28 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.ForbiddenNames#1 as range 5
  // closed e.Name#1 as range 9
  // closed e.Table#1 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.Command#1 as range 20
  // closed e.Body#1 as range 24
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ForbiddenNames#1: 5
  //DEBUG: e.Name#1: 9
  //DEBUG: e.Table#1: 13
  //DEBUG: s.CodeOffset#1: 17
  //DEBUG: s.NameOffset#1: 18
  //DEBUG: s.DeclareCommand#1: 19
  //DEBUG: e.Command#1: 20
  //DEBUG: e.Body#1: 24
  //DEBUG: s.Type#2: 28

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.ForbiddenNames#1/5 } Tile{ AsIs: (/11 AsIs: e.Name#1/9 AsIs: )/12 HalfReuse: )/15 AsIs: e.Table#1/13 HalfReuse: (/16 AsIs: s.CodeOffset#1/17 } Tile{ AsIs: s.Type#2/28 } e.Name#1/9/29 Tile{ AsIs: )/23 } Tile{ AsIs: )/8 } Tile{ AsIs: (/22 } Tile{ AsIs: (/7 } Tile{ AsIs: s.NameOffset#1/18 AsIs: s.DeclareCommand#1/19 } e.Name#1/9/31 )/33 (/34 Tile{ HalfReuse: s.CodeOffset1 #17/1 } Tile{ AsIs: e.Command#1/20 } Tile{ HalfReuse: )/26 AsIs: e.Body#1/24 AsIs: )/27 } Tile{ ]] }
  refalrts::copy_evar(vm, context[29], context[30], context[9], context[10]);
  refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_svar( context[1], context[17] );
  refalrts::reinit_close_bracket(context[26]);
  refalrts::link_brackets( context[22], context[27] );
  refalrts::link_brackets( context[34], context[26] );
  refalrts::link_brackets( context[7], context[33] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[16], context[23] );
  refalrts::link_brackets( context[4], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[23], context[23] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[28], context[28] );
  res = refalrts::splice_evar( res, context[11], context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S3A1("AddFunctionToTable$3=1", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S3A1);


static refalrts::FnResult func_gen_AddFunctionToTable_S3A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & AddFunctionToTable$3=1:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddFunctionToTable$3=1:1/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & AddFunctionToTable$3=1:1/4 # L/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_L], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AddFunctionToTable$3=1:1/4 # L/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Local/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Local]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddFunctionToTable$3=1:1/4 # E/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_E], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AddFunctionToTable$3=1:1/4 # E/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Entry/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Entry]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S3A1B1("AddFunctionToTable$3=1:1", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S3A1B1);


static refalrts::FnResult func_AddFunctionToTable(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & AddFunctionToTable/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & AddFunctionToTable/4 (/7 (/11 e.new#1/9 )/12 e.new#2/5 )/8 (/15 (/19 s.new#3/25 s.new#4/26 e.new#5/17 )/20 (/23 s.new#6/27 e.new#7/21 )/24 e.new#8/13 )/16 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#1 as range 9
  // closed e.new#2 as range 5
  // closed e.new#8 as range 13
  if( ! refalrts::svar_left( context[25], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 17
  if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 21
  do {
    // </0 & AddFunctionToTable/4 (/7 (/11 e.new#11/28 )/12 e.new#9/30 )/8 (/15 (/19 s.new#12/25 # L/26 e.new#13/32 )/20 (/23 s.new#14/27 e.new#15/34 )/24 e.new#10/36 )/16 >/1
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[13];
    context[37] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_L], context[26] ) )
      continue;
    // closed e.new#11 as range 28
    // closed e.new#9 as range 30
    // closed e.new#13 as range 32
    // closed e.new#15 as range 34
    // closed e.new#10 as range 36
    do {
      // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames-B#1/48 (/54 e.Name#1/56 )/55 e.ForbiddenNames-E#1/50 )/12 e.Table#1/40 )/8 (/15 (/19 s.NameOffset#1/25 # L/26 e.Name#1/42 )/20 (/23 s.CodeOffset#1/27 e.Command#1/44 )/24 e.Body#1/46 )/16 >/1
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      // closed e.Table#1 as range 40
      // closed e.Name#1 as range 42
      // closed e.Command#1 as range 44
      // closed e.Body#1 as range 46
      context[48] = 0;
      context[49] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[50] = context[38];
        context[51] = context[39];
        context[52] = 0;
        context[53] = 0;
        context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
        if( ! context[54] )
          continue;
        refalrts::bracket_pointers(context[54], context[55]);
        if( ! refalrts::repeated_evar_left( vm, context[56], context[57], context[42], context[43], context[52], context[53] ) )
          continue;
        if( ! refalrts::empty_seq( context[52], context[53] ) )
          continue;
        // closed e.ForbiddenNames-E#1 as range 50
        //DEBUG: s.NameOffset#1: 25
        //DEBUG: s.CodeOffset#1: 27
        //DEBUG: e.Table#1: 40
        //DEBUG: e.Name#1: 42
        //DEBUG: e.Command#1: 44
        //DEBUG: e.Body#1: 46
        //DEBUG: e.ForbiddenNames-B#1: 48
        //DEBUG: e.ForbiddenNames-E#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & AddFunctionToTable/4 AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames-B#1/48 AsIs: (/54 AsIs: e.Name#1/56 AsIs: )/55 AsIs: e.ForbiddenNames-E#1/50 AsIs: )/12 AsIs: e.Table#1/40 AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset#1/25 AsIs: # L/26 } </58 & IncName/59 Tile{ AsIs: e.Name#1/42 } >/60 Tile{ AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset#1/27 AsIs: e.Command#1/44 AsIs: )/24 AsIs: e.Body#1/46 AsIs: )/16 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_IncName]);
        refalrts::alloc_close_call(vm, context[60]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[60], context[60] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[48], context[49], context[38], context[39] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames#1/38 )/12 e.Table#1/40 )/8 (/15 (/19 s.NameOffset#1/25 # L/26 e.Name#1/42 )/20 (/23 s.CodeOffset#1/27 e.Command#1/44 )/24 e.Body#1/46 )/16 >/1
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      // closed e.ForbiddenNames#1 as range 38
      // closed e.Table#1 as range 40
      // closed e.Name#1 as range 42
      // closed e.Command#1 as range 44
      // closed e.Body#1 as range 46
      //DEBUG: s.NameOffset#1: 25
      //DEBUG: s.CodeOffset#1: 27
      //DEBUG: e.ForbiddenNames#1: 38
      //DEBUG: e.Table#1: 40
      //DEBUG: e.Name#1: 42
      //DEBUG: e.Command#1: 44
      //DEBUG: e.Body#1: 46
      //25: s.NameOffset#1
      //27: s.CodeOffset#1
      //38: e.ForbiddenNames#1
      //40: e.Table#1
      //42: e.Name#1
      //44: e.Command#1
      //46: e.Body#1
      //53: e.Name#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_AddFunctionToTable_S2C1]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_IsObfuscated]);
      refalrts::copy_evar(vm, context[53], context[54], context[42], context[43]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[48] );
      res = refalrts::splice_elem( res, context[49] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[51] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[48] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </48 & AddFunctionToTable$2?1/52 # True/53 >/49
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::call_left( context[50], context[51], context[48], context[49] );
        context[53] = refalrts::ident_left( identifiers[ident_True], context[50], context[51] );
        if( ! context[53] )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        //DEBUG: s.NameOffset#1: 25
        //DEBUG: s.CodeOffset#1: 27
        //DEBUG: e.ForbiddenNames#1: 38
        //DEBUG: e.Table#1: 40
        //DEBUG: e.Name#1: 42
        //DEBUG: e.Command#1: 44
        //DEBUG: e.Body#1: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameOffset#1/25 # L/26 e.Name#1/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AddFunctionToTable$2=2/7 AsIs: (/11 AsIs: e.ForbiddenNames#1/38 AsIs: )/12 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Table#1/40 } Tile{ AsIs: )/20 HalfReuse: s.NameOffset1 #25/23 AsIs: s.CodeOffset#1/27 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Command#1/44 } Tile{ AsIs: )/8 } Tile{ HalfReuse: (/24 AsIs: e.Body#1/46 AsIs: )/16 AsIs: </48 Reuse: & AddFunctionToTable$2=2:1/52 HalfReuse: s.CodeOffset1 #27/53 } e.Body#1/46/54 Tile{ AsIs: >/49 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[54], context[55], context[46], context[47]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_AddFunctionToTable_S2A2]);
        refalrts::reinit_svar( context[23], context[25] );
        refalrts::reinit_open_bracket(context[24]);
        refalrts::update_name(context[52], functions[efunc_gen_AddFunctionToTable_S2A2B1]);
        refalrts::reinit_svar( context[53], context[27] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[48] );
        refalrts::link_brackets( context[24], context[16] );
        refalrts::link_brackets( context[19], context[8] );
        refalrts::link_brackets( context[15], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[49];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[24], context[53] );
        res = refalrts::splice_evar( res, context[8], context[8] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[19], context[19] );
        res = refalrts::splice_evar( res, context[20], context[27] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[15], context[15] );
        res = refalrts::splice_evar( res, context[4], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[48], context[49]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames#1/38 )/12 e.Table#1/40 )/8 (/15 (/19 s.NameOffset#1/25 # L/26 e.Name#1/42 )/20 (/23 s.CodeOffset#1/27 e.Command#1/44 )/24 e.Body#1/46 )/16 >/1
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    context[43] = context[33];
    context[44] = context[34];
    context[45] = context[35];
    context[46] = context[36];
    context[47] = context[37];
    // closed e.ForbiddenNames#1 as range 38
    // closed e.Table#1 as range 40
    // closed e.Name#1 as range 42
    // closed e.Command#1 as range 44
    // closed e.Body#1 as range 46
    //DEBUG: s.NameOffset#1: 25
    //DEBUG: s.CodeOffset#1: 27
    //DEBUG: e.ForbiddenNames#1: 38
    //DEBUG: e.Table#1: 40
    //DEBUG: e.Name#1: 42
    //DEBUG: e.Command#1: 44
    //DEBUG: e.Body#1: 46

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames#1/38 HalfReuse: (/12 } e.Name#1/42/48 Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ AsIs: e.Table#1/40 } (/50 s.CodeOffset#1/27/51 # Local/52 e.Name#1/42/53 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset#1/25 AsIs: # L/26 AsIs: e.Name#1/42 AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset#1/27 AsIs: e.Command#1/44 AsIs: )/24 AsIs: e.Body#1/46 AsIs: )/16 } Tile{ ]] }
    refalrts::copy_evar(vm, context[48], context[49], context[42], context[43]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_stvar(vm, context[51], context[27]);
    refalrts::alloc_ident(vm, context[52], identifiers[ident_Local]);
    refalrts::copy_evar(vm, context[53], context[54], context[42], context[43]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[50], context[1] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[12], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[50], context[52] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames#1/28 )/12 e.Table#1/30 )/8 (/15 (/19 s.NameOffset#1/25 # E/26 e.Name#1/32 )/20 (/23 s.CodeOffset#1/27 e.Command#1/34 )/24 e.Body#1/36 )/16 >/1
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[13];
    context[37] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_E], context[26] ) )
      continue;
    // closed e.ForbiddenNames#1 as range 28
    // closed e.Table#1 as range 30
    // closed e.Name#1 as range 32
    // closed e.Command#1 as range 34
    // closed e.Body#1 as range 36
    //DEBUG: s.NameOffset#1: 25
    //DEBUG: s.CodeOffset#1: 27
    //DEBUG: e.ForbiddenNames#1: 28
    //DEBUG: e.Table#1: 30
    //DEBUG: e.Name#1: 32
    //DEBUG: e.Command#1: 34
    //DEBUG: e.Body#1: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames#1/28 HalfReuse: (/12 } e.Name#1/32/38 Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ AsIs: e.Table#1/30 } (/40 s.CodeOffset#1/27/41 # Entry/42 e.Name#1/32/43 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset#1/25 AsIs: # E/26 AsIs: e.Name#1/32 AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset#1/27 AsIs: e.Command#1/34 AsIs: )/24 AsIs: e.Body#1/36 AsIs: )/16 } Tile{ ]] }
    refalrts::copy_evar(vm, context[38], context[39], context[32], context[33]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_stvar(vm, context[41], context[27]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Entry]);
    refalrts::copy_evar(vm, context[43], context[44], context[32], context[33]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[40], context[1] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[12], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames#1/9 )/12 e.Table#1/5 )/8 (/15 (/19 s.NameOffset#1/25 s.DeclareCommand#1/26 e.Name#1/17 )/20 (/23 s.CodeOffset#1/27 e.Command#1/21 )/24 e.Body#1/13 )/16 >/1
  // closed e.ForbiddenNames#1 as range 9
  // closed e.Table#1 as range 5
  // closed e.Name#1 as range 17
  // closed e.Command#1 as range 21
  // closed e.Body#1 as range 13
  //DEBUG: s.NameOffset#1: 25
  //DEBUG: s.DeclareCommand#1: 26
  //DEBUG: s.CodeOffset#1: 27
  //DEBUG: e.ForbiddenNames#1: 9
  //DEBUG: e.Table#1: 5
  //DEBUG: e.Name#1: 17
  //DEBUG: e.Command#1: 21
  //DEBUG: e.Body#1: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.CodeOffset#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AddFunctionToTable$3=1/7 AsIs: (/11 AsIs: e.ForbiddenNames#1/9 AsIs: )/12 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.Name#1/17 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Table#1/5 } Tile{ HalfReuse: )/15 HalfReuse: s.CodeOffset1 #27/19 AsIs: s.NameOffset#1/25 AsIs: s.DeclareCommand#1/26 } (/28 Tile{ AsIs: e.Command#1/21 } Tile{ AsIs: )/8 } Tile{ HalfReuse: (/24 AsIs: e.Body#1/13 AsIs: )/16 HalfReuse: </1 } & AddFunctionToTable$3=1:1*2/29 s.DeclareCommand#1/26/30 >/31 >/32 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_AddFunctionToTable_S3A1B1D2]);
  refalrts::copy_stvar(vm, context[30], context[26]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_AddFunctionToTable_S3A1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_svar( context[19], context[27] );
  refalrts::reinit_open_bracket(context[24]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[24], context[16] );
  refalrts::link_brackets( context[28], context[8] );
  refalrts::link_brackets( context[23], context[15] );
  refalrts::link_brackets( context[0], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[28], context[28] );
  res = refalrts::splice_evar( res, context[15], context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[0], context[0] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddFunctionToTable("AddFunctionToTable", COOKIE1_, COOKIE2_, func_AddFunctionToTable);


static refalrts::FnResult func_IncName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & IncName/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & IncName/4 e.new#1/5 s.new#2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    // closed e.new#1 as range 5
    do {
      // </0 & IncName/4 e.Name#1/8 s.Last#1/7 >/1
      context[8] = context[5];
      context[9] = context[6];
      // closed e.Name#1 as range 8
      //DEBUG: s.Last#1: 7
      //DEBUG: e.Name#1: 8
      //7: s.Last#1
      //8: e.Name#1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[12], functions[efunc_gen_IncName_S1C1]);
      refalrts::alloc_chars(vm, context[13], context[14], "0123456789", 10);
      refalrts::alloc_close_call(vm, context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_elem( res, context[10] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </10 & IncName$1?1/14 e.Digits-B#2/15 s.Last#1/19 s.Next#2/20 e.Digit-E#2/17 >/11
        context[12] = 0;
        context[13] = 0;
        context[14] = refalrts::call_left( context[12], context[13], context[10], context[11] );
        context[15] = 0;
        context[16] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[17] = context[12];
          context[18] = context[13];
          if( ! refalrts::repeated_stvar_left( vm, context[19], context[7], context[17], context[18] ) )
            continue;
          if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
            continue;
          // closed e.Digit-E#2 as range 17
          //DEBUG: s.Last#1: 7
          //DEBUG: e.Name#1: 8
          //DEBUG: e.Digits-B#2: 15
          //DEBUG: s.Next#2: 20
          //DEBUG: e.Digit-E#2: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & IncName/4 {REMOVED TILE} s.Last#1/7 </10 & IncName$1?1/14 e.Digits-B#2/15 s.Last#1/19 s.Next#2/20 e.Digit-E#2/17 >/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/8 } Tile{ HalfReuse: s.Next2 #20/1 ]] }
          refalrts::reinit_svar( context[1], context[20] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[8], context[9] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[15], context[16], context[12], context[13] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[10], context[11]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IncName/4 e.Name#1/8 '9'/7 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '9', context[7] ) )
      continue;
    // closed e.Name#1 as range 8
    //DEBUG: e.Name#1: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & IncName/4 AsIs: e.Name#1/8 HalfReuse: >/7 HalfReuse: '0'/1 ]] }
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_char(context[1], '0');
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IncName/4 e.Name#1/2 >/1
  // closed e.Name#1 as range 2
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IncName/4 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name#1/2 } Tile{ HalfReuse: '0'/1 ]] }
  refalrts::reinit_char(context[1], '0');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IncName("IncName", COOKIE1_, COOKIE2_, func_IncName);


static refalrts::FnResult func_IsObfuscated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & IsObfuscated/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & IsObfuscated/4 e.Name#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Name#1 as range 5
    //DEBUG: e.Name#1: 5
    //5: e.Name#1
    //12: e.Name#1

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_IsObfuscated_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Type]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & IsObfuscated$1?1/11 'L'/12 s.s#2/13 s.Init#2/14 e.Tail#2/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::char_left( 'L', context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Tail#2 as range 9
      //DEBUG: e.Name#1: 5
      //DEBUG: s.s#2: 13
      //DEBUG: s.Init#2: 14
      //DEBUG: e.Tail#2: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Name#1/5 </7 & IsObfuscated$1?1/11 'L'/12 s.s#2/13 s.Init#2/14 {REMOVED TILE} >/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail#2/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsObfuscated/4 e.Name#1/2 >/1
  // closed e.Name#1 as range 2
  //DEBUG: e.Name#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsObfuscated/4 e.Name#1/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsObfuscated("IsObfuscated", COOKIE1_, COOKIE2_, func_IsObfuscated);


static refalrts::FnResult func_gen_IsObfuscatedm_Tail_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsObfuscated-Tail:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & IsObfuscated-Tail:1/4 s.new#1/5 s.new#2/6 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & IsObfuscated-Tail:1/4 s.new#4/5 s.new#5/6 s.new#6/9 e.new#7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new#7 as range 7
    do {
      // </0 & IsObfuscated-Tail:1/4 'L'/5 s.s#2/6 s.Next#2/9 e.Tail#2/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( 'L', context[5] ) )
        continue;
      // closed e.Tail#2 as range 10
      //DEBUG: s.s#2: 6
      //DEBUG: s.Next#2: 9
      //DEBUG: e.Tail#2: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} 'L'/5 s.s#2/6 s.Next#2/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail#2/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsObfuscated-Tail:1/4 'D'/5 s.s#2/6 s.Next#2/9 e.Tail#2/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( 'D', context[5] ) )
        continue;
      // closed e.Tail#2 as range 10
      //DEBUG: s.s#2: 6
      //DEBUG: s.Next#2: 9
      //DEBUG: e.Tail#2: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} 'D'/5 s.s#2/6 s.Next#2/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail#2/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 '-'/9 e.Tail#2/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( '-', context[9] ) )
        continue;
      // closed e.Tail#2 as range 10
      //DEBUG: s.t#2: 5
      //DEBUG: s.s#2: 6
      //DEBUG: e.Tail#2: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & IsObfuscated-Tail/9 AsIs: e.Tail#2/10 AsIs: >/1 ]] }
      refalrts::reinit_name(context[9], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 '_'/9 e.Tail#2/10 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::char_term( '_', context[9] ) )
      continue;
    // closed e.Tail#2 as range 10
    //DEBUG: s.t#2: 5
    //DEBUG: s.s#2: 6
    //DEBUG: e.Tail#2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & IsObfuscated-Tail/9 AsIs: e.Tail#2/10 AsIs: >/1 ]] }
    refalrts::reinit_name(context[9], functions[efunc_IsObfuscatedm_Tail]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsObfuscated-Tail:1/4 '*'/5 s.s#2/6 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.s#2: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsObfuscated-Tail:1/4 '*'/5 s.s#2/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 e.Tail#2/2 >/1
  // closed e.Tail#2 as range 2
  //DEBUG: s.t#2: 5
  //DEBUG: s.s#2: 6
  //DEBUG: e.Tail#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsObfuscated-Tail:1/4 s.t#2/5 s.s#2/6 e.Tail#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsObfuscatedm_Tail_B1("IsObfuscated-Tail:1", COOKIE1_, COOKIE2_, func_gen_IsObfuscatedm_Tail_B1);


static refalrts::FnResult func_IsObfuscatedm_Tail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IsObfuscated-Tail/4 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Tail#1 as range 2
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & IsObfuscated-Tail:1/6 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: e.Tail#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_IsObfuscatedm_Tail_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsObfuscatedm_Tail("IsObfuscated-Tail", COOKIE1_, COOKIE2_, func_IsObfuscatedm_Tail);


static refalrts::FnResult func_CheckupFunctionStarts(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckupFunctionStarts/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CheckupFunctionStarts/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & CheckupFunctionStarts/4 (/15 s.Offset#1/17 s.Type#1/18 e.Name#1/13 )/16 e.Table#1/9 (/7 e.Offsets-B#1/19 s.Offset#1/23 e.Offsets-E#1/21 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Table#1 as range 9
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.Name#1 as range 13
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::repeated_stvar_left( vm, context[23], context[17], context[21], context[22] ) )
        continue;
      // closed e.Offsets-E#1 as range 21
      //DEBUG: e.Table#1: 9
      //DEBUG: s.Offset#1: 17
      //DEBUG: s.Type#1: 18
      //DEBUG: e.Name#1: 13
      //DEBUG: e.Offsets-B#1: 19
      //DEBUG: e.Offsets-E#1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/15 s.Offset#1/17 s.Type#1/18 e.Name#1/13 )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckupFunctionStarts/4 } Tile{ AsIs: e.Table#1/9 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Offsets-B#1/19 } Tile{ AsIs: e.Offsets-E#1/21 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[7], context[7] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckupFunctionStarts/4 (/7 )/8 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckupFunctionStarts/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckupFunctionStarts/4 e.Table#1/2 (/7 e.Offsets#1/5 )/8 >/1
  // closed e.Table#1 as range 2
  // closed e.Offsets#1 as range 5
  //DEBUG: e.Table#1: 2
  //DEBUG: e.Offsets#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckupFunctionStarts/4 e.Table#1/2 (/7 e.Offsets#1/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fail/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fail]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckupFunctionStarts("CheckupFunctionStarts", COOKIE1_, COOKIE2_, func_CheckupFunctionStarts);


static refalrts::FnResult func_CheckupEntries(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & CheckupEntries/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & CheckupEntries/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & CheckupEntries/4 (/15 s.new#3/17 s.new#4/18 e.new#5/13 )/16 e.new#6/9 (/7 e.new#7/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new#6 as range 9
    // closed e.new#7 as range 11
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.new#5 as range 13
    do {
      // </0 & CheckupEntries/4 (/15 s.Offset#1/17 # Entry/18 e.Name#1/19 )/16 e.Table#1/21 (/7 e.Entries-B#1/25 (/31 e.Name#1/33 s.Offset#1/35 )/32 e.Entries-E#1/27 )/8 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[9];
      context[22] = context[10];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Entry], context[18] ) )
        continue;
      // closed e.Name#1 as range 19
      // closed e.Table#1 as range 21
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[23];
        context[28] = context[24];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[19], context[20], context[29], context[30] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[35], context[17], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        // closed e.Entries-E#1 as range 27
        //DEBUG: s.Offset#1: 17
        //DEBUG: e.Name#1: 19
        //DEBUG: e.Table#1: 21
        //DEBUG: e.Entries-B#1: 25
        //DEBUG: e.Entries-E#1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 s.Offset#1/17 # Entry/18 e.Name#1/19 )/16 {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} e.Name#1/33 s.Offset#1/35 )/32 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckupEntries/4 } Tile{ AsIs: e.Table#1/21 } Tile{ AsIs: (/31 } Tile{ AsIs: e.Entries-B#1/25 } Tile{ AsIs: e.Entries-E#1/27 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[31], context[31] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckupEntries/4 (/15 s.Offset#1/17 # Local/18 e.Name#1/19 )/16 e.Table#1/21 (/7 e.Entries#1/23 )/8 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_Local], context[18] ) )
      continue;
    // closed e.Name#1 as range 19
    // closed e.Table#1 as range 21
    // closed e.Entries#1 as range 23
    //DEBUG: s.Offset#1: 17
    //DEBUG: e.Name#1: 19
    //DEBUG: e.Table#1: 21
    //DEBUG: e.Entries#1: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & CheckupEntries/4 (/15 s.Offset#1/17 # Local/18 e.Name#1/19 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckupEntries/16 AsIs: e.Table#1/21 AsIs: (/7 AsIs: e.Entries#1/23 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::reinit_name(context[16], functions[efunc_CheckupEntries]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckupEntries/4 (/7 )/8 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckupEntries/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckupEntries/4 e.Table#1/2 (/7 e.Entries#1/5 )/8 >/1
  // closed e.Table#1 as range 2
  // closed e.Entries#1 as range 5
  //DEBUG: e.Table#1: 2
  //DEBUG: e.Entries#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckupEntries/4 e.Table#1/2 (/7 e.Entries#1/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fail/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fail]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckupEntries("CheckupEntries", COOKIE1_, COOKIE2_, func_CheckupEntries);


static refalrts::FnResult func_gen_ResolveFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveFunctions=1/4 (/7 e.Table#2/5 )/8 e.Code#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Table#2 as range 5
  // closed e.Code#2 as range 2
  //DEBUG: e.Table#2: 5
  //DEBUG: e.Code#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveFunctions=1/4 (/7 e.Table#2/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Code#2/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveFunctions_A1("ResolveFunctions=1", COOKIE1_, COOKIE2_, func_gen_ResolveFunctions_A1);


static refalrts::FnResult func_gen_ResolveFunctions_A1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveFunctions=1\1=1/4 e.Function#3/2 (/7 e.Table#3/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Function#3 as range 2
  // closed e.Table#3 as range 5
  //DEBUG: e.Function#3: 2
  //DEBUG: e.Table#3: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Table#3/5 AsIs: )/8 HalfReuse: (/1 } Tile{ AsIs: e.Function#3/2 } Tile{ HalfReuse: )/4 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[1]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[1], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveFunctions_A1L1A1("ResolveFunctions=1\\1=1", COOKIE1_, COOKIE2_, func_gen_ResolveFunctions_A1L1A1);


static refalrts::FnResult func_gen_ResolveFunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ResolveFunctions=1\1/4 (/7 e.Table#2/5 )/8 (/11 e.Function#2/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Table#2 as range 5
  // closed e.Function#2 as range 9
  //DEBUG: e.Table#2: 5
  //DEBUG: e.Function#2: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveFunctions=1\1=1/4 } Tile{ HalfReuse: </12 } & ResolveFunctions-Body/13 Tile{ AsIs: e.Function#2/9 } Tile{ AsIs: (/7 AsIs: e.Table#2/5 AsIs: )/8 HalfReuse: >/11 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_ResolveFunctionsm_Body]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1L1A1]);
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_close_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[13] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveFunctions_A1L1("ResolveFunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_ResolveFunctions_A1L1);


static refalrts::FnResult func_ResolveFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ResolveFunctions/4 e.Code#1/2 (/7 e.Table#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Code#1 as range 2
  // closed e.Table#1 as range 5
  //DEBUG: e.Code#1: 2
  //DEBUG: e.Table#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveFunctions=1/4 } </9 & MapAccum/10 & ResolveFunctions=1\1/11 Tile{ AsIs: (/7 AsIs: e.Table#1/5 AsIs: )/8 } Tile{ AsIs: e.Code#1/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_MapAccum]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_ResolveFunctions_A1L1]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveFunctions("ResolveFunctions", COOKIE1_, COOKIE2_, func_ResolveFunctions);


static refalrts::FnResult func_ResolveFunctionsm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & ResolveFunctions-Body/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & ResolveFunctions-Body/4 e.new#1/2 (/7 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 2
  // closed e.new#2 as range 5
  do {
    // </0 & ResolveFunctions-Body/4 e.Code-B#1/13 (/21 s.Offset#1/23 # ACT1/24 s.FuncOffset#1/25 )/22 e.Code-E#1/15 (/7 e.Functions-B#1/26 (/32 s.FuncOffset#1/34 s.Type#1/35 e.Name#1/30 )/33 e.Functions-E#1/28 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[15], context[16] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Code-E#1 as range 15
      if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
        continue;
      context[24] = refalrts::ident_left( identifiers[ident_ACT1], context[19], context[20] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      context[26] = 0;
      context[27] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[28] = context[17];
        context[29] = context[18];
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
        if( ! context[32] )
          continue;
        refalrts::bracket_pointers(context[32], context[33]);
        if( ! refalrts::repeated_stvar_left( vm, context[34], context[25], context[30], context[31] ) )
          continue;
        // closed e.Functions-E#1 as range 28
        if( ! refalrts::svar_left( context[35], context[30], context[31] ) )
          continue;
        // closed e.Name#1 as range 30
        //DEBUG: e.Code-B#1: 13
        //DEBUG: e.Code-E#1: 15
        //DEBUG: s.Offset#1: 23
        //DEBUG: s.FuncOffset#1: 25
        //DEBUG: e.Functions-B#1: 26
        //DEBUG: e.Functions-E#1: 28
        //DEBUG: s.Type#1: 35
        //DEBUG: e.Name#1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.FuncOffset#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Code-B#1/13 } Tile{ AsIs: (/21 AsIs: s.Offset#1/23 AsIs: # ACT1/24 } e.Name#1/30/36 Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & ResolveFunctions-Body/22 AsIs: e.Code-E#1/15 AsIs: (/7 } Tile{ AsIs: (/32 AsIs: s.FuncOffset#1/34 AsIs: s.Type#1/35 AsIs: e.Name#1/30 AsIs: )/33 } Tile{ AsIs: e.Functions-B#1/26 } Tile{ AsIs: e.Functions-E#1/28 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[36], context[37], context[30], context[31]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[22], functions[efunc_ResolveFunctionsm_Body]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::link_brackets( context[21], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[22], context[7] );
        res = refalrts::splice_evar( res, context[0], context[0] );
        res = refalrts::splice_evar( res, context[4], context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[26], context[27], context[17], context[18] ) );
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveFunctions-Body/4 e.Code#1/2 (/7 e.Functions#1/5 )/8 >/1
  // closed e.Code#1 as range 2
  // closed e.Functions#1 as range 5
  //DEBUG: e.Code#1: 2
  //DEBUG: e.Functions#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveFunctions-Body/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Code#1/2 } Tile{ AsIs: (/7 AsIs: e.Functions#1/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveFunctionsm_Body("ResolveFunctions-Body", COOKIE1_, COOKIE2_, func_ResolveFunctionsm_Body);


static refalrts::FnResult func_gen_DecodeCommands_S28A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$28=1/4 s.Offset#1/5 s.Count#1/6 (/9 e.Chars#2/7 )/10 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars#2 as range 7
  // closed e.Bytes#2 as range 2
  //DEBUG: s.Offset#1: 5
  //DEBUG: s.Count#1: 6
  //DEBUG: e.Chars#2: 7
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # SYMS/13 Tile{ AsIs: s.Count#1/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars#2/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } </19 & Add/20 2/21 s.Count#1/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_SYMS]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S28A1("DecodeCommands$28=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S28A1);


static refalrts::FnResult func_gen_DecodeCommands_S29A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$29=1/4 s.Offset#1/5 s.Count#1/6 (/9 e.Chars#2/7 )/10 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars#2 as range 7
  // closed e.Bytes#2 as range 2
  //DEBUG: s.Offset#1: 5
  //DEBUG: s.Count#1: 6
  //DEBUG: e.Chars#2: 7
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # SYMSR/13 Tile{ AsIs: s.Count#1/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars#2/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } </19 & Add/20 2/21 s.Count#1/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_SYMSR]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S29A1("DecodeCommands$29=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S29A1);


static refalrts::FnResult func_gen_DecodeCommands_S30A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$30=1/4 s.Offset#1/5 s.Count#1/6 (/9 e.Chars#2/7 )/10 e.Bytes#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars#2 as range 7
  // closed e.Bytes#2 as range 2
  //DEBUG: s.Offset#1: 5
  //DEBUG: s.Count#1: 6
  //DEBUG: e.Chars#2: 7
  //DEBUG: e.Bytes#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # TEXT/13 Tile{ AsIs: s.Count#1/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars#2/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } </19 & Add/20 2/21 s.Count#1/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes#2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_TEXT]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S30A1("DecodeCommands$30=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S30A1);


static refalrts::FnResult func_DecodeCommands(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DecodeCommands/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DecodeCommands/4 s.new#1/5 e.new#2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & DecodeCommands/4 s.new#3/5 s.new#4/8 e.new#5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new#5 as range 6
    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 1/8 e.Name#1/11 0/15 e.Bytes#1/13 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 1UL, context[8] ) )
        continue;
      context[11] = 0;
      context[12] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[13] = context[9];
        context[14] = context[10];
        context[15] = refalrts::number_left( 0UL, context[13], context[14] );
        if( ! context[15] )
          continue;
        // closed e.Bytes#1 as range 13
        //DEBUG: s.Offset#1: 5
        //DEBUG: e.Name#1: 11
        //DEBUG: e.Bytes#1: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/16 s.Offset#1/5/17 # ACT_EXTRN/18 </19 & Chr/20 Tile{ AsIs: e.Name#1/11 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 5/8 } Tile{ HalfReuse: >/15 AsIs: e.Bytes#1/13 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::copy_stvar(vm, context[17], context[5]);
        refalrts::alloc_ident(vm, context[18], identifiers[ident_ACTu_EXTRN]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 5UL);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[22] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 2/8 s.1#1/11 s.2#1/12 s.3#1/13 s.4#1/14 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 2UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.1#1: 11
      //DEBUG: s.2#1: 12
      //DEBUG: s.3#1: 13
      //DEBUG: s.4#1: 14
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/15 s.Offset#1/5/16 # ACT1/17 </18 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/12 AsIs: s.3#1/13 AsIs: s.4#1/14 } >/19 )/20 </21 & DecodeCommands/22 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/23 >/24 Tile{ AsIs: e.Bytes#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::copy_stvar(vm, context[16], context[5]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_ACT1]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[23], 5UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 3/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 3UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # BL/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BL]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 4/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 4UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # BLR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BLR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 5/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 5UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # BR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 6/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 6UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # CL/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_CL]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 e.new#9/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new#9 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 7/8 s.Char#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 7UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Char#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # SYM/16 s.Char#1/11/17 </18 & Chr/19 Tile{ AsIs: s.Char#1/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_SYM]);
        refalrts::copy_stvar(vm, context[17], context[11]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[24], context[24] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[20], context[23] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 8/8 s.Char#1/11 e.Bytes#1/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 8UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 12
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.Char#1: 11
      //DEBUG: e.Bytes#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # SYMR/16 s.Char#1/11/17 </18 & Chr/19 Tile{ AsIs: s.Char#1/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::copy_stvar(vm, context[15], context[5]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_SYMR]);
      refalrts::copy_stvar(vm, context[17], context[11]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[24], context[24] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_evar( res, context[11], context[11] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 10/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 10UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # EMP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_EMP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 s.new#9/12 s.new#10/13 s.new#11/14 e.new#12/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.new#12 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 13/8 s.1#1/11 s.2#1/12 s.3#1/13 s.4#1/14 e.Bytes#1/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::number_term( 13UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 15
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 12
        //DEBUG: s.3#1: 13
        //DEBUG: s.4#1: 14
        //DEBUG: e.Bytes#1: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/17 s.Offset#1/5/18 # MULE/19 </20 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/12 AsIs: s.3#1/13 AsIs: s.4#1/14 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/25 >/26 Tile{ AsIs: e.Bytes#1/15 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[17]);
        refalrts::copy_stvar(vm, context[18], context[5]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_MULE]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[25], 5UL);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[22] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        res = refalrts::splice_evar( res, context[17], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 14/8 s.1#1/11 s.2#1/12 s.3#1/13 s.4#1/14 e.Bytes#1/15 >/1
      context[15] = context[9];
      context[16] = context[10];
      if( ! refalrts::number_term( 14UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 15
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.1#1: 11
      //DEBUG: s.2#1: 12
      //DEBUG: s.3#1: 13
      //DEBUG: s.4#1: 14
      //DEBUG: e.Bytes#1: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/17 s.Offset#1/5/18 # MULS/19 </20 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/12 AsIs: s.3#1/13 AsIs: s.4#1/14 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/25 >/26 Tile{ AsIs: e.Bytes#1/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[17]);
      refalrts::copy_stvar(vm, context[18], context[5]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_MULS]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[25], 5UL);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[22] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 16/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 16UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PLEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 17/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 17UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PLENS/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLENS]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 18/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 18UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PLENP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLENP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 19/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 19UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PS/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PS]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 20/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 20UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PSR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PSR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 e.new#9/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new#9 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 23/8 s.No#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 23UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.No#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # OEXP/16 Tile{ AsIs: s.No#1/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OEXP]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 24/8 s.No#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 24UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.No#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # OEXPR/16 Tile{ AsIs: s.No#1/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OEXPR]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 25/8 s.No#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 25UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.No#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # OVSYM/16 Tile{ AsIs: s.No#1/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OVSYM]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 26/8 s.No#1/11 e.Bytes#1/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 26UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 12
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.No#1: 11
      //DEBUG: e.Bytes#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # OVSYMR/16 Tile{ AsIs: s.No#1/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::copy_stvar(vm, context[15], context[5]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_OVSYMR]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[20], context[20] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[11], context[11] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 27/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 27UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # TERM/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_TERM]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 28/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 28UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # TERMR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_TERMR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 e.new#9/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new#9 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 29/8 s.Number#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 29UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Number#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # RDY/16 Tile{ AsIs: s.Number#1/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_RDY]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[20], context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 34/8 s.L1#1/11 s.L2#1/14 s.L3#1/15 s.L4#1/16 s.R1#1/17 s.R2#1/18 s.R3#1/19 s.R4#1/20 e.Bytes#1/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 34UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[19], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[20], context[12], context[13] ) )
        continue;
      // closed e.Bytes#1 as range 12
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.L1#1: 11
      //DEBUG: s.L2#1: 14
      //DEBUG: s.L3#1: 15
      //DEBUG: s.L4#1: 16
      //DEBUG: s.R1#1: 17
      //DEBUG: s.R2#1: 18
      //DEBUG: s.R3#1: 19
      //DEBUG: s.R4#1: 20
      //DEBUG: e.Bytes#1: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21 s.Offset#1/5/22 # SETB/23 </24 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.L1#1/11 AsIs: s.L2#1/14 AsIs: s.L3#1/15 AsIs: s.L4#1/16 } >/25 </26 & MakeDWord/27 Tile{ AsIs: s.R1#1/17 AsIs: s.R2#1/18 AsIs: s.R3#1/19 AsIs: s.R4#1/20 } >/28 )/29 </30 & DecodeCommands/31 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 9/32 >/33 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::copy_stvar(vm, context[22], context[5]);
      refalrts::alloc_ident(vm, context[23], identifiers[ident_SETB]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_MakeDWord]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[32], 9UL);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 35/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 35UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # LEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_LEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 36/8 s.Char#1/11 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 36UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.Char#1: 11
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/12 s.Offset#1/5/13 # LENS/14 </15 & Chr/16 Tile{ AsIs: s.Char#1/11 } >/17 )/18 </19 & DecodeCommands/20 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/21 Tile{ AsIs: e.Bytes#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::copy_stvar(vm, context[13], context[5]);
      refalrts::alloc_ident(vm, context[14], identifiers[ident_LENS]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[21] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[11], context[11] );
      res = refalrts::splice_evar( res, context[12], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 37/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 37UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # LENP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_LENP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 e.new#9/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new#9 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 39/8 s.Count#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 39UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Count#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$28=1/4 AsIs: s.Offset#1/5 HalfReuse: s.Count1 #11/8 } </14 & First/15 Tile{ AsIs: s.Count#1/11 AsIs: e.Bytes#1/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S28A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 40/8 s.Count#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 40UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Count#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$29=1/4 AsIs: s.Offset#1/5 HalfReuse: s.Count1 #11/8 } </14 & First/15 Tile{ AsIs: s.Count#1/11 AsIs: e.Bytes#1/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S29A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 41/8 s.Count#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 41UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Count#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$30=1/4 AsIs: s.Offset#1/5 HalfReuse: s.Count1 #11/8 } </14 & First/15 Tile{ AsIs: s.Count#1/11 AsIs: e.Bytes#1/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S30A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 43/8 s.Char#1/11 e.Bytes#1/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 43UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 12
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.Char#1: 11
        //DEBUG: e.Bytes#1: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset#1/5/15 # NS/16 s.Char#1/11/17 </18 & Chr/19 Tile{ AsIs: s.Char#1/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[5]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_NS]);
        refalrts::copy_stvar(vm, context[17], context[11]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[24], context[24] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[20], context[23] );
        res = refalrts::splice_evar( res, context[11], context[11] );
        res = refalrts::splice_evar( res, context[14], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.new#10/5 s.new#11/8 s.new#12/11 s.new#13/14 s.new#14/15 s.new#15/16 e.new#16/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      // closed e.new#16 as range 12
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 45/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 45UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # TPLE/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_TPLE]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 46/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 46UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # TPLS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_TPLS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 47/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::number_term( 47UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 17
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.1#1: 11
      //DEBUG: s.2#1: 14
      //DEBUG: s.3#1: 15
      //DEBUG: s.4#1: 16
      //DEBUG: e.Bytes#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # TRAN/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::copy_stvar(vm, context[20], context[5]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_TRAN]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[27], 5UL);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 48/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 48UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # VSYM/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_VSYM]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 49/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 49UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # VSYMR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_VSYMR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 50/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 50UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # OUTEST/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_OUTEST]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 51/8 s.1#1/11 s.2#1/12 s.3#1/13 s.4#1/14 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 51UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.1#1: 11
      //DEBUG: s.2#1: 12
      //DEBUG: s.3#1: 13
      //DEBUG: s.4#1: 14
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/15 s.Offset#1/5/16 # ECOND/17 </18 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/12 AsIs: s.3#1/13 AsIs: s.4#1/14 } >/19 )/20 </21 & DecodeCommands/22 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/23 >/24 Tile{ AsIs: e.Bytes#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::copy_stvar(vm, context[16], context[5]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_ECOND]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[23], 5UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 52/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 52UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # POPVF/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_POPVF]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 53/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 53UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # PUSHVF/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PUSHVF]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset#1/5 54/8 e.Bytes#1/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::number_term( 54UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 9
      //DEBUG: s.Offset#1: 5
      //DEBUG: e.Bytes#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset#1/5/12 # STLEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset#1/5 HalfReuse: >/8 AsIs: e.Bytes#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[5]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_STLEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands/4 s.new#6/5 s.new#7/8 s.new#8/11 e.new#9/9 >/1
    context[9] = context[6];
    context[10] = context[7];
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new#9 as range 9
    do {
      // </0 & DecodeCommands/4 s.new#10/5 s.new#11/8 s.new#12/11 s.new#13/14 s.new#14/15 s.new#15/16 e.new#16/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      // closed e.new#16 as range 12
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 55/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 55UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # CSYM/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CSYM]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 56/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 56UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # CSYMR/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CSYMR]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 57/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 57UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # NSYM/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NSYM]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 58/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 58UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # NSYMR/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NSYMR]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 59/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 59UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # NCS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NCS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 60/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 60UL, context[8] ) )
          continue;
        // closed e.Bytes#1 as range 17
        //DEBUG: s.Offset#1: 5
        //DEBUG: s.1#1: 11
        //DEBUG: s.2#1: 14
        //DEBUG: s.3#1: 15
        //DEBUG: s.4#1: 16
        //DEBUG: e.Bytes#1: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # NNS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[5]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NNS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 100/8 s.1#1/11 s.2#1/14 s.3#1/15 s.4#1/16 e.Bytes#1/17 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::number_term( 100UL, context[8] ) )
        continue;
      // closed e.Bytes#1 as range 17
      //DEBUG: s.Offset#1: 5
      //DEBUG: s.1#1: 11
      //DEBUG: s.2#1: 14
      //DEBUG: s.3#1: 15
      //DEBUG: s.4#1: 16
      //DEBUG: e.Bytes#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 s.Offset#1/5/20 # BUILT_IN/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1#1/11 AsIs: s.2#1/14 AsIs: s.3#1/15 AsIs: s.4#1/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 5/27 >/28 Tile{ AsIs: e.Bytes#1/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::copy_stvar(vm, context[20], context[5]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_BUILTu_IN]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[27], 5UL);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new#10/5 s.new#11/8 0/11 e.new#12/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 0UL, context[11] ) )
        continue;
      // closed e.new#12 as range 12
      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 102/8 0/11 e.Name#1/16 0/20 e.Bytes#1/18 >/1
        context[14] = context[12];
        context[15] = context[13];
        if( ! refalrts::number_term( 102UL, context[8] ) )
          continue;
        context[16] = 0;
        context[17] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[18] = context[14];
          context[19] = context[15];
          context[20] = refalrts::number_left( 0UL, context[18], context[19] );
          if( ! context[20] )
            continue;
          // closed e.Bytes#1 as range 18
          //DEBUG: s.Offset#1: 5
          //DEBUG: e.Name#1: 16
          //DEBUG: e.Bytes#1: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/21 s.Offset#1/5/22 # L/23 </24 & Chr/25 Tile{ AsIs: e.Name#1/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 HalfReuse: </8 HalfReuse: & Len/11 } 102/30 0/31 e.Name#1/16/32 >/34 Tile{ HalfReuse: >/20 AsIs: e.Bytes#1/18 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::copy_stvar(vm, context[22], context[5]);
          refalrts::alloc_ident(vm, context[23], identifiers[ident_L]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
          refalrts::alloc_number(vm, context[30], 102UL);
          refalrts::alloc_number(vm, context[31], 0UL);
          refalrts::copy_evar(vm, context[32], context[33], context[16], context[17]);
          refalrts::alloc_close_call(vm, context[34]);
          refalrts::update_name(context[4], functions[efunc_Add]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_Len]);
          refalrts::reinit_close_call(context[20]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[20];
          res = refalrts::splice_evar( res, context[30], context[34] );
          res = refalrts::splice_evar( res, context[0], context[11] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[17] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset#1/5 103/8 0/11 e.Name#1/16 0/20 e.Bytes#1/18 >/1
        context[14] = context[12];
        context[15] = context[13];
        if( ! refalrts::number_term( 103UL, context[8] ) )
          continue;
        context[16] = 0;
        context[17] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[18] = context[14];
          context[19] = context[15];
          context[20] = refalrts::number_left( 0UL, context[18], context[19] );
          if( ! context[20] )
            continue;
          // closed e.Bytes#1 as range 18
          //DEBUG: s.Offset#1: 5
          //DEBUG: e.Name#1: 16
          //DEBUG: e.Bytes#1: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/21 s.Offset#1/5/22 # E/23 </24 & Chr/25 Tile{ AsIs: e.Name#1/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 HalfReuse: </8 HalfReuse: & Len/11 } 103/30 0/31 e.Name#1/16/32 >/34 Tile{ HalfReuse: >/20 AsIs: e.Bytes#1/18 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::copy_stvar(vm, context[22], context[5]);
          refalrts::alloc_ident(vm, context[23], identifiers[ident_E]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
          refalrts::alloc_number(vm, context[30], 103UL);
          refalrts::alloc_number(vm, context[31], 0UL);
          refalrts::copy_evar(vm, context[32], context[33], context[16], context[17]);
          refalrts::alloc_close_call(vm, context[34]);
          refalrts::update_name(context[4], functions[efunc_Add]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_Len]);
          refalrts::reinit_close_call(context[20]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[20];
          res = refalrts::splice_evar( res, context[30], context[34] );
          res = refalrts::splice_evar( res, context[0], context[11] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_evar( res, context[16], context[17] );
          res = refalrts::splice_evar( res, context[21], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset#1/5 104/8 0/11 e.Name#1/16 0/20 e.Bytes#1/18 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::number_term( 104UL, context[8] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::number_left( 0UL, context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Bytes#1 as range 18
        //DEBUG: s.Offset#1: 5
        //DEBUG: e.Name#1: 16
        //DEBUG: e.Bytes#1: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/21 s.Offset#1/5/22 # LABEL/23 </24 & Chr/25 Tile{ AsIs: e.Name#1/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 HalfReuse: </8 HalfReuse: & Len/11 } 103/30 0/31 e.Name#1/16/32 >/34 Tile{ HalfReuse: >/20 AsIs: e.Bytes#1/18 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::copy_stvar(vm, context[22], context[5]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_LABEL]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[30], 103UL);
        refalrts::alloc_number(vm, context[31], 0UL);
        refalrts::copy_evar(vm, context[32], context[33], context[16], context[17]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_Len]);
        refalrts::reinit_close_call(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[21], context[27] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[30], context[34] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[21], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands/4 s.Offset#1/5 105/8 s.L1#1/11 s.L2#1/14 s.L3#1/15 s.L4#1/16 s.R1#1/17 s.R2#1/18 s.R3#1/19 s.R4#1/20 e.Bytes#1/12 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::number_term( 105UL, context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[19], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[12], context[13] ) )
      continue;
    // closed e.Bytes#1 as range 12
    //DEBUG: s.Offset#1: 5
    //DEBUG: s.L1#1: 11
    //DEBUG: s.L2#1: 14
    //DEBUG: s.L3#1: 15
    //DEBUG: s.L4#1: 16
    //DEBUG: s.R1#1: 17
    //DEBUG: s.R2#1: 18
    //DEBUG: s.R3#1: 19
    //DEBUG: s.R4#1: 20
    //DEBUG: e.Bytes#1: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/21 s.Offset#1/5/22 # BUILT_IN1/23 </24 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.L1#1/11 AsIs: s.L2#1/14 AsIs: s.L3#1/15 AsIs: s.L4#1/16 } >/25 </26 & MakeDWord/27 Tile{ AsIs: s.R1#1/17 AsIs: s.R2#1/18 AsIs: s.R3#1/19 AsIs: s.R4#1/20 } >/28 )/29 </30 & DecodeCommands/31 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset#1/5 } 9/32 >/33 Tile{ AsIs: e.Bytes#1/12 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_stvar(vm, context[22], context[5]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_BUILTu_IN1]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_DecodeCommands]);
    refalrts::alloc_number(vm, context[32], 9UL);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[29] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecodeCommands/4 s.Offset#1/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Offset#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecodeCommands/4 s.Offset#1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Offset1 #5/1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands/4 s.Offset#1/5 e.Bytes#1/2 >/1
  // closed e.Bytes#1 as range 2
  //DEBUG: s.Offset#1: 5
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Offset#1/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: s.Offset1 #5/4 } # RawBytes/6 Tile{ AsIs: e.Bytes#1/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_RawBytes]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_svar( context[4], context[5] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecodeCommands("DecodeCommands", COOKIE1_, COOKIE2_, func_DecodeCommands);


static refalrts::FnResult func_gen_Len_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Len=1/4 s.Len#2/5 e.String#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.String#2 as range 2
  //DEBUG: s.Len#2: 5
  //DEBUG: e.String#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Len=1/4 s.Len#2/5 e.String#2/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Len2 #5/1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Len_A1("Len=1", COOKIE1_, COOKIE2_, func_gen_Len_A1);


static refalrts::FnResult func_Len(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Len/4 e.String#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Len=1/6 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.String#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Len_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Lenw]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Len("Len", COOKIE1_, COOKIE2_, func_Len);


static refalrts::FnResult func_DEBUG(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DEBUG/4 e.Bytes#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Bytes#1 as range 2
  //DEBUG: e.Bytes#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Prout/6"all bytes\n"/7 e.Bytes#1/2/9 >/11 </12 & Prout/13 Tile{ AsIs: </0 Reuse: & Chr/4 AsIs: e.Bytes#1/2 AsIs: >/1 } >/14 </15 & Prout/16"all strings"/17 >/19 </20 & AllString/21 </22 & Chr/23 e.Bytes#1/2/24 >/26 >/27 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[7], context[8], "all bytes\n", 10);
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Prout]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[17], context[18], "all strings", 11);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_AllString]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Chr]);
  refalrts::copy_evar(vm, context[24], context[25], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_Chr]);
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[27] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DEBUG("DEBUG", COOKIE1_, COOKIE2_, func_DEBUG);


static refalrts::FnResult func_AllString(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & AllString/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & AllString/4 e.String#1/7 '\000'/11 e.Tail#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::char_left( '\000', context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Tail#1 as range 9
      //DEBUG: e.String#1: 7
      //DEBUG: e.Tail#1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 AsIs: e.String#1/7 HalfReuse: >/11 } </12 & Prout/13 </14 & Ord/15 e.String#1/7/16 >/18 0/19 >/20 </21 & AllString/22 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[13], functions[efunc_Prout]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Ord]);
      refalrts::copy_evar(vm, context[16], context[17], context[7], context[8]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_AllString]);
      refalrts::update_name(context[4], functions[efunc_Prout]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[12], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllString/4 e.String#1/2 >/1
  // closed e.String#1 as range 2
  //DEBUG: e.String#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 AsIs: e.String#1/2 AsIs: >/1 } </5 & Prout/6 </7 & Ord/8 e.String#1/2/9 >/11 >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Prout]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_Ord]);
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Prout]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllString("AllString", COOKIE1_, COOKIE2_, func_AllString);


static refalrts::FnResult func_gen_DecompileFunction_S3A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DecompileFunction$3=3/4 (/7 e.MaybeEntry#3/5 )/8 (/11 e.Name#1/9 )/12 e.Lines#4/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.MaybeEntry#3 as range 5
  // closed e.Name#1 as range 9
  // closed e.Lines#4 as range 2
  //DEBUG: e.MaybeEntry#3: 5
  //DEBUG: e.Name#1: 9
  //DEBUG: e.Lines#4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.MaybeEntry#3/5 HalfReuse: </8 HalfReuse: & FormatWord/11 AsIs: e.Name#1/9 HalfReuse: >/12 } Tile{ HalfReuse: ' '/0 } '{'/13 )/14 Tile{ AsIs: e.Lines#4/2 } (/15 '}'/16 )/17 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_char(vm, context[13], '{');
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_char(vm, context[16], '}');
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[11], functions[efunc_FormatWord]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[15], context[17] );
  refalrts::link_brackets( context[7], context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[0] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A3("DecompileFunction$3=3", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A3);


static refalrts::FnResult func_gen_DecompileFunction_S3A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DecompileFunction$3=2/4 (/7 e.Name#1/5 )/8 (/11 e.Segments#2/9 )/12 e.MaybeEntry#3/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Name#1 as range 5
  // closed e.Segments#2 as range 9
  // closed e.MaybeEntry#3 as range 2
  //DEBUG: e.Name#1: 5
  //DEBUG: e.Segments#2: 9
  //DEBUG: e.MaybeEntry#3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=3/4 AsIs: (/7 } Tile{ AsIs: e.MaybeEntry#3/2 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Name#1/5 } Tile{ AsIs: )/12 } </13 & CollectSegments/14 Tile{ AsIs: e.Segments#2/9 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_CollectSegments]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[12], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A2("DecompileFunction$3=2", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A2);


static refalrts::FnResult func_gen_DecompileFunction_S3A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & DecompileFunction$3=2:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DecompileFunction$3=2:1/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DecompileFunction$3=2:1/4 # L/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_L], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecompileFunction$3=2:1/4 # L/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction$3=2:1/4 # E/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_E], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'N'/5 HalfReuse: 'T'/1 }"RY "/6 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "RY ", 3);
  refalrts::reinit_char(context[0], '$');
  refalrts::reinit_char(context[4], 'E');
  refalrts::reinit_char(context[5], 'N');
  refalrts::reinit_char(context[1], 'T');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A2B1("DecompileFunction$3=2:1", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A2B1);


static refalrts::FnResult func_gen_DecompileFunction_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecompileFunction$3=1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DecompileFunction$3=1/4 (/7 e.new#1/5 )/8 s.new#2/9 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & DecompileFunction$3=1/4 (/7 e.Name#1/10 )/8 # L/9 e.Segments#2/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_L], context[9] ) )
      continue;
    // closed e.Name#1 as range 10
    // closed e.Segments#2 as range 12
    //DEBUG: e.Name#1: 10
    //DEBUG: e.Segments#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </14 & DecompileFunction$3=3/15 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Name#1/10 AsIs: )/8 HalfReuse: </9 } & CollectSegments/16 Tile{ AsIs: e.Segments#2/12 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_DecompileFunction_S3A3]);
    refalrts::alloc_name(vm, context[16], functions[efunc_CollectSegments]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[17] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[16], context[16] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecompileFunction$3=1/4 (/7 e.Name#1/10 )/8 # E/9 e.Segments#2/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_E], context[9] ) )
      continue;
    // closed e.Name#1 as range 10
    // closed e.Segments#2 as range 12
    //DEBUG: e.Name#1: 10
    //DEBUG: e.Segments#2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </14 & DecompileFunction$3=3/15 (/16"$ENTRY"/17 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Name#1/10 AsIs: )/8 HalfReuse: </9 } & CollectSegments/19 Tile{ AsIs: e.Segments#2/12 } >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_DecompileFunction_S3A3]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_chars(vm, context[17], context[18], "$ENTRY", 6);
    refalrts::alloc_name(vm, context[19], functions[efunc_CollectSegments]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_char(context[0], ' ');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[20] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[19], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction$3=1/4 (/7 e.Name#1/5 )/8 s.DeclCommand#1/9 e.Segments#2/2 >/1
  // closed e.Name#1 as range 5
  // closed e.Segments#2 as range 2
  //DEBUG: s.DeclCommand#1: 9
  //DEBUG: e.Name#1: 5
  //DEBUG: e.Segments#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=2/4 AsIs: (/7 AsIs: e.Name#1/5 AsIs: )/8 } (/10 Tile{ AsIs: e.Segments#2/2 } )/11 </12 & DecompileFunction$3=2:1*2/13 Tile{ AsIs: s.DeclCommand#1/9 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_DecompileFunction_S3A2B1D2]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A1("DecompileFunction$3=1", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A1);


static refalrts::FnResult func_DecompileFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DecompileFunction/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DecompileFunction/4 (/7 t.new#1/9 e.new#2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 5
  do {
    // </0 & DecompileFunction/4 (/7 t.new#3/9 (/15 e.new#4/13 s.new#5/19 s.new#6/18 s.new#7/17 )/16 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_right( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_right( context[18], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[13], context[14] ) )
      continue;
    // closed e.new#4 as range 13
    do {
      // </0 & DecompileFunction/4 (/7 t.FuncName#1/9 (/15 s.Offset#1/19 # BUILT_IN/18 s.No#1/17 )/16 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: t.FuncName#1: 9
      //DEBUG: s.Offset#1: 19
      //DEBUG: s.No#1: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DecompileFunction/4 (/7 t.FuncName#1/9 (/15 s.Offset#1/19 # BUILT_IN/18 s.No#1/17 )/16 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecompileFunction/4 (/7 t.FuncName#1/9 (/15 s.Offset#1/22 # BUILT_IN1/19 s.No1#1/18 s.No2#1/17 )/16 )/8 >/1
    context[20] = context[13];
    context[21] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN1], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: t.FuncName#1: 9
    //DEBUG: s.No1#1: 18
    //DEBUG: s.No2#1: 17
    //DEBUG: s.Offset#1: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecompileFunction/4 (/7 t.FuncName#1/9 (/15 s.Offset#1/22 # BUILT_IN1/19 s.No1#1/18 s.No2#1/17 )/16 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction/4 (/7 (/9 s.Offset#1/13 s.DeclCommand#1/14 e.Name#1/11 )/10 e.Commands#1/5 )/8 >/1
  context[11] = 0;
  context[12] = 0;
  if( ! refalrts::brackets_term( context[11], context[12], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Commands#1 as range 5
  if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name#1 as range 11
  //DEBUG: e.Commands#1: 5
  //DEBUG: s.Offset#1: 13
  //DEBUG: s.DeclCommand#1: 14
  //DEBUG: e.Name#1: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset#1/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=1/4 AsIs: (/7 } Tile{ AsIs: e.Name#1/11 } )/15 Tile{ AsIs: s.DeclCommand#1/14 } </16 & Decompile-Pattern-Hole/17 0/18 3/19 Tile{ AsIs: (/9 } 1/20 )/21 (/22 2/23 )/24 (/25 Tile{ AsIs: )/10 AsIs: e.Commands#1/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::alloc_number(vm, context[18], 0UL);
  refalrts::alloc_number(vm, context[19], 3UL);
  refalrts::alloc_number(vm, context[20], 1UL);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_number(vm, context[23], 2UL);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A1]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[25], context[10] );
  refalrts::link_brackets( context[22], context[24] );
  refalrts::link_brackets( context[9], context[21] );
  refalrts::link_brackets( context[7], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[20], context[25] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[14], context[14] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecompileFunction("DecompileFunction", COOKIE1_, COOKIE2_, func_DecompileFunction);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Decompile-Pattern-Hole$7=2/4 s.Level#1/5 s.Top#2/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Chars#1/11 )/14 (/17 e.Pattern-R#1/15 )/18 (/21 e.Vars#1/19 )/22 (/25 e.Commands#1/23 )/26 s.L#3/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Chars#1 as range 11
  // closed e.Pattern-R#1 as range 15
  // closed e.Vars#1 as range 19
  // closed e.Commands#1 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#2: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Chars#1: 11
  //DEBUG: e.Pattern-R#1: 15
  //DEBUG: e.Vars#1: 19
  //DEBUG: e.Commands#1: 23
  //DEBUG: s.L#3: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#3/27 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 AsIs: s.Top#2/6 AsIs: (/9 AsIs: e.Pattern-L#1/7 HalfReuse: (/10 HalfReuse: # C/13 AsIs: e.Chars#1/11 AsIs: )/14 HalfReuse: s.L3 #27/17 } Tile{ AsIs: )/26 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Pattern-R#1/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Vars#1/19 AsIs: )/22 } Tile{ AsIs: e.Commands#1/23 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_ident(context[13], identifiers[ident_C]);
  refalrts::reinit_svar( context[17], context[27] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[9], context[26] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  refalrts::splice_to_freelist_open( vm, context[17], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A2("Decompile-Pattern-Hole$7=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Decompile-Pattern-Hole$7=1/4 s.Level#1/5 (/8 e.Pattern-L#1/6 )/9 (/12 e.Chars#1/10 )/13 (/16 e.Pattern-R#1/14 )/17 (/20 e.Vars#1/18 )/21 (/24 e.Commands#1/22 )/25 s.Top#2/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-L#1 as range 6
  // closed e.Chars#1 as range 10
  // closed e.Pattern-R#1 as range 14
  // closed e.Vars#1 as range 18
  // closed e.Commands#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: e.Pattern-L#1: 6
  //DEBUG: e.Chars#1: 10
  //DEBUG: e.Pattern-R#1: 14
  //DEBUG: e.Vars#1: 18
  //DEBUG: e.Commands#1: 22
  //DEBUG: s.Top#2: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=2/4 AsIs: s.Level#1/5 } Tile{ AsIs: s.Top#2/26 } Tile{ AsIs: (/8 AsIs: e.Pattern-L#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands#1/22 AsIs: )/25 } </27 & Sub/28 s.Top#2/26/29 1/30 >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::copy_stvar(vm, context[29], context[26]);
  refalrts::alloc_number(vm, context[30], 1UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[31] );
  res = refalrts::splice_evar( res, context[8], context[25] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A1("Decompile-Pattern-Hole$7=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Decompile-Pattern-Hole$8=2/4 s.Level#1/5 s.Top#2/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Chars#1/11 )/14 (/17 e.Pattern-R#1/15 )/18 (/21 e.Vars#1/19 )/22 (/25 e.Commands#1/23 )/26 s.R#3/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Chars#1 as range 11
  // closed e.Pattern-R#1 as range 15
  // closed e.Vars#1 as range 19
  // closed e.Commands#1 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#2: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Chars#1: 11
  //DEBUG: e.Pattern-R#1: 15
  //DEBUG: e.Vars#1: 19
  //DEBUG: e.Commands#1: 23
  //DEBUG: s.R#3: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 AsIs: s.Top#2/6 AsIs: (/9 AsIs: e.Pattern-L#1/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: s.R#3/27 } Tile{ AsIs: (/25 } Tile{ HalfReuse: # C/26 } </28 & Rev/29 Tile{ AsIs: e.Chars#1/11 } Tile{ HalfReuse: >/14 HalfReuse: )/17 AsIs: e.Pattern-R#1/15 AsIs: )/18 AsIs: (/21 AsIs: e.Vars#1/19 AsIs: )/22 } Tile{ AsIs: e.Commands#1/23 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Rev]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_ident(context[26], identifiers[ident_C]);
  refalrts::reinit_close_call(context[14]);
  refalrts::reinit_close_bracket(context[17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[25], context[17] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A2("Decompile-Pattern-Hole$8=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Decompile-Pattern-Hole$8=1/4 s.Level#1/5 (/8 e.Pattern-L#1/6 )/9 (/12 e.Chars#1/10 )/13 (/16 e.Pattern-R#1/14 )/17 (/20 e.Vars#1/18 )/21 (/24 e.Commands#1/22 )/25 s.Top#2/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-L#1 as range 6
  // closed e.Chars#1 as range 10
  // closed e.Pattern-R#1 as range 14
  // closed e.Vars#1 as range 18
  // closed e.Commands#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: e.Pattern-L#1: 6
  //DEBUG: e.Chars#1: 10
  //DEBUG: e.Pattern-R#1: 14
  //DEBUG: e.Vars#1: 18
  //DEBUG: e.Commands#1: 22
  //DEBUG: s.Top#2: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=2/4 AsIs: s.Level#1/5 } Tile{ AsIs: s.Top#2/26 } Tile{ AsIs: (/8 AsIs: e.Pattern-L#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars#1/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars#1/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands#1/22 AsIs: )/25 } </27 & Sub/28 s.Top#2/26/29 1/30 >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::copy_stvar(vm, context[29], context[26]);
  refalrts::alloc_number(vm, context[30], 1UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[31] );
  res = refalrts::splice_evar( res, context[8], context[25] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A1("Decompile-Pattern-Hole$8=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S11A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$11=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 (/21 e.Commands#1/19 )/22 s.VL#2/23 s.VR#2/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 19
  //DEBUG: s.VL#2: 23
  //DEBUG: s.VR#2: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </25 & Add/26 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L#1/7 } (/29 Tile{ HalfReuse: # t/22 AsIs: s.VL#2/23 AsIs: s.VR#2/24 HalfReuse: '='/1 } s.VL#2/23/30 s.VR#2/24/31 )/32 s.VR#2/24/33 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 HalfReuse: (/18 HalfReuse: # t/21 } s.VL#2/23/34 s.VR#2/24/35 '='/36 s.VL#2/23/37 s.VR#2/24/38 )/39 )/40 Tile{ AsIs: e.Commands#1/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[24]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[24]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_t]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_t]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[28], context[10] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S11A1("Decompile-Pattern-Hole$11=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S11A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S12A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$12=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 (/21 e.Commands#1/19 )/22 s.VL#2/23 s.VR#2/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 19
  //DEBUG: s.VL#2: 23
  //DEBUG: s.VR#2: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </25 & Add/26 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L#1/7 } )/29 (/30 s.VL#2/23/31 (/32 Tile{ HalfReuse: # t/22 AsIs: s.VL#2/23 AsIs: s.VR#2/24 HalfReuse: '='/1 } s.VL#2/23/33 Tile{ HalfReuse: s.VR2 #24/10 HalfReuse: )/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 HalfReuse: (/18 HalfReuse: # t/21 } s.VL#2/23/34 s.VR#2/24/35 '='/36 s.VL#2/23/37 s.VR#2/24/38 )/39 )/40 Tile{ AsIs: e.Commands#1/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::copy_stvar(vm, context[31], context[23]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[23]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_t]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_svar( context[10], context[24] );
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_t]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[30], context[14] );
  refalrts::link_brackets( context[32], context[13] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[33], context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S12A1("Decompile-Pattern-Hole$12=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S12A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S18A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Decompile-Pattern-Hole$18=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 (/21 e.Commands#1/19 )/22 s.VL#2/23 s.VR#2/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 19
  //DEBUG: s.VL#2: 23
  //DEBUG: s.VR#2: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 } </25 & Add/26 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L#1/7 } (/29 Tile{ HalfReuse: # e/22 AsIs: s.VL#2/23 AsIs: s.VR#2/24 HalfReuse: '='/1 } s.VL#2/23/30 Tile{ HalfReuse: s.VR2 #24/10 HalfReuse: )/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 HalfReuse: (/18 HalfReuse: # e/21 } s.VL#2/23/31 s.VR#2/24/32 '='/33 s.VL#2/23/34 s.VR#2/24/35 )/36 )/37 Tile{ AsIs: e.Commands#1/19 } >/38 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[23]);
  refalrts::copy_stvar(vm, context[32], context[24]);
  refalrts::alloc_char(vm, context[33], '=');
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_svar( context[10], context[24] );
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_e]);
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[37] );
  refalrts::link_brackets( context[18], context[36] );
  refalrts::link_brackets( context[28], context[14] );
  refalrts::link_brackets( context[29], context[13] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[31], context[37] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[30], context[30] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S18A1("Decompile-Pattern-Hole$18=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S18A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$19=2/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 s.Type#2/11 s.IdL#2/12 s.IdR#1/13 (/16 e.Pattern-R#1/14 )/17 (/20 e.Vars#1/18 )/21 (/24 e.Commands#1/22 )/25 s.VL#3/26 s.VR#3/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-R#1 as range 14
  // closed e.Vars#1 as range 18
  // closed e.Commands#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: s.Type#2: 11
  //DEBUG: s.IdL#2: 12
  //DEBUG: s.IdR#1: 13
  //DEBUG: e.Pattern-R#1: 14
  //DEBUG: e.Vars#1: 18
  //DEBUG: e.Commands#1: 22
  //DEBUG: s.VL#3: 26
  //DEBUG: s.VR#3: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </28 & Add/29 Tile{ AsIs: s.Top#1/6 } 2/30 >/31 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/7 HalfReuse: (/10 AsIs: s.Type#2/11 AsIs: s.IdL#2/12 AsIs: s.IdR#1/13 HalfReuse: '='/16 } s.VL#3/26/32 s.VR#3/27/33 )/34 s.VR#3/27/35 )/36 (/37 Tile{ AsIs: e.Pattern-R#1/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Vars#1/18 HalfReuse: (/21 HalfReuse: s.Type2 #11/24 } s.IdL#2/12/38 s.IdR#1/13/39 Tile{ HalfReuse: '='/25 AsIs: s.VL#3/26 AsIs: s.VR#3/27 HalfReuse: )/1 } )/40 Tile{ AsIs: e.Commands#1/22 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[30], 2UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::copy_stvar(vm, context[32], context[26]);
  refalrts::copy_stvar(vm, context[33], context[27]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::copy_stvar(vm, context[35], context[27]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::copy_stvar(vm, context[38], context[12]);
  refalrts::copy_stvar(vm, context[39], context[13]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_char(context[16], '=');
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_svar( context[24], context[11] );
  refalrts::reinit_char(context[25], '=');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[40] );
  refalrts::link_brackets( context[21], context[1] );
  refalrts::link_brackets( context[37], context[17] );
  refalrts::link_brackets( context[9], context[36] );
  refalrts::link_brackets( context[10], context[34] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[40], context[40] );
  res = refalrts::splice_evar( res, context[25], context[1] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[17], context[24] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[32], context[37] );
  res = refalrts::splice_evar( res, context[9], context[16] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A2("Decompile-Pattern-Hole$19=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$19=1/4 s.IdR#1/5 s.Level#1/6 s.Top#1/7 (/10 e.Pattern-L#1/8 )/11 (/14 e.Pattern-R#1/12 )/15 (/18 e.Vars#1/16 )/19 (/22 e.Commands#1/20 )/23 e.Vars-B#2/24 (/30 s.Type#2/32 s.IdL#2/33 s.IdR#1/34 '='/35 s.VarNoL#2/36 s.VarNoR#2/37 )/31 e.Vars-E#2/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-L#1 as range 8
  // closed e.Pattern-R#1 as range 12
  // closed e.Vars#1 as range 16
  // closed e.Commands#1 as range 20
  context[24] = 0;
  context[25] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Vars-E#2 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::repeated_stvar_left( vm, context[34], context[5], context[28], context[29] ) )
      continue;
    context[35] = refalrts::char_left( '=', context[28], context[29] );
    if( ! context[35] )
      continue;
    if( ! refalrts::svar_left( context[36], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[37], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: s.IdR#1: 5
    //DEBUG: s.Level#1: 6
    //DEBUG: s.Top#1: 7
    //DEBUG: e.Pattern-L#1: 8
    //DEBUG: e.Pattern-R#1: 12
    //DEBUG: e.Vars#1: 16
    //DEBUG: e.Commands#1: 20
    //DEBUG: e.Vars-B#2: 24
    //DEBUG: e.Vars-E#2: 26
    //DEBUG: s.Type#2: 32
    //DEBUG: s.IdL#2: 33
    //DEBUG: s.VarNoL#2: 36
    //DEBUG: s.VarNoR#2: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.IdR#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B#2/24 {REMOVED TILE} s.IdR#1/34 {REMOVED TILE} s.VarNoL#2/36 s.VarNoR#2/37 {REMOVED TILE} e.Vars-E#2/26 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2/4 } Tile{ AsIs: s.Level#1/6 AsIs: s.Top#1/7 AsIs: (/10 } Tile{ AsIs: e.Pattern-L#1/8 } Tile{ HalfReuse: )/30 AsIs: s.Type#2/32 AsIs: s.IdL#2/33 } Tile{ HalfReuse: s.IdR1 #34/11 AsIs: (/14 AsIs: e.Pattern-R#1/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands#1/20 AsIs: )/23 } Tile{ HalfReuse: s.Top1 #7/35 } Tile{ HalfReuse: </31 } & Add/38 s.Top#1/7/39 1/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[38], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[39], context[7]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::reinit_svar( context[11], context[34] );
    refalrts::reinit_svar( context[35], context[7] );
    refalrts::reinit_open_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[10], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[11], context[23] );
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[6], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[24], context[25], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1("Decompile-Pattern-Hole$19=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$20=2/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 s.Type#2/11 s.IdL#2/12 s.IdR#1/13 (/16 e.Pattern-R#1/14 )/17 (/20 e.Vars#1/18 )/21 (/24 e.Commands#1/22 )/25 s.VL#3/26 s.VR#3/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-R#1 as range 14
  // closed e.Vars#1 as range 18
  // closed e.Commands#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: s.Type#2: 11
  //DEBUG: s.IdL#2: 12
  //DEBUG: s.IdR#1: 13
  //DEBUG: e.Pattern-R#1: 14
  //DEBUG: e.Vars#1: 18
  //DEBUG: e.Commands#1: 22
  //DEBUG: s.VL#3: 26
  //DEBUG: s.VR#3: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </28 & Add/29 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/30 (/31 Tile{ AsIs: e.Pattern-L#1/7 } )/32 (/33 s.VL#3/26/34 Tile{ HalfReuse: (/10 AsIs: s.Type#2/11 AsIs: s.IdL#2/12 AsIs: s.IdR#1/13 } '='/35 s.VL#3/26/36 s.VR#3/27/37 Tile{ HalfReuse: )/16 AsIs: e.Pattern-R#1/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars#1/18 HalfReuse: (/21 HalfReuse: s.Type2 #11/24 } s.IdL#2/12/38 s.IdR#1/13/39 Tile{ HalfReuse: '='/25 AsIs: s.VL#3/26 AsIs: s.VR#3/27 HalfReuse: )/1 } )/40 Tile{ AsIs: e.Commands#1/22 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_stvar(vm, context[34], context[26]);
  refalrts::alloc_char(vm, context[35], '=');
  refalrts::copy_stvar(vm, context[36], context[26]);
  refalrts::copy_stvar(vm, context[37], context[27]);
  refalrts::copy_stvar(vm, context[38], context[12]);
  refalrts::copy_stvar(vm, context[39], context[13]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_close_bracket(context[16]);
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_svar( context[24], context[11] );
  refalrts::reinit_char(context[25], '=');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[40] );
  refalrts::link_brackets( context[21], context[1] );
  refalrts::link_brackets( context[33], context[17] );
  refalrts::link_brackets( context[10], context[16] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[40], context[40] );
  res = refalrts::splice_evar( res, context[25], context[1] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[16], context[24] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  res = refalrts::splice_evar( res, context[32], context[34] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A2("Decompile-Pattern-Hole$20=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$20=1/4 s.IdR#1/5 s.Level#1/6 s.Top#1/7 (/10 e.Pattern-L#1/8 )/11 (/14 e.Pattern-R#1/12 )/15 (/18 e.Vars#1/16 )/19 (/22 e.Commands#1/20 )/23 e.Vars-B#2/24 (/30 s.Type#2/32 s.IdL#2/33 s.IdR#1/34 '='/35 s.VarNoL#2/36 s.VarNoR#2/37 )/31 e.Vars-E#2/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-L#1 as range 8
  // closed e.Pattern-R#1 as range 12
  // closed e.Vars#1 as range 16
  // closed e.Commands#1 as range 20
  context[24] = 0;
  context[25] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Vars-E#2 as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::repeated_stvar_left( vm, context[34], context[5], context[28], context[29] ) )
      continue;
    context[35] = refalrts::char_left( '=', context[28], context[29] );
    if( ! context[35] )
      continue;
    if( ! refalrts::svar_left( context[36], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[37], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: s.IdR#1: 5
    //DEBUG: s.Level#1: 6
    //DEBUG: s.Top#1: 7
    //DEBUG: e.Pattern-L#1: 8
    //DEBUG: e.Pattern-R#1: 12
    //DEBUG: e.Vars#1: 16
    //DEBUG: e.Commands#1: 20
    //DEBUG: e.Vars-B#2: 24
    //DEBUG: e.Vars-E#2: 26
    //DEBUG: s.Type#2: 32
    //DEBUG: s.IdL#2: 33
    //DEBUG: s.VarNoL#2: 36
    //DEBUG: s.VarNoR#2: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.IdR#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B#2/24 {REMOVED TILE} s.IdR#1/34 {REMOVED TILE} s.VarNoL#2/36 s.VarNoR#2/37 {REMOVED TILE} e.Vars-E#2/26 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2/4 } Tile{ AsIs: s.Level#1/6 AsIs: s.Top#1/7 AsIs: (/10 } Tile{ AsIs: e.Pattern-L#1/8 } Tile{ HalfReuse: )/30 AsIs: s.Type#2/32 AsIs: s.IdL#2/33 } Tile{ HalfReuse: s.IdR1 #34/11 AsIs: (/14 AsIs: e.Pattern-R#1/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars#1/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands#1/20 AsIs: )/23 } Tile{ HalfReuse: s.Top1 #7/35 } Tile{ HalfReuse: </31 } & Add/38 s.Top#1/7/39 1/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[38], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[39], context[7]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::reinit_svar( context[11], context[34] );
    refalrts::reinit_svar( context[35], context[7] );
    refalrts::reinit_open_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[10], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_evar( res, context[31], context[31] );
    res = refalrts::splice_evar( res, context[35], context[35] );
    res = refalrts::splice_evar( res, context[11], context[23] );
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[6], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[24], context[25], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1("Decompile-Pattern-Hole$20=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S21A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Decompile-Pattern-Hole$21=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 s.R#1/11 (/14 e.Pattern-R#1/12 )/15 (/18 e.Vars#1/16 )/19 (/22 e.Commands#1/20 )/23 s.LB#2/24 s.RB#2/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R#1 as range 12
  // closed e.Vars#1 as range 16
  // closed e.Commands#1 as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: s.R#1: 11
  //DEBUG: e.Pattern-R#1: 12
  //DEBUG: e.Vars#1: 16
  //DEBUG: e.Commands#1: 20
  //DEBUG: s.LB#2: 24
  //DEBUG: s.RB#2: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </26 & Add/27 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/28 (/29 Tile{ AsIs: e.Pattern-L#1/7 } (/30 # LB/31 Tile{ AsIs: )/23 AsIs: s.LB#2/24 } )/32 Tile{ AsIs: (/22 } Tile{ AsIs: s.RB#2/25 } (/33 # RB/34 )/35 (/36 # Hole/37 Tile{ HalfReuse: s.RB2 #25/10 AsIs: s.R#1/11 HalfReuse: )/14 AsIs: e.Pattern-R#1/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars#1/16 AsIs: )/19 } Tile{ AsIs: e.Commands#1/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_ident(vm, context[31], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_ident(vm, context[34], identifiers[ident_RB]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_ident(vm, context[37], identifiers[ident_Hole]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_svar( context[10], context[25] );
  refalrts::reinit_close_bracket(context[14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[22], context[15] );
  refalrts::link_brackets( context[36], context[14] );
  refalrts::link_brackets( context[33], context[35] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::link_brackets( context[30], context[23] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[10], context[19] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[22], context[22] );
  res = refalrts::splice_evar( res, context[32], context[32] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S21A1("Decompile-Pattern-Hole$21=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S21A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S22A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Decompile-Pattern-Hole$22=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 (/21 e.Commands#1/19 )/22 s.LB#2/23 s.RB#2/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 19
  //DEBUG: s.LB#2: 23
  //DEBUG: s.RB#2: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </25 & Add/26 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L#1/7 } )/29 Tile{ AsIs: (/21 } s.LB#2/23/30 (/31 # LB/32 )/33 (/34 Tile{ HalfReuse: # Hole/22 AsIs: s.LB#2/23 AsIs: s.RB#2/24 HalfReuse: )/1 } (/35 Tile{ HalfReuse: # RB/10 HalfReuse: )/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 AsIs: )/18 } Tile{ AsIs: e.Commands#1/19 } >/36 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_ident(vm, context[32], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_Hole]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_ident(context[10], identifiers[ident_RB]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[35], context[13] );
  refalrts::link_brackets( context[34], context[1] );
  refalrts::link_brackets( context[31], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[36], context[36] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[10], context[18] );
  res = refalrts::splice_evar( res, context[35], context[35] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[30], context[34] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S22A1("Decompile-Pattern-Hole$22=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S22A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S25A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$25=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 (/21 e.Commands#1/19 )/22 s.VL#2/23 s.VR#2/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 19
  //DEBUG: s.VL#2: 23
  //DEBUG: s.VR#2: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </25 & Add/26 Tile{ AsIs: s.Top#1/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L#1/7 } (/29 Tile{ HalfReuse: # e/22 AsIs: s.VL#2/23 AsIs: s.VR#2/24 HalfReuse: '='/1 } s.VL#2/23/30 s.VR#2/24/31 )/32 s.VR#2/24/33 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 HalfReuse: (/18 HalfReuse: # e/21 } s.VL#2/23/34 s.VR#2/24/35 '='/36 s.VL#2/23/37 s.VR#2/24/38 )/39 )/40 Tile{ AsIs: e.Commands#1/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[24]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[24]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_e]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[28], context[10] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S25A1("Decompile-Pattern-Hole$25=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S25A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S26A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & Decompile-Pattern-Hole$26=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 s.Char#1/11 (/14 e.Pattern-R#1/12 )/15 (/18 e.Vars#1/16 )/19 (/22 e.Commands#1/20 )/23 s.VL#2/24 s.VR#2/25 s.CharPos#2/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R#1 as range 12
  // closed e.Vars#1 as range 16
  // closed e.Commands#1 as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: s.Char#1: 11
  //DEBUG: e.Pattern-R#1: 12
  //DEBUG: e.Vars#1: 16
  //DEBUG: e.Commands#1: 20
  //DEBUG: s.VL#2: 24
  //DEBUG: s.VR#2: 25
  //DEBUG: s.CharPos#2: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </27 & Add/28 Tile{ AsIs: s.Top#1/6 } 3/29 >/30 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/7 HalfReuse: (/10 } Tile{ HalfReuse: # e/23 AsIs: s.VL#2/24 AsIs: s.VR#2/25 } '='/31 s.VL#2/24/32 s.VR#2/25/33 )/34 (/35 # C/36 Tile{ AsIs: s.Char#1/11 } )/37 Tile{ AsIs: s.CharPos#2/26 } )/38 Tile{ AsIs: (/14 AsIs: e.Pattern-R#1/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars#1/16 HalfReuse: (/19 HalfReuse: # e/22 } s.VL#2/24/39 s.VR#2/25/40 '='/41 s.VL#2/24/42 s.VR#2/25/43 )/44 )/45 Tile{ AsIs: e.Commands#1/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[29], 3UL);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_char(vm, context[31], '=');
  refalrts::copy_stvar(vm, context[32], context[24]);
  refalrts::copy_stvar(vm, context[33], context[25]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_C]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::copy_stvar(vm, context[39], context[24]);
  refalrts::copy_stvar(vm, context[40], context[25]);
  refalrts::alloc_char(vm, context[41], '=');
  refalrts::copy_stvar(vm, context[42], context[24]);
  refalrts::copy_stvar(vm, context[43], context[25]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::alloc_close_bracket(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_ident(context[23], identifiers[ident_e]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[45] );
  refalrts::link_brackets( context[19], context[44] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[9], context[38] );
  refalrts::link_brackets( context[35], context[37] );
  refalrts::link_brackets( context[10], context[34] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[39], context[45] );
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_evar( res, context[38], context[38] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[37], context[37] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  res = refalrts::splice_evar( res, context[31], context[36] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[6], context[6] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S26A1("Decompile-Pattern-Hole$26=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S26A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S27A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & Decompile-Pattern-Hole$27=1/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 s.R#1/11 (/14 e.Pattern-R#1/12 )/15 (/18 e.Vars#1/16 )/19 (/22 e.Commands#1/20 )/23 s.VL#2/24 s.VR#2/25 s.LB#2/26 s.RB#2/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L#1 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R#1 as range 12
  // closed e.Vars#1 as range 16
  // closed e.Commands#1 as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: s.R#1: 11
  //DEBUG: e.Pattern-R#1: 12
  //DEBUG: e.Vars#1: 16
  //DEBUG: e.Commands#1: 20
  //DEBUG: s.VL#2: 24
  //DEBUG: s.VR#2: 25
  //DEBUG: s.LB#2: 26
  //DEBUG: s.RB#2: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </28 & Add/29 Tile{ AsIs: s.Top#1/6 HalfReuse: 4/9 } >/30 (/31 Tile{ AsIs: e.Pattern-L#1/7 } (/32 Tile{ HalfReuse: # e/23 AsIs: s.VL#2/24 AsIs: s.VR#2/25 } '='/33 s.VL#2/24/34 s.VR#2/25/35 )/36 (/37 # LB/38 )/39 Tile{ AsIs: s.LB#2/26 } )/40 (/41 Tile{ AsIs: s.RB#2/27 } (/42 # RB/43 )/44 (/45 # Hole/46 Tile{ HalfReuse: s.RB2 #27/10 AsIs: s.R#1/11 HalfReuse: )/14 AsIs: e.Pattern-R#1/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars#1/16 HalfReuse: (/19 HalfReuse: # e/22 } s.VL#2/24/47 s.VR#2/25/48 '='/49 s.VL#2/24/50 s.VR#2/25/51 )/52 )/53 Tile{ AsIs: e.Commands#1/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_char(vm, context[33], '=');
  refalrts::copy_stvar(vm, context[34], context[24]);
  refalrts::copy_stvar(vm, context[35], context[25]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_ident(vm, context[38], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_ident(vm, context[43], identifiers[ident_RB]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::alloc_open_bracket(vm, context[45]);
  refalrts::alloc_ident(vm, context[46], identifiers[ident_Hole]);
  refalrts::copy_stvar(vm, context[47], context[24]);
  refalrts::copy_stvar(vm, context[48], context[25]);
  refalrts::alloc_char(vm, context[49], '=');
  refalrts::copy_stvar(vm, context[50], context[24]);
  refalrts::copy_stvar(vm, context[51], context[25]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_close_bracket(vm, context[53]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 4UL);
  refalrts::reinit_ident(context[23], identifiers[ident_e]);
  refalrts::reinit_svar( context[10], context[27] );
  refalrts::reinit_close_bracket(context[14]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[53] );
  refalrts::link_brackets( context[19], context[52] );
  refalrts::link_brackets( context[41], context[15] );
  refalrts::link_brackets( context[45], context[14] );
  refalrts::link_brackets( context[42], context[44] );
  refalrts::link_brackets( context[31], context[40] );
  refalrts::link_brackets( context[37], context[39] );
  refalrts::link_brackets( context[32], context[36] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[47], context[53] );
  res = refalrts::splice_evar( res, context[10], context[22] );
  res = refalrts::splice_evar( res, context[42], context[46] );
  res = refalrts::splice_evar( res, context[27], context[27] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[33], context[39] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[32], context[32] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S27A1("Decompile-Pattern-Hole$27=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S27A1);


static refalrts::FnResult func_Decompilem_Patternm_Hole(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 81 elems
  refalrts::Iter context[81];
  refalrts::zeros( context, 81 );
  // </0 & Decompile-Pattern-Hole/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Decompile-Pattern-Hole/4 s.new#1/5 s.new#2/6 (/9 e.new#3/7 )/10 (/13 e.new#4/11 )/14 (/17 e.new#5/15 )/18 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new#3 as range 7
  // closed e.new#4 as range 11
  // closed e.new#5 as range 15
  // closed e.new#6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole/4 s.new#7/5 s.new#8/6 (/9 e.new#13/19 )/10 (/13 e.new#14/21 )/14 (/17 e.new#15/23 )/18 (/29 s.new#9/31 s.new#10/32 e.new#11/27 )/30 e.new#12/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new#13 as range 19
    // closed e.new#14 as range 21
    // closed e.new#15 as range 23
    // closed e.new#12 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    // closed e.new#11 as range 27
    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/33 s.L#1/43 )/10 (/13 e.Pattern-R#1/35 )/14 (/17 e.Vars#1/37 )/18 (/29 s.Offset#1/31 # CSYM/32 e.Word#1/39 )/30 e.Commands#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[32] ) )
        continue;
      // closed e.Pattern-R#1 as range 35
      // closed e.Vars#1 as range 37
      // closed e.Word#1 as range 39
      // closed e.Commands#1 as range 41
      if( ! refalrts::svar_right( context[43], context[33], context[34] ) )
        continue;
      // closed e.Pattern-L#1 as range 33
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-R#1: 35
      //DEBUG: e.Vars#1: 37
      //DEBUG: e.Word#1: 39
      //DEBUG: e.Commands#1: 41
      //DEBUG: s.L#1: 43
      //DEBUG: e.Pattern-L#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/43 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top#1/6 HalfReuse: >/9 } (/47 Tile{ AsIs: e.Pattern-L#1/33 } Tile{ AsIs: (/29 } Tile{ Reuse: # W/32 AsIs: e.Word#1/39 AsIs: )/30 } s.Top#1/6/48 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/37 AsIs: )/18 } Tile{ AsIs: e.Commands#1/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::copy_stvar(vm, context[48], context[6]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[32], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[47], context[10] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[48], context[48] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_evar( res, context[29], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[47], context[47] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/33 )/10 (/13 s.R#1/43 e.Pattern-R#1/35 )/14 (/17 e.Vars#1/37 )/18 (/29 s.Offset#1/31 # CSYMR/32 e.Word#1/39 )/30 e.Commands#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 33
      // closed e.Vars#1 as range 37
      // closed e.Word#1 as range 39
      // closed e.Commands#1 as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.Pattern-R#1 as range 35
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 33
      //DEBUG: e.Vars#1: 37
      //DEBUG: e.Word#1: 39
      //DEBUG: e.Commands#1: 41
      //DEBUG: s.R#1: 43
      //DEBUG: e.Pattern-R#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top#1/6 } >/47 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/33 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top1 #6/14 AsIs: (/17 } Tile{ Reuse: # W/32 } Tile{ AsIs: e.Word#1/39 } )/48 Tile{ AsIs: e.Pattern-R#1/35 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars#1/37 } Tile{ AsIs: )/30 AsIs: e.Commands#1/41 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_svar( context[14], context[6] );
      refalrts::update_ident(context[32], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[17], context[48] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[29] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[48], context[48] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[47], context[47] );
      res = refalrts::splice_evar( res, context[6], context[6] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/33 s.L#1/44 )/10 (/13 e.Pattern-R#1/35 )/14 (/17 e.Vars#1/37 )/18 (/29 s.Offset#1/31 # NSYM/32 s.Number#1/43 )/30 e.Commands#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[32] ) )
        continue;
      // closed e.Pattern-R#1 as range 35
      // closed e.Vars#1 as range 37
      // closed e.Commands#1 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      if( ! refalrts::svar_right( context[44], context[33], context[34] ) )
        continue;
      // closed e.Pattern-L#1 as range 33
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-R#1: 35
      //DEBUG: e.Vars#1: 37
      //DEBUG: e.Commands#1: 41
      //DEBUG: s.Number#1: 43
      //DEBUG: s.L#1: 44
      //DEBUG: e.Pattern-L#1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/44 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </45 & Add/46 1/47 Tile{ AsIs: s.Top#1/6 HalfReuse: >/9 } (/48 Tile{ AsIs: e.Pattern-L#1/33 } Tile{ AsIs: (/29 } Tile{ Reuse: # N/32 AsIs: s.Number#1/43 AsIs: )/30 } s.Top#1/6/49 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/37 AsIs: )/18 } Tile{ AsIs: e.Commands#1/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[47], 1UL);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_stvar(vm, context[49], context[6]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[32], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[48], context[10] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[45] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_evar( res, context[49], context[49] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_evar( res, context[29], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[48], context[48] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/33 )/10 (/13 s.R#1/43 e.Pattern-R#1/35 )/14 (/17 e.Vars#1/37 )/18 (/29 s.Offset#1/31 # NSYMR/32 e.Number#1/39 )/30 e.Commands#1/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 33
      // closed e.Vars#1 as range 37
      // closed e.Number#1 as range 39
      // closed e.Commands#1 as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.Pattern-R#1 as range 35
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 33
      //DEBUG: e.Vars#1: 37
      //DEBUG: e.Number#1: 39
      //DEBUG: e.Commands#1: 41
      //DEBUG: s.R#1: 43
      //DEBUG: e.Pattern-R#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top#1/6 } >/47 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/33 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top1 #6/14 AsIs: (/17 } Tile{ Reuse: # N/32 } Tile{ AsIs: e.Number#1/39 } )/48 Tile{ AsIs: e.Pattern-R#1/35 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars#1/37 } Tile{ AsIs: )/30 AsIs: e.Commands#1/41 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_svar( context[14], context[6] );
      refalrts::update_ident(context[32], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[17], context[48] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[29] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[48], context[48] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[47], context[47] );
      res = refalrts::splice_evar( res, context[6], context[6] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#23/33 )/10 (/13 e.new#24/35 )/14 (/17 e.new#25/37 )/18 (/29 s.new#19/31 s.new#20/32 s.new#21/43 e.new#22/39 )/30 e.new#18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#23 as range 33
      // closed e.new#24 as range 35
      // closed e.new#25 as range 37
      // closed e.new#18 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new#22 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.new#26/5 s.new#27/6 (/9 e.new#33/44 )/10 (/13 e.new#34/46 )/14 (/17 e.new#35/48 )/18 (/29 s.new#29/31 s.new#30/32 s.new#31/43 s.new#32/54 )/30 e.new#28/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        // closed e.new#33 as range 44
        // closed e.new#34 as range 46
        // closed e.new#35 as range 48
        // closed e.new#28 as range 52
        if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/55 s.L#1/63 )/10 (/13 e.Pattern-R#1/57 )/14 (/17 e.Vars#1/59 )/18 (/29 s.Offset#1/31 # SYM/32 s.Code#1/43 s.Char#1/54 )/30 e.Commands#1/61 >/1
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[52];
          context[62] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[32] ) )
            continue;
          // closed e.Pattern-R#1 as range 57
          // closed e.Vars#1 as range 59
          // closed e.Commands#1 as range 61
          if( ! refalrts::svar_right( context[63], context[55], context[56] ) )
            continue;
          // closed e.Pattern-L#1 as range 55
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.Offset#1: 31
          //DEBUG: s.Code#1: 43
          //DEBUG: s.Char#1: 54
          //DEBUG: e.Pattern-R#1: 57
          //DEBUG: e.Vars#1: 59
          //DEBUG: e.Commands#1: 61
          //DEBUG: s.L#1: 63
          //DEBUG: e.Pattern-L#1: 55

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/63 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} s.Code#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </64 & Add/65 1/66 Tile{ AsIs: s.Top#1/6 HalfReuse: >/9 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Pattern-L#1/55 } (/67 Tile{ Reuse: # C/32 } Tile{ AsIs: s.Char#1/54 AsIs: )/30 } s.Top#1/6/68 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/57 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/59 AsIs: )/18 } Tile{ AsIs: e.Commands#1/61 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[64]);
          refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[66], 1UL);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::copy_stvar(vm, context[68], context[6]);
          refalrts::reinit_close_call(context[9]);
          refalrts::update_ident(context[32], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[29], context[10] );
          refalrts::link_brackets( context[67], context[30] );
          refalrts::push_stack( vm, context[9] );
          refalrts::push_stack( vm, context[64] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[10], context[18] );
          res = refalrts::splice_evar( res, context[68], context[68] );
          res = refalrts::splice_evar( res, context[54], context[30] );
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[67], context[67] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[29], context[29] );
          res = refalrts::splice_evar( res, context[6], context[9] );
          res = refalrts::splice_evar( res, context[64], context[66] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/55 )/10 (/13 s.R#1/63 e.Pattern-R#1/57 )/14 (/17 e.Vars#1/59 )/18 (/29 s.Offset#1/31 # SYMR/32 s.Code#1/43 s.Char#1/54 )/30 e.Commands#1/61 >/1
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[52];
        context[62] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[32] ) )
          continue;
        // closed e.Pattern-L#1 as range 55
        // closed e.Vars#1 as range 59
        // closed e.Commands#1 as range 61
        if( ! refalrts::svar_left( context[63], context[57], context[58] ) )
          continue;
        // closed e.Pattern-R#1 as range 57
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: s.Code#1: 43
        //DEBUG: s.Char#1: 54
        //DEBUG: e.Pattern-L#1: 55
        //DEBUG: e.Vars#1: 59
        //DEBUG: e.Commands#1: 61
        //DEBUG: s.R#1: 63
        //DEBUG: e.Pattern-R#1: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} s.Code#1/43 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </64 & Add/65 1/66 Tile{ AsIs: s.Top#1/6 } >/67 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/55 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top1 #6/14 AsIs: (/17 } Tile{ Reuse: # C/32 } Tile{ AsIs: s.Char#1/54 } )/68 Tile{ AsIs: e.Pattern-R#1/57 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars#1/59 } Tile{ AsIs: )/30 AsIs: e.Commands#1/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[64]);
        refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[66], 1UL);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::reinit_svar( context[14], context[6] );
        refalrts::update_ident(context[32], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[13], context[18] );
        refalrts::link_brackets( context[17], context[68] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[64] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[18], context[29] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[68], context[68] );
        res = refalrts::splice_evar( res, context[54], context[54] );
        res = refalrts::splice_evar( res, context[32], context[32] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        res = refalrts::splice_evar( res, context[67], context[67] );
        res = refalrts::splice_evar( res, context[6], context[6] );
        res = refalrts::splice_evar( res, context[64], context[66] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 s.L#1/54 )/10 (/13 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # SYMS/32 s.Len#1/43 e.Chars#1/50 )/30 e.Commands#1/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[32] ) )
          continue;
        // closed e.Pattern-R#1 as range 46
        // closed e.Vars#1 as range 48
        // closed e.Chars#1 as range 50
        // closed e.Commands#1 as range 52
        if( ! refalrts::svar_right( context[54], context[44], context[45] ) )
          continue;
        // closed e.Pattern-L#1 as range 44
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: s.Len#1: 43
        //DEBUG: e.Pattern-R#1: 46
        //DEBUG: e.Vars#1: 48
        //DEBUG: e.Chars#1: 50
        //DEBUG: e.Commands#1: 52
        //DEBUG: s.L#1: 54
        //DEBUG: e.Pattern-L#1: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/54 {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1/4 AsIs: s.Level#1/5 } (/55 Tile{ AsIs: e.Pattern-L#1/44 } Tile{ AsIs: )/30 } (/56 Tile{ AsIs: e.Chars#1/50 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/52 } )/57 </58 Tile{ HalfReuse: & Add/32 AsIs: s.Len#1/43 } Tile{ AsIs: s.Top#1/6 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1]);
        refalrts::reinit_name(context[32], functions[efunc_Add]);
        refalrts::reinit_close_call(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[9] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[29], context[57] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[55], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[32], context[43] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[56], context[56] );
        res = refalrts::splice_evar( res, context[30], context[30] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[55], context[55] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 )/10 (/13 s.R#1/54 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # SYMSR/32 s.Len#1/43 e.Chars#1/50 )/30 e.Commands#1/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 44
      // closed e.Vars#1 as range 48
      // closed e.Chars#1 as range 50
      // closed e.Commands#1 as range 52
      if( ! refalrts::svar_left( context[54], context[46], context[47] ) )
        continue;
      // closed e.Pattern-R#1 as range 46
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: s.Len#1: 43
      //DEBUG: e.Pattern-L#1: 44
      //DEBUG: e.Vars#1: 48
      //DEBUG: e.Chars#1: 50
      //DEBUG: e.Commands#1: 52
      //DEBUG: s.R#1: 54
      //DEBUG: e.Pattern-R#1: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/54 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1/4 AsIs: s.Level#1/5 } Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/44 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Chars#1/50 } )/55 (/56 Tile{ AsIs: e.Pattern-R#1/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/52 } Tile{ AsIs: )/30 } </57 Tile{ HalfReuse: & Add/32 AsIs: s.Len#1/43 } Tile{ AsIs: s.Top#1/6 } >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1]);
      refalrts::reinit_name(context[32], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[56], context[14] );
      refalrts::link_brackets( context[13], context[55] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[58], context[58] );
      res = refalrts::splice_evar( res, context[6], context[6] );
      res = refalrts::splice_evar( res, context[32], context[43] );
      res = refalrts::splice_evar( res, context[57], context[57] );
      res = refalrts::splice_evar( res, context[30], context[30] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#21/33 )/10 (/13 e.new#22/35 )/14 (/17 e.new#23/37 )/18 (/29 s.new#19/31 s.new#20/32 )/30 e.new#18/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new#21 as range 33
      // closed e.new#22 as range 35
      // closed e.new#23 as range 37
      // closed e.new#18 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/41 s.L#1/49 )/10 (/13 e.Pattern-R#1/43 )/14 (/17 e.Vars#1/45 )/18 (/29 s.Offset#1/31 # VSYM/32 )/30 e.Commands#1/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[32] ) )
          continue;
        // closed e.Pattern-R#1 as range 43
        // closed e.Vars#1 as range 45
        // closed e.Commands#1 as range 47
        if( ! refalrts::svar_right( context[49], context[41], context[42] ) )
          continue;
        // closed e.Pattern-L#1 as range 41
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-R#1: 43
        //DEBUG: e.Vars#1: 45
        //DEBUG: e.Commands#1: 47
        //DEBUG: s.L#1: 49
        //DEBUG: e.Pattern-L#1: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/49 {REMOVED TILE} s.Offset#1/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </50 & Add/51 1/52 s.Top#1/6/53 >/54 (/55 Tile{ AsIs: e.Pattern-L#1/41 } (/56 # s/57 Tile{ AsIs: s.Top#1/6 HalfReuse: '='/9 } s.Top#1/6/58 )/59 s.Top#1/6/60 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/45 HalfReuse: (/18 HalfReuse: # s/29 } s.Top#1/6/61 '='/62 s.Top#1/6/63 Tile{ HalfReuse: )/32 AsIs: )/30 AsIs: e.Commands#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_ident(vm, context[57], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[58], context[6]);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::copy_stvar(vm, context[60], context[6]);
        refalrts::copy_stvar(vm, context[61], context[6]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[6]);
        refalrts::reinit_char(context[9], '=');
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[32] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[55], context[10] );
        refalrts::link_brackets( context[56], context[59] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[58], context[60] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[50], context[55] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/41 )/10 (/13 s.R#1/49 e.Pattern-R#1/43 )/14 (/17 e.Vars#1/45 )/18 (/29 s.Offset#1/31 # VSYMR/32 )/30 e.Commands#1/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[32] ) )
          continue;
        // closed e.Pattern-L#1 as range 41
        // closed e.Vars#1 as range 45
        // closed e.Commands#1 as range 47
        if( ! refalrts::svar_left( context[49], context[43], context[44] ) )
          continue;
        // closed e.Pattern-R#1 as range 43
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-L#1: 41
        //DEBUG: e.Vars#1: 45
        //DEBUG: e.Commands#1: 47
        //DEBUG: s.R#1: 49
        //DEBUG: e.Pattern-R#1: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/49 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </50 & Add/51 1/52 Tile{ AsIs: s.Top#1/6 } >/53 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/41 AsIs: )/10 AsIs: (/13 } s.Top#1/6/54 (/55 # s/56 s.Top#1/6/57 '='/58 s.Top#1/6/59 )/60 Tile{ AsIs: e.Pattern-R#1/43 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/45 HalfReuse: (/18 HalfReuse: # s/29 } s.Top#1/6/61 '='/62 s.Top#1/6/63 Tile{ HalfReuse: )/32 AsIs: )/30 AsIs: e.Commands#1/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::copy_stvar(vm, context[54], context[6]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_ident(vm, context[56], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[57], context[6]);
        refalrts::alloc_char(vm, context[58], '=');
        refalrts::copy_stvar(vm, context[59], context[6]);
        refalrts::alloc_close_bracket(vm, context[60]);
        refalrts::copy_stvar(vm, context[61], context[6]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[6]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[32] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[55], context[60] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[54], context[60] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        res = refalrts::splice_evar( res, context[53], context[53] );
        res = refalrts::splice_evar( res, context[6], context[6] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/41 s.L#1/49 )/10 (/13 e.Pattern-R#1/43 )/14 (/17 e.Vars#1/45 )/18 (/29 s.Offset#1/31 # TERM/32 )/30 e.Commands#1/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[32] ) )
          continue;
        // closed e.Pattern-R#1 as range 43
        // closed e.Vars#1 as range 45
        // closed e.Commands#1 as range 47
        if( ! refalrts::svar_right( context[49], context[41], context[42] ) )
          continue;
        // closed e.Pattern-L#1 as range 41
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-R#1: 43
        //DEBUG: e.Vars#1: 45
        //DEBUG: e.Commands#1: 47
        //DEBUG: s.L#1: 49
        //DEBUG: e.Pattern-L#1: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/49 {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/41 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/45 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/47 } Tile{ AsIs: )/30 } Tile{ HalfReuse: s.Top1 #6/32 } </50 & Add/51 1/52 s.Top#1/6/53 >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1]);
        refalrts::reinit_svar( context[32], context[6] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[50] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[50], context[54] );
        res = refalrts::splice_evar( res, context[32], context[32] );
        res = refalrts::splice_evar( res, context[30], context[30] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/41 )/10 (/13 s.R#1/49 e.Pattern-R#1/43 )/14 (/17 e.Vars#1/45 )/18 (/29 s.Offset#1/31 # TERMR/32 )/30 e.Commands#1/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 41
      // closed e.Vars#1 as range 45
      // closed e.Commands#1 as range 47
      if( ! refalrts::svar_left( context[49], context[43], context[44] ) )
        continue;
      // closed e.Pattern-R#1 as range 43
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 41
      //DEBUG: e.Vars#1: 45
      //DEBUG: e.Commands#1: 47
      //DEBUG: s.R#1: 49
      //DEBUG: e.Pattern-R#1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R#1/49 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/41 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R#1/43 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/45 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/47 } Tile{ AsIs: )/30 } s.Top#1/6/50 Tile{ HalfReuse: </32 } & Add/51 1/52 s.Top#1/6/53 >/54 Tile{ AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[50], context[6]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::copy_stvar(vm, context[53], context[6]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1]);
      refalrts::reinit_open_call(context[32]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[51], context[54] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      res = refalrts::splice_evar( res, context[50], context[50] );
      res = refalrts::splice_evar( res, context[30], context[30] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#23/33 )/10 (/13 e.new#24/35 )/14 (/17 e.new#25/37 )/18 (/29 s.new#19/31 s.new#20/32 s.new#21/43 e.new#22/39 )/30 e.new#18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#23 as range 33
      // closed e.new#24 as range 35
      // closed e.new#25 as range 37
      // closed e.new#18 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new#22 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 )/10 (/13 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # TRAN/32 s.Jump#1/43 )/30 e.Commands-B#1/52 (/58 s.Jump#1/60 e.Command#1/56 )/59 e.Commands-E#1/54 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.Pattern-L#1 as range 44
        // closed e.Pattern-R#1 as range 46
        // closed e.Vars#1 as range 48
        context[52] = 0;
        context[53] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[54] = context[50];
          context[55] = context[51];
          context[56] = 0;
          context[57] = 0;
          context[58] = refalrts::brackets_left( context[56], context[57], context[54], context[55] );
          if( ! context[58] )
            continue;
          refalrts::bracket_pointers(context[58], context[59]);
          if( ! refalrts::repeated_stvar_left( vm, context[60], context[43], context[56], context[57] ) )
            continue;
          // closed e.Command#1 as range 56
          // closed e.Commands-E#1 as range 54
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.Offset#1: 31
          //DEBUG: s.Jump#1: 43
          //DEBUG: e.Pattern-L#1: 44
          //DEBUG: e.Pattern-R#1: 46
          //DEBUG: e.Vars#1: 48
          //DEBUG: e.Commands-B#1: 52
          //DEBUG: e.Command#1: 56
          //DEBUG: e.Commands-E#1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} s.Jump#1/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/44 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 } Tile{ AsIs: e.Commands-B#1/52 } Tile{ AsIs: (/29 } '@'/61 Tile{ Reuse: # Restore-Hole/32 } s.Level#1/5/62 s.Top#1/6/63 (/64 e.Pattern-L#1/44/65 Tile{ AsIs: )/30 } (/67 e.Pattern-R#1/46/68 )/70 (/71 e.Vars#1/48/72 )/74 )/75 Tile{ AsIs: (/58 AsIs: s.Jump#1/60 AsIs: e.Command#1/56 AsIs: )/59 AsIs: e.Commands-E#1/54 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[61], '@');
          refalrts::copy_stvar(vm, context[62], context[5]);
          refalrts::copy_stvar(vm, context[63], context[6]);
          refalrts::alloc_open_bracket(vm, context[64]);
          refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::copy_evar(vm, context[68], context[69], context[46], context[47]);
          refalrts::alloc_close_bracket(vm, context[70]);
          refalrts::alloc_open_bracket(vm, context[71]);
          refalrts::copy_evar(vm, context[72], context[73], context[48], context[49]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::alloc_close_bracket(vm, context[75]);
          refalrts::update_ident(context[32], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[58], context[59] );
          refalrts::link_brackets( context[29], context[75] );
          refalrts::link_brackets( context[71], context[74] );
          refalrts::link_brackets( context[67], context[70] );
          refalrts::link_brackets( context[64], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[58];
          res = refalrts::splice_evar( res, context[67], context[75] );
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_evar( res, context[62], context[64] );
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[61], context[61] );
          res = refalrts::splice_evar( res, context[29], context[29] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          refalrts::splice_to_freelist_open( vm, context[18], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[52], context[53], context[50], context[51] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.new#26/5 s.new#27/6 (/9 e.new#35/44 )/10 (/13 e.new#36/46 )/14 (/17 e.new#37/48 )/18 (/29 '@'/31 s.new#29/32 s.new#30/43 s.new#31/62 e.new#32/50 (/60 e.new#33/58 )/61 (/56 e.new#34/54 )/57 )/30 e.new#28/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::char_term( '@', context[31] ) )
          continue;
        context[54] = 0;
        context[55] = 0;
        context[56] = refalrts::brackets_right( context[54], context[55], context[50], context[51] );
        if( ! context[56] )
          continue;
        refalrts::bracket_pointers(context[56], context[57]);
        context[58] = 0;
        context[59] = 0;
        context[60] = refalrts::brackets_right( context[58], context[59], context[50], context[51] );
        if( ! context[60] )
          continue;
        refalrts::bracket_pointers(context[60], context[61]);
        // closed e.new#35 as range 44
        // closed e.new#36 as range 46
        // closed e.new#37 as range 48
        // closed e.new#33 as range 58
        // closed e.new#34 as range 54
        // closed e.new#28 as range 52
        if( ! refalrts::svar_left( context[62], context[50], context[51] ) )
          continue;
        // closed e.new#32 as range 50
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern-L1#1/63 )/10 (/13 e.Pattern-R1#1/65 )/14 (/17 e.Vars1#1/67 )/18 (/29 '@'/31 # Restore-Hole/32 s.Level2#1/43 s.Top2#1/62 (/79 e.Pattern-L2#1/77 )/80 (/60 e.Pattern-R2#1/71 )/61 (/56 e.Vars2#1/73 )/57 )/30 e.Commands#1/75 >/1
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[50];
          context[70] = context[51];
          context[71] = context[58];
          context[72] = context[59];
          context[73] = context[54];
          context[74] = context[55];
          context[75] = context[52];
          context[76] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[32] ) )
            continue;
          context[77] = 0;
          context[78] = 0;
          context[79] = refalrts::brackets_left( context[77], context[78], context[69], context[70] );
          if( ! context[79] )
            continue;
          refalrts::bracket_pointers(context[79], context[80]);
          if( ! refalrts::empty_seq( context[69], context[70] ) )
            continue;
          // closed e.Pattern-L1#1 as range 63
          // closed e.Pattern-R1#1 as range 65
          // closed e.Vars1#1 as range 67
          // closed e.Pattern-L2#1 as range 77
          // closed e.Pattern-R2#1 as range 71
          // closed e.Vars2#1 as range 73
          // closed e.Commands#1 as range 75
          //DEBUG: s.Level1#1: 5
          //DEBUG: s.Top1#1: 6
          //DEBUG: s.Level2#1: 43
          //DEBUG: s.Top2#1: 62
          //DEBUG: e.Pattern-L1#1: 63
          //DEBUG: e.Pattern-R1#1: 65
          //DEBUG: e.Vars1#1: 67
          //DEBUG: e.Pattern-L2#1: 77
          //DEBUG: e.Pattern-R2#1: 71
          //DEBUG: e.Vars2#1: 73
          //DEBUG: e.Commands#1: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern-L1#1/63 )/10 (/13 e.Pattern-R1#1/65 )/14 (/17 e.Vars1#1/67 )/18 (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & Decompile-Pattern-Hole/32 AsIs: s.Level2#1/43 AsIs: s.Top2#1/62 AsIs: (/79 AsIs: e.Pattern-L2#1/77 AsIs: )/80 AsIs: (/60 AsIs: e.Pattern-R2#1/71 AsIs: )/61 AsIs: (/56 AsIs: e.Vars2#1/73 AsIs: )/57 } Tile{ AsIs: e.Commands#1/75 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[32], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[56], context[57] );
          refalrts::link_brackets( context[60], context[61] );
          refalrts::link_brackets( context[79], context[80] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_evar( res, context[31], context[57] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern-L1#1/63 )/10 (/13 e.Pattern-R1#1/65 )/14 (/17 e.Vars1#1/67 )/18 (/29 '@'/31 # Restore-NoHole/32 s.Level2#1/43 s.Top2#1/62 (/60 e.Pattern2#1/69 )/61 (/56 e.Vars2#1/71 )/57 )/30 e.Commands#1/73 >/1
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[49];
        context[69] = context[58];
        context[70] = context[59];
        context[71] = context[54];
        context[72] = context[55];
        context[73] = context[52];
        context[74] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        // closed e.Pattern-L1#1 as range 63
        // closed e.Pattern-R1#1 as range 65
        // closed e.Vars1#1 as range 67
        // closed e.Pattern2#1 as range 69
        // closed e.Vars2#1 as range 71
        // closed e.Commands#1 as range 73
        //DEBUG: s.Level1#1: 5
        //DEBUG: s.Top1#1: 6
        //DEBUG: s.Level2#1: 43
        //DEBUG: s.Top2#1: 62
        //DEBUG: e.Pattern-L1#1: 63
        //DEBUG: e.Pattern-R1#1: 65
        //DEBUG: e.Vars1#1: 67
        //DEBUG: e.Pattern2#1: 69
        //DEBUG: e.Vars2#1: 71
        //DEBUG: e.Commands#1: 73

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern-L1#1/63 )/10 (/13 e.Pattern-R1#1/65 )/14 (/17 e.Vars1#1/67 )/18 (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & Decompile-Pattern-NoHole/32 AsIs: s.Level2#1/43 AsIs: s.Top2#1/62 AsIs: (/60 AsIs: e.Pattern2#1/69 AsIs: )/61 AsIs: (/56 AsIs: e.Vars2#1/71 AsIs: )/57 } Tile{ AsIs: e.Commands#1/73 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[31]);
        refalrts::reinit_name(context[32], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[56], context[57] );
        refalrts::link_brackets( context[60], context[61] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[73], context[74] );
        res = refalrts::splice_evar( res, context[31], context[57] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.new#26/5 s.new#27/6 (/9 e.new#32/44 )/10 (/13 e.new#33/46 )/14 (/17 e.new#34/48 )/18 (/29 s.new#29/31 s.new#30/32 s.new#31/43 )/30 e.new#28/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.new#32 as range 44
      // closed e.new#33 as range 46
      // closed e.new#34 as range 48
      // closed e.new#28 as range 50
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/52 s.L#1/60 )/10 (/13 e.Pattern-R#1/54 )/14 (/17 e.Vars#1/56 )/18 (/29 s.Offset#1/31 # OVSYM/32 s.VarNo#1/43 )/30 e.Commands#1/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[32] ) )
          continue;
        // closed e.Pattern-R#1 as range 54
        // closed e.Vars#1 as range 56
        // closed e.Commands#1 as range 58
        if( ! refalrts::svar_right( context[60], context[52], context[53] ) )
          continue;
        // closed e.Pattern-L#1 as range 52
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 31
        //DEBUG: s.VarNo#1: 43
        //DEBUG: e.Pattern-R#1: 54
        //DEBUG: e.Vars#1: 56
        //DEBUG: e.Commands#1: 58
        //DEBUG: s.L#1: 60
        //DEBUG: e.Pattern-L#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/60 {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </61 & Add/62 1/63 s.Top#1/6/64 >/65 (/66 Tile{ AsIs: e.Pattern-L#1/52 } (/67 Tile{ Reuse: # s/32 AsIs: s.VarNo#1/43 } '='/68 Tile{ AsIs: s.Top#1/6 HalfReuse: )/9 } s.Top#1/6/69 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/54 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/56 HalfReuse: (/18 HalfReuse: # s/29 } s.VarNo#1/43/70 '='/71 s.Top#1/6/72 )/73 Tile{ AsIs: )/30 AsIs: e.Commands#1/58 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[61]);
        refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::copy_stvar(vm, context[64], context[6]);
        refalrts::alloc_close_call(vm, context[65]);
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_char(vm, context[68], '=');
        refalrts::copy_stvar(vm, context[69], context[6]);
        refalrts::copy_stvar(vm, context[70], context[43]);
        refalrts::alloc_char(vm, context[71], '=');
        refalrts::copy_stvar(vm, context[72], context[6]);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::update_ident(context[32], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[73] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[66], context[10] );
        refalrts::link_brackets( context[67], context[9] );
        refalrts::push_stack( vm, context[65] );
        refalrts::push_stack( vm, context[61] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[69], context[69] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[68], context[68] );
        res = refalrts::splice_evar( res, context[32], context[43] );
        res = refalrts::splice_evar( res, context[67], context[67] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[61], context[66] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/52 )/10 (/13 s.R#1/60 e.Pattern-R#1/54 )/14 (/17 e.Vars#1/56 )/18 (/29 s.Offset#1/31 # OVSYMR/32 s.VarNo#1/43 )/30 e.Commands#1/58 >/1
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 52
      // closed e.Vars#1 as range 56
      // closed e.Commands#1 as range 58
      if( ! refalrts::svar_left( context[60], context[54], context[55] ) )
        continue;
      // closed e.Pattern-R#1 as range 54
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: s.VarNo#1: 43
      //DEBUG: e.Pattern-L#1: 52
      //DEBUG: e.Vars#1: 56
      //DEBUG: e.Commands#1: 58
      //DEBUG: s.R#1: 60
      //DEBUG: e.Pattern-R#1: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R#1/60 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } </61 & Add/62 1/63 s.Top#1/6/64 >/65 Tile{ AsIs: (/9 AsIs: e.Pattern-L#1/52 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: s.Top#1/6 } (/66 Tile{ Reuse: # s/32 AsIs: s.VarNo#1/43 } '='/67 s.Top#1/6/68 )/69 Tile{ AsIs: e.Pattern-R#1/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/56 HalfReuse: (/18 HalfReuse: # s/29 } s.VarNo#1/43/70 '='/71 s.Top#1/6/72 )/73 Tile{ AsIs: )/30 AsIs: e.Commands#1/58 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[61]);
      refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[63], 1UL);
      refalrts::copy_stvar(vm, context[64], context[6]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_char(vm, context[67], '=');
      refalrts::copy_stvar(vm, context[68], context[6]);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_stvar(vm, context[70], context[43]);
      refalrts::alloc_char(vm, context[71], '=');
      refalrts::copy_stvar(vm, context[72], context[6]);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::update_ident(context[32], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_ident(context[29], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[30] );
      refalrts::link_brackets( context[18], context[73] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[61] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[70], context[73] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[32], context[43] );
      res = refalrts::splice_evar( res, context[66], context[66] );
      res = refalrts::splice_evar( res, context[6], context[6] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[61], context[65] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#22/33 s.new#23/43 )/10 (/13 e.new#24/35 )/14 (/17 e.new#25/37 )/18 (/29 s.new#19/31 s.new#20/32 e.new#21/39 )/30 e.new#18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#24 as range 35
      // closed e.new#25 as range 37
      // closed e.new#21 as range 39
      // closed e.new#18 as range 41
      if( ! refalrts::svar_right( context[43], context[33], context[34] ) )
        continue;
      // closed e.new#22 as range 33
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 s.L#1/43 )/10 (/13 s.R#1/52 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # CL/32 )/30 e.Commands#1/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.Pattern-L#1 as range 44
        // closed e.Vars#1 as range 48
        // closed e.Commands#1 as range 50
        if( ! refalrts::svar_left( context[52], context[46], context[47] ) )
          continue;
        // closed e.Pattern-R#1 as range 46
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.L#1: 43
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-L#1: 44
        //DEBUG: e.Vars#1: 48
        //DEBUG: e.Commands#1: 50
        //DEBUG: s.R#1: 52
        //DEBUG: e.Pattern-R#1: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/43 {REMOVED TILE} s.R#1/52 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/44 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R#1/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/50 } Tile{ AsIs: )/30 } s.Top#1/6/53 Tile{ HalfReuse: </32 } & Add/54 s.Top#1/6/55 1/56 >/57 Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_name(vm, context[54], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[55], context[6]);
        refalrts::alloc_number(vm, context[56], 1UL);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1]);
        refalrts::reinit_open_call(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_evar( res, context[32], context[32] );
        res = refalrts::splice_evar( res, context[53], context[53] );
        res = refalrts::splice_evar( res, context[30], context[30] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 s.L#1/43 )/10 (/13 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # OEXP/32 s.IdR#1/54 )/30 e.Commands#1/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 44
      // closed e.Pattern-R#1 as range 46
      // closed e.Vars#1 as range 48
      // closed e.Commands#1 as range 52
      if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
        continue;
      if( ! refalrts::empty_seq( context[50], context[51] ) )
        continue;
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.L#1: 43
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 44
      //DEBUG: e.Pattern-R#1: 46
      //DEBUG: e.Vars#1: 48
      //DEBUG: e.Commands#1: 52
      //DEBUG: s.IdR#1: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L#1/43 {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} s.IdR#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Decompile-Pattern-Hole$19=1/0 HalfReuse: s.IdR1 #54/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/44 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/52 } Tile{ AsIs: )/30 } e.Vars#1/48/55 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[55], context[56], context[48], context[49]);
      refalrts::reinit_open_call(context[32]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1]);
      refalrts::reinit_svar( context[4], context[54] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[30], context[30] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[29] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[32], context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#22/33 )/10 (/13 s.new#23/43 e.new#24/35 )/14 (/17 e.new#25/37 )/18 (/29 s.new#19/31 s.new#20/32 e.new#21/39 )/30 e.new#18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new#22 as range 33
      // closed e.new#25 as range 37
      // closed e.new#21 as range 39
      // closed e.new#18 as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.new#24 as range 35
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/44 )/10 (/13 s.R#1/43 e.Pattern-R#1/46 )/14 (/17 e.Vars#1/48 )/18 (/29 s.Offset#1/31 # OEXPR/32 s.IdR#1/54 )/30 e.Commands#1/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[32] ) )
          continue;
        // closed e.Pattern-L#1 as range 44
        // closed e.Pattern-R#1 as range 46
        // closed e.Vars#1 as range 48
        // closed e.Commands#1 as range 52
        if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.R#1: 43
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-L#1: 44
        //DEBUG: e.Pattern-R#1: 46
        //DEBUG: e.Vars#1: 48
        //DEBUG: e.Commands#1: 52
        //DEBUG: s.IdR#1: 54

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R#1/43 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} s.IdR#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1/0 HalfReuse: s.IdR1 #54/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/44 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R#1/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/52 } Tile{ AsIs: )/30 } e.Vars#1/48/55 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[55], context[56], context[48], context[49]);
        refalrts::reinit_open_call(context[32]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1]);
        refalrts::reinit_svar( context[4], context[54] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[30], context[30] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_evar( res, context[32], context[32] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.new#26/5 s.new#27/6 (/9 e.new#31/44 )/10 (/13 s.new#32/43 e.new#33/46 )/14 (/17 e.new#34/48 )/18 (/29 s.new#29/31 s.new#30/32 )/30 e.new#28/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.new#31 as range 44
        // closed e.new#33 as range 46
        // closed e.new#34 as range 48
        // closed e.new#28 as range 50
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/52 s.L#1/60 )/10 (/13 s.R#1/43 e.Pattern-R#1/54 )/14 (/17 e.Vars#1/56 )/18 (/29 s.Offset#1/31 # PS/32 )/30 e.Commands#1/58 >/1
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[32] ) )
            continue;
          // closed e.Pattern-R#1 as range 54
          // closed e.Vars#1 as range 56
          // closed e.Commands#1 as range 58
          if( ! refalrts::svar_right( context[60], context[52], context[53] ) )
            continue;
          // closed e.Pattern-L#1 as range 52
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.R#1: 43
          //DEBUG: s.Offset#1: 31
          //DEBUG: e.Pattern-R#1: 54
          //DEBUG: e.Vars#1: 56
          //DEBUG: e.Commands#1: 58
          //DEBUG: s.L#1: 60
          //DEBUG: e.Pattern-L#1: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/60 {REMOVED TILE} s.R#1/43 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/52 } Tile{ AsIs: )/10 HalfReuse: s.R1 #43/13 } Tile{ HalfReuse: (/32 } Tile{ AsIs: e.Pattern-R#1/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/56 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/58 } Tile{ AsIs: )/30 } s.Top#1/6/61 </62 & Add/63 s.Top#1/6/64 1/65 >/66 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[61], context[6]);
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[64], context[6]);
          refalrts::alloc_number(vm, context[65], 1UL);
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1]);
          refalrts::reinit_svar( context[13], context[43] );
          refalrts::reinit_open_bracket(context[32]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[62] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[32], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[61], context[66] );
          res = refalrts::splice_evar( res, context[30], context[30] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[14], context[29] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[10], context[13] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/52 )/10 (/13 s.R#1/43 e.Pattern-R#1/54 )/14 (/17 e.Vars#1/56 )/18 (/29 s.Offset#1/31 # PSR/32 )/30 e.Commands#1/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[32] ) )
          continue;
        // closed e.Pattern-L#1 as range 52
        // closed e.Pattern-R#1 as range 54
        // closed e.Vars#1 as range 56
        // closed e.Commands#1 as range 58
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.R#1: 43
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-L#1: 52
        //DEBUG: e.Pattern-R#1: 54
        //DEBUG: e.Vars#1: 56
        //DEBUG: e.Commands#1: 58

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.R#1/43 {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/52 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R#1/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/56 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/58 } Tile{ AsIs: )/30 } s.Top#1/6/60 Tile{ HalfReuse: </32 } & Add/61 s.Top#1/6/62 1/63 >/64 Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[60], context[6]);
        refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[62], context[6]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::alloc_close_call(vm, context[64]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1]);
        refalrts::reinit_open_call(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[64] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[61], context[64] );
        res = refalrts::splice_evar( res, context[32], context[32] );
        res = refalrts::splice_evar( res, context[60], context[60] );
        res = refalrts::splice_evar( res, context[30], context[30] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.new#26/5 s.new#27/6 (/9 e.new#32/44 s.new#33/54 )/10 (/13 s.new#34/43 e.new#35/46 )/14 (/17 e.new#36/48 )/18 (/29 s.new#29/31 s.new#30/32 e.new#31/50 )/30 e.new#28/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      // closed e.new#35 as range 46
      // closed e.new#36 as range 48
      // closed e.new#31 as range 50
      // closed e.new#28 as range 52
      if( ! refalrts::svar_right( context[54], context[44], context[45] ) )
        continue;
      // closed e.new#32 as range 44
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/55 s.L#1/54 )/10 (/13 s.R#1/43 e.Pattern-R#1/57 )/14 (/17 e.Vars#1/59 )/18 (/29 s.Offset#1/31 # SETB/32 s.NewL#1/65 s.NewR#1/66 )/30 e.Commands#1/63 >/1
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        context[64] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[32] ) )
          continue;
        // closed e.Pattern-L#1 as range 55
        // closed e.Pattern-R#1 as range 57
        // closed e.Vars#1 as range 59
        // closed e.Commands#1 as range 63
        if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
          continue;
        if( ! refalrts::svar_left( context[66], context[61], context[62] ) )
          continue;
        if( ! refalrts::empty_seq( context[61], context[62] ) )
          continue;
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.L#1: 54
        //DEBUG: s.R#1: 43
        //DEBUG: s.Offset#1: 31
        //DEBUG: e.Pattern-L#1: 55
        //DEBUG: e.Pattern-R#1: 57
        //DEBUG: e.Vars#1: 59
        //DEBUG: e.Commands#1: 63
        //DEBUG: s.NewL#1: 65
        //DEBUG: s.NewR#1: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/55 } (/67 Tile{ HalfReuse: # Hole/10 HalfReuse: s.L1 #54/13 AsIs: s.R#1/43 } )/68 Tile{ AsIs: e.Pattern-R#1/57 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/59 AsIs: )/18 AsIs: (/29 AsIs: s.Offset#1/31 AsIs: # SETB/32 AsIs: s.NewL#1/65 AsIs: s.NewR#1/66 AsIs: )/30 AsIs: e.Commands#1/63 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::reinit_ident(context[10], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[13], context[54] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[68], context[68] );
        res = refalrts::splice_evar( res, context[10], context[43] );
        res = refalrts::splice_evar( res, context[67], context[67] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/55 s.L#1/54 )/10 (/13 s.R#1/43 e.Pattern-R#1/57 )/14 (/17 e.Vars#1/59 )/18 (/29 s.Offset#1/31 # EMP/32 )/30 e.Commands#1/61 >/1
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[48];
      context[60] = context[49];
      context[61] = context[52];
      context[62] = context[53];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[50], context[51] ) )
        continue;
      // closed e.Pattern-L#1 as range 55
      // closed e.Pattern-R#1 as range 57
      // closed e.Vars#1 as range 59
      // closed e.Commands#1 as range 61
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.L#1: 54
      //DEBUG: s.R#1: 43
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 55
      //DEBUG: e.Pattern-R#1: 57
      //DEBUG: e.Vars#1: 59
      //DEBUG: e.Commands#1: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/54 )/10 (/13 s.R#1/43 {REMOVED TILE} {REMOVED TILE} (/29 s.Offset#1/31 # EMP/32 )/30 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/55 } Tile{ AsIs: e.Pattern-R#1/57 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/59 AsIs: )/18 } Tile{ AsIs: e.Commands#1/61 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new#16/5 s.new#17/6 (/9 e.new#21/33 )/10 (/13 e.new#22/35 )/14 (/17 e.new#23/37 )/18 (/29 s.new#19/31 s.new#20/32 )/30 e.new#18/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new#21 as range 33
      // closed e.new#22 as range 35
      // closed e.new#23 as range 37
      // closed e.new#18 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.new#24/5 s.new#25/6 (/9 e.new#32/41 s.new#33/53 )/10 (/13 e.new#34/43 )/14 (/17 e.new#35/45 )/18 (/29 s.new#30/31 s.new#31/32 )/30 (/51 e.new#26/49 s.new#27/55 s.new#28/54 )/52 e.new#29/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = 0;
        context[50] = 0;
        context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
        if( ! context[51] )
          continue;
        refalrts::bracket_pointers(context[51], context[52]);
        // closed e.new#34 as range 43
        // closed e.new#35 as range 45
        // closed e.new#29 as range 47
        if( ! refalrts::svar_right( context[53], context[41], context[42] ) )
          continue;
        // closed e.new#32 as range 41
        if( ! refalrts::svar_right( context[54], context[49], context[50] ) )
          continue;
        if( ! refalrts::svar_right( context[55], context[49], context[50] ) )
          continue;
        // closed e.new#26 as range 49
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/56 s.L#1/53 )/10 (/13 e.Pattern-R#1/58 )/14 (/17 e.Vars#1/60 )/18 (/29 s.Offset1#1/31 # PLEN/32 )/30 (/51 s.Offset2#1/55 # LEN/54 )/52 e.Commands#1/62 >/1
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[47];
          context[63] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[32] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[54] ) )
            continue;
          if( ! refalrts::empty_seq( context[49], context[50] ) )
            continue;
          // closed e.Pattern-L#1 as range 56
          // closed e.Pattern-R#1 as range 58
          // closed e.Vars#1 as range 60
          // closed e.Commands#1 as range 62
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.L#1: 53
          //DEBUG: s.Offset1#1: 31
          //DEBUG: s.Offset2#1: 55
          //DEBUG: e.Pattern-L#1: 56
          //DEBUG: e.Pattern-R#1: 58
          //DEBUG: e.Vars#1: 60
          //DEBUG: e.Commands#1: 62

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/53 {REMOVED TILE} s.Offset1#1/31 {REMOVED TILE} {REMOVED TILE} s.Offset2#1/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/56 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/58 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/62 } Tile{ AsIs: )/30 HalfReuse: s.Top1 #6/51 } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Add/54 HalfReuse: s.Top1 #6/52 } 1/64 >/65 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1]);
          refalrts::reinit_svar( context[51], context[6] );
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[54], functions[efunc_Add]);
          refalrts::reinit_svar( context[52], context[6] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[54], context[52] );
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[30], context[51] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_evar( res, context[10], context[29] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/56 s.L#1/53 )/10 (/13 e.Pattern-R#1/58 )/14 (/17 e.Vars#1/60 )/18 (/29 s.Offset1#1/31 # PLENS/32 )/30 (/51 s.Offset2#1/66 # LENS/55 s.Char#1/54 )/52 e.Commands#1/64 >/1
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[49];
          context[63] = context[50];
          context[64] = context[47];
          context[65] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[32] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[55] ) )
            continue;
          // closed e.Pattern-L#1 as range 56
          // closed e.Pattern-R#1 as range 58
          // closed e.Vars#1 as range 60
          // closed e.Commands#1 as range 64
          if( ! refalrts::svar_left( context[66], context[62], context[63] ) )
            continue;
          if( ! refalrts::empty_seq( context[62], context[63] ) )
            continue;
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.L#1: 53
          //DEBUG: s.Offset1#1: 31
          //DEBUG: s.Char#1: 54
          //DEBUG: e.Pattern-L#1: 56
          //DEBUG: e.Pattern-R#1: 58
          //DEBUG: e.Vars#1: 60
          //DEBUG: e.Commands#1: 64
          //DEBUG: s.Offset2#1: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/53 {REMOVED TILE} s.Offset1#1/31 {REMOVED TILE} {REMOVED TILE} s.Offset2#1/66 {REMOVED TILE} s.Char#1/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/56 } Tile{ AsIs: )/52 } Tile{ HalfReuse: s.Char1 #54/10 AsIs: (/13 AsIs: e.Pattern-R#1/58 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/64 } Tile{ AsIs: )/30 HalfReuse: s.Top1 #6/51 } Tile{ HalfReuse: </55 } Tile{ HalfReuse: & Add/32 } s.Top#1/6/67 1/68 >/69 </70 & Add/71 s.Top#1/6/72 2/73 >/74 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[67], context[6]);
          refalrts::alloc_number(vm, context[68], 1UL);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::alloc_open_call(vm, context[70]);
          refalrts::alloc_name(vm, context[71], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[72], context[6]);
          refalrts::alloc_number(vm, context[73], 2UL);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1]);
          refalrts::reinit_svar( context[10], context[54] );
          refalrts::reinit_svar( context[51], context[6] );
          refalrts::reinit_open_call(context[55]);
          refalrts::reinit_name(context[32], functions[efunc_Add]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[55] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[52] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[67], context[74] );
          res = refalrts::splice_evar( res, context[32], context[32] );
          res = refalrts::splice_evar( res, context[55], context[55] );
          res = refalrts::splice_evar( res, context[30], context[51] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[10], context[29] );
          res = refalrts::splice_evar( res, context[52], context[52] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/56 s.L#1/53 )/10 (/13 s.R#1/64 e.Pattern-R#1/58 )/14 (/17 e.Vars#1/60 )/18 (/29 s.Offset1#1/31 # PLENP/32 )/30 (/51 s.Offset2#1/55 # LENP/54 )/52 e.Commands#1/62 >/1
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        context[63] = context[48];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[32] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[54] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        // closed e.Pattern-L#1 as range 56
        // closed e.Vars#1 as range 60
        // closed e.Commands#1 as range 62
        if( ! refalrts::svar_left( context[64], context[58], context[59] ) )
          continue;
        // closed e.Pattern-R#1 as range 58
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.L#1: 53
        //DEBUG: s.Offset1#1: 31
        //DEBUG: s.Offset2#1: 55
        //DEBUG: e.Pattern-L#1: 56
        //DEBUG: e.Vars#1: 60
        //DEBUG: e.Commands#1: 62
        //DEBUG: s.R#1: 64
        //DEBUG: e.Pattern-R#1: 58

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L#1/53 {REMOVED TILE} s.R#1/64 {REMOVED TILE} {REMOVED TILE} s.Offset1#1/31 {REMOVED TILE} s.Offset2#1/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L#1/56 } Tile{ HalfReuse: )/32 HalfReuse: s.R1 #64/30 AsIs: (/51 } Tile{ AsIs: e.Pattern-R#1/58 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands#1/62 } Tile{ AsIs: )/10 HalfReuse: s.Top1 #6/13 } </65 & Add/66 Tile{ HalfReuse: s.Top1 #6/54 HalfReuse: 1/52 } >/67 </68 & Add/69 s.Top#1/6/70 2/71 >/72 </73 & Add/74 s.Top#1/6/75 3/76 >/77 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_Add]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_call(vm, context[68]);
        refalrts::alloc_name(vm, context[69], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[70], context[6]);
        refalrts::alloc_number(vm, context[71], 2UL);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_open_call(vm, context[73]);
        refalrts::alloc_name(vm, context[74], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[75], context[6]);
        refalrts::alloc_number(vm, context[76], 3UL);
        refalrts::alloc_close_call(vm, context[77]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::reinit_svar( context[30], context[64] );
        refalrts::reinit_svar( context[13], context[6] );
        refalrts::reinit_svar( context[54], context[6] );
        refalrts::reinit_number(context[52], 1UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[77] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[68] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[65] );
        refalrts::link_brackets( context[29], context[10] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[51], context[14] );
        refalrts::link_brackets( context[9], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[77] );
        res = refalrts::splice_evar( res, context[54], context[52] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[32], context[51] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/41 )/10 (/13 e.Pattern-R#1/43 )/14 (/17 e.Vars#1/45 )/18 (/29 s.Offset#1/31 # STLEN/32 )/30 e.Commands#1/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[32] ) )
        continue;
      // closed e.Pattern-L#1 as range 41
      // closed e.Pattern-R#1 as range 43
      // closed e.Vars#1 as range 45
      // closed e.Commands#1 as range 47
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 31
      //DEBUG: e.Pattern-L#1: 41
      //DEBUG: e.Pattern-R#1: 43
      //DEBUG: e.Vars#1: 45
      //DEBUG: e.Commands#1: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/29 } Tile{ Reuse: # StartBlock/32 AsIs: )/30 } Tile{ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 } </49 & Add/50 1/51 Tile{ AsIs: s.Level#1/5 } >/52 Tile{ AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/41 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/45 AsIs: )/18 } Tile{ AsIs: e.Commands#1/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_ident(context[32], identifiers[ident_StartBlock]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[6], context[18] );
      res = refalrts::splice_evar( res, context[52], context[52] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[49], context[51] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_evar( res, context[29], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/33 )/10 (/13 e.Pattern-R#1/35 )/14 (/17 e.Vars#1/37 )/18 (/29 s.Offset#1/31 # LABEL/32 e.BlockName#1/39 )/30 e.Commands#1/41 >/1
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[25];
    context[42] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[32] ) )
      continue;
    // closed e.Pattern-L#1 as range 33
    // closed e.Pattern-R#1 as range 35
    // closed e.Vars#1 as range 37
    // closed e.BlockName#1 as range 39
    // closed e.Commands#1 as range 41
    //DEBUG: s.Level#1: 5
    //DEBUG: s.Top#1: 6
    //DEBUG: s.Offset#1: 31
    //DEBUG: e.Pattern-L#1: 33
    //DEBUG: e.Pattern-R#1: 35
    //DEBUG: e.Vars#1: 37
    //DEBUG: e.BlockName#1: 39
    //DEBUG: e.Commands#1: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 s.Offset#1/31 # LABEL/32 e.BlockName#1/39 )/30 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/33 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/37 AsIs: )/18 } Tile{ AsIs: e.Commands#1/41 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::splice_to_freelist_open( vm, context[18], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 s.L#1/23 )/10 (/13 s.R#1/24 )/14 (/17 )/18 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    //DEBUG: s.Level#1: 5
    //DEBUG: s.Top#1: 6
    //DEBUG: s.L#1: 23
    //DEBUG: s.R#1: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 s.L#1/23 )/10 (/13 s.R#1/24 )/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/17 HalfReuse: # EndOfFunction/18 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[18], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[17], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/7 )/10 (/13 e.Pattern-R#1/11 )/14 (/17 e.Vars#1/15 )/18 e.Commands#1/2 >/1
  // closed e.Pattern-L#1 as range 7
  // closed e.Pattern-R#1 as range 11
  // closed e.Vars#1 as range 15
  // closed e.Commands#1 as range 2
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern-L#1: 7
  //DEBUG: e.Pattern-R#1: 11
  //DEBUG: e.Vars#1: 15
  //DEBUG: e.Commands#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/19 '='/20 Tile{ HalfReuse: 'A'/0 HalfReuse: ' '/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R#1/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars#1/15 AsIs: )/18 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands#1/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_char(vm, context[20], '=');
  refalrts::reinit_char(context[0], 'A');
  refalrts::reinit_char(context[4], ' ');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[19], context[1] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Patternm_Hole("Decompile-Pattern-Hole", COOKIE1_, COOKIE2_, func_Decompilem_Patternm_Hole);


static refalrts::FnResult func_Rev(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Rev/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Rev/4 t.First#1/7 e.Middle#1/5 t.Last#1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    // closed e.Middle#1 as range 5
    //DEBUG: t.First#1: 7
    //DEBUG: t.Last#1: 9
    //DEBUG: e.Middle#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Last#1/9 } Tile{ AsIs: </0 AsIs: & Rev/4 } Tile{ AsIs: e.Middle#1/5 } Tile{ AsIs: >/1 } Tile{ AsIs: t.First#1/7 } Tile{ ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[1], context[1] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rev/4 e.ZeroOrOne#1/2 >/1
  // closed e.ZeroOrOne#1 as range 2
  //DEBUG: e.ZeroOrOne#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Rev/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ZeroOrOne#1/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Rev("Rev", COOKIE1_, COOKIE2_, func_Rev);


static refalrts::FnResult func_Decompilem_Patternm_NoHole(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  // </0 & Decompile-Pattern-NoHole/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Decompile-Pattern-NoHole/4 s.new#1/5 s.new#2/6 (/9 e.new#3/7 )/10 (/13 e.new#4/11 )/14 e.new#5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 7
  // closed e.new#4 as range 11
  // closed e.new#5 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole/4 s.new#6/5 s.new#7/6 (/9 e.new#12/15 )/10 (/13 e.new#13/17 )/14 (/23 s.new#8/25 s.new#9/26 e.new#10/21 )/24 e.new#11/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new#12 as range 15
    // closed e.new#13 as range 17
    // closed e.new#11 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new#10 as range 21
    do {
      // </0 & Decompile-Pattern-NoHole/4 s.new#14/5 s.new#15/6 (/9 e.new#21/27 )/10 (/13 e.new#22/29 )/14 (/23 s.new#17/25 s.new#18/26 e.new#19/31 s.new#20/35 )/24 e.new#16/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new#21 as range 27
      // closed e.new#22 as range 29
      // closed e.new#16 as range 33
      if( ! refalrts::svar_right( context[35], context[31], context[32] ) )
        continue;
      // closed e.new#19 as range 31
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern-L#1/45 (/51 # Hole/53 s.L#1/54 s.R#1/55 )/52 e.Pattern-R#1/47 )/10 (/13 e.Vars#1/38 )/14 (/23 s.Offset#1/25 # SETB/26 s.L#1/44 s.R#1/35 )/24 e.Commands#1/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[26] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Commands#1 as range 42
        if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        context[45] = 0;
        context[46] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[47] = context[36];
          context[48] = context[37];
          context[49] = 0;
          context[50] = 0;
          context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
          if( ! context[51] )
            continue;
          refalrts::bracket_pointers(context[51], context[52]);
          context[53] = refalrts::ident_left( identifiers[ident_Hole], context[49], context[50] );
          if( ! context[53] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[44], context[49], context[50] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[55], context[35], context[49], context[50] ) )
            continue;
          if( ! refalrts::empty_seq( context[49], context[50] ) )
            continue;
          // closed e.Pattern-R#1 as range 47
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.Offset#1: 25
          //DEBUG: s.R#1: 35
          //DEBUG: e.Vars#1: 38
          //DEBUG: e.Commands#1: 42
          //DEBUG: s.L#1: 44
          //DEBUG: e.Pattern-L#1: 45
          //DEBUG: e.Pattern-R#1: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L#1/54 s.R#1/55 {REMOVED TILE} {REMOVED TILE} s.Offset#1/25 # SETB/26 s.L#1/44 s.R#1/35 )/24 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern-L#1/45 HalfReuse: s.L1 #54/51 HalfReuse: )/53 } Tile{ AsIs: (/23 } Tile{ HalfReuse: s.R1 #55/52 AsIs: e.Pattern-R#1/47 AsIs: )/10 AsIs: (/13 AsIs: e.Vars#1/38 AsIs: )/14 } Tile{ AsIs: e.Commands#1/42 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::reinit_close_bracket(context[53]);
          refalrts::reinit_svar( context[52], context[55] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[23], context[10] );
          refalrts::link_brackets( context[9], context[53] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[52], context[14] );
          res = refalrts::splice_evar( res, context[23], context[23] );
          refalrts::splice_to_freelist_open( vm, context[53], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[45], context[46], context[36], context[37] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern#1/36 )/10 (/13 e.Vars#1/38 )/14 (/23 s.Offset#1/25 # RDY/26 0/35 )/24 e.Commands#1/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[26] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[35] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.Pattern#1 as range 36
      // closed e.Vars#1 as range 38
      // closed e.Commands#1 as range 40
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 25
      //DEBUG: e.Pattern#1: 36
      //DEBUG: e.Vars#1: 38
      //DEBUG: e.Commands#1: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/25 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } Tile{ HalfReuse: # Pattern/23 } s.Level#1/5/42 Tile{ AsIs: e.Pattern#1/36 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 Reuse: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Vars#1/38 } Tile{ AsIs: )/10 } Tile{ HalfReuse: (/26 HalfReuse: '$'/35 AsIs: )/24 AsIs: e.Commands#1/40 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[42], context[5]);
      refalrts::reinit_ident(context[23], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Result]);
      refalrts::reinit_open_bracket(context[26]);
      refalrts::reinit_char(context[35], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[10], context[10] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[42], context[42] );
      res = refalrts::splice_evar( res, context[23], context[23] );
      res = refalrts::splice_evar( res, context[13], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern#1/27 )/10 (/13 e.Vars#1/29 )/14 (/23 s.Offset#1/25 # PUSHVF/26 )/24 e.Commands#1/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Pattern#1 as range 27
      // closed e.Vars#1 as range 29
      // closed e.Commands#1 as range 31
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 25
      //DEBUG: e.Pattern#1: 27
      //DEBUG: e.Vars#1: 29
      //DEBUG: e.Commands#1: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/25 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/33 # Pattern/34 s.Level#1/5/35 Tile{ AsIs: e.Pattern#1/27 } Tile{ AsIs: )/10 AsIs: (/13 } # StartCondition/36 )/37 Tile{ AsIs: </0 Reuse: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 } Tile{ AsIs: e.Vars#1/29 } Tile{ AsIs: )/14 AsIs: (/23 } Tile{ HalfReuse: '$'/26 AsIs: )/24 AsIs: e.Commands#1/31 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Pattern]);
      refalrts::copy_stvar(vm, context[35], context[5]);
      refalrts::alloc_ident(vm, context[36], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Result]);
      refalrts::reinit_char(context[26], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::link_brackets( context[13], context[37] );
      refalrts::link_brackets( context[33], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[14], context[23] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole/4 s.new#14/5 s.new#15/6 (/9 e.new#21/27 )/10 (/13 e.new#22/29 )/14 (/23 s.new#17/25 s.new#18/26 s.new#19/35 e.new#20/31 )/24 e.new#16/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new#21 as range 27
      // closed e.new#22 as range 29
      // closed e.new#16 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new#20 as range 31
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern#1/36 )/10 (/13 e.Vars#1/38 )/14 (/23 s.Offset#1/25 # TRAN/26 s.Jump#1/35 )/24 e.Commands-B#1/42 (/48 s.Jump#1/50 e.Command#1/46 )/49 e.Commands-E#1/44 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Pattern#1 as range 36
        // closed e.Vars#1 as range 38
        context[42] = 0;
        context[43] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[44] = context[40];
          context[45] = context[41];
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::brackets_left( context[46], context[47], context[44], context[45] );
          if( ! context[48] )
            continue;
          refalrts::bracket_pointers(context[48], context[49]);
          if( ! refalrts::repeated_stvar_left( vm, context[50], context[35], context[46], context[47] ) )
            continue;
          // closed e.Command#1 as range 46
          // closed e.Commands-E#1 as range 44
          //DEBUG: s.Level#1: 5
          //DEBUG: s.Top#1: 6
          //DEBUG: s.Offset#1: 25
          //DEBUG: s.Jump#1: 35
          //DEBUG: e.Pattern#1: 36
          //DEBUG: e.Vars#1: 38
          //DEBUG: e.Commands-B#1: 42
          //DEBUG: e.Command#1: 46
          //DEBUG: e.Commands-E#1: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset#1/25 {REMOVED TILE} s.Jump#1/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern#1/36 AsIs: )/10 AsIs: (/13 AsIs: e.Vars#1/38 AsIs: )/14 } Tile{ AsIs: e.Commands-B#1/42 } Tile{ AsIs: (/23 } '@'/51 Tile{ Reuse: # Restore-NoHole/26 } s.Level#1/5/52 s.Top#1/6/53 (/54 e.Pattern#1/36/55 Tile{ AsIs: )/24 } (/57 e.Vars#1/38/58 )/60 )/61 Tile{ AsIs: (/48 AsIs: s.Jump#1/50 AsIs: e.Command#1/46 AsIs: )/49 AsIs: e.Commands-E#1/44 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[51], '@');
          refalrts::copy_stvar(vm, context[52], context[5]);
          refalrts::copy_stvar(vm, context[53], context[6]);
          refalrts::alloc_open_bracket(vm, context[54]);
          refalrts::copy_evar(vm, context[55], context[56], context[36], context[37]);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::copy_evar(vm, context[58], context[59], context[38], context[39]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::alloc_close_bracket(vm, context[61]);
          refalrts::update_ident(context[26], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::link_brackets( context[23], context[61] );
          refalrts::link_brackets( context[57], context[60] );
          refalrts::link_brackets( context[54], context[24] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[48];
          res = refalrts::splice_evar( res, context[57], context[61] );
          res = refalrts::splice_evar( res, context[24], context[24] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[52], context[54] );
          res = refalrts::splice_evar( res, context[26], context[26] );
          res = refalrts::splice_evar( res, context[51], context[51] );
          res = refalrts::splice_evar( res, context[23], context[23] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[42], context[43], context[40], context[41] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.new#23/5 s.new#24/6 (/9 e.new#32/36 )/10 (/13 e.new#33/38 )/14 (/23 '@'/25 s.new#26/26 s.new#27/35 s.new#28/52 e.new#29/40 (/50 e.new#30/48 )/51 (/46 e.new#31/44 )/47 )/24 e.new#25/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      if( ! refalrts::char_term( '@', context[25] ) )
        continue;
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_right( context[44], context[45], context[40], context[41] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_right( context[48], context[49], context[40], context[41] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      // closed e.new#32 as range 36
      // closed e.new#33 as range 38
      // closed e.new#30 as range 48
      // closed e.new#31 as range 44
      // closed e.new#25 as range 42
      if( ! refalrts::svar_left( context[52], context[40], context[41] ) )
        continue;
      // closed e.new#29 as range 40
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern1#1/53 )/10 (/13 e.Vars1#1/55 )/14 (/23 '@'/25 # Restore-Hole/26 s.Level2#1/35 s.Top2#1/52 (/67 e.Pattern-L2#1/65 )/68 (/50 e.Pattern-R2#1/59 )/51 (/46 e.Vars2#1/61 )/47 )/24 e.Commands#1/63 >/1
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[41];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[44];
        context[62] = context[45];
        context[63] = context[42];
        context[64] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[26] ) )
          continue;
        context[65] = 0;
        context[66] = 0;
        context[67] = refalrts::brackets_left( context[65], context[66], context[57], context[58] );
        if( ! context[67] )
          continue;
        refalrts::bracket_pointers(context[67], context[68]);
        if( ! refalrts::empty_seq( context[57], context[58] ) )
          continue;
        // closed e.Pattern1#1 as range 53
        // closed e.Vars1#1 as range 55
        // closed e.Pattern-L2#1 as range 65
        // closed e.Pattern-R2#1 as range 59
        // closed e.Vars2#1 as range 61
        // closed e.Commands#1 as range 63
        //DEBUG: s.Level1#1: 5
        //DEBUG: s.Top1#1: 6
        //DEBUG: s.Level2#1: 35
        //DEBUG: s.Top2#1: 52
        //DEBUG: e.Pattern1#1: 53
        //DEBUG: e.Vars1#1: 55
        //DEBUG: e.Pattern-L2#1: 65
        //DEBUG: e.Pattern-R2#1: 59
        //DEBUG: e.Vars2#1: 61
        //DEBUG: e.Commands#1: 63

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern1#1/53 )/10 (/13 e.Vars1#1/55 )/14 (/23 {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & Decompile-Pattern-Hole/26 AsIs: s.Level2#1/35 AsIs: s.Top2#1/52 AsIs: (/67 AsIs: e.Pattern-L2#1/65 AsIs: )/68 AsIs: (/50 AsIs: e.Pattern-R2#1/59 AsIs: )/51 AsIs: (/46 AsIs: e.Vars2#1/61 AsIs: )/47 } Tile{ AsIs: e.Commands#1/63 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[26], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[25], context[47] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern1#1/53 )/10 (/13 e.Vars1#1/55 )/14 (/23 '@'/25 # Restore-NoHole/26 s.Level2#1/35 s.Top2#1/52 (/50 e.Pattern2#1/57 )/51 (/46 e.Vars2#1/59 )/47 )/24 e.Commands#1/61 >/1
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[48];
      context[58] = context[49];
      context[59] = context[44];
      context[60] = context[45];
      context[61] = context[42];
      context[62] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.Pattern1#1 as range 53
      // closed e.Vars1#1 as range 55
      // closed e.Pattern2#1 as range 57
      // closed e.Vars2#1 as range 59
      // closed e.Commands#1 as range 61
      //DEBUG: s.Level1#1: 5
      //DEBUG: s.Top1#1: 6
      //DEBUG: s.Level2#1: 35
      //DEBUG: s.Top2#1: 52
      //DEBUG: e.Pattern1#1: 53
      //DEBUG: e.Vars1#1: 55
      //DEBUG: e.Pattern2#1: 57
      //DEBUG: e.Vars2#1: 59
      //DEBUG: e.Commands#1: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level1#1/5 s.Top1#1/6 (/9 e.Pattern1#1/53 )/10 (/13 e.Vars1#1/55 )/14 (/23 {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & Decompile-Pattern-NoHole/26 AsIs: s.Level2#1/35 AsIs: s.Top2#1/52 AsIs: (/50 AsIs: e.Pattern2#1/57 AsIs: )/51 AsIs: (/46 AsIs: e.Vars2#1/59 AsIs: )/47 } Tile{ AsIs: e.Commands#1/61 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[25]);
      refalrts::reinit_name(context[26], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[46], context[47] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[25], context[47] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern#1/27 )/10 (/13 e.Vars#1/29 )/14 (/23 s.Offset#1/25 # LABEL/26 e.BlockName#1/31 )/24 e.Commands#1/33 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[19];
    context[34] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[26] ) )
      continue;
    // closed e.Pattern#1 as range 27
    // closed e.Vars#1 as range 29
    // closed e.BlockName#1 as range 31
    // closed e.Commands#1 as range 33
    //DEBUG: s.Level#1: 5
    //DEBUG: s.Top#1: 6
    //DEBUG: s.Offset#1: 25
    //DEBUG: e.Pattern#1: 27
    //DEBUG: e.Vars#1: 29
    //DEBUG: e.BlockName#1: 31
    //DEBUG: e.Commands#1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/23 s.Offset#1/25 # LABEL/26 e.BlockName#1/31 )/24 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern#1/27 AsIs: )/10 AsIs: (/13 AsIs: e.Vars#1/29 AsIs: )/14 } Tile{ AsIs: e.Commands#1/33 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::splice_to_freelist_open( vm, context[14], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 )/10 (/13 )/14 >/1
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Level#1: 5
    //DEBUG: s.Top#1: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 )/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # EndOfFunction/14 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[14], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[13], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole/4 s.Level#1/5 s.Top#1/6 (/9 e.Pattern#1/7 )/10 (/13 e.Vars#1/11 )/14 e.Commands#1/2 >/1
  // closed e.Pattern#1 as range 7
  // closed e.Vars#1 as range 11
  // closed e.Commands#1 as range 2
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Pattern#1: 7
  //DEBUG: e.Vars#1: 11
  //DEBUG: e.Commands#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 Tile{ HalfReuse: '='/1 } Tile{ HalfReuse: 'B'/0 HalfReuse: ' '/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Pattern#1/7 AsIs: )/10 AsIs: (/13 AsIs: e.Vars#1/11 AsIs: )/14 } )/16 Tile{ AsIs: e.Commands#1/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_char(context[0], 'B');
  refalrts::reinit_char(context[4], ' ');
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[15], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Patternm_NoHole("Decompile-Pattern-NoHole", COOKIE1_, COOKIE2_, func_Decompilem_Patternm_NoHole);


static refalrts::FnResult func_Decompilem_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & Decompile-Result/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Decompile-Result/4 s.new#1/5 s.new#2/6 (/9 e.new#3/7 )/10 (/13 t.new#4/15 e.new#5/11 )/14 e.new#6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new#3 as range 7
  // closed e.new#6 as range 2
  context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#5 as range 11
  do {
    // </0 & Decompile-Result/4 s.new#7/5 s.new#8/6 (/9 e.new#13/17 )/10 (/13 t.new#14/15 e.new#15/19 )/14 (/25 s.new#9/27 s.new#10/28 e.new#11/23 )/26 e.new#12/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.new#13 as range 17
    // closed e.new#15 as range 19
    // closed e.new#12 as range 21
    if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
      continue;
    if( ! refalrts::svar_left( context[28], context[23], context[24] ) )
      continue;
    // closed e.new#11 as range 23
    do {
      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/29 )/10 (/13 t.MB#1/15 e.Result#1/31 )/14 (/25 s.Offset#1/27 # NCS/28 e.Word#1/33 )/26 e.Commands#1/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[28] ) )
        continue;
      // closed e.Vars#1 as range 29
      // closed e.Result#1 as range 31
      // closed e.Word#1 as range 33
      // closed e.Commands#1 as range 35
      //DEBUG: t.MB#1: 15
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 27
      //DEBUG: e.Vars#1: 29
      //DEBUG: e.Result#1: 31
      //DEBUG: e.Word#1: 33
      //DEBUG: e.Commands#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/29 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/31 HalfReuse: (/14 HalfReuse: # W/25 } Tile{ AsIs: e.Word#1/33 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands#1/35 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[25], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new#16/5 s.new#17/6 (/9 e.new#23/29 )/10 (/13 t.new#24/15 e.new#25/31 )/14 (/25 s.new#19/27 s.new#20/28 s.new#21/37 e.new#22/33 )/26 e.new#18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      // closed e.new#23 as range 29
      // closed e.new#25 as range 31
      // closed e.new#18 as range 35
      if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
        continue;
      // closed e.new#22 as range 33
      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # NNS/28 s.Number#1/37 )/26 e.Commands#1/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 42
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.Number#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset#1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: # N/25 } Tile{ AsIs: s.Number#1/37 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands#1/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[25], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[14], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[28], context[28] );
        res = refalrts::splice_evar( res, context[37], context[37] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # NS/28 s.Code#1/37 s.Char#1/46 )/26 e.Commands#1/44 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        context[45] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[28] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 44
        if( ! refalrts::svar_left( context[46], context[42], context[43] ) )
          continue;
        if( ! refalrts::empty_seq( context[42], context[43] ) )
          continue;
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.Code#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 44
        //DEBUG: s.Char#1: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset#1/27 {REMOVED TILE} s.Code#1/37 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: # C/25 } Tile{ AsIs: s.Char#1/46 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands#1/44 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[25], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[14], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[28], context[28] );
        res = refalrts::splice_evar( res, context[46], context[46] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # TEXT/28 s.Count#1/37 e.Chars#1/42 )/26 e.Commands#1/44 >/1
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      context[45] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[28] ) )
        continue;
      // closed e.Vars#1 as range 38
      // closed e.Result#1 as range 40
      // closed e.Chars#1 as range 42
      // closed e.Commands#1 as range 44
      //DEBUG: t.MB#1: 15
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 27
      //DEBUG: s.Count#1: 37
      //DEBUG: e.Vars#1: 38
      //DEBUG: e.Result#1: 40
      //DEBUG: e.Chars#1: 42
      //DEBUG: e.Commands#1: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset#1/27 {REMOVED TILE} s.Count#1/37 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: # C/25 } Tile{ AsIs: e.Chars#1/42 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands#1/44 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[25], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new#16/5 s.new#17/6 (/9 e.new#21/29 )/10 (/13 t.new#22/15 e.new#23/31 )/14 (/25 s.new#19/27 s.new#20/28 )/26 e.new#18/33 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new#21 as range 29
      // closed e.new#23 as range 31
      // closed e.new#18 as range 33
      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/35 )/10 (/13 t.MB#1/15 e.Result#1/37 )/14 (/25 s.Offset#1/27 # BL/28 )/26 e.Commands#1/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[28] ) )
          continue;
        // closed e.Vars#1 as range 35
        // closed e.Result#1 as range 37
        // closed e.Commands#1 as range 39
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: e.Vars#1: 35
        //DEBUG: e.Result#1: 37
        //DEBUG: e.Commands#1: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.Offset#1/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/35 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: (/25 } Tile{ AsIs: t.MB#1/15 } Tile{ AsIs: e.Result#1/37 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands#1/39 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[25], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[25] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/35 )/10 (/13 (/15 t.MB#1/43 e.Result#1/41 )/16 e.Nested#1/37 )/14 (/25 s.Offset#1/27 # BR/28 )/26 e.Commands#1/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        context[41] = 0;
        context[42] = 0;
        if( ! refalrts::brackets_term( context[41], context[42], context[15] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[28] ) )
          continue;
        // closed e.Vars#1 as range 35
        // closed e.Nested#1 as range 37
        // closed e.Commands#1 as range 39
        context[44] = refalrts::tvar_left( context[43], context[41], context[42] );
        if( ! context[44] )
          continue;
        // closed e.Result#1 as range 41
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: e.Vars#1: 35
        //DEBUG: e.Nested#1: 37
        //DEBUG: e.Commands#1: 39
        //DEBUG: t.MB#1: 43
        //DEBUG: e.Result#1: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.Offset#1/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/35 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: t.MB#1/43 AsIs: e.Result#1/41 HalfReuse: (/16 } Tile{ HalfReuse: '*'/25 } Tile{ AsIs: e.Nested#1/37 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands#1/39 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_char(context[25], '*');
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[16], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[25], context[25] );
        res = refalrts::splice_evar( res, context[43], context[16] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/35 )/10 (/13 t.MB#1/15 e.Result#1/37 )/14 (/25 s.Offset#1/27 # BLR/28 )/26 e.Commands#1/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[28] ) )
        continue;
      // closed e.Vars#1 as range 35
      // closed e.Result#1 as range 37
      // closed e.Commands#1 as range 39
      //DEBUG: t.MB#1: 15
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 27
      //DEBUG: e.Vars#1: 35
      //DEBUG: e.Result#1: 37
      //DEBUG: e.Commands#1: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset#1/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/35 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/37 HalfReuse: (/14 HalfReuse: '*'/25 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands#1/39 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[25], '*');
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new#16/5 s.new#17/6 (/9 e.new#22/29 )/10 (/13 t.new#23/15 e.new#24/31 (/39 '*'/41 e.new#25/37 )/40 )/14 (/25 s.new#19/27 s.new#20/28 e.new#21/33 )/26 e.new#18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_right( context[37], context[38], context[31], context[32] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      context[41] = refalrts::char_left( '*', context[37], context[38] );
      if( ! context[41] )
        continue;
      // closed e.new#22 as range 29
      // closed e.new#24 as range 31
      // closed e.new#25 as range 37
      // closed e.new#21 as range 33
      // closed e.new#18 as range 35
      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/42 )/10 (/13 t.MB#1/15 e.Result#1/44 (/39 '*'/41 e.Inner#1/46 )/40 )/14 (/25 s.Offset#1/27 # ACT1/28 e.Name#1/48 )/26 e.Commands#1/50 >/1
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[32];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        context[51] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[28] ) )
          continue;
        // closed e.Vars#1 as range 42
        // closed e.Result#1 as range 44
        // closed e.Inner#1 as range 46
        // closed e.Name#1 as range 48
        // closed e.Commands#1 as range 50
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: e.Vars#1: 42
        //DEBUG: e.Result#1: 44
        //DEBUG: e.Inner#1: 46
        //DEBUG: e.Name#1: 48
        //DEBUG: e.Commands#1: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/27 # ACT1/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/42 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/44 AsIs: (/39 Reuse: '!'/41 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Name#1/48 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner#1/46 } Tile{ AsIs: )/40 } Tile{ AsIs: )/26 AsIs: e.Commands#1/50 AsIs: >/1 ]] }
        refalrts::update_char(context[41], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[25], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[40], context[40] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[14], context[14] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[25], context[25] );
        refalrts::splice_to_freelist_open( vm, context[41], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/42 )/10 (/13 t.MB#1/15 e.Result#1/44 (/39 '*'/41 e.Inner#1/46 )/40 )/14 (/25 s.Offset#1/27 # ACT_EXTRN/28 e.Name#1/48 )/26 e.Commands#1/50 >/1
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = context[37];
      context[47] = context[38];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      context[51] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[28] ) )
        continue;
      // closed e.Vars#1 as range 42
      // closed e.Result#1 as range 44
      // closed e.Inner#1 as range 46
      // closed e.Name#1 as range 48
      // closed e.Commands#1 as range 50
      //DEBUG: t.MB#1: 15
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset#1: 27
      //DEBUG: e.Vars#1: 42
      //DEBUG: e.Result#1: 44
      //DEBUG: e.Inner#1: 46
      //DEBUG: e.Name#1: 48
      //DEBUG: e.Commands#1: 50

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset#1/27 # ACT_EXTRN/28 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/42 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/44 AsIs: (/39 Reuse: '!'/41 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Name#1/48 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner#1/46 } Tile{ AsIs: )/40 } Tile{ AsIs: )/26 AsIs: e.Commands#1/50 AsIs: >/1 ]] }
      refalrts::update_char(context[41], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[25], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[40], context[40] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[14], context[14] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      refalrts::splice_to_freelist_open( vm, context[41], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new#16/5 s.new#17/6 (/9 e.new#22/29 )/10 (/13 t.new#23/15 e.new#24/31 )/14 (/25 s.new#19/27 s.new#20/28 s.new#21/37 )/26 e.new#18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      // closed e.new#22 as range 29
      // closed e.new#24 as range 31
      // closed e.new#18 as range 35
      if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # TPLS/28 s.Copy#1/37 )/26 e.Commands#1/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[28] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 42
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.Copy#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 42
        //5: s.Level#1
        //6: s.Top#1
        //15: t.MB#1
        //27: s.Offset#1
        //37: s.Copy#1
        //38: e.Vars#1
        //40: e.Result#1
        //42: e.Commands#1
        //47: e.Vars#1

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S10C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$10?1/48 e.Vars-B#2/49 (/55 # s/57 s.Id#2/60 '='/59 s.Copy#1/58 )/56 e.Vars-E#2/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            context[57] = refalrts::ident_left( identifiers[ident_s], context[53], context[54] );
            if( ! context[57] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[58], context[37], context[53], context[54] ) )
              continue;
            context[59] = refalrts::char_right( '=', context[53], context[54] );
            if( ! context[59] )
              continue;
            // closed e.Vars-E#2 as range 51
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB#1: 15
            //DEBUG: s.Level#1: 5
            //DEBUG: s.Top#1: 6
            //DEBUG: s.Offset#1: 27
            //DEBUG: s.Copy#1: 37
            //DEBUG: e.Vars#1: 38
            //DEBUG: e.Result#1: 40
            //DEBUG: e.Commands#1: 42
            //DEBUG: e.Vars-B#2: 49
            //DEBUG: e.Vars-E#2: 51
            //DEBUG: s.Id#2: 60

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset#1/27 # TPLS/28 s.Copy#1/37 {REMOVED TILE} & Decompile-Result$10?1/48 e.Vars-B#2/49 (/55 # s/57 {REMOVED TILE} e.Vars-E#2/51 >/45 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: # s/25 } Tile{ AsIs: s.Id#2/60 AsIs: '='/59 AsIs: s.Copy#1/58 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands#1/42 HalfReuse: >/44 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[25], identifiers[ident_s]);
            refalrts::reinit_close_call(context[44]);
            refalrts::push_stack( vm, context[44] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[26] );
            refalrts::link_brackets( context[14], context[56] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[44] );
            res = refalrts::splice_evar( res, context[60], context[56] );
            refalrts::splice_to_freelist_open( vm, context[25], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # TPLE/28 s.CopyR#1/37 )/26 e.Commands#1/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[28] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 42
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.CopyR#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 42
        //5: s.Level#1
        //6: s.Top#1
        //15: t.MB#1
        //27: s.Offset#1
        //37: s.CopyR#1
        //38: e.Vars#1
        //40: e.Result#1
        //42: e.Commands#1
        //47: e.Vars#1

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S11C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$11?1/48 e.Vars-B#2/49 (/55 s.Type#2/58 s.IdL#2/59 s.IdR#2/60 '='/61 s.CopyL#2/62 s.CopyR#1/57 )/56 e.Vars-E#2/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[37], context[53], context[54] ) )
              continue;
            // closed e.Vars-E#2 as range 51
            if( ! refalrts::svar_left( context[58], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            context[61] = refalrts::char_left( '=', context[53], context[54] );
            if( ! context[61] )
              continue;
            if( ! refalrts::svar_left( context[62], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB#1: 15
            //DEBUG: s.Level#1: 5
            //DEBUG: s.Top#1: 6
            //DEBUG: s.Offset#1: 27
            //DEBUG: s.CopyR#1: 37
            //DEBUG: e.Vars#1: 38
            //DEBUG: e.Result#1: 40
            //DEBUG: e.Commands#1: 42
            //DEBUG: e.Vars-B#2: 49
            //DEBUG: e.Vars-E#2: 51
            //DEBUG: s.Type#2: 58
            //DEBUG: s.IdL#2: 59
            //DEBUG: s.IdR#2: 60
            //DEBUG: s.CopyL#2: 62
            //5: s.Level#1
            //6: s.Top#1
            //15: t.MB#1
            //27: s.Offset#1
            //37: s.CopyR#1
            //38: e.Vars#1
            //40: e.Result#1
            //42: e.Commands#1
            //49: e.Vars-B#2
            //51: e.Vars-E#2
            //57: s.CopyR#1
            //58: s.Type#2
            //59: s.IdL#2
            //60: s.IdR#2
            //62: s.CopyL#2

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[63]);
            refalrts::alloc_name(vm, context[65], functions[efunc_gen_Decompilem_Result_S11C2]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[67], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[64]);
            refalrts::push_stack( vm, context[64] );
            refalrts::push_stack( vm, context[63] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[67] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[63] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </63 & Decompile-Result$11?2/67 e.B#3/68 s.Type#2/72 e.E#3/70 >/64
              context[65] = 0;
              context[66] = 0;
              context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
              context[68] = 0;
              context[69] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[70] = context[65];
                context[71] = context[66];
                if( ! refalrts::repeated_stvar_left( vm, context[72], context[58], context[70], context[71] ) )
                  continue;
                // closed e.E#3 as range 70
                //DEBUG: t.MB#1: 15
                //DEBUG: s.Level#1: 5
                //DEBUG: s.Top#1: 6
                //DEBUG: s.Offset#1: 27
                //DEBUG: s.CopyR#1: 37
                //DEBUG: e.Vars#1: 38
                //DEBUG: e.Result#1: 40
                //DEBUG: e.Commands#1: 42
                //DEBUG: e.Vars-B#2: 49
                //DEBUG: e.Vars-E#2: 51
                //DEBUG: s.Type#2: 58
                //DEBUG: s.IdL#2: 59
                //DEBUG: s.IdR#2: 60
                //DEBUG: s.CopyL#2: 62
                //DEBUG: e.B#3: 68
                //DEBUG: e.E#3: 70

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset#1/27 # TPLE/28 s.CopyR#1/37 {REMOVED TILE} & Decompile-Result$11?1/48 e.Vars-B#2/49 (/55 s.Type#2/58 {REMOVED TILE} e.Vars-E#2/51 >/45 </63 & Decompile-Result$11?2/67 e.B#3/68 s.Type#2/72 e.E#3/70 >/64 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: s.Type2 #72/25 } Tile{ AsIs: s.IdL#2/59 AsIs: s.IdR#2/60 AsIs: '='/61 AsIs: s.CopyL#2/62 AsIs: s.CopyR#1/57 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands#1/42 HalfReuse: >/44 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[25], context[72] );
                refalrts::reinit_close_call(context[44]);
                refalrts::push_stack( vm, context[44] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[26] );
                refalrts::link_brackets( context[14], context[56] );
                refalrts::link_brackets( context[9], context[10] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[26], context[44] );
                res = refalrts::splice_evar( res, context[59], context[56] );
                refalrts::splice_to_freelist_open( vm, context[25], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[68], context[69], context[65], context[66] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[63], context[64]);
            continue;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # MULS/28 s.Copy#1/37 )/26 e.Commands#1/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[28] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 42
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.Copy#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 42
        //5: s.Level#1
        //6: s.Top#1
        //15: t.MB#1
        //27: s.Offset#1
        //37: s.Copy#1
        //38: e.Vars#1
        //40: e.Result#1
        //42: e.Commands#1
        //47: e.Vars#1

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S12C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$12?1/48 e.Vars-B#2/49 (/55 # s/57 s.Id#2/60 '='/59 s.Copy#1/58 )/56 e.Vars-E#2/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            context[57] = refalrts::ident_left( identifiers[ident_s], context[53], context[54] );
            if( ! context[57] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[58], context[37], context[53], context[54] ) )
              continue;
            context[59] = refalrts::char_right( '=', context[53], context[54] );
            if( ! context[59] )
              continue;
            // closed e.Vars-E#2 as range 51
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB#1: 15
            //DEBUG: s.Level#1: 5
            //DEBUG: s.Top#1: 6
            //DEBUG: s.Offset#1: 27
            //DEBUG: s.Copy#1: 37
            //DEBUG: e.Vars#1: 38
            //DEBUG: e.Result#1: 40
            //DEBUG: e.Commands#1: 42
            //DEBUG: e.Vars-B#2: 49
            //DEBUG: e.Vars-E#2: 51
            //DEBUG: s.Id#2: 60

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset#1/27 # MULS/28 s.Copy#1/37 {REMOVED TILE} & Decompile-Result$12?1/48 e.Vars-B#2/49 (/55 # s/57 {REMOVED TILE} e.Vars-E#2/51 >/45 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: # s/25 } Tile{ AsIs: s.Id#2/60 AsIs: '='/59 AsIs: s.Copy#1/58 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands#1/42 HalfReuse: >/44 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[25], identifiers[ident_s]);
            refalrts::reinit_close_call(context[44]);
            refalrts::push_stack( vm, context[44] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[26] );
            refalrts::link_brackets( context[14], context[56] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[44] );
            res = refalrts::splice_evar( res, context[60], context[56] );
            refalrts::splice_to_freelist_open( vm, context[25], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 t.MB#1/15 e.Result#1/40 )/14 (/25 s.Offset#1/27 # MULE/28 s.CopyR#1/37 )/26 e.Commands#1/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[28] ) )
          continue;
        // closed e.Vars#1 as range 38
        // closed e.Result#1 as range 40
        // closed e.Commands#1 as range 42
        //DEBUG: t.MB#1: 15
        //DEBUG: s.Level#1: 5
        //DEBUG: s.Top#1: 6
        //DEBUG: s.Offset#1: 27
        //DEBUG: s.CopyR#1: 37
        //DEBUG: e.Vars#1: 38
        //DEBUG: e.Result#1: 40
        //DEBUG: e.Commands#1: 42
        //5: s.Level#1
        //6: s.Top#1
        //15: t.MB#1
        //27: s.Offset#1
        //37: s.CopyR#1
        //38: e.Vars#1
        //40: e.Result#1
        //42: e.Commands#1
        //47: e.Vars#1

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S13C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$13?1/48 e.Vars-B#2/49 (/55 s.Type#2/58 s.IdL#2/59 s.IdR#2/60 '='/61 s.CopyL#2/62 s.CopyR#1/57 )/56 e.Vars-E#2/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[37], context[53], context[54] ) )
              continue;
            // closed e.Vars-E#2 as range 51
            if( ! refalrts::svar_left( context[58], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            context[61] = refalrts::char_left( '=', context[53], context[54] );
            if( ! context[61] )
              continue;
            if( ! refalrts::svar_left( context[62], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB#1: 15
            //DEBUG: s.Level#1: 5
            //DEBUG: s.Top#1: 6
            //DEBUG: s.Offset#1: 27
            //DEBUG: s.CopyR#1: 37
            //DEBUG: e.Vars#1: 38
            //DEBUG: e.Result#1: 40
            //DEBUG: e.Commands#1: 42
            //DEBUG: e.Vars-B#2: 49
            //DEBUG: e.Vars-E#2: 51
            //DEBUG: s.Type#2: 58
            //DEBUG: s.IdL#2: 59
            //DEBUG: s.IdR#2: 60
            //DEBUG: s.CopyL#2: 62
            //5: s.Level#1
            //6: s.Top#1
            //15: t.MB#1
            //27: s.Offset#1
            //37: s.CopyR#1
            //38: e.Vars#1
            //40: e.Result#1
            //42: e.Commands#1
            //49: e.Vars-B#2
            //51: e.Vars-E#2
            //57: s.CopyR#1
            //58: s.Type#2
            //59: s.IdL#2
            //60: s.IdR#2
            //62: s.CopyL#2

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[63]);
            refalrts::alloc_name(vm, context[65], functions[efunc_gen_Decompilem_Result_S13C2]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[67], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[64]);
            refalrts::push_stack( vm, context[64] );
            refalrts::push_stack( vm, context[63] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[67] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[63] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </63 & Decompile-Result$13?2/67 e.B#3/68 s.Type#2/72 e.E#3/70 >/64
              context[65] = 0;
              context[66] = 0;
              context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
              context[68] = 0;
              context[69] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[70] = context[65];
                context[71] = context[66];
                if( ! refalrts::repeated_stvar_left( vm, context[72], context[58], context[70], context[71] ) )
                  continue;
                // closed e.E#3 as range 70
                //DEBUG: t.MB#1: 15
                //DEBUG: s.Level#1: 5
                //DEBUG: s.Top#1: 6
                //DEBUG: s.Offset#1: 27
                //DEBUG: s.CopyR#1: 37
                //DEBUG: e.Vars#1: 38
                //DEBUG: e.Result#1: 40
                //DEBUG: e.Commands#1: 42
                //DEBUG: e.Vars-B#2: 49
                //DEBUG: e.Vars-E#2: 51
                //DEBUG: s.Type#2: 58
                //DEBUG: s.IdL#2: 59
                //DEBUG: s.IdR#2: 60
                //DEBUG: s.CopyL#2: 62
                //DEBUG: e.B#3: 68
                //DEBUG: e.E#3: 70

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset#1/27 # MULE/28 s.CopyR#1/37 {REMOVED TILE} & Decompile-Result$13?1/48 e.Vars-B#2/49 (/55 s.Type#2/58 {REMOVED TILE} e.Vars-E#2/51 >/45 </63 & Decompile-Result$13?2/67 e.B#3/68 s.Type#2/72 e.E#3/70 >/64 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/40 HalfReuse: (/14 HalfReuse: s.Type2 #72/25 } Tile{ AsIs: s.IdL#2/59 AsIs: s.IdR#2/60 AsIs: '='/61 AsIs: s.CopyL#2/62 AsIs: s.CopyR#1/57 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands#1/42 HalfReuse: >/44 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[25], context[72] );
                refalrts::reinit_close_call(context[44]);
                refalrts::push_stack( vm, context[44] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[26] );
                refalrts::link_brackets( context[14], context[56] );
                refalrts::link_brackets( context[9], context[10] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[26], context[44] );
                res = refalrts::splice_evar( res, context[59], context[56] );
                refalrts::splice_to_freelist_open( vm, context[25], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[68], context[69], context[65], context[66] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[63], context[64]);
            continue;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/38 )/10 (/13 '$'/15 e.Result#1/40 )/14 (/25 s.Offset1#1/27 # ECOND/28 s.Offset3#1/37 )/26 (/46 s.Offset2#1/54 # LABEL/55 e.Name#1/44 )/47 (/50 s.Offset3#1/53 # POPVF/52 )/51 e.Commands#1/42 >/1
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[35];
      context[43] = context[36];
      if( ! refalrts::char_term( '$', context[15] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[28] ) )
        continue;
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[42], context[43] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = refalrts::ident_right( identifiers[ident_POPVF], context[48], context[49] );
      if( ! context[52] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[53], context[37], context[48], context[49] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.Vars#1 as range 38
      // closed e.Result#1 as range 40
      // closed e.Commands#1 as range 42
      if( ! refalrts::svar_left( context[54], context[44], context[45] ) )
        continue;
      context[55] = refalrts::ident_left( identifiers[ident_LABEL], context[44], context[45] );
      if( ! context[55] )
        continue;
      // closed e.Name#1 as range 44
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset1#1: 27
      //DEBUG: s.Offset3#1: 37
      //DEBUG: e.Vars#1: 38
      //DEBUG: e.Result#1: 40
      //DEBUG: e.Commands#1: 42
      //DEBUG: s.Offset2#1: 54
      //DEBUG: e.Name#1: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1#1/27 {REMOVED TILE} s.Offset3#1/37 {REMOVED TILE} s.Offset2#1/54 {REMOVED TILE} s.Offset3#1/53 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result#1/40 AsIs: )/14 AsIs: (/25 } Tile{ Reuse: # EndCondition/55 AsIs: e.Name#1/44 AsIs: )/47 HalfReuse: </50 } Tile{ Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level#1/5 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Add/28 } Tile{ AsIs: s.Top#1/6 HalfReuse: 3/9 } >/56 (/57 </58 Tile{ HalfReuse: & Add/52 } s.Top#1/6/59 1/60 >/61 Tile{ AsIs: )/26 AsIs: (/46 } </62 & Add/63 s.Top#1/6/64 2/65 >/66 Tile{ AsIs: )/10 } (/67 Tile{ AsIs: e.Vars#1/38 } Tile{ AsIs: )/51 AsIs: e.Commands#1/42 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::copy_stvar(vm, context[59], context[6]);
      refalrts::alloc_number(vm, context[60], 1UL);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[64], context[6]);
      refalrts::alloc_number(vm, context[65], 2UL);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::reinit_ident(context[15], identifiers[ident_Result]);
      refalrts::update_ident(context[55], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[50]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_name(context[28], functions[efunc_Add]);
      refalrts::reinit_number(context[9], 3UL);
      refalrts::reinit_name(context[52], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[67], context[51] );
      refalrts::link_brackets( context[46], context[10] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[57], context[26] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[47] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[51];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[67], context[67] );
      res = refalrts::splice_evar( res, context[10], context[10] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[26], context[46] );
      res = refalrts::splice_evar( res, context[59], context[61] );
      res = refalrts::splice_evar( res, context[52], context[52] );
      res = refalrts::splice_evar( res, context[56], context[58] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[28], context[28] );
      res = refalrts::splice_evar( res, context[0], context[0] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_evar( res, context[55], context[50] );
      res = refalrts::splice_evar( res, context[13], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result/4 s.new#16/5 s.new#17/6 (/9 e.new#20/29 )/10 (/13 '$'/15 e.new#21/31 )/14 (/25 s.new#19/27 # OUTEST/28 )/26 e.new#18/33 >/1
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    if( ! refalrts::char_term( '$', context[15] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[28] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new#20 as range 29
    // closed e.new#21 as range 31
    // closed e.new#18 as range 33
    do {
      // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/35 )/10 (/13 '$'/15 e.Result#1/37 )/14 (/25 s.Offset1#1/27 # OUTEST/28 )/26 (/43 s.Offset2#1/46 # OUTEST/45 )/44 e.Commands#1/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_left( context[41], context[42], context[39], context[40] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      context[45] = refalrts::ident_right( identifiers[ident_OUTEST], context[41], context[42] );
      if( ! context[45] )
        continue;
      // closed e.Vars#1 as range 35
      // closed e.Result#1 as range 37
      // closed e.Commands#1 as range 39
      if( ! refalrts::svar_left( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Level#1: 5
      //DEBUG: s.Top#1: 6
      //DEBUG: s.Offset1#1: 27
      //DEBUG: e.Vars#1: 35
      //DEBUG: e.Result#1: 37
      //DEBUG: e.Commands#1: 39
      //DEBUG: s.Offset2#1: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Top#1/6 {REMOVED TILE} e.Vars#1/35 {REMOVED TILE} {REMOVED TILE} s.Offset1#1/27 {REMOVED TILE} s.Offset2#1/46 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result#1/37 AsIs: )/14 AsIs: (/25 } Tile{ Reuse: # NextSentence/28 AsIs: )/26 AsIs: (/43 } # NextSentence/47 Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 } '*'/48 Tile{ AsIs: (/9 } )/49 Tile{ HalfReuse: (/45 AsIs: )/44 AsIs: e.Commands#1/39 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[47], identifiers[ident_NextSentence]);
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::reinit_ident(context[15], identifiers[ident_Result]);
      refalrts::update_ident(context[28], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::reinit_open_bracket(context[45]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[45], context[44] );
      refalrts::link_brackets( context[9], context[49] );
      refalrts::link_brackets( context[43], context[10] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[45];
      res = refalrts::splice_evar( res, context[49], context[49] );
      res = refalrts::splice_evar( res, context[9], context[9] );
      res = refalrts::splice_evar( res, context[48], context[48] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[10], context[10] );
      res = refalrts::splice_evar( res, context[47], context[47] );
      res = refalrts::splice_evar( res, context[28], context[43] );
      res = refalrts::splice_evar( res, context[13], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/35 )/10 (/13 '$'/15 e.Result#1/37 )/14 (/25 s.Offset#1/27 # OUTEST/28 )/26 e.Commands#1/39 >/1
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    context[40] = context[34];
    // closed e.Vars#1 as range 35
    // closed e.Result#1 as range 37
    // closed e.Commands#1 as range 39
    //DEBUG: s.Level#1: 5
    //DEBUG: s.Top#1: 6
    //DEBUG: s.Offset#1: 27
    //DEBUG: e.Vars#1: 35
    //DEBUG: e.Result#1: 37
    //DEBUG: e.Commands#1: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Top#1/6 {REMOVED TILE} e.Vars#1/35 {REMOVED TILE} {REMOVED TILE} s.Offset#1/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result#1/37 AsIs: )/14 AsIs: (/25 } # NextSentence/41 Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level#1/5 } '*'/42 Tile{ AsIs: (/9 } )/43 Tile{ HalfReuse: (/28 AsIs: )/26 AsIs: e.Commands#1/39 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[41], identifiers[ident_NextSentence]);
    refalrts::alloc_char(vm, context[42], '*');
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::reinit_ident(context[15], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
    refalrts::reinit_open_bracket(context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[26] );
    refalrts::link_brackets( context[9], context[43] );
    refalrts::link_brackets( context[25], context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_evar( res, context[43], context[43] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    res = refalrts::splice_evar( res, context[42], context[42] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[10], context[10] );
    res = refalrts::splice_evar( res, context[41], context[41] );
    res = refalrts::splice_evar( res, context[13], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result/4 s.Level#1/5 s.Top#1/6 (/9 e.Vars#1/7 )/10 (/13 t.MB#1/15 e.Result#1/11 )/14 e.Commands#1/2 >/1
  // closed e.Vars#1 as range 7
  // closed e.Result#1 as range 11
  // closed e.Commands#1 as range 2
  //DEBUG: t.MB#1: 15
  //DEBUG: s.Level#1: 5
  //DEBUG: s.Top#1: 6
  //DEBUG: e.Vars#1: 7
  //DEBUG: e.Result#1: 11
  //DEBUG: e.Commands#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/17 Tile{ HalfReuse: '='/1 } Tile{ HalfReuse: 'C'/0 HalfReuse: ' '/4 AsIs: s.Level#1/5 AsIs: s.Top#1/6 AsIs: (/9 AsIs: e.Vars#1/7 AsIs: )/10 AsIs: (/13 AsIs: t.MB#1/15 AsIs: e.Result#1/11 AsIs: )/14 } )/18 Tile{ AsIs: e.Commands#1/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_char(context[0], 'C');
  refalrts::reinit_char(context[4], ' ');
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[18] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Result("Decompile-Result", COOKIE1_, COOKIE2_, func_Decompilem_Result);


static refalrts::FnResult func_CollectSegments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & CollectSegments/4 e.Segments#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Segments#1 as range 2
  //DEBUG: e.Segments#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoCollectSegments/6 0/7 (/8 ' '/9 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: e.Segments#1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_DoCollectSegments]);
  refalrts::alloc_number(vm, context[7], 0UL);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_char(vm, context[9], ' ');
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[8], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CollectSegments("CollectSegments", COOKIE1_, COOKIE2_, func_CollectSegments);


static refalrts::FnResult func_DoCollectSegments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 88 elems
  refalrts::Iter context[88];
  refalrts::zeros( context, 88 );
  // </0 & DoCollectSegments/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoCollectSegments/4 s.new#1/5 (/8 e.new#2/6 )/9 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new#2 as range 6
  // closed e.new#3 as range 2
  do {
    // </0 & DoCollectSegments/4 s.new#4/5 (/8 e.new#8/10 )/9 (/16 s.new#5/18 e.new#6/14 )/17 e.new#7/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.new#8 as range 10
    // closed e.new#7 as range 12
    if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
      continue;
    // closed e.new#6 as range 14
    do {
      // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/19 )/9 (/16 # Pattern/18 s.Level#1/25 e.Pattern#1/21 )/17 e.Segments#1/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Pattern], context[18] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[25], context[5], context[21], context[22] ) )
        continue;
      // closed e.Indent#1 as range 19
      // closed e.Pattern#1 as range 21
      // closed e.Segments#1 as range 23
      //DEBUG: s.Level#1: 5
      //DEBUG: e.Indent#1: 19
      //DEBUG: e.Pattern#1: 21
      //DEBUG: e.Segments#1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level#1/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & FormatExpr/18 } Tile{ AsIs: (/16 } e.Indent#1/19/27 )/29 (/30 e.Indent#1/19/31 Tile{ AsIs: )/17 } Tile{ AsIs: e.Pattern#1/21 } >/33 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level#1/5 AsIs: (/8 AsIs: e.Indent#1/19 AsIs: )/9 } Tile{ AsIs: e.Segments#1/23 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::copy_evar(vm, context[27], context[28], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[19], context[20]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::reinit_name(context[18], functions[efunc_FormatExpr]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[30], context[17] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[33], context[33] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[17] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      res = refalrts::splice_evar( res, context[18], context[18] );
      res = refalrts::splice_evar( res, context[26], context[26] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCollectSegments/4 s.new#9/5 (/8 e.new#15/19 )/9 (/16 s.new#13/18 e.new#14/21 )/17 (/27 s.new#10/29 e.new#11/25 )/28 e.new#12/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.new#15 as range 19
      // closed e.new#14 as range 21
      // closed e.new#12 as range 23
      if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
        continue;
      // closed e.new#11 as range 25
      do {
        // </0 & DoCollectSegments/4 s.new#16/5 (/8 e.new#22/30 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.new#21/32 )/28 (/38 # EndCondition/40 e.new#17/36 )/39 (/43 s.new#18/45 e.new#19/41 )/44 e.new#20/34 >/1
        context[30] = context[19];
        context[31] = context[20];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[23];
        context[35] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_StartCondition], context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Result], context[29] ) )
          continue;
        context[36] = 0;
        context[37] = 0;
        context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
        if( ! context[38] )
          continue;
        refalrts::bracket_pointers(context[38], context[39]);
        context[40] = refalrts::ident_left( identifiers[ident_EndCondition], context[36], context[37] );
        if( ! context[40] )
          continue;
        context[41] = 0;
        context[42] = 0;
        context[43] = refalrts::brackets_left( context[41], context[42], context[34], context[35] );
        if( ! context[43] )
          continue;
        refalrts::bracket_pointers(context[43], context[44]);
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.new#22 as range 30
        // closed e.new#21 as range 32
        // closed e.new#17 as range 36
        // closed e.new#20 as range 34
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        // closed e.new#19 as range 41
        do {
          // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/46 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result#1/48 )/28 (/38 # EndCondition/40 e.Name#1/50 )/39 (/43 # Pattern/45 s.Level#1/56 e.Pattern#1/52 )/44 e.Segments#1/54 >/1
          context[46] = context[30];
          context[47] = context[31];
          context[48] = context[32];
          context[49] = context[33];
          context[50] = context[36];
          context[51] = context[37];
          context[52] = context[41];
          context[53] = context[42];
          context[54] = context[34];
          context[55] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_Pattern], context[45] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[56], context[5], context[52], context[53] ) )
            continue;
          // closed e.Indent#1 as range 46
          // closed e.Result#1 as range 48
          // closed e.Name#1 as range 50
          // closed e.Pattern#1 as range 52
          // closed e.Segments#1 as range 54
          //DEBUG: s.Level#1: 5
          //DEBUG: e.Indent#1: 46
          //DEBUG: e.Result#1: 48
          //DEBUG: e.Name#1: 50
          //DEBUG: e.Pattern#1: 52
          //DEBUG: e.Segments#1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level#1/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/57 '*'/58 e.Indent#1/46/59"  "/61 Tile{ HalfReuse: ' '/45 } </63 & FormatWord/64 Tile{ AsIs: e.Name#1/50 } >/65 )/66 </67 & FormatExpr/68 (/69 e.Indent#1/46/70"  , "/72 Tile{ AsIs: )/39 AsIs: (/43 } e.Indent#1/46/74 Tile{ HalfReuse: ' '/16 HalfReuse: ' '/18 HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: )/29 AsIs: e.Result#1/48 HalfReuse: >/28 HalfReuse: </38 HalfReuse: & FormatExpr/40 } (/76 e.Indent#1/46/77"  : "/79 Tile{ AsIs: )/44 } (/81 e.Indent#1/46/82"    "/84 )/86 Tile{ AsIs: e.Pattern#1/52 } >/87 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level#1/5 AsIs: (/8 AsIs: e.Indent#1/46 AsIs: )/9 } Tile{ AsIs: e.Segments#1/54 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::alloc_char(vm, context[58], '*');
          refalrts::copy_evar(vm, context[59], context[60], context[46], context[47]);
          refalrts::alloc_chars(vm, context[61], context[62], "  ", 2);
          refalrts::alloc_open_call(vm, context[63]);
          refalrts::alloc_name(vm, context[64], functions[efunc_FormatWord]);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_call(vm, context[67]);
          refalrts::alloc_name(vm, context[68], functions[efunc_FormatExpr]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::copy_evar(vm, context[70], context[71], context[46], context[47]);
          refalrts::alloc_chars(vm, context[72], context[73], "  , ", 4);
          refalrts::copy_evar(vm, context[74], context[75], context[46], context[47]);
          refalrts::alloc_open_bracket(vm, context[76]);
          refalrts::copy_evar(vm, context[77], context[78], context[46], context[47]);
          refalrts::alloc_chars(vm, context[79], context[80], "  : ", 4);
          refalrts::alloc_open_bracket(vm, context[81]);
          refalrts::copy_evar(vm, context[82], context[83], context[46], context[47]);
          refalrts::alloc_chars(vm, context[84], context[85], "    ", 4);
          refalrts::alloc_close_bracket(vm, context[86]);
          refalrts::alloc_close_call(vm, context[87]);
          refalrts::reinit_char(context[45], ' ');
          refalrts::reinit_char(context[16], ' ');
          refalrts::reinit_char(context[18], ' ');
          refalrts::reinit_char(context[17], ' ');
          refalrts::reinit_char(context[27], ' ');
          refalrts::reinit_close_bracket(context[29]);
          refalrts::reinit_close_call(context[28]);
          refalrts::reinit_open_call(context[38]);
          refalrts::reinit_name(context[40], functions[efunc_FormatExpr]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::push_stack( vm, context[87] );
          refalrts::push_stack( vm, context[38] );
          refalrts::link_brackets( context[81], context[86] );
          refalrts::link_brackets( context[76], context[44] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[67] );
          refalrts::link_brackets( context[43], context[29] );
          refalrts::link_brackets( context[69], context[39] );
          refalrts::link_brackets( context[57], context[66] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[63] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[87], context[87] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_evar( res, context[81], context[86] );
          res = refalrts::splice_evar( res, context[44], context[44] );
          res = refalrts::splice_evar( res, context[76], context[80] );
          res = refalrts::splice_evar( res, context[16], context[40] );
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[39], context[43] );
          res = refalrts::splice_evar( res, context[65], context[73] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[45], context[45] );
          res = refalrts::splice_evar( res, context[57], context[62] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/46 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result#1/48 )/28 (/38 # EndCondition/40 e.Name#1/50 )/39 (/43 # StartBlock/45 )/44 e.Segments#1/52 >/1
        context[46] = context[30];
        context[47] = context[31];
        context[48] = context[32];
        context[49] = context[33];
        context[50] = context[36];
        context[51] = context[37];
        context[52] = context[34];
        context[53] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_StartBlock], context[45] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        // closed e.Indent#1 as range 46
        // closed e.Result#1 as range 48
        // closed e.Name#1 as range 50
        // closed e.Segments#1 as range 52
        //DEBUG: s.Level#1: 5
        //DEBUG: e.Indent#1: 46
        //DEBUG: e.Result#1: 48
        //DEBUG: e.Name#1: 50
        //DEBUG: e.Segments#1: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/54 '*'/55 e.Indent#1/46/56"   "/58 </60 & FormatWord/61 Tile{ AsIs: e.Name#1/50 } Tile{ HalfReuse: >/40 } )/62 </63 & FormatExpr/64 Tile{ AsIs: (/8 AsIs: e.Indent#1/46 HalfReuse: ' '/9 }" , "/65 )/67 (/68 e.Indent#1/46/69 Tile{ HalfReuse: ' '/16 HalfReuse: ' '/18 HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: )/29 AsIs: e.Result#1/48 HalfReuse: >/28 AsIs: (/38 } e.Indent#1/46/71"  : {"/73 )/75 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 } </76 & Add/77 1/78 Tile{ AsIs: s.Level#1/5 } >/79 (/80 e.Indent#1/46/81"   "/83 Tile{ HalfReuse: ' '/39 HalfReuse: ' '/43 HalfReuse: ' '/45 AsIs: )/44 AsIs: e.Segments#1/52 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_char(vm, context[55], '*');
        refalrts::copy_evar(vm, context[56], context[57], context[46], context[47]);
        refalrts::alloc_chars(vm, context[58], context[59], "   ", 3);
        refalrts::alloc_open_call(vm, context[60]);
        refalrts::alloc_name(vm, context[61], functions[efunc_FormatWord]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_FormatExpr]);
        refalrts::alloc_chars(vm, context[65], context[66], " , ", 3);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::copy_evar(vm, context[69], context[70], context[46], context[47]);
        refalrts::copy_evar(vm, context[71], context[72], context[46], context[47]);
        refalrts::alloc_chars(vm, context[73], context[74], "  : {", 5);
        refalrts::alloc_close_bracket(vm, context[75]);
        refalrts::alloc_open_call(vm, context[76]);
        refalrts::alloc_name(vm, context[77], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[78], 1UL);
        refalrts::alloc_close_call(vm, context[79]);
        refalrts::alloc_open_bracket(vm, context[80]);
        refalrts::copy_evar(vm, context[81], context[82], context[46], context[47]);
        refalrts::alloc_chars(vm, context[83], context[84], "   ", 3);
        refalrts::reinit_close_call(context[40]);
        refalrts::reinit_char(context[9], ' ');
        refalrts::reinit_char(context[16], ' ');
        refalrts::reinit_char(context[18], ' ');
        refalrts::reinit_char(context[17], ' ');
        refalrts::reinit_char(context[27], ' ');
        refalrts::reinit_close_bracket(context[29]);
        refalrts::reinit_close_call(context[28]);
        refalrts::reinit_char(context[39], ' ');
        refalrts::reinit_char(context[43], ' ');
        refalrts::reinit_char(context[45], ' ');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[80], context[44] );
        refalrts::push_stack( vm, context[79] );
        refalrts::push_stack( vm, context[76] );
        refalrts::link_brackets( context[38], context[75] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[68], context[29] );
        refalrts::link_brackets( context[8], context[67] );
        refalrts::link_brackets( context[54], context[62] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[60] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_evar( res, context[79], context[84] );
        res = refalrts::splice_evar( res, context[5], context[5] );
        res = refalrts::splice_evar( res, context[76], context[78] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[73], context[75] );
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[16], context[38] );
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[40], context[40] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[54], context[61] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/30 )/9 (/16 # Result/18 e.Result#1/32 )/17 (/27 # NextSentence/29 )/28 e.Segments#1/34 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_Result], context[18] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_NextSentence], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.Indent#1 as range 30
      // closed e.Result#1 as range 32
      // closed e.Segments#1 as range 34
      //DEBUG: s.Level#1: 5
      //DEBUG: e.Indent#1: 30
      //DEBUG: e.Result#1: 32
      //DEBUG: e.Segments#1: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & FormatExpr/37 (/38 e.Indent#1/30/39"  = "/41 )/43 (/44 e.Indent#1/30/45"   "/47 Tile{ HalfReuse: ' '/16 HalfReuse: )/18 AsIs: e.Result#1/32 HalfReuse: ';'/17 HalfReuse: >/27 HalfReuse: (/29 AsIs: )/28 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level#1/5 AsIs: (/8 AsIs: e.Indent#1/30 AsIs: )/9 } Tile{ AsIs: e.Segments#1/34 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_FormatExpr]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::copy_evar(vm, context[39], context[40], context[30], context[31]);
      refalrts::alloc_chars(vm, context[41], context[42], "  = ", 4);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[30], context[31]);
      refalrts::alloc_chars(vm, context[47], context[48], "   ", 3);
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_char(context[17], ';');
      refalrts::reinit_close_call(context[27]);
      refalrts::reinit_open_bracket(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[29], context[28] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[44], context[18] );
      refalrts::link_brackets( context[38], context[43] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[16], context[28] );
      res = refalrts::splice_evar( res, context[36], context[48] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCollectSegments/4 s.new#9/5 (/8 e.new#13/19 ' '/26 ' '/25 )/9 (/16 s.new#11/18 e.new#12/21 )/17 e.new#10/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      context[25] = refalrts::char_right( ' ', context[19], context[20] );
      if( ! context[25] )
        continue;
      context[26] = refalrts::char_right( ' ', context[19], context[20] );
      if( ! context[26] )
        continue;
      // closed e.new#13 as range 19
      // closed e.new#12 as range 21
      // closed e.new#10 as range 23
      do {
        // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/27 ' '/36 ' '/35 ' '/34 ' '/33 ' '/26 ' '/25 )/9 (/16 # Pattern/18 s.PatternLevel#1/37 e.Pattern#1/29 )/17 e.Segments#1/31 >/1
        context[27] = context[19];
        context[28] = context[20];
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[23];
        context[32] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_Pattern], context[18] ) )
          continue;
        context[33] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[33] )
          continue;
        context[34] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[34] )
          continue;
        context[35] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[35] )
          continue;
        context[36] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[36] )
          continue;
        // closed e.Indent#1 as range 27
        // closed e.Segments#1 as range 31
        if( ! refalrts::svar_left( context[37], context[29], context[30] ) )
          continue;
        // closed e.Pattern#1 as range 29
        //DEBUG: s.Level#1: 5
        //DEBUG: e.Indent#1: 27
        //DEBUG: e.Segments#1: 31
        //DEBUG: s.PatternLevel#1: 37
        //DEBUG: e.Pattern#1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Indent#1/27 AsIs: ' '/36 AsIs: ' '/35 AsIs: ' '/34 AsIs: ' '/33 Reuse: '}'/26 Reuse: ';'/25 AsIs: )/9 AsIs: (/16 HalfReuse: )/18 } </38 & DoCollectSegments/39 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.Level#1/5 } 1/40 >/41 (/42 e.Indent#1/27/43 )/45 (/46 # Pattern/47 Tile{ AsIs: s.PatternLevel#1/37 AsIs: e.Pattern#1/29 AsIs: )/17 AsIs: e.Segments#1/31 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_DoCollectSegments]);
        refalrts::alloc_number(vm, context[40], 1UL);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::copy_evar(vm, context[43], context[44], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_ident(vm, context[47], identifiers[ident_Pattern]);
        refalrts::update_char(context[26], '}');
        refalrts::update_char(context[25], ';');
        refalrts::reinit_close_bracket(context[18]);
        refalrts::update_name(context[4], functions[efunc_Sub]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[46], context[17] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[18] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[47] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[8], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.new#14/5 (/8 e.new#15/27 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
      context[27] = context[19];
      context[28] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_EndOfFunction], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new#15 as range 27
      do {
        // </0 & DoCollectSegments/4 0/5 (/8 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
        if( ! refalrts::number_term( 0UL, context[5] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DoCollectSegments/4 0/5 (/8 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ ]] }
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/29 ' '/34 ' '/33 ' '/32 ' '/31 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
      context[29] = context[27];
      context[30] = context[28];
      context[31] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[31] )
        continue;
      context[32] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[34] )
        continue;
      // closed e.Indent#1 as range 29
      //DEBUG: s.Level#1: 5
      //DEBUG: e.Indent#1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Indent#1/29 AsIs: ' '/34 AsIs: ' '/33 AsIs: ' '/32 AsIs: ' '/31 Reuse: '}'/26 Reuse: ';'/25 AsIs: )/9 HalfReuse: </16 HalfReuse: & DoCollectSegments/18 HalfReuse: </17 HalfReuse: & Sub/1 } Tile{ AsIs: s.Level#1/5 } Tile{ HalfReuse: 1/0 HalfReuse: >/4 } (/35 e.Indent#1/29/36 )/38 (/39 # EndOfFunction/40 )/41 >/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[29], context[30]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_EndOfFunction]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::update_char(context[26], '}');
      refalrts::update_char(context[25], ';');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[18], functions[efunc_DoCollectSegments]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[1], functions[efunc_Sub]);
      refalrts::reinit_number(context[0], 1UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[39], context[41] );
      refalrts::link_brackets( context[35], context[38] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[42] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[5], context[5] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/19 )/9 (/16 # NextSentence/18 )/17 e.Segments#1/21 >/1
    context[19] = context[10];
    context[20] = context[11];
    context[21] = context[12];
    context[22] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_NextSentence], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.Indent#1 as range 19
    // closed e.Segments#1 as range 21
    //DEBUG: s.Level#1: 5
    //DEBUG: e.Indent#1: 19
    //DEBUG: e.Segments#1: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"* unexpected OUTEST comma"/24 Tile{ HalfReuse: 'n'/16 HalfReuse: 'd'/18 AsIs: )/17 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level#1/5 AsIs: (/8 AsIs: e.Indent#1/19 AsIs: )/9 } Tile{ AsIs: e.Segments#1/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "* unexpected OUTEST comma", 25);
    refalrts::reinit_char(context[16], 'n');
    refalrts::reinit_char(context[18], 'd');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[23], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCollectSegments/4 s.Level#1/5 (/8 e.Indent#1/6 )/9 e.Segments#1/2 >/1
  // closed e.Indent#1 as range 6
  // closed e.Segments#1 as range 2
  //DEBUG: s.Level#1: 5
  //DEBUG: e.Indent#1: 6
  //DEBUG: e.Segments#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Level#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '*'/4 }" WT"/10 Tile{ HalfReuse: 'F'/1 }"!!!!"/12 )/14 (/15 Tile{ HalfReuse: '\"'/8 AsIs: e.Indent#1/6 HalfReuse: '\"'/9 } )/16 Tile{ AsIs: e.Segments#1/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], " WT", 3);
  refalrts::alloc_chars(vm, context[12], context[13], "!!!!", 4);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_char(context[1], 'F');
  refalrts::reinit_char(context[8], '\"');
  refalrts::reinit_char(context[9], '\"');
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[0], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[16] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[1], context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoCollectSegments("DoCollectSegments", COOKIE1_, COOKIE2_, func_DoCollectSegments);


static refalrts::FnResult func_FormatExpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & FormatExpr/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FormatExpr/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 e.new#3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 2
  do {
    // </0 & FormatExpr/4 (/7 e.Prefix#1/13 )/8 (/11 e.Indent#1/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Prefix#1 as range 13
    // closed e.Indent#1 as range 15
    //DEBUG: e.Prefix#1: 13
    //DEBUG: e.Indent#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Indent#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Prefix#1/13 HalfReuse: '/'/8 HalfReuse: '*'/11 } Tile{ HalfReuse: 'e'/0 HalfReuse: 'm'/4 }"pty*"/17 Tile{ HalfReuse: '/'/12 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[17], context[18], "pty*", 4);
    refalrts::reinit_char(context[8], '/');
    refalrts::reinit_char(context[11], '*');
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'm');
    refalrts::reinit_char(context[12], '/');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FormatExpr/4 (/7 e.Prefix#1/13 )/8 (/11 e.Indent#1/15 )/12 ';'/19 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = refalrts::char_left( ';', context[17], context[18] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Prefix#1 as range 13
    // closed e.Indent#1 as range 15
    //DEBUG: e.Prefix#1: 13
    //DEBUG: e.Indent#1: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Indent#1/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Prefix#1/13 HalfReuse: '/'/8 HalfReuse: '*'/11 } Tile{ HalfReuse: 'e'/0 HalfReuse: 'm'/4 }"pty*"/20 Tile{ HalfReuse: '/'/12 AsIs: ';'/19 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "pty*", 4);
    refalrts::reinit_char(context[8], '/');
    refalrts::reinit_char(context[11], '*');
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'm');
    refalrts::reinit_char(context[12], '/');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatExpr/4 (/7 e.Prefix#1/5 )/8 (/11 e.Indent#1/9 )/12 e.Expr#1/2 >/1
  // closed e.Prefix#1 as range 5
  // closed e.Indent#1 as range 9
  // closed e.Expr#1 as range 2
  //DEBUG: e.Prefix#1: 5
  //DEBUG: e.Indent#1: 9
  //DEBUG: e.Expr#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoFormatExpr/14 (/15 </16 & LIMIT/17 Tile{ HalfReuse: >/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Prefix#1/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent#1/9 AsIs: )/12 } (/18 )/19 Tile{ AsIs: e.Expr#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DoFormatExpr]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_LIMIT]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::reinit_close_call(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatExpr("FormatExpr", COOKIE1_, COOKIE2_, func_FormatExpr);


static refalrts::FnResult func_LIMIT(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & LIMIT/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & LIMIT/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 60/1 ]] }
  refalrts::reinit_number(context[1], 60UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LIMIT("LIMIT", COOKIE1_, COOKIE2_, func_LIMIT);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$6=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Tail#1/18 )/21 s.Len#2/22 e.WordRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Tail#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.WordRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Tail#1: 18
  //DEBUG: s.Len#2: 22
  //DEBUG: e.WordRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit1 #5/21 AsIs: s.Len#2/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.WordRep#2/2 } )/26 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1("DoFormatExpr$6=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$7=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Tail#1/18 )/21 s.Len#2/22 e.NumberRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Tail#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NumberRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Tail#1: 18
  //DEBUG: s.Len#2: 22
  //DEBUG: e.NumberRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit1 #5/21 AsIs: s.Len#2/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.NumberRep#2/2 } )/26 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1("DoFormatExpr$7=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoFormatExpr$9=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Chars#1/18 )/21 (/24 e.Tail#1/22 )/25 s.Len#2/26 e.CharRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Chars#1 as range 18
  // closed e.Tail#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CharRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Chars#1: 18
  //DEBUG: e.Tail#1: 22
  //DEBUG: s.Len#2: 26
  //DEBUG: e.CharRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/24 } </27 & Sub/28 Tile{ HalfReuse: s.Limit1 #5/25 AsIs: s.Len#2/26 } >/29 )/30 Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.CharRep#2/2 } '\''/31 )/32 Tile{ HalfReuse: (/17 HalfReuse: # C/20 AsIs: e.Chars#1/18 AsIs: )/21 } Tile{ AsIs: e.Tail#1/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_char(vm, context[31], '\'');
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_ident(context[20], identifiers[ident_C]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[16], context[32] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1("DoFormatExpr$9=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoFormatExpr$10=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Chars#1/18 )/21 (/24 e.Tail#1/22 )/25 s.Len#2/26 e.CharRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Chars#1 as range 18
  // closed e.Tail#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CharRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Chars#1: 18
  //DEBUG: e.Tail#1: 22
  //DEBUG: s.Len#2: 26
  //DEBUG: e.CharRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/24 } </27 & Sub/28 Tile{ HalfReuse: s.Limit1 #5/25 AsIs: s.Len#2/26 } >/29 )/30 Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.CharRep#2/2 } )/31 Tile{ HalfReuse: (/17 HalfReuse: # C/20 AsIs: e.Chars#1/18 AsIs: )/21 } Tile{ AsIs: e.Tail#1/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_ident(context[20], identifiers[ident_C]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[16], context[31] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_evar( res, context[31], context[31] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[24], context[24] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1("DoFormatExpr$10=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$12=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Tail#1/18 )/21 s.Len#2/22 e.VarRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Tail#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Tail#1: 18
  //DEBUG: s.Len#2: 22
  //DEBUG: e.VarRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit1 #5/21 AsIs: s.Len#2/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.VarRep#2/2 } )/26 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1("DoFormatExpr$12=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$13=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Tail#1/18 )/21 s.Len#2/22 e.VarRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Tail#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Tail#1: 18
  //DEBUG: s.Len#2: 22
  //DEBUG: e.VarRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit1 #5/21 AsIs: s.Len#2/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.VarRep#2/2 } )/26 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1("DoFormatExpr$13=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$14=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Tail#1/18 )/21 s.Len#2/22 e.VarRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Tail#1 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Tail#1: 18
  //DEBUG: s.Len#2: 22
  //DEBUG: e.VarRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit1 #5/21 AsIs: s.Len#2/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.VarRep#2/2 } )/26 Tile{ AsIs: e.Tail#1/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1("DoFormatExpr$14=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoFormatExpr$19=1/4 s.Limit#1/5 (/8 e.Prefix#1/6 )/9 (/12 e.Indent#1/10 )/13 (/16 e.Result#1/14 )/17 (/20 e.Inner#1/18 )/21 (/24 e.Tail#1/22 )/25 s.Len#2/26 e.CallRep#2/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix#1 as range 6
  // closed e.Indent#1 as range 10
  // closed e.Result#1 as range 14
  // closed e.Inner#1 as range 18
  // closed e.Tail#1 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CallRep#2 as range 2
  //DEBUG: s.Limit#1: 5
  //DEBUG: e.Prefix#1: 6
  //DEBUG: e.Indent#1: 10
  //DEBUG: e.Result#1: 14
  //DEBUG: e.Inner#1: 18
  //DEBUG: e.Tail#1: 22
  //DEBUG: s.Len#2: 26
  //DEBUG: e.CallRep#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit#1/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } (/27 </28 & Sub/29 Tile{ HalfReuse: s.Limit1 #5/25 AsIs: s.Len#2/26 } >/30 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix#1/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent#1/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result#1/14 } Tile{ AsIs: e.CallRep#2/2 } Tile{ HalfReuse: )/20 AsIs: e.Inner#1/18 HalfReuse: (/21 HalfReuse: # RK/24 } )/31 Tile{ AsIs: e.Tail#1/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_close_bracket(context[20]);
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_ident(context[24], identifiers[ident_RK]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[31] );
  refalrts::link_brackets( context[16], context[20] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[27], context[17] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[31], context[31] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[17] );
  res = refalrts::splice_evar( res, context[30], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[29] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1("DoFormatExpr$19=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1);


static refalrts::FnResult func_DoFormatExpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & DoFormatExpr/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoFormatExpr/4 (/7 e.new#1/5 )/8 (/11 e.new#2/9 )/12 (/15 e.new#3/13 )/16 (/19 e.new#4/17 )/20 e.new#5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new#1 as range 5
  // closed e.new#2 as range 9
  // closed e.new#3 as range 13
  // closed e.new#4 as range 17
  // closed e.new#5 as range 2
  do {
    // </0 & DoFormatExpr/4 (/7 e.new#6/21 )/8 (/11 e.new#7/23 )/12 (/15 e.new#8/25 )/16 (/19 e.new#9/27 )/20 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new#6 as range 21
    // closed e.new#7 as range 23
    // closed e.new#8 as range 25
    // closed e.new#9 as range 27
    do {
      // </0 & DoFormatExpr/4 (/7 e.Limit#1/29 )/8 (/11 e.Prefix#1/31 )/12 (/15 e.Indent#1/33 )/16 (/19 e.Result#1/35 ' '/37 )/20 >/1
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[27];
      context[36] = context[28];
      context[37] = refalrts::char_right( ' ', context[35], context[36] );
      if( ! context[37] )
        continue;
      // closed e.Limit#1 as range 29
      // closed e.Prefix#1 as range 31
      // closed e.Indent#1 as range 33
      // closed e.Result#1 as range 35
      //DEBUG: e.Limit#1: 29
      //DEBUG: e.Prefix#1: 31
      //DEBUG: e.Indent#1: 33
      //DEBUG: e.Result#1: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit#1/29 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent#1/33 )/16 (/19 {REMOVED TILE} ' '/37 )/20 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix#1/31 } Tile{ AsIs: e.Result#1/35 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 e.Limit#1/29 )/8 (/11 e.Prefix#1/31 )/12 (/15 e.Indent#1/33 )/16 (/19 e.Result#1/35 )/20 >/1
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    context[35] = context[27];
    context[36] = context[28];
    // closed e.Limit#1 as range 29
    // closed e.Prefix#1 as range 31
    // closed e.Indent#1 as range 33
    // closed e.Result#1 as range 35
    //DEBUG: e.Limit#1: 29
    //DEBUG: e.Prefix#1: 31
    //DEBUG: e.Indent#1: 33
    //DEBUG: e.Result#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit#1/29 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent#1/33 )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix#1/31 } Tile{ AsIs: e.Result#1/35 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 e.new#6/21 )/8 (/11 e.new#7/23 )/12 (/15 e.new#8/25 )/16 (/19 e.new#9/27 )/20 ';'/31 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = refalrts::char_left( ';', context[29], context[30] );
    if( ! context[31] )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    // closed e.new#6 as range 21
    // closed e.new#7 as range 23
    // closed e.new#8 as range 25
    // closed e.new#9 as range 27
    do {
      // </0 & DoFormatExpr/4 (/7 e.Limit#1/32 )/8 (/11 e.Prefix#1/34 )/12 (/15 e.Indent#1/36 )/16 (/19 e.Result#1/38 ' '/40 )/20 ';'/31 >/1
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = refalrts::char_right( ' ', context[38], context[39] );
      if( ! context[40] )
        continue;
      // closed e.Limit#1 as range 32
      // closed e.Prefix#1 as range 34
      // closed e.Indent#1 as range 36
      // closed e.Result#1 as range 38
      //DEBUG: e.Limit#1: 32
      //DEBUG: e.Prefix#1: 34
      //DEBUG: e.Indent#1: 36
      //DEBUG: e.Result#1: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit#1/32 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent#1/36 )/16 (/19 {REMOVED TILE} ' '/40 )/20 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix#1/34 } Tile{ AsIs: e.Result#1/38 } Tile{ AsIs: ';'/31 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 e.Limit#1/32 )/8 (/11 e.Prefix#1/34 )/12 (/15 e.Indent#1/36 )/16 (/19 e.Result#1/38 )/20 ';'/31 >/1
    context[32] = context[21];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    // closed e.Limit#1 as range 32
    // closed e.Prefix#1 as range 34
    // closed e.Indent#1 as range 36
    // closed e.Result#1 as range 38
    //DEBUG: e.Limit#1: 32
    //DEBUG: e.Prefix#1: 34
    //DEBUG: e.Indent#1: 36
    //DEBUG: e.Result#1: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit#1/32 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent#1/36 )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix#1/34 } Tile{ AsIs: e.Result#1/38 } Tile{ AsIs: ';'/31 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 e.new#7/5 s.new#8/21 )/8 (/11 e.new#9/9 )/12 (/15 e.new#10/13 )/16 (/19 e.new#11/17 )/20 e.new#6/2 >/1
  // closed e.new#9 as range 9
  // closed e.new#10 as range 13
  // closed e.new#11 as range 17
  // closed e.new#6 as range 2
  if( ! refalrts::svar_right( context[21], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#7 as range 5
  do {
    // </0 & DoFormatExpr/4 (/7 '-'/32 s.Limit#1/21 )/8 (/11 e.Prefix#1/24 )/12 (/15 e.Indent#1/26 )/16 (/19 e.Result#1/28 )/20 e.Tail#1/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = refalrts::char_left( '-', context[22], context[23] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.Prefix#1 as range 24
    // closed e.Indent#1 as range 26
    // closed e.Result#1 as range 28
    // closed e.Tail#1 as range 30
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 24
    //DEBUG: e.Indent#1: 26
    //DEBUG: e.Result#1: 28
    //DEBUG: e.Tail#1: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/33 Tile{ AsIs: e.Prefix#1/24 } Tile{ AsIs: e.Result#1/28 } )/34 Tile{ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 HalfReuse: </32 } & LIMIT/35 >/36 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/26 AsIs: )/16 AsIs: (/19 } e.Indent#1/26/37 Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: )/20 AsIs: e.Tail#1/30 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_LIMIT]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::copy_evar(vm, context[37], context[38], context[26], context[27]);
    refalrts::reinit_open_call(context[32]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[19], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[0], context[32] );
    res = refalrts::splice_evar( res, context[34], context[34] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[33], context[33] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.new#15/21 )/8 (/11 e.new#16/9 )/12 (/15 e.new#17/13 )/16 (/19 e.new#18/17 )/20 (/24 s.new#12/26 e.new#13/22 )/25 e.new#14/2 >/1
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#16 as range 9
  // closed e.new#17 as range 13
  // closed e.new#18 as range 17
  // closed e.new#14 as range 2
  if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#13 as range 22
  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/27 )/12 (/15 e.Indent#1/29 )/16 (/19 e.Result#1/31 )/20 (/24 # W/26 e.Word#1/33 )/25 e.Tail#1/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_W], context[26] ) )
      continue;
    // closed e.Prefix#1 as range 27
    // closed e.Indent#1 as range 29
    // closed e.Result#1 as range 31
    // closed e.Word#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 27
    //DEBUG: e.Indent#1: 29
    //DEBUG: e.Result#1: 31
    //DEBUG: e.Word#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail#1/35 } Tile{ HalfReuse: )/7 } </37 & Lenw/38 </39 Tile{ HalfReuse: & FormatWord/26 AsIs: e.Word#1/33 HalfReuse: >/25 } ' '/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Lenw]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_char(vm, context[40], ' ');
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_name(context[26], functions[efunc_FormatWord]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[24], context[7] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/27 )/12 (/15 e.Indent#1/29 )/16 (/19 e.Result#1/31 )/20 (/24 # N/26 s.Number#1/37 )/25 e.Tail#1/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_N], context[26] ) )
      continue;
    // closed e.Prefix#1 as range 27
    // closed e.Indent#1 as range 29
    // closed e.Result#1 as range 31
    // closed e.Tail#1 as range 35
    if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 27
    //DEBUG: e.Indent#1: 29
    //DEBUG: e.Result#1: 31
    //DEBUG: e.Tail#1: 35
    //DEBUG: s.Number#1: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail#1/35 } Tile{ HalfReuse: )/7 } </38 & Lenw/39 </40 Tile{ HalfReuse: & Symb/26 AsIs: s.Number#1/37 HalfReuse: >/25 } ' '/41 >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Lenw]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_char(vm, context[41], ' ');
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_name(context[26], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[24], context[7] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new#21/21 )/8 (/11 e.new#22/27 )/12 (/15 e.new#23/29 )/16 (/19 e.new#24/31 )/20 (/24 # C/26 e.new#20/33 )/25 e.new#19/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_C], context[26] ) )
      continue;
    // closed e.new#22 as range 27
    // closed e.new#23 as range 29
    // closed e.new#24 as range 31
    // closed e.new#20 as range 33
    // closed e.new#19 as range 35
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/37 )/12 (/15 e.Indent#1/39 )/16 (/19 e.Result#1/41 )/20 (/24 # C/26 e.Chars1#1/43 )/25 (/49 # C/51 e.Chars2#1/47 )/50 e.Tail#1/45 >/1
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_left( identifiers[ident_C], context[47], context[48] );
      if( ! context[51] )
        continue;
      // closed e.Prefix#1 as range 37
      // closed e.Indent#1 as range 39
      // closed e.Result#1 as range 41
      // closed e.Chars1#1 as range 43
      // closed e.Chars2#1 as range 47
      // closed e.Tail#1 as range 45
      //DEBUG: s.Limit#1: 21
      //DEBUG: e.Prefix#1: 37
      //DEBUG: e.Indent#1: 39
      //DEBUG: e.Result#1: 41
      //DEBUG: e.Chars1#1: 43
      //DEBUG: e.Chars2#1: 47
      //DEBUG: e.Tail#1: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/25 (/49 # C/51 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 AsIs: s.Limit#1/21 AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/37 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/39 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/41 AsIs: )/20 AsIs: (/24 AsIs: # C/26 } Tile{ AsIs: e.Chars1#1/43 } Tile{ AsIs: e.Chars2#1/47 } Tile{ AsIs: )/50 AsIs: e.Tail#1/45 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[50] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr/4 (/7 s.new#28/21 )/8 (/11 e.new#29/37 )/12 (/15 e.new#30/39 )/16 (/19 e.new#31/41 )/20 (/24 # C/26 s.new#26/47 e.new#27/43 )/25 e.new#25/45 >/1
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      // closed e.new#29 as range 37
      // closed e.new#30 as range 39
      // closed e.new#31 as range 41
      // closed e.new#25 as range 45
      if( ! refalrts::svar_left( context[47], context[43], context[44] ) )
        continue;
      // closed e.new#27 as range 43
      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/48 )/12 (/15 e.Indent#1/50 )/16 (/19 e.Result#1/52 '\''/58 )/20 (/24 # C/26 s.Char#1/47 e.Chars#1/54 )/25 e.Tail#1/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = refalrts::char_right( '\'', context[52], context[53] );
        if( ! context[58] )
          continue;
        // closed e.Prefix#1 as range 48
        // closed e.Indent#1 as range 50
        // closed e.Result#1 as range 52
        // closed e.Chars#1 as range 54
        // closed e.Tail#1 as range 56
        //DEBUG: s.Limit#1: 21
        //DEBUG: s.Char#1: 47
        //DEBUG: e.Prefix#1: 48
        //DEBUG: e.Indent#1: 50
        //DEBUG: e.Result#1: 52
        //DEBUG: e.Chars#1: 54
        //DEBUG: e.Tail#1: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/52 HalfReuse: )/58 HalfReuse: (/20 } Tile{ AsIs: e.Chars#1/54 } )/59 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail#1/56 } Tile{ AsIs: )/25 } </60 & Lenw/61 Tile{ HalfReuse: </24 HalfReuse: & EscapeChar/26 AsIs: s.Char#1/47 } >/62 >/63 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::alloc_open_call(vm, context[60]);
        refalrts::alloc_name(vm, context[61], functions[efunc_Lenw]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1]);
        refalrts::reinit_svar( context[8], context[21] );
        refalrts::reinit_close_bracket(context[58]);
        refalrts::reinit_open_bracket(context[20]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[26], functions[efunc_EscapeChar]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[25] );
        refalrts::link_brackets( context[20], context[59] );
        refalrts::link_brackets( context[19], context[58] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[24], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[25], context[25] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[7], context[7] );
        res = refalrts::splice_evar( res, context[59], context[59] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[8], context[20] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/48 )/12 (/15 e.Indent#1/50 )/16 (/19 e.Result#1/52 )/20 (/24 # C/26 s.Char#1/47 e.Chars#1/54 )/25 e.Tail#1/56 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      // closed e.Prefix#1 as range 48
      // closed e.Indent#1 as range 50
      // closed e.Result#1 as range 52
      // closed e.Chars#1 as range 54
      // closed e.Tail#1 as range 56
      //DEBUG: s.Limit#1: 21
      //DEBUG: s.Char#1: 47
      //DEBUG: e.Prefix#1: 48
      //DEBUG: e.Indent#1: 50
      //DEBUG: e.Result#1: 52
      //DEBUG: e.Chars#1: 54
      //DEBUG: e.Tail#1: 56

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/52 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Chars#1/54 } )/58 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail#1/56 } Tile{ AsIs: )/25 } </59 & Lenw/60 '\''/61 </62 Tile{ HalfReuse: & EscapeChar/26 AsIs: s.Char#1/47 } >/63 '\''/64 >/65 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[61], '\'');
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_char(vm, context[64], '\'');
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_name(context[26], functions[efunc_EscapeChar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[7], context[25] );
      refalrts::link_brackets( context[24], context[58] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[63], context[65] );
      res = refalrts::splice_evar( res, context[26], context[47] );
      res = refalrts::splice_evar( res, context[59], context[62] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[7], context[7] );
      res = refalrts::splice_evar( res, context[58], context[58] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/37 )/12 (/15 e.Indent#1/39 )/16 (/19 e.Result#1/41 )/20 (/24 # C/26 )/25 e.Tail#1/43 >/1
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    context[43] = context[35];
    context[44] = context[36];
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    // closed e.Prefix#1 as range 37
    // closed e.Indent#1 as range 39
    // closed e.Result#1 as range 41
    // closed e.Tail#1 as range 43
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 37
    //DEBUG: e.Indent#1: 39
    //DEBUG: e.Result#1: 41
    //DEBUG: e.Tail#1: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } Tile{ HalfReuse: </26 HalfReuse: & Sub/25 } Tile{ AsIs: s.Limit#1/21 } 1/45 >/46 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/37 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/39 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/41 HalfReuse: ' '/20 HalfReuse: )/24 } Tile{ AsIs: e.Tail#1/43 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_name(context[25], functions[efunc_Sub]);
    refalrts::reinit_char(context[20], ' ');
    refalrts::reinit_close_bracket(context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[24] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[21], context[21] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new#25/21 )/8 (/11 e.new#26/27 )/12 (/15 e.new#27/29 )/16 (/19 e.new#28/31 )/20 (/24 s.new#20/26 e.new#21/33 s.new#22/39 s.new#23/38 s.new#24/37 )/25 e.new#19/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.new#26 as range 27
    // closed e.new#27 as range 29
    // closed e.new#28 as range 31
    // closed e.new#19 as range 35
    if( ! refalrts::svar_right( context[37], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_right( context[38], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_right( context[39], context[33], context[34] ) )
      continue;
    // closed e.new#21 as range 33
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/40 )/12 (/15 e.Indent#1/42 )/16 (/19 e.Result#1/44 )/20 (/24 # s/26 s.Id#1/39 '='/38 s.Copy#1/37 )/25 e.Tail#1/46 >/1
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = context[35];
      context[47] = context[36];
      if( ! refalrts::char_term( '=', context[38] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_s], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Prefix#1 as range 40
      // closed e.Indent#1 as range 42
      // closed e.Result#1 as range 44
      // closed e.Tail#1 as range 46
      //DEBUG: s.Limit#1: 21
      //DEBUG: s.Id#1: 39
      //DEBUG: s.Copy#1: 37
      //DEBUG: e.Prefix#1: 40
      //DEBUG: e.Indent#1: 42
      //DEBUG: e.Result#1: 44
      //DEBUG: e.Tail#1: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} s.Copy#1/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/40 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/42 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/44 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail#1/46 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/48"s."/49 </51 Tile{ HalfReuse: & Symb/26 AsIs: s.Id#1/39 HalfReuse: >/38 } ' '/52 >/53 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[48], functions[efunc_Lenw]);
      refalrts::alloc_chars(vm, context[49], context[50], "s.", 2);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_char(vm, context[52], ' ');
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[26], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[51] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[38] );
      res = refalrts::splice_evar( res, context[48], context[51] );
      res = refalrts::splice_evar( res, context[7], context[7] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.new#35/21 )/8 (/11 e.new#36/40 )/12 (/15 e.new#37/42 )/16 (/19 e.new#38/44 )/20 (/24 s.new#30/26 s.new#33/50 s.new#34/51 '='/39 s.new#32/38 s.new#31/37 )/25 e.new#29/48 >/1
    context[40] = context[27];
    context[41] = context[28];
    context[42] = context[29];
    context[43] = context[30];
    context[44] = context[31];
    context[45] = context[32];
    context[46] = context[33];
    context[47] = context[34];
    context[48] = context[35];
    context[49] = context[36];
    if( ! refalrts::char_term( '=', context[39] ) )
      continue;
    // closed e.new#36 as range 40
    // closed e.new#37 as range 42
    // closed e.new#38 as range 44
    // closed e.new#29 as range 48
    if( ! refalrts::svar_left( context[50], context[46], context[47] ) )
      continue;
    if( ! refalrts::svar_left( context[51], context[46], context[47] ) )
      continue;
    if( ! refalrts::empty_seq( context[46], context[47] ) )
      continue;
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/52 )/12 (/15 e.Indent#1/54 )/16 (/19 e.Result#1/56 )/20 (/24 # t/26 s.IdL#1/50 s.IdR#1/51 '='/39 s.CopyL#1/38 s.CopyR#1/37 )/25 e.Tail#1/58 >/1
      context[52] = context[40];
      context[53] = context[41];
      context[54] = context[42];
      context[55] = context[43];
      context[56] = context[44];
      context[57] = context[45];
      context[58] = context[48];
      context[59] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_t], context[26] ) )
        continue;
      // closed e.Prefix#1 as range 52
      // closed e.Indent#1 as range 54
      // closed e.Result#1 as range 56
      // closed e.Tail#1 as range 58
      //DEBUG: s.Limit#1: 21
      //DEBUG: s.IdL#1: 50
      //DEBUG: s.IdR#1: 51
      //DEBUG: s.CopyL#1: 38
      //DEBUG: s.CopyR#1: 37
      //DEBUG: e.Prefix#1: 52
      //DEBUG: e.Indent#1: 54
      //DEBUG: e.Result#1: 56
      //DEBUG: e.Tail#1: 58

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} s.IdR#1/51 {REMOVED TILE} s.CopyL#1/38 s.CopyR#1/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/52 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/54 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/56 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail#1/58 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/60 Tile{ Reuse: 't'/39 } '.'/61 </62 Tile{ HalfReuse: & Symb/26 AsIs: s.IdL#1/50 } >/63 ' '/64 >/65 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[61], '.');
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_char(vm, context[64], ' ');
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[39], 't');
      refalrts::reinit_name(context[26], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[63], context[65] );
      res = refalrts::splice_evar( res, context[26], context[50] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[39], context[39] );
      res = refalrts::splice_evar( res, context[60], context[60] );
      res = refalrts::splice_evar( res, context[7], context[7] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/52 )/12 (/15 e.Indent#1/54 )/16 (/19 e.Result#1/56 )/20 (/24 # e/26 s.IdL#1/50 s.IdR#1/51 '='/39 s.CopyL#1/38 s.CopyR#1/37 )/25 e.Tail#1/58 >/1
    context[52] = context[40];
    context[53] = context[41];
    context[54] = context[42];
    context[55] = context[43];
    context[56] = context[44];
    context[57] = context[45];
    context[58] = context[48];
    context[59] = context[49];
    if( ! refalrts::ident_term( identifiers[ident_e], context[26] ) )
      continue;
    // closed e.Prefix#1 as range 52
    // closed e.Indent#1 as range 54
    // closed e.Result#1 as range 56
    // closed e.Tail#1 as range 58
    //DEBUG: s.Limit#1: 21
    //DEBUG: s.IdL#1: 50
    //DEBUG: s.IdR#1: 51
    //DEBUG: s.CopyL#1: 38
    //DEBUG: s.CopyR#1: 37
    //DEBUG: e.Prefix#1: 52
    //DEBUG: e.Indent#1: 54
    //DEBUG: e.Result#1: 56
    //DEBUG: e.Tail#1: 58

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} s.IdR#1/51 {REMOVED TILE} s.CopyL#1/38 s.CopyR#1/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/52 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/54 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/56 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail#1/58 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/60 Tile{ Reuse: 'e'/39 } '.'/61 </62 Tile{ HalfReuse: & Symb/26 AsIs: s.IdL#1/50 } >/63 ' '/64 >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
    refalrts::alloc_char(vm, context[61], '.');
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::alloc_char(vm, context[64], ' ');
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_open_call(context[7]);
    refalrts::update_char(context[39], 'e');
    refalrts::reinit_name(context[26], functions[efunc_Symb]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[62] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[63], context[65] );
    res = refalrts::splice_evar( res, context[26], context[50] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[39], context[39] );
    res = refalrts::splice_evar( res, context[60], context[60] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new#21/21 )/8 (/11 e.new#22/27 )/12 (/15 e.new#23/29 )/16 (/19 e.new#24/31 )/20 (/24 s.new#20/26 )/25 e.new#19/33 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[2];
    context[34] = context[3];
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new#22 as range 27
    // closed e.new#23 as range 29
    // closed e.new#24 as range 31
    // closed e.new#19 as range 33
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/35 )/12 (/15 e.Indent#1/37 )/16 (/19 e.Result#1/39 )/20 (/24 # LB/26 )/25 e.Tail#1/41 >/1
      context[35] = context[27];
      context[36] = context[28];
      context[37] = context[29];
      context[38] = context[30];
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_LB], context[26] ) )
        continue;
      // closed e.Prefix#1 as range 35
      // closed e.Indent#1 as range 37
      // closed e.Result#1 as range 39
      // closed e.Tail#1 as range 41
      //DEBUG: s.Limit#1: 21
      //DEBUG: e.Prefix#1: 35
      //DEBUG: e.Indent#1: 37
      //DEBUG: e.Result#1: 39
      //DEBUG: e.Tail#1: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } Tile{ HalfReuse: </26 HalfReuse: & Sub/25 } Tile{ AsIs: s.Limit#1/21 } 1/43 >/44 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/35 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/37 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/39 HalfReuse: '('/20 HalfReuse: )/24 } Tile{ AsIs: e.Tail#1/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[43], 1UL);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::reinit_open_call(context[26]);
      refalrts::reinit_name(context[25], functions[efunc_Sub]);
      refalrts::reinit_char(context[20], '(');
      refalrts::reinit_close_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[21], context[21] );
      res = refalrts::splice_evar( res, context[26], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.new#26/21 )/8 (/11 e.new#27/35 )/12 (/15 e.new#28/37 )/16 (/19 e.new#29/39 )/20 (/24 # RB/26 )/25 e.new#25/41 >/1
    context[35] = context[27];
    context[36] = context[28];
    context[37] = context[29];
    context[38] = context[30];
    context[39] = context[31];
    context[40] = context[32];
    context[41] = context[33];
    context[42] = context[34];
    if( ! refalrts::ident_term( identifiers[ident_RB], context[26] ) )
      continue;
    // closed e.new#27 as range 35
    // closed e.new#28 as range 37
    // closed e.new#29 as range 39
    // closed e.new#25 as range 41
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/43 )/12 (/15 e.Indent#1/45 )/16 (/19 e.Result#1/47 ' '/51 )/20 (/24 # RB/26 )/25 e.Tail#1/49 >/1
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      context[51] = refalrts::char_right( ' ', context[47], context[48] );
      if( ! context[51] )
        continue;
      // closed e.Prefix#1 as range 43
      // closed e.Indent#1 as range 45
      // closed e.Result#1 as range 47
      // closed e.Tail#1 as range 49
      //DEBUG: s.Limit#1: 21
      //DEBUG: e.Prefix#1: 43
      //DEBUG: e.Indent#1: 45
      //DEBUG: e.Result#1: 47
      //DEBUG: e.Tail#1: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </52 & Add/53 1/54 Tile{ AsIs: s.Limit#1/21 } Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/43 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/45 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/47 HalfReuse: )/51 HalfReuse: (/20 HalfReuse: # RB/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[54], 1UL);
      refalrts::reinit_close_call(context[25]);
      refalrts::reinit_close_bracket(context[51]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::reinit_ident(context[24], identifiers[ident_RB]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[26] );
      refalrts::link_brackets( context[19], context[51] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[52] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[26] );
      res = refalrts::splice_evar( res, context[25], context[25] );
      res = refalrts::splice_evar( res, context[21], context[21] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/43 )/12 (/15 e.Indent#1/45 )/16 (/19 e.Result#1/47 )/20 (/24 # RB/26 )/25 e.Tail#1/49 >/1
    context[43] = context[35];
    context[44] = context[36];
    context[45] = context[37];
    context[46] = context[38];
    context[47] = context[39];
    context[48] = context[40];
    context[49] = context[41];
    context[50] = context[42];
    // closed e.Prefix#1 as range 43
    // closed e.Indent#1 as range 45
    // closed e.Result#1 as range 47
    // closed e.Tail#1 as range 49
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 43
    //DEBUG: e.Indent#1: 45
    //DEBUG: e.Result#1: 47
    //DEBUG: e.Tail#1: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </51 & Sub/52 Tile{ AsIs: s.Limit#1/21 } 2/53 Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/43 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/45 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/47 HalfReuse: ')'/20 HalfReuse: ' '/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/49 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[53], 2UL);
    refalrts::reinit_close_call(context[25]);
    refalrts::reinit_char(context[20], ')');
    refalrts::reinit_char(context[24], ' ');
    refalrts::reinit_close_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[26] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[51] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[8], context[26] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[53], context[53] );
    res = refalrts::splice_evar( res, context[21], context[21] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/27 )/12 (/15 e.Indent#1/29 )/16 (/19 e.Result#1/31 )/20 (/24 '*'/26 e.Inner#1/33 )/25 e.Tail#1/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::char_term( '*', context[26] ) )
      continue;
    // closed e.Prefix#1 as range 27
    // closed e.Indent#1 as range 29
    // closed e.Result#1 as range 31
    // closed e.Inner#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 27
    //DEBUG: e.Indent#1: 29
    //DEBUG: e.Result#1: 31
    //DEBUG: e.Inner#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 AsIs: s.Limit#1/21 AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/31 AsIs: )/20 AsIs: (/24 HalfReuse: # LB/26 } )/37 Tile{ AsIs: e.Inner#1/33 } (/38 # RB/39 Tile{ AsIs: )/25 AsIs: e.Tail#1/35 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_RB]);
    refalrts::reinit_ident(context[26], identifiers[ident_LB]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[38], context[25] );
    refalrts::link_brackets( context[24], context[37] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[37], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/27 )/12 (/15 e.Indent#1/29 )/16 (/19 e.Result#1/31 )/20 (/24 '!'/26 (/39 e.Name#1/37 )/40 e.Inner#1/33 )/25 e.Tail#1/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::char_term( '!', context[26] ) )
      continue;
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[33], context[34] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.Prefix#1 as range 27
    // closed e.Indent#1 as range 29
    // closed e.Result#1 as range 31
    // closed e.Name#1 as range 37
    // closed e.Inner#1 as range 33
    // closed e.Tail#1 as range 35
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 27
    //DEBUG: e.Indent#1: 29
    //DEBUG: e.Result#1: 31
    //DEBUG: e.Name#1: 37
    //DEBUG: e.Inner#1: 33
    //DEBUG: e.Tail#1: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit#1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1/4 } Tile{ HalfReuse: s.Limit1 #21/8 AsIs: (/11 AsIs: e.Prefix#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Inner#1/33 } Tile{ AsIs: )/25 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail#1/35 } )/41 </42 & Lenw/43 '<'/44 Tile{ HalfReuse: </26 HalfReuse: & FormatWord/39 AsIs: e.Name#1/37 HalfReuse: >/40 } ' '/45 >/46 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Lenw]);
    refalrts::alloc_char(vm, context[44], '<');
    refalrts::alloc_char(vm, context[45], ' ');
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_name(context[39], functions[efunc_FormatWord]);
    refalrts::reinit_close_call(context[40]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[7], context[41] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[26], context[40] );
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[7], context[7] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.new#20/21 )/8 (/11 e.new#21/9 )/12 (/15 e.new#22/13 )/16 (/19 e.new#23/17 )/20 (/24 # RK/26 )/25 e.new#19/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_RK], context[26] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[22], context[23] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#21 as range 9
  // closed e.new#22 as range 13
  // closed e.new#23 as range 17
  // closed e.new#19 as range 2
  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/27 )/12 (/15 e.Indent#1/29 )/16 (/19 e.Result#1/31 ' '/35 )/20 (/24 # RK/26 )/25 e.Tail#1/33 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[2];
    context[34] = context[3];
    context[35] = refalrts::char_right( ' ', context[31], context[32] );
    if( ! context[35] )
      continue;
    // closed e.Prefix#1 as range 27
    // closed e.Indent#1 as range 29
    // closed e.Result#1 as range 31
    // closed e.Tail#1 as range 33
    //DEBUG: s.Limit#1: 21
    //DEBUG: e.Prefix#1: 27
    //DEBUG: e.Indent#1: 29
    //DEBUG: e.Result#1: 31
    //DEBUG: e.Tail#1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </36 & Add/37 1/38 Tile{ AsIs: s.Limit#1/21 } Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/31 HalfReuse: )/35 HalfReuse: (/20 HalfReuse: # RK/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/33 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[38], 1UL);
    refalrts::reinit_close_call(context[25]);
    refalrts::reinit_close_bracket(context[35]);
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_ident(context[24], identifiers[ident_RK]);
    refalrts::reinit_close_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[26] );
    refalrts::link_brackets( context[19], context[35] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[8], context[26] );
    res = refalrts::splice_evar( res, context[25], context[25] );
    res = refalrts::splice_evar( res, context[21], context[21] );
    res = refalrts::splice_evar( res, context[36], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.Limit#1/21 )/8 (/11 e.Prefix#1/9 )/12 (/15 e.Indent#1/13 )/16 (/19 e.Result#1/17 )/20 (/24 # RK/26 )/25 e.Tail#1/2 >/1
  // closed e.Prefix#1 as range 9
  // closed e.Indent#1 as range 13
  // closed e.Result#1 as range 17
  // closed e.Tail#1 as range 2
  //DEBUG: s.Limit#1: 21
  //DEBUG: e.Prefix#1: 9
  //DEBUG: e.Indent#1: 13
  //DEBUG: e.Result#1: 17
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </27 & Sub/28 Tile{ AsIs: s.Limit#1/21 } 2/29 Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix#1/9 AsIs: )/12 AsIs: (/15 AsIs: e.Indent#1/13 AsIs: )/16 AsIs: (/19 AsIs: e.Result#1/17 HalfReuse: '>'/20 HalfReuse: ' '/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[29], 2UL);
  refalrts::reinit_close_call(context[25]);
  refalrts::reinit_char(context[20], '>');
  refalrts::reinit_char(context[24], ' ');
  refalrts::reinit_close_bracket(context[26]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[26] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[26] );
  res = refalrts::splice_evar( res, context[25], context[25] );
  res = refalrts::splice_evar( res, context[29], context[29] );
  res = refalrts::splice_evar( res, context[21], context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoFormatExpr("DoFormatExpr", COOKIE1_, COOKIE2_, func_DoFormatExpr);


static refalrts::FnResult func_gen_FormatWord_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & FormatWord:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FormatWord:1/4 s.new#1/5 s.new#2/6 e.new#3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#3 as range 2
  do {
    // </0 & FormatWord:1/4 'L'/5 s._#2/6 s.First#2/9 e.Tail#2/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::char_term( 'L', context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.Tail#2 as range 7
    //DEBUG: s._#2: 6
    //DEBUG: s.First#2: 9
    //DEBUG: e.Tail#2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s._#2/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FormatWord-Ident/4 HalfReuse: (/5 } Tile{ AsIs: s.First#2/9 } )/10 </11 & Type/12 Tile{ AsIs: e.Tail#2/7 } >/13 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_FormatWordm_Ident]);
    refalrts::reinit_open_bracket(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[5], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[13] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_evar( res, context[9], context[9] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatWord:1/4 s.Type#2/5 s.SubType#2/6 e.Word#2/2 >/1
  // closed e.Word#2 as range 2
  //DEBUG: s.Type#2: 5
  //DEBUG: s.SubType#2: 6
  //DEBUG: e.Word#2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Type#2/5 s.SubType#2/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: </4 } & EscapeChars/7 Tile{ AsIs: e.Word#2/2 } >/8 Tile{ HalfReuse: '\"'/1 ]] }
  refalrts::alloc_name(vm, context[7], functions[efunc_EscapeChars]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::reinit_char(context[0], '\"');
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_char(context[1], '\"');
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FormatWord_B1("FormatWord:1", COOKIE1_, COOKIE2_, func_gen_FormatWord_B1);


static refalrts::FnResult func_FormatWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & FormatWord/4 e.Word#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Word#1 as range 2
  //DEBUG: e.Word#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & FormatWord:1/6 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: e.Word#1/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_FormatWord_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatWord("FormatWord", COOKIE1_, COOKIE2_, func_FormatWord);


static refalrts::FnResult func_FormatWordm_Ident(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & FormatWord-Ident/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & FormatWord-Ident/4 (/7 e.new#1/5 )/8 s.new#2/9 s.new#3/10 e.new#4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new#4 as range 2
  do {
    // </0 & FormatWord-Ident/4 (/7 e.Ident#1/11 )/8 '*'/9 s._#1/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    if( ! refalrts::char_term( '*', context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Ident#1 as range 11
    //DEBUG: s._#1: 10
    //DEBUG: e.Ident#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & FormatWord-Ident/4 (/7 {REMOVED TILE} )/8 '*'/9 s._#1/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Ident#1/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FormatWord-Ident/4 (/7 e.new#9/11 )/8 s.new#5/9 s.new#6/10 s.new#7/15 e.new#8/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new#9 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new#8 as range 13
    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix#1/16 )/8 'L'/9 s._#1/10 s.Next#1/15 e.Tail#1/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( 'L', context[9] ) )
        continue;
      // closed e.Prefix#1 as range 16
      // closed e.Tail#1 as range 18
      //DEBUG: s._#1: 10
      //DEBUG: s.Next#1: 15
      //DEBUG: e.Prefix#1: 16
      //DEBUG: e.Tail#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s._#1/10 s.Next#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix#1/16 HalfReuse: s.Next1 #15/8 HalfReuse: )/9 } </20 & Type/21 Tile{ AsIs: e.Tail#1/18 } >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_svar( context[8], context[15] );
      refalrts::reinit_close_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix#1/16 )/8 'D'/9 s._#1/10 s.Next#1/15 e.Tail#1/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( 'D', context[9] ) )
        continue;
      // closed e.Prefix#1 as range 16
      // closed e.Tail#1 as range 18
      //DEBUG: s._#1: 10
      //DEBUG: s.Next#1: 15
      //DEBUG: e.Prefix#1: 16
      //DEBUG: e.Tail#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s._#1/10 s.Next#1/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix#1/16 HalfReuse: s.Next1 #15/8 HalfReuse: )/9 } </20 & Type/21 Tile{ AsIs: e.Tail#1/18 } >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_svar( context[8], context[15] );
      refalrts::reinit_close_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix#1/16 )/8 s.Type#1/9 s.SubType#1/10 '-'/15 e.Tail#1/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( '-', context[15] ) )
        continue;
      // closed e.Prefix#1 as range 16
      // closed e.Tail#1 as range 18
      //DEBUG: s.Type#1: 9
      //DEBUG: s.SubType#1: 10
      //DEBUG: e.Prefix#1: 16
      //DEBUG: e.Tail#1: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Type#1/9 s.SubType#1/10 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix#1/16 HalfReuse: '-'/8 } )/20 </21 Tile{ HalfReuse: & Type/15 AsIs: e.Tail#1/18 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_char(context[8], '-');
      refalrts::reinit_name(context[15], functions[efunc_Type]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[22] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FormatWord-Ident/4 (/7 e.Prefix#1/16 )/8 s.Type#1/9 s.SubType#1/10 '_'/15 e.Tail#1/18 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::char_term( '_', context[15] ) )
      continue;
    // closed e.Prefix#1 as range 16
    // closed e.Tail#1 as range 18
    //DEBUG: s.Type#1: 9
    //DEBUG: s.SubType#1: 10
    //DEBUG: e.Prefix#1: 16
    //DEBUG: e.Tail#1: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Type#1/9 s.SubType#1/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix#1/16 HalfReuse: '_'/8 } )/20 </21 Tile{ HalfReuse: & Type/15 AsIs: e.Tail#1/18 AsIs: >/1 } >/22 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::reinit_char(context[8], '_');
    refalrts::reinit_name(context[15], functions[efunc_Type]);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[22] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatWord-Ident/4 (/7 e.Prefix#1/5 )/8 s.Type#1/9 s.SubType#1/10 e.Suffix#1/2 >/1
  // closed e.Prefix#1 as range 5
  // closed e.Suffix#1 as range 2
  //DEBUG: s.Type#1: 9
  //DEBUG: s.SubType#1: 10
  //DEBUG: e.Prefix#1: 5
  //DEBUG: e.Suffix#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type#1/9 s.SubType#1/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: </4 HalfReuse: & EscapeChars/7 } Tile{ AsIs: e.Prefix#1/5 } Tile{ AsIs: e.Suffix#1/2 } Tile{ HalfReuse: >/8 } Tile{ HalfReuse: '\"'/1 ]] }
  refalrts::reinit_char(context[0], '\"');
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_EscapeChars]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_char(context[1], '\"');
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[8], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatWordm_Ident("FormatWord-Ident", COOKIE1_, COOKIE2_, func_FormatWordm_Ident);


static refalrts::FnResult func_EscapeChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & EscapeChars/4 e.Chars#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Chars#1 as range 2
  //DEBUG: e.Chars#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Chars#1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeChars("EscapeChars", COOKIE1_, COOKIE2_, func_EscapeChars);


static refalrts::FnResult func_gen_EscapeChar_S7B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & EscapeChar$7:1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EscapeChar$7:1/4 s.new#1/5 s.new#2/6 s.new#3/7 s.new#4/8 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EscapeChar$7:1/4 s.Char#1/5 s.Code#2/6 '-'/7 '-'/8 >/1
    if( ! refalrts::char_term( '-', context[7] ) )
      continue;
    if( ! refalrts::char_term( '-', context[8] ) )
      continue;
    //DEBUG: s.Char#1: 5
    //DEBUG: s.Code#2: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar$7:1/4 s.Char#1/5 s.Code#2/6 '-'/7 '-'/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Char1 #5/1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar$7:1/4 s.Char#1/5 s.Code#2/6 s.Cmp1#3/7 s.Cmp2#3/8 >/1
  //DEBUG: s.Char#1: 5
  //DEBUG: s.Code#2: 6
  //DEBUG: s.Cmp1#3: 7
  //DEBUG: s.Cmp2#3: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Char#1/5 {REMOVED TILE} s.Cmp1#3/7 s.Cmp2#3/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar-Hex/4 } Tile{ AsIs: s.Code#2/6 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_EscapeCharm_Hex]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeChar_S7B1("EscapeChar$7:1", COOKIE1_, COOKIE2_, func_gen_EscapeChar_S7B1);


static refalrts::FnResult func_gen_EscapeChar_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & EscapeChar$7=1/4 s.Char#1/5 s.Code#2/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Char#1: 5
  //DEBUG: s.Code#2: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar$7:1/4 AsIs: s.Char#1/5 AsIs: s.Code#2/6 HalfReuse: </1 } & Compare/7 31/8 s.Code#2/6/9 >/10 </11 & Compare/12 s.Code#2/6/13 127/14 >/15 >/16 Tile{ ]] }
  refalrts::alloc_name(vm, context[7], functions[efunc_Compare]);
  refalrts::alloc_number(vm, context[8], 31UL);
  refalrts::copy_stvar(vm, context[9], context[6]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Compare]);
  refalrts::copy_stvar(vm, context[13], context[6]);
  refalrts::alloc_number(vm, context[14], 127UL);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_S7B1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeChar_S7A1("EscapeChar$7=1", COOKIE1_, COOKIE2_, func_gen_EscapeChar_S7A1);


static refalrts::FnResult func_EscapeChar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & EscapeChar/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & EscapeChar/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EscapeChar/4 '\\'/5 >/1
    if( ! refalrts::char_term( '\\', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: '\\'/5 HalfReuse: '\\'/1 ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\''/5 >/1
    if( ! refalrts::char_term( '\'', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: '\''/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\"'/5 >/1
    if( ! refalrts::char_term( '\"', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: '\"'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\n'/5 >/1
    if( ! refalrts::char_term( '\n', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 'n'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\t'/5 >/1
    if( ! refalrts::char_term( '\t', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 't'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 't');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\r'/5 >/1
    if( ! refalrts::char_term( '\r', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 'r'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 'r');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar/4 s.Char#1/5 >/1
  //DEBUG: s.Char#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar$7=1/4 AsIs: s.Char#1/5 HalfReuse: </1 } & Ord/6 s.Char#1/5/7 >/8 >/9 Tile{ ]] }
  refalrts::alloc_name(vm, context[6], functions[efunc_Ord]);
  refalrts::copy_stvar(vm, context[7], context[5]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_S7A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeChar("EscapeChar", COOKIE1_, COOKIE2_, func_EscapeChar);


static refalrts::FnResult func_gen_EscapeCharm_Hex_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & EscapeChar-Hex=1/4 (/7 s.Hi#2/9 )/8 s.Lo#2/10 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Hi#2: 9
  //DEBUG: s.Lo#2: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: </7 } & Hex/11 Tile{ AsIs: s.Hi#2/9 } >/12 </13 Tile{ HalfReuse: & Hex/8 AsIs: s.Lo#2/10 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_Hex]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_char(context[0], '\\');
  refalrts::reinit_char(context[4], 'x');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_Hex]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[9], context[9] );
  res = refalrts::splice_evar( res, context[11], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeCharm_Hex_A1("EscapeChar-Hex=1", COOKIE1_, COOKIE2_, func_gen_EscapeCharm_Hex_A1);


static refalrts::FnResult func_EscapeCharm_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & EscapeChar-Hex/4 s.Code#1/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Code#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & EscapeChar-Hex=1/7 Tile{ AsIs: </0 Reuse: & Divmod/4 AsIs: s.Code#1/5 HalfReuse: 16/1 } >/8 >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_EscapeCharm_Hex_A1]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Divmod]);
  refalrts::reinit_number(context[1], 16UL);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeCharm_Hex("EscapeChar-Hex", COOKIE1_, COOKIE2_, func_EscapeCharm_Hex);


static refalrts::FnResult func_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Hex/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & Hex/4 s.new#1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Hex/4 0/5 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 0/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char(context[1], '0');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 1/5 >/1
    if( ! refalrts::number_term( 1UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '1'/1 ]] }
    refalrts::reinit_char(context[1], '1');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 2/5 >/1
    if( ! refalrts::number_term( 2UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 2/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '2'/1 ]] }
    refalrts::reinit_char(context[1], '2');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 3/5 >/1
    if( ! refalrts::number_term( 3UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 3/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '3'/1 ]] }
    refalrts::reinit_char(context[1], '3');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 4/5 >/1
    if( ! refalrts::number_term( 4UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 4/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '4'/1 ]] }
    refalrts::reinit_char(context[1], '4');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 5/5 >/1
    if( ! refalrts::number_term( 5UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 5/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '5'/1 ]] }
    refalrts::reinit_char(context[1], '5');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 6/5 >/1
    if( ! refalrts::number_term( 6UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 6/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '6'/1 ]] }
    refalrts::reinit_char(context[1], '6');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 7/5 >/1
    if( ! refalrts::number_term( 7UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 7/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '7'/1 ]] }
    refalrts::reinit_char(context[1], '7');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 8/5 >/1
    if( ! refalrts::number_term( 8UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 8/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '8'/1 ]] }
    refalrts::reinit_char(context[1], '8');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 9/5 >/1
    if( ! refalrts::number_term( 9UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 9/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '9'/1 ]] }
    refalrts::reinit_char(context[1], '9');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 10/5 >/1
    if( ! refalrts::number_term( 10UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 10/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'A'/1 ]] }
    refalrts::reinit_char(context[1], 'A');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 11/5 >/1
    if( ! refalrts::number_term( 11UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 11/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'B'/1 ]] }
    refalrts::reinit_char(context[1], 'B');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 12/5 >/1
    if( ! refalrts::number_term( 12UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 12/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'C'/1 ]] }
    refalrts::reinit_char(context[1], 'C');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 13/5 >/1
    if( ! refalrts::number_term( 13UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 13/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'D'/1 ]] }
    refalrts::reinit_char(context[1], 'D');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 14/5 >/1
    if( ! refalrts::number_term( 14UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 14/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'E'/1 ]] }
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Hex/4 15/5 >/1
  if( ! refalrts::number_term( 15UL, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Hex/4 15/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 'F'/1 ]] }
  refalrts::reinit_char(context[1], 'F');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Hex("Hex", COOKIE1_, COOKIE2_, func_Hex);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@1/4 t.Next#1/7 e.Tail#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail#1 as range 5
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile/4 AsIs: t.Next#1/7 } >/9 </10 & Map@1/11 Tile{ AsIs: e.Tail#1/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_ProcessFile]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@2/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@2/4 t.Next#1/7 e.Tail#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail#1 as range 5
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CommentLine/4 AsIs: t.Next#1/7 } >/9 </10 & Map@2/11 Tile{ AsIs: e.Tail#1/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_CommentLine]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@3/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@3/4 t.new#1/7 e.new#2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new#2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.No#2/13 s.Func#2/14 s.Type#2/15 )/8 e.Tail#1/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail#1 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.Tail#1: 9
      //DEBUG: s.No#2: 13
      //DEBUG: s.Func#2: 14
      //DEBUG: s.Type#2: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.No#2/13 s.Func#2/14 s.Type#2/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 Tile{ AsIs: </0 Reuse: & Explode/4 HalfReuse: s.Func2 #14/7 } >/17 )/18 </19 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail#1/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_Explode]);
      refalrts::reinit_svar( context[7], context[14] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[16], context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next#1/7 e.Tail#1/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail#1 as range 9
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupBuiltins\1*1/4 AsIs: t.Next#1/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail#1/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupBuiltins_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & MapAccum@1/4 t.Acc#1/5 e.Tail#1/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail#1 as range 2
  //DEBUG: t.Acc#1: 5
  //DEBUG: e.Tail#1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: t.Acc#1/5 AsIs: e.Tail#1/2 HalfReuse: (/1 } )/7 >/8 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[1], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@4/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  do {
    // </0 & Map@4/4 t.Next#1/7 e.Tail#1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail#1 as range 5
    //DEBUG: t.Next#1: 7
    //DEBUG: e.Tail#1: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar/4 AsIs: t.Next#1/7 } >/9 </10 & Map@4/11 Tile{ AsIs: e.Tail#1/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_EscapeChar]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@1/4 e.new#0/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new#0 as range 2
  // </0 & DoMapAccum@1/4 t.new#1/9 e.new#2/2 (/7 e.new#3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new#3 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new#2 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.Acc#1/9 t.Next#1/15 e.Tail#1/11 (/7 e.Scanned#1/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    // closed e.Scanned#1 as range 13
    context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
    if( ! context[16] )
      continue;
    // closed e.Tail#1 as range 11
    //DEBUG: t.Acc#1: 9
    //DEBUG: e.Scanned#1: 13
    //DEBUG: t.Next#1: 15
    //DEBUG: e.Tail#1: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </17 & DoMapAccum-Aux@1/18 Tile{ AsIs: e.Tail#1/11 } Tile{ AsIs: (/7 AsIs: e.Scanned#1/13 AsIs: )/8 HalfReuse: (/1 } Tile{ AsIs: </0 Reuse: & AddFunctionToTable/4 AsIs: t.Acc#1/9 AsIs: t.Next#1/15 } >/19 )/20 >/21 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoMapAccumm_Aux_Z1]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::update_name(context[4], functions[efunc_AddFunctionToTable]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[1], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.Acc#1/9 (/7 e.Scanned#1/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned#1 as range 5
  //DEBUG: t.Acc#1: 9
  //DEBUG: e.Scanned#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc#1/9 } Tile{ AsIs: e.Scanned#1/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccumm_Aux_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DoMapAccum-Aux@1/4 e.Tail#1/2 (/11 e.Scanned#1/9 )/12 (/7 t.Acc#1/13 e.StepScanned#1/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Tail#1 as range 2
  // closed e.Scanned#1 as range 9
  context[14] = refalrts::tvar_left( context[13], context[5], context[6] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned#1 as range 5
  //DEBUG: e.Tail#1: 2
  //DEBUG: e.Scanned#1: 9
  //DEBUG: t.Acc#1: 13
  //DEBUG: e.StepScanned#1: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc#1/13 } Tile{ AsIs: e.Tail#1/2 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Scanned#1/9 } Tile{ AsIs: e.StepScanned#1/5 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccumm_Aux_Z1("DoMapAccum-Aux@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccumm_Aux_Z1);


//End of file
